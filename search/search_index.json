{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About Dasharo","text":"<p>Dasharo is an open-source firmware distribution crafted with an emphasis on trustworthiness, privacy, and liberty. Our mission is to empower users with a firmware they can trust. We believe in open development, firmware resilience, platform security transparency, right to repair and digital sovereignty. Here's what makes Dasharo the go-to choice for secure firmware:</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Seamless Deployment: Start your journey with Dasharo effortlessly. Learn   how   \u2192</li> <li>Clean &amp; Simple Code: Our code is readable and maintainable, designed with   developers in mind. Explore our GitHub \u2192</li> <li>Long-term Maintenance: We are committed to supporting Dasharo for years   to come. Read about our vision   \u2192</li> <li>Professional Support: Our team of experts is here to help you at every   step. Get support \u2192</li> <li>Transparent Validation: We believe in a transparent process with no black   boxes. See our validation process   \u2192</li> <li>Superior Documentation: Detailed documentation to help you understand   every facet of Dasharo. Visit our docs \u2192</li> <li>Privacy-Respecting Implementation: We prioritize your privacy, ensuring   your data remains yours. Learn more \u2192</li> <li>Liberty for Owners: Dasharo gives you complete control over your   firmware. Discover the freedom \u2192</li> </ul> <p> Learn More | Visit Dasharo's Homepage </p> <p>Dasharo is a registered trademark and product developed by 3mdeb.</p>"},{"location":"#compatible-hardware","title":"\ud83d\udda5\ufe0f Compatible Hardware","text":"<p>Find the perfect hardware match for Dasharo in our comprehensive Supported Hardware Section</p>"},{"location":"#commercial-inquiries","title":"\ud83d\udcbc Commercial Inquiries","text":"<p>Looking to integrate Dasharo into your business? Reach out to us for commercial inquiries and collaborations.</p>"},{"location":"#community","title":"\ud83c\udf0d Community","text":"<p>Become a part of the vibrant Dasharo community:</p> <ul> <li>Chat with Us: Join the conversation in the Dasharo Matrix   Workspace.</li> <li>Stay Updated: Don't miss our quarterly Dasharo   Events featuring:<ul> <li>Dasharo User Group (DUG): A forum for Dasharo users to connect, share   experiences, and stay informed.</li> <li>Dasharo Developers vPub: A relaxed virtual meetup for developers and   enthusiasts to discuss, share, and connect.</li> </ul> </li> <li>Get involved via the   Bug Bounty.</li> </ul> <p>Find us on other social platforms using the icons at the bottom right.</p>         Subscribe to Dasharo Newsletter"},{"location":"#events-calendar","title":"\ud83d\udcc5 Events Calendar","text":"<p>Stay up to date with our latest events by visiting our 3mdeb Events Page, where you'll find the most current schedule of upcoming activities.</p> <p>For more details on our events roadmap, you can also check the latest Dasharo Community Status or view presentation slides.</p> <p>View full calendar \u2192</p>"},{"location":"#resources","title":"\ud83d\udcda Resources","text":"<p>Dive deeper with our rich library of resources:</p> <ul> <li>Guides</li> <li>Knowledge Base</li> </ul>"},{"location":"#blog","title":"\ud83d\udcf0 Blog","text":"<p>Catch up on the latest in the Dasharo world:</p> <ul> <li>Research of RAM data remanence times</li> <li>UEFI Update Capsules for Open Source firmware</li> <li>Qubes Os Summit 2024</li> <li>Improving measured boot and TPM support in Dasharo</li> <li>UEFI Secure Booting FreeBSD with Dasharo firmware</li> </ul> <p>Visit our blog \u2192</p>"},{"location":"#quick-links","title":"\ud83d\udd0d Quick Links","text":"<ul> <li>FAQ</li> <li>Contact Us</li> <li>Newsletter Subscription</li> </ul> <p>Connect with us on Twitter, LinkedIn, GitHub, and more.</p>"},{"location":"dasharo-naming-convention/","title":"Dasharo Product Naming Convention","text":"<p>Following documentation is v2 of naming convention following results of RFC.</p>"},{"location":"dasharo-naming-convention/#synopsis","title":"Synopsis","text":"<pre><code>Dasharo (framework[+payload]) [edition] [release] Package for [platform]\n</code></pre>"},{"location":"dasharo-naming-convention/#description","title":"Description","text":"<p>Dasharo's naming scheme is crafted to convey the essential details of each firmware package. It includes the base firmware framework, an optional payload, the target <code>platform</code>, and the <code>edition</code>. This structure helps identify the most suitable package for <code>platform</code>-specific needs and customer categories.</p> <p>Components of the naming scheme:</p> <ul> <li> <p><code>framework</code>: Mandatory. Specifies the base firmware framework used in the package. Available options:</p> <ul> <li><code>coreboot</code> - Dasharo downstream of coreboot open source project.</li> <li><code>UEFI</code> - Dasharo downstream of Tianocore EDK II reference implementation of   the UEFI Specification.</li> <li><code>Slim Bootloader</code> - upstream or downstream version of Slim Bootloader.</li> </ul> </li> <li> <p><code>payload</code> (optional): Details the additional software loaded by the firmware. Available options:</p> <ul> <li><code>UEFI</code> - Dasharo downstream of EDK II.</li> <li><code>SeaBIOS</code> - upstream or downstream version of SeaBIOS.</li> <li><code>Heads</code> - upstream or downstream version of Heads.</li> <li><code>U-Boot</code> - upstream or downstream version of U-Boot.</li> </ul> </li> </ul> <p>The omission of this component implies no additional payload.</p> <ul> <li><code>platform</code>: Indicates the target platform for the package. Platform is mandatory in public names. Platform name should follow supported hardware list.</li> <li> <p><code>edition</code>: Community | Pro | Enterprise (edition codes: DCP, DPP, DEP)</p> </li> <li> <p><code>release</code>: Rapid | Assured | LTS. Defines QA scope and support cadence. Codes are for internal use in filenames; public names spell out the release tier.</p> <ul> <li><code>Rapid</code> - minimal regression only, scope depends on target hardware and   configuration, so that it can be 3 or 10 tests, it is very likely &lt;=10% of   LTS,</li> <li><code>Assured</code> in between Rapid and LTS, adding to <code>Rapid</code> only tests which   validate areas of firmware that experience change,s e.g., USB   improvements/fixes leads to test USB, measured boot changes then only TPM and   measured boot,</li> <li><code>LTS</code> - full scope, typically once a year unless budget is available.</li> </ul> </li> </ul> <p>This naming convention aims to provide clarity and precision, facilitating ease of understanding across Dasharo's firmware offerings.</p>"},{"location":"dasharo-naming-convention/#examples","title":"Examples","text":"<pre><code>Dasharo (coreboot+Heads) Pro Rapid Package for Novacustom NV4x 12th Gen\n</code></pre> <p>A package aimed at professional retail customers with laptops, incorporating coreboot with the Heads payload.</p> <pre><code>Dasharo (Slim Bootloader+UEFI) Pro Assured Package for Hardkernel ODROID-H4\n</code></pre> <p>A package that uses Slim Bootloader with UEFI payload on Hardkernel ODROID-H4.</p> <pre><code>Dasharo (UEFI) Enterprise LTS Package for MSI PRO Z690-A\n</code></pre> <p>A package for enterprise business customers for MSI PRO Z690-A, employing UEFI as framework with no additional payload.</p>"},{"location":"glossary/","title":"Glossary","text":"<p>After years of providing services and products on firmware market we recognize that it is poisoned by incorrect and confusing terminology. In following glossary we would like to explain most used terms from Dasharo Documentation. We try to refer to standards, literature and community best practices to keep content added by us minimalistic.</p>"},{"location":"glossary/#embedded-firmware","title":"Embedded Firmware","text":"<p>We use definition explained in first chapter of \"Embedded Firmware Solutions\" book by Jiming Sun, Marc Jones, Stefan Reinauer and Vincent Zimmer.</p> <p>Firmware is \"layer of software between the hardware and the operating system (OS), with the main purpose to initialize and abstract enough hardware so that the operating systems and their drivers can further configure the hardware to its full functionality.\"</p> <p>Rising complexity of hardware initialization and need for its manageability created need for BMC (Board Management Controllers), EC (Environmental Controllers) and even more specialized one like USB Power Delivery firmware. What may make that firmware also covered by above definition.</p>"},{"location":"glossary/#dasharo-hardware-compatibility-list-report","title":"Dasharo Hardware Compatibility List Report","text":"<p>Dasharo HCL Report dumps most important information about platform and backup SPI NOR flash. Gathered information can be used for future analysis, debugging and recovery. Optionally scripts upload dump to Dasharo HCL Backup Server, so Dasharo Team can improve open source firmware product line and support customers in case of issues.</p> <p>As temporary solution we use 3mdeb NextCloud as Dasharo HCL Backup Server.</p> <p>Dasharo HCL Reports are also used during open source firmware port feasibilty analysis, so if you are interested in Dasharo support for your hardware, feel free to reach us.</p> <p>Please note Dasharo HCL Report may contain sensitive information like serial numbers. Please do not make this information public. Dasharo Team respect your privacy.</p>"},{"location":"glossary/#dasharo-blobs-transmission","title":"Dasharo Blobs Transmission","text":"<p>Unfortunately, some hardware platforms cannot be fully functional without binary blobs in the firmware. Some binary blobs have no EULA or any other license discussing redistributability. To avoid issues, Dasharo Blobs Transmission scripts extract blobs from SPI NOR flash backup and patch Dasharo open-source firmware distribution before initial deployment.</p>"},{"location":"glossary/#dasharo-openness-score","title":"Dasharo Openness Score","text":"<p>Dasharo Openness Score is an utility, which parses the firmware images to calculate the amount of bytes produced from open-source code. It is able to parse both Dasharo/coreboot images and proprietary UEFI images. That said, it can be used to compare how open the Dasharo images are versus the proprietary versions.</p> <p>Dasharo Openness Score may also refer to the report produced by the Dasharo Openness Score utility. Such reports are being published in the platform directories in this repository. If you are interested in Dasharo Openness Score for you boards, please reach us. Example Dasharo Openness Score report can be found here</p> <p>You can also find an Openness Score comparison table in the Supported hardware overview section. It shows the comparison of binary openness between Dasharo and proprietary firmware.</p>"},{"location":"glossary/#dasharo-trustroot","title":"Dasharo TrustRoot","text":"<p>Dasharo TrustRoot hardens firmware security by leveraging a hardware-based Root of Trust.  It ensures platform integrity by verifying firmware authenticity during the earliest boot stages and refusing to proceed with the boot if firmware doesn't pass the checks.  This renders platforms unbootable in an event of firmware tampering for the sake of not running an unknown and potentially compromised firmware.</p> <p>Note</p> <p>Making use of Dasharo TrustRoot has serious usability implications which should be considered carefully.  For this reason firmware does not enable this security mechanism by default requiring a user to explicitly opt-in during a firmware update.</p> <p>This kind of security hardening cryptographically validates firmware against a specific private key managed by the device vendor.  Because the private key is not available to device owners, neither adversaries nor the device owners themselves can change the firmware to a version that's not signed by that private key.</p> <p>Another side-effect is that overall firmware layout becomes fixed once and for all.</p> <p>Once Root of Trust has been established by hardware validating the early stages of firmware, Measured Boot mechanism can be used to build the Chain of Trust one step at a time.  With Measured Boot the part of firmware initially validated by hardware measures code and data that it makes use of before processing or running it.  That extends the trust to the new code, which in turn does the same to the code and data that it uses, and so on.  The Chain of Trust built this way relies on a TPM device and can be validated or leveraged to store secrets, but it's only as good as its root which, in case of Dasharo TrustRoot, is established in hardware.  More detailed and somewhat more technical information about Measured Boot is available here and here.</p> <p>Secure Boot is another complementary security mechanism that benefits from Dasharo TrustRoot.  Once firmware as a whole is trusted, Secure Boot can be leveraged to ensure that only trusted device drivers or operating systems are loaded by the firmware.  Eventually the control reaches an OS that can further alter its behaviour to minimize security risks.</p> <p>Warning</p> <p>Again, once enabled, the firmware signing used by Dasharo TrustRoot cannot be disabled!  This is an irreversible process due to changes in the device's hardware.  For Intel-based hardware (the only supported as of September 2025), the permanent changes happen at the level of a chipset.</p> <p>To be specific, field programmable fuses (FPFs) used to store hashes of firmware signing keys are one-time programmable.  Initially, they don't hold any specific value, but once a properly configured firmware is booted, their value is set and cannot be modified ever again (this is called \"fusing\").</p> <p>Make sure you fully understand this information before choosing to flash a firmware that enforces Dasharo TrustRoot.</p>"},{"location":"newcomers/","title":"Newcomers","text":"<p>If you are new to Dasharo, this section is to help you get started using Dasharo firmware and possibly contributing to making it better.</p>"},{"location":"newcomers/#coreboot","title":"coreboot","text":"<p>If you have no prior experience with coreboot, it's highly recommended to visit OpenSecurityTraining2 and finish these courses:</p> <ul> <li>Arch4031,</li> <li>Arch4021</li> </ul> <p>OpenSecurityTraining2 provides other great courses related to firmware, which are all freely available here.</p>"},{"location":"newcomers/#docker","title":"Docker","text":"<p>coreboot needs a specific toolchain to be built, hence why it is usually built inside of a Docker. In case of Dasharo, all images are built using Docker, so you will make sure it works properly on your system.</p> <p>Follow these two links:</p> <ul> <li>Install Docker Engine on Ubuntu</li> <li>Post-installation steps for Linux</li> </ul> <p>Once you have Docker set up on your machine, you can pull docker images from coreboot/coreboot-sdk (keep in mind that some platforms require older docker images).</p> <p>To pull a Docker image, use:</p> <pre><code>docker pull coreboot/coreboot-sdk:&lt;tag&gt;\n</code></pre> <p>The typical procedure to build a coreboot image is as follows:</p> <pre><code>git clone https://github.com/Dasharo/coreboot.git\n</code></pre> <pre><code>cd coreboot\n</code></pre> <pre><code>git checkout &lt;platform&gt;/release\n</code></pre> <pre><code>docker run -u $UID --rm -it \\\n-v $PWD:/home/coreboot/coreboot\n-w /home/coreboot/coreboot coreboot/coreboot-sdk:&lt;tag&gt;\\\nbash\n</code></pre> <pre><code>cp configs/config.&lt;platform&gt; .config\n</code></pre> <pre><code>make olddefconfig\n</code></pre> <pre><code>make\n</code></pre>"},{"location":"newcomers/#dasharo-contribution","title":"Dasharo Contribution","text":"<p>All code review and all issues related to Dasharo are resolved on GitHub. An account there is necessary to contribute and report issues. All Dasharo repositories can be found here.</p> <p>When you have an account on GitHub go ahead and configure an SSH key. It's also highly recommended to configure a GPG key before contributing anything. Instructions to do that can be found here. With that your account should be ready to contribute to Dasharo.</p> <p>Since Dasharo is based on coreboot and edk2, it's best to contribute directly in the upstream if possible. Refer to these documents:</p> <ul> <li>contributing to coreboot</li> <li>contributing to edk2</li> </ul> <p>If for some reason you can't contribute your change in upstream repositories, then consider contributing directly to Dasharo. Before doing anything it's best to get familiar with source code structure. To create a patch:</p> <ol> <li>fork the repository    which you want to edit,</li> <li>in the forked repository: <code>git checkout &lt;platform&gt;/develop</code> (make sure to    start from the correct branch),</li> <li>create a new branch: <code>git checkout -b &lt;platform&gt;/&lt;feature&gt;</code>,</li> <li>commit your changes:<ul> <li>make sure to sign your commits by using   <code>git commit -sm \"&lt;commit_message&gt;\"</code>,</li> <li><code>&lt;commit_message&gt;</code> should be: <code>path/to/file: Change description</code>,</li> <li>one commit should be one logical change,</li> </ul> </li> <li>create a pull request from a fork.</li> </ol> <p>Do not forget to check whether patch has been reviewed and changes to your contribution (PR) are needed. If so, remember about answering to each addressed thread with information about change in the commit</p> <ul> <li>template: <code>Fixed: &lt;link to commit&gt;</code></li> <li>example: Fixed 0a2a4ee</li> </ul>"},{"location":"newcomers/#dasharo-matrix-space","title":"Dasharo Matrix Space","text":"<p>Matrix is a communicator used at Dasharo. If you want quick answers it's best to join our matrix space and talk to us there.</p> <p>Dasharo Matrix Space</p> <p>If you've never used Matrix before, you will first need to get a client. Available clients are listed here.</p>"},{"location":"newcomers/#dasharo-certification-lab-user-guide","title":"Dasharo Certification Lab User Guide","text":"<p>Test environment overview</p> <p>To get information about available platforms it's or it's RTE's IP address, use 3mdeb's the platform reservation tool available from internal network.</p> <p>OSFV_CLI is a script, which allows to interact with devices setup in Dasharo OSFV lab.</p> <p>If the DUT has connected RTE you can refer to: RTE commands, also you may connect to the RTE by using web browser by typing: <code>http://&lt;rte_ip_address&gt;:8000</code>. For more please refer to: RTE Quick Start Guide.</p> <p>Default RTE login: <code>root</code>, password: <code>meta-rte</code></p> <p>If the DUT uses PiKVM you may use: <code>https://&lt;PiKVM_ip_address&gt;</code>, for more info refer to: PiKVM.</p> <p>Default PiKVM login: <code>admin</code>, password: <code>admin</code></p> <p>Firmware source: Dasharo Universe or Cloud (only for logged in users), alternatively newest builds can be found at Github.</p> <p>Running tests: Open Source Firmware Remote Test Environment It is strongly suggested to run your first test on QEMU. To prepare Ubuntu OS image for QEMU refer to: Ubuntu OS, after downloading and creating image copy <code>ubuntu.iso</code> to <code>.../open-source-firmware-validation/qemu-data/</code> also create a drive onto which the os is going to be installed by running</p> <p><code>qemu-img create -f qcow2 qemu-data/hdd.qcow2 20G</code></p> <p>run QEMU with:</p> <p><code>./scripts/ci/qemu-run.sh graphic os_install</code></p> <p>To start QEMU so that it boots to os run:</p> <p><code>./scripts/ci/qemu-run.sh graphic os</code></p>"},{"location":"newcomers/#troubleshooting","title":"Troubleshooting","text":"<p>Connecting to RTE serial output: <code>Connection refused</code></p> <p>Most probably a telnet connection hasn't been closed correctly. To terminate this connection restart RTE by logging to it by ssh and reboot it:</p> <p><code>ssh root@rte_ip_address</code></p> <p>password: meta-rte</p> <p><code>systemctl restart ser2net</code> and then <code>logout</code></p> <p>DUT won't power on</p> <ol> <li> <p>Use the OSFV CLI. Check if Sonoff state is set to ON <code>osfv_cli sonoff --sonoff_ip &lt;sonoff_ip_address&gt; on</code> and power on the DUT <code>osfv_cli rte --rte_ip &lt;rte_ip_address&gt; pwr on</code></p> </li> <li> <p>Check if a proper BIOS/firmware is flashed. If not a proper firmware can be    flashed with use of OSFV    CLI by running    <code>osfv_cli rte --rte_ip &lt;rte_ip_address&gt; flash write --rom &lt;path_to_fw_file&gt;</code>    command.</p> </li> </ol> <p>Ubuntu won't download and create image</p> <ol> <li>Download image from: Ubuntu, and use the script:</li> </ol> <p><code>./ubuntu/create_image.sh -i ~/Downloads/ubuntu-22.04.5-desktop-amd64.iso</code></p>"},{"location":"security/","title":"Dasharo Security","text":""},{"location":"security/#reporting-security-issues-in-dasharo","title":"Reporting security issues in Dasharo","text":"<p>Please note</p> <p>Dasharo security email address is intended for responsible disclosure by security researchers and others who discover legitimate security vulnerabilities. Please do not attempt to contact us via this address unless you can demonstrate an actual security vulnerability or provide us with reasonable steps we could follow to verify your claims.</p> <p>If you\u2019ve discovered a security issue affecting Dasharo, please send an encrypted (using Dasharo security team PGP key e-mail to this address: <code>security@dasharo.com</code>. Please not that unencrypted e-mails sent to this address may be ignored.</p>"},{"location":"ways-you-can-help-us/","title":"Ways you can help us","text":"<p>Please consider the following methods to support us if you value what we are doing.</p>"},{"location":"ways-you-can-help-us/#join-dasharo-matrix-community","title":"Join Dasharo Matrix Community","text":"<p>We have created Matrix Dasharo Space, an open-source online community, inviting you to join us. Matrix Dasharo Space is a place where you can find solutions to many problems, and if not - our community will gladly help you. We encourage you to troubleshoot your open-source firmware issues there.</p> <p>Here is invitation link.</p> <p>Inside you will find multiple rooms. The main discussion happens in \"Dasharo - General\".</p>"},{"location":"ways-you-can-help-us/#join-dasharo-beta-testing-group","title":"Join Dasharo Beta Testing Group","text":"<p>Dasharo Beta Testing Group is a group of users who help make Dasharo better. They are willing to flash their devices with Release Candidates (RC) firmware binaries and provide test results by reporting issues or confirming fixes.</p> <p>Members of this community will have access to invite-only Dasharo Space channel, where calls for testing for the particular, RC versions of firmwares will be announced.</p> <p>If you want to join the community, please send an e-mail with following information:</p> <ol> <li>Matrix nickname</li> <li>Which Dasharo supported device(s) you are willing to test</li> </ol>"},{"location":"ways-you-can-help-us/#join-dasharo-open-source-firmware-vpub","title":"Join Dasharo open-source firmware vPub","text":"<p>We encourage you to join us at our vPub parties, which we hold 3-4x / year in \"Dasharo OSF vPub.\" vPub is an alternative to live meeting for those who can't or don't want to meet live. It also served as salvation in times of COVID-19. Our goal is to have a platform for open-source firmware, open-source hardware, and open instruction set architectures discussion in a casual atmosphere.</p> <p>For more information please visit event website.</p>"},{"location":"ways-you-can-help-us/#write-a-google-review","title":"Write a Google review","text":"<p>Google reviews help us attract new customers that can sponsor open-source development and provide value to the community. Please follow Google review link.</p>"},{"location":"ways-you-can-help-us/#follow-us-on-social-media","title":"Follow us on social media","text":"<ul> <li>Follow us on Twitter: Dasharo,   3mdeb</li> <li>Follow us on Mastodon: Dasharo,   3mdeb</li> <li>Follow us on LinkedIn: 3mdeb</li> <li>Like us on Facebook: 3mdeb</li> <li>Join Reddit communities: Dasharo,   3mdeb</li> </ul>"},{"location":"ways-you-can-help-us/#contribute-through-github","title":"Contribute through Github","text":"<p>If you have a GitHub account, you can help us in multiple ways:</p> <ul> <li>Follow out organizations: Dasharo,   3mdeb</li> <li>Give a star to repositories you like</li> <li>If you want to contribute, refer to dasharo contribution</li> <li>Report issues, your test results, and feature ideas in   dasharo-issues</li> </ul>"},{"location":"ways-you-can-help-us/#donate-money","title":"Donate money","text":"<p>A donation of any amount motivates us because it means you care about our open-source firmware mission. It is straightforward if you don't have time for other contributions, and there are multiple options - feel free to choose one that works for you.</p>"},{"location":"ways-you-can-help-us/#become-a-dasharo-pro-package-subscriber","title":"Become a Dasharo Pro Package subscriber","text":"<p>Buy the Dasharo Pro Package if you own/use/buy a machine running Dasharo firmware.</p> <p>As a Dasharo Pro Package subscriber you will get:</p> <ul> <li>Accesses to the latest binary releases of Dasharo open-source firmware distribution for supported platforms.</li> <li>Exclusive newsletter.</li> <li>Special updates, including early access to updates enhancing privacy, security, performance, and compatibility.</li> <li>Early access to new binary releases for Dasharo open-source firmware distribution for newly supported platforms (please check our roadmap).</li> <li>Access to the Dasharo Premier Support invite-only live chat channel in Matrix network, facilitating direct engagement with the Dasharo Team and fellow subscribers with personalized and priority assistance.</li> <li>Insider\u2019s view and influence on Dasharo features roadmap \u2013 you can have a real impact on Dasharo development.</li> <li>Dasharo Tools Suite Pro Package (former Entry Subscription) keys.</li> </ul>"},{"location":"ways-you-can-help-us/#paypal","title":"PayPal","text":"<p> <p></p>"},{"location":"ways-you-can-help-us/#transferwise-aka-wise","title":"Transferwise (aka Wise)","text":""},{"location":"ways-you-can-help-us/#donations-in-usd","title":"Donations in USD","text":"<pre><code>TransferWise (ACH/ABA: 026073150)\nIBAN 8311535451\nSWIFT: CMFGUS33\n</code></pre>"},{"location":"ways-you-can-help-us/#donations-in-eur","title":"Donations in EUR","text":"<pre><code>TransferWise Europe SA\nIBAN: BE11 9672 7712 7548\nSWIFT: TRWIBEB1XXX\n</code></pre>"},{"location":"ways-you-can-help-us/#bank-wire","title":"Bank wire","text":""},{"location":"ways-you-can-help-us/#donations-in-usd_1","title":"Donations in USD","text":"<pre><code>3mdeb Sp. z o.o\nIBAN: PL 87 1160 2202 0000 0005 1576 2206\nSWIFT: BIGBPLPW\n</code></pre>"},{"location":"ways-you-can-help-us/#donations-in-eur_1","title":"Donations in EUR","text":"<pre><code>3mdeb Sp. z o.o\nIBAN: PL 94 1160 2202 0000 0005 1576 1304\nSWIFT: BIGBPLPW\n</code></pre>"},{"location":"ways-you-can-help-us/#btc-and-other-crypto-coins","title":"BTC and other crypto coins","text":"<p>Our company does not currently support payment in cryptocurrencies.</p> <p>While we understand that cryptocurrencies have gained popularity and recognition in recent years, we have chosen to retain our focus on conventional payment channels.</p> <p>Firstly, we prioritize financial compliance and adhere to EU regulations. Managing cryptocurrencies would require extensive knowledge and resources to ensure compliance, which we are not equipped to handle at our current stage of development. Moreover, the uncertain and evolving nature of cryptocurrency regulations introduces significant risks and potential vulnerabilities. These factors could potentially lead to fiscal audits that could hamper the operations of 3mdeb and impede the progress of Dasharo development.</p> <p>We believe that by adhering to established payment methods, we can ensure a consistent and reliable payment process for our customers. This allows us to maintain a high level of security, accountability, and regulatory compliance.</p>"},{"location":"ways-you-can-help-us/#technology-commons-trust","title":"Technology Commons Trust","text":"<p>If you are concerned about the privacy of your donation as well as the fact how we would spend the money, then please consider Technology Commons Trust Open Firmware Fund.</p> <p>Addresses:</p> <ul> <li>Bitcoin: 1GUm6FF7Fon6Umrt5CSi3AxxYg8dM2NKvV</li> <li>Monero: 89eBqUwoCpnPoUKD367kJm3Gsw639EUSdG3xwUyQmDroKHWHPyhYmJ63uP41ArHfPsBihNFTYjASpRUGaeSyp3JS9BmtjpQ</li> <li>PKT: pkt1qyv4gmnvvg2vfyj89e63thzj68jf2y9k7ssee7v</li> </ul> <p>If you want to contribute to other cryptocurrencies, please visit OFF website for details about contact information. We are pretty sure the Technology Commons Trust team will find the way.</p>"},{"location":"ways-you-can-help-us/#open-collective","title":"Open Collective","text":"<p>You can donate by using 3mdeb's Open Collective page - a legal and financial tech platform that enables over 300 groups to raise and spend over $13 million dollars a year in full transparency.</p>"},{"location":"ways-you-can-help-us/#purchasing-merchandise","title":"Purchasing merchandise","text":"<p>We're excited to offer a range of Dasharo merchandise products to help support our open-source firmware distribution project. By purchasing items such as t-shirts and mugs, you can support Dasharo and help us continue developing and improving the firmware.</p> <p>Our online shop makes browsing and ordering merchandise easy, and we offer fast shipping to get your items to you quickly. Whether you're looking for a new t-shirt to wear to events or a mug for your morning coffee, we have various products. Head over to our shop and browse our selection of Dasharo merchandise!</p>"},{"location":"ways-you-can-help-us/#cant-see-your-option","title":"Can't see your option?","text":"<p>Contact us <code>contact@dasharo.com</code></p>"},{"location":"ways-you-can-help-us/#for-oemodm-join-the-private-beta-program","title":"For OEM/ODM: Join the private-beta program","text":"<p>We created Dasharo private beta program for OEM/ODM to improve quality and the efficiency of platform firmware development and deployment.</p> <p>Program benefits:</p> <ul> <li>Early access to the Dasharo roadmap reflects the most recent market trends and   covers future hardware support and features.</li> <li>Early access to information about firmware development funding campaigns.</li> <li>Early access to source code and release binaries.</li> <li>Dasharo Tools Suite for seamless integration of value-added features.</li> <li>Dasharo Marketing Package helps explain the value that Dasharo brings to the   product.</li> <li>Professional support at all stages of the product life cycle.</li> <li>Vertical market integration support.</li> </ul> <p>How to join? Please send us an email to <code>contact@dasharo.com</code>.</p>"},{"location":"common-coreboot-docs/checkbox/","title":"Checkbox certification software usage (Ubuntu 22.04)","text":""},{"location":"common-coreboot-docs/checkbox/#introduction","title":"Introduction","text":"<p>Checkbox is a flexible test automation software. It\u2019s the main tool used in Ubuntu Certification program. This document describes the usage of Checkbox on Ubuntu 22.04, but it can work on older versions of Ubuntu as well.</p>"},{"location":"common-coreboot-docs/checkbox/#prerequisites","title":"Prerequisites","text":"<p>To run the maximum number of tests, it is advised to connect as many peripheral devices as possible. Before running the checkbox, connect peripherals to available connectors, such as:</p> <p>External:</p> <ul> <li>card reader</li> <li>USB ports</li> <li>display ports</li> <li>Ethernet ports</li> <li>headphone and microphone jacks</li> <li>Thunderbolt ports</li> <li>power supply and battery</li> <li>PCMCIA or ExpressCard slot</li> </ul> <p>Internal:</p> <ul> <li>DIMM/RAM slots</li> <li>SATA ports</li> <li>PCI/PCIe slots</li> <li>M.2 slots</li> <li>TPM header</li> <li>other slots</li> </ul>"},{"location":"common-coreboot-docs/checkbox/#set-up-the-testing-environment","title":"Set up the testing environment","text":"<p>For the tests that don't require any interference after their startup, perform the following steps:</p> <ol> <li> <p>To stop the screen from being locked on suspend, open the terminal and     run the following command:</p> <pre><code>gsettings set org.gnome.desktop.lockdown disable-lock-screen 'true'\n</code></pre> </li> <li> <p>To execute all <code>sudo</code> commands without a password, open the terminal and     run the following command for a user:</p> <pre><code>echo \"user ALL=(ALL:ALL) NOPASSWD: ALL\" | sudo tee /etc/sudoers.d/user\n</code></pre> </li> <li> <p>To set up automatic login so that a password is not required during testing     reboot, power off etc.:</p> <ul> <li>Press the <code>SUPER_KEY</code>, type in <code>Users</code> and click Enter. A window with     options to change should appear.</li> <li>Click the user name you want to enable automatic login for.</li> <li>On the top right side of the window, click <code>Unlock</code>...` button.</li> <li>You will be asked to enter your user password to continue.</li> <li>You should now be able to toggle the <code>Automatic Login</code> button to enable     it.</li> <li>Restart your system for changes to take effect.</li> </ul> </li> </ol> <p></p>"},{"location":"common-coreboot-docs/checkbox/#download-and-install-checkbox","title":"Download and install Checkbox","text":"<ol> <li> <p>Disable Secure Boot. To do this you can follow the steps described in    Secure Boot test.</p> <p>Disable Secure boot is required to properly download packages.</p> </li> <li> <p>Open the terminal and type in the below commands to install Checkbox and all     its dependencies:</p> <pre><code>sudo add-apt-repository ppa:hardware-certification/public\nsudo apt-get update\nsudo apt-get install checkbox-ng plainbox-provider-resource-generic \\\nplainbox-provider-certification-client plainbox-provider-checkbox \\\ncanonical-certification-client\n</code></pre> </li> </ol>"},{"location":"common-coreboot-docs/checkbox/#run-automatic-validation","title":"Run automatic validation","text":"<ol> <li> <p>Start checkbox. To do this, open the terminal and run the following command:</p> <pre><code>sudo checkbox-cli\n</code></pre> <p>After using the above-mentioned command, the following menu should appear:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    (X) (Deprecated) Fully Automatic Client Certification Tests               \u2502\n\u2502    ( ) After suspend Dock Cert blocker tests                                 \u2502\n\u2502    ( ) After suspend Dock Cert tests                                         \u2502\n\u2502    ( ) After suspend Dock Hot-plug Cert tests                                \u2502\n\u2502    ( ) After suspend Dock Hot-plug tests                                     \u2502\n\u2502    ( ) After suspend LED and oops tests (using special sleep key)            \u2502\n\u2502    ( ) After suspend LED and oops tests (using special sleep key, cert.      \u2502\n\u2502        blockers only)                                                        \u2502\n\u2502    ( ) After suspend automated USB 3 write/read/compare tests on storage     \u2502\n\u2502        devices                                                               \u2502\n\u2502    ( ) After suspend automated USB write/read/compare tests on storage       \u2502\n\u2502        devices                                                               \u2502\n\u2502    ( ) After suspend reference tests                                         \u2502\n\u2502    ( ) After suspend reference tests (automated)                             \u2502\n\u2502    ( ) After suspend reference tests (certification blockers only)           \u2502\n\u2502    ( ) After suspend tests (discrete GPU automated)                          \u2502\n\u2502    ( ) After suspend tests (discrete GPU manual)                             \u2502\n\u2502    ( ) After suspend tests (discrete GPU)                                    \u2502\n\u2502    ( ) After suspend tests (discrete GPU, certification blockers only)       |\n        .\n        .\n        . etc.\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </li> <li> <p>Select test suites (<code>SPACE</code> - select, <code>ARROWS</code> - navigation, <code>Enter</code> - go to the next test suite), which you want to run. Marking the first option starts the full automated check. After selecting the first option, all modules should be displayed and you can manually uncheck some modules, which you don't want to test.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502[X] + Audio tests                                                             \u2502\n\u2502[X] + Benchmarks tests                                                        \u2502\n\u2502[X] + Bluetooth tests                                                         \u2502\n\u2502[X] + CPU tests                                                               \u2502\n\u2502[X] + Camera tests                                                            \u2502\n\u2502[X] + Disk tests                                                              \u2502\n\u2502[X] + Ethernet Device tests                                                   \u2502\n\u2502[X] + Firmware tests                                                          \u2502\n\u2502[X] + Graphics tests                                                          \u2502\n\u2502[X] + Informational tests                                                     \u2502\n\u2502[X] + Input Devices tests                                                     \u2502\n\u2502[X] + Memory tests                                                            \u2502\n\u2502[X] + Miscellaneous tests                                                     \u2502\n\u2502[X] + Mobile broadband tests                                                  \u2502\n\u2502[X] + Non-device specific networking tests                                    \u2502\n\u2502[X] + Optical Drive tests                                                     \u2502\n\u2502[X] + Power Management tests                                                  \u2502\n\u2502[X] + Suspend tests                                                           \u2502\n\u2502[X] + TPM 2.0 (Trusted Platform Module)                                       \u2502\n\u2502[X] + Touchpad tests                                                          \u2502\n        .\n        .\n        . etc.\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </li> <li> <p>Press <code>T</code> to start the testing procedure.</p> </li> <li> <p>You might be asked about the hardware in your machine. Just tick it     truthfully and press <code>T</code> again.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Does this machine have this piece of hardware?                                \u2502\n\u2502    An Ethernet Port                              (X) YES  ( ) NO             \u2502\n\u2502    Camera/Capture Device                         (X) YES  ( ) NO             \u2502\n\u2502    USB Storage Device Connected                  (X) YES  ( ) NO             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </li> <li> <p>When testing ends, a menu with test results should appear. Press <code>R</code> to rerun test cases, or <code>F</code> to finish.</p> </li> <li> <p>After all, paths to the test results should be displayed in the terminal. By default, they are placed in <code>/home/user/.local/share/checkbox-ng</code>.</p> </li> </ol>"},{"location":"common-coreboot-docs/checkbox/#additional-options","title":"Additional options","text":"<ol> <li> <p><code>run</code> lets you run a particular test plan or a set of jobs, but it does save any results. Example of running one test plan:</p> <pre><code>sudo checkbox-cli run com.canonical.certification::smoke\n</code></pre> </li> <li> <p><code>launcher</code> command lets you customize the checkbox experience. To use it,     you need to create <code>config_file.ini</code> and start running the checkbox like     below:</p> <pre><code>checkbox-cli launcher config_file.ini\n</code></pre> </li> </ol> <p>For more details about these (and others) commands visit checkbox-cli.</p>"},{"location":"common-coreboot-docs/checkbox/#troubleshooting","title":"Troubleshooting","text":"<p>When somehow the checkbox stop working you can resume the previous session. To do this, open the terminal and run the following command:</p> <pre><code>sudo checkbox-cli\n</code></pre> <p>If at least one incomplete session is present on the machine, you should see:</p> <pre><code> Do you want to resume session 'session_title-2022-07-06T13.09.22'?\n  r =&gt; resume this session\n  n =&gt; next session\n  c =&gt; create new session\n  d =&gt; delete old sessions\n[rncd]:\n</code></pre> <p>Type in <code>r</code> to resume the stopped session. You can also create a new session or delete an old session by typing the appropriate letter.</p> <pre><code>What do you want to do with that job?\n  s =&gt; skip that job\n  p =&gt; mark it as passed and continue\n  f =&gt; mark it as failed and continue\n  r =&gt; run it\n[spfr]:\n</code></pre> <p>Decide what you want to do with the last test and type the appropriate letter. After this, your checkbox session will be resumed.</p>"},{"location":"common-coreboot-docs/dumping_logs/","title":"Dumping logs","text":"<p>When facing an issue on a unique hardware configuration on the end user side it may prove useful to submit system logs to Dasharo team for diagnosis and possibly problem solution. This section describes how to dump various logs from a running system.</p>"},{"location":"common-coreboot-docs/dumping_logs/#system-information","title":"System information","text":"<p>One may use Dasharo Tools Suite HCL report or fwdump-docker image to gather all the hardware configuration information from a running system. The usage of the tools should result in an archive containing various logs from the running system. Submit them via email to contact@dasharo.com or use Dasharo pastebin.</p>"},{"location":"common-coreboot-docs/dumping_logs/#cbmem-utility","title":"<code>cbmem</code> utility","text":"<p>When already migrated to Dasharo, it is possible to retrieve firmware logs from coreboot on a running system. A utility called <code>cbmem</code> can be used for that purpose. By obtaining the logs Dasharo team will be able to locate any issues with the firmware. This method requires Secure Boot to be disabled.</p> <p>Options to get <code>cbmem</code> utility:</p> <ol> <li>Download precompiled utility from 3mdeb cloud</li> <li>Use Dasharo Tools Suite    v1.1.0 or newer which has <code>cbmem</code> utility built in.</li> <li>Compile <code>cbmem utility</code>. See procedure below.</li> </ol> <p>Short instruction how to compile and use <code>cbmem</code> on Ubuntu 22.04 live CD:</p> <ol> <li>Launch Ubuntu 22.04 live CD and choose to <code>Try Ubuntu</code>.</li> <li>Right click on the desktop and choose <code>Open in Terminal</code>.</li> <li> <p>Install required packages:</p> <pre><code>sudo apt-get install -y build-essential libpci-dev\n</code></pre> </li> <li> <p>Navigate to tmpfs: <code>cd /tmp</code>.</p> </li> <li> <p>Download and extract coreboot source:</p> <pre><code>wget https://coreboot.org/releases/coreboot-4.17.tar.xz\ntar xvf coreboot-4.17.tar.xz\n</code></pre> </li> <li> <p>Compile cbmem utility:</p> <pre><code>cd coreboot-4.17/util/cbmem\nmake\n</code></pre> </li> </ol>"},{"location":"common-coreboot-docs/dumping_logs/#obtaining-dasharo-firmware-log","title":"Obtaining Dasharo firmware log","text":"<p>One can obtain the firmware logs with:</p> <pre><code>```bash\nsudo ./cbmem -1 &gt; cbmem.log\n```\n</code></pre> <p>Execute the above command on the target platform. Newer Dasharo distributions will also contain complete logs from UEFI Payload to help debug issues outside of coreboot.</p> <p>NOTE: UEFI Payload logs are not available on platforms with serial console redirection enabled in the firmware.</p>"},{"location":"dasharo-menu-docs/boot-maintenance-mgr/","title":"Boot Maintenance Manager","text":"<p>Boot Maintenance Manager is mainly used to manage boot options, boot timeout, next boot variable, console inputs and outputs. It also provides a way to add driver options, but it is rather rarely used.</p> <p></p> <ul> <li><code>Boot Next Value</code> is used to set which boot options should be booted after a   reboot. This setting is not permanent and works only after the first reboot,   then it defaults back to <code>None</code>.</li> <li><code>Auto Boot Time-out</code> is used to specify the timeout in seconds how long the   firmware should wait for hotkey to enter setup menu or Boot Manager Menu   before booting the first priority according to boot order or   <code>Boot Next Value</code> (if it was set before reset)</li> <li><code>Quiet Boot</code> - suppresses the boot prompt and progress bar from being   printed on the screen resulting in a smooth graphical experience during boot   by displaying the logo only.</li> <li><code>Fast Boot</code> - limits the hardware initialization to necessary minimum to   improve the boot time performance. Input consoles become available only on   demand (e.g. when entering setup or OS bootloader or any EFI application   which attempts to read key strokes), meaning it will not be possible to   enter setup or boot manager menu using hotkeys. The auto boot timeout   becomes 0 seconds. Only VGA OptionROMs are being executed (if OptionROMs are   enabled). Only FAT filesystem driver is available. Making screenshots is not   possible. Also behaves like quiet boot. The only ways to disable fast boot   are:<ul> <li>changing the fast boot EFI variable from OS to 0/false (on Linux using   <code>efivarfs</code> or PowerShell on Windows with 3rd party PowerShell   modules)</li> <li>requesting to enter the Setup from OS<ul> <li>Linux: using <code>UEFI Firmware Settings</code> entry in GRUB menu, or setting  <code>Boot Next</code> to enter Setup on next boot using <code>efibootmgr</code>, then  disabling the option in the setup</li> <li>Windows: through Windows Recovery   Environment   -&gt; <code>Troubleshooting</code> -&gt; <code>UEFI Firmware Settings</code> or Windows Power   Shell command <code>shutdown /r /fw</code> as admin, then disabling the   option in the setup</li> </ul> </li> </ul> </li> </ul>"},{"location":"dasharo-menu-docs/boot-maintenance-mgr/#boot-options","title":"Boot Options","text":"<p>This submenu allows to manipulate the boot order and boot options in general:</p> <p></p>"},{"location":"dasharo-menu-docs/boot-maintenance-mgr/#add-boot-option","title":"Add Boot Option","text":"<p>When selecting to add a boot option, file explorer appears where one has to navigate to the desired disk, partition and file which shall be executed if the boot options is selected:</p> <p></p> <p>NOTE: only EFI files may be used. If the file is already selected a window to set the boot option name appears:</p> <p></p> <p>To set the name press <code>ENTER</code> to activate the prompt:</p> <p></p> <p>Confirm the name (it must not be too short) with <code>ENTER</code> and then <code>Commit Changes and Exit</code>. From now on the boot options should appear on the boot options list in the Boot Manager Menu and One Time Boot menu.</p>"},{"location":"dasharo-menu-docs/boot-maintenance-mgr/#delete-boot-option","title":"Delete Boot Option","text":"<p>To delete boot options, enter <code>Delete Boot Option</code> submenu.</p> <p></p> <p>Select the checkboxes which options should be removed and then <code>Commit Changes and Exit</code>. From now on the deleted boot options should not appear on the boot options list in the Boot Manager Menu and One Time Boot menu. Note that some boot options are auto-registered during boot, e.g. UEFI Shell, iPXE, or disks that contains <code>/EFI/BOOT/BOOTX64.EFI</code> file on their FAT32 partitions. To disable iPXE auto-registering, disable Network Boot in Dasharo System Features menu.</p>"},{"location":"dasharo-menu-docs/boot-maintenance-mgr/#change-boot-order","title":"Change Boot Order","text":"<p>Boot Maintenance Manage also allows to change the boot order of the devices. PLease note that the boot order may be changed only for currently detected and registered boot options and devices. Dasharo does not yet provide fixed boot order options per interface, e.g. prioritize USB over NVMe or SATA, etc.</p> <p></p> <p>To move the boot options priority, press <code>ENTER</code> when selecting the boot options list. A popup windows with the entries should show up. Use <code>+</code> and <code>-</code> on the hovered item to move it up and down, use arrows to change hovered item.</p> <p></p> <p>If you are satisfied with the order you set, press <code>ENTER</code> to confirm it and then <code>Commit Changes and Exit</code>. The boot order should be immediately applied, it can be checked on the boot options list in the Boot Manager Menu and One Time Boot menu.</p>"},{"location":"dasharo-menu-docs/boot-maintenance-mgr/#driver-options","title":"Driver Options","text":"<p>This menu is used to load additional drivers. It is used very rarely so it is not described in detail.</p> <p></p>"},{"location":"dasharo-menu-docs/boot-maintenance-mgr/#console-options","title":"Console Options","text":"<p>This menu is used to manipulate EFI console variable. Typically there is no need to use it.</p> <p></p> <p>Here one may enable/disable input and output devices. Please note that most output and input devices devices are registered automatically during boot. Changes made here will only last till next reboot. To permanently disable certain inputs one may use different setup options:</p> <ul> <li>USB keyboard input may be disabled by disabling whole USB stack</li> <li>PS/2 keyboard input may be disabled by disabling PS/2 controller</li> </ul> <p>WARNING: Dasharo does not yet implement any check if at least one keyboard is plugged and working. If you disable both USB stack and PS/2 controller you will not be able to control firmware boot flow (so unable to enter setup or choose boot option via Boot Manager or even enable back the keyboard inputs).</p>"},{"location":"dasharo-menu-docs/boot-maintenance-mgr/#boot-from-file","title":"Boot From File","text":"<p>This submenu allows one to boot an arbitrary EFI file from one of the disk partitions. Selecting the entry will open the File Explorer (similarly like when adding a boot option) and one has to navigate to the file desired to be executed and press ENTER.</p>"},{"location":"dasharo-menu-docs/dasharo-apu-configuration/","title":"Dasharo APU Configuration","text":"<p>The Dasharo APU Configuration menu is an exclusive menu for PC Engines apu platforms. This menu is intended to provide equivalent runtime configuration capabilities as PC Engines sortbootorder.</p> <p>Not all sortbootorder options may be currently available. They may be added in the future.</p>"},{"location":"dasharo-menu-docs/dasharo-apu-configuration/#dasharo-apu-configuration-menu-options","title":"Dasharo APU Configuration menu options","text":"<p>When entering the <code>Dasharo APU Configuration</code> menu, one may see the following options to appear:</p> <p></p>"},{"location":"dasharo-menu-docs/dasharo-apu-configuration/#core-performance-boost","title":"Core Performance Boost","text":"<p>This option enables AMD Core Performance Boost (aka CPU Turbo). When enabled firmware will make 2 additional boosted P-states available. Core Performance Boost is able to raise a single core frequency from 1000MHz up to 1400MHz if other cores are pretty much inactive.</p> <p>Disable this option if you notice system unstabilities.</p>"},{"location":"dasharo-menu-docs/dasharo-apu-configuration/#watchdog","title":"Watchdog","text":"<p><code>Enable watchdog</code> option controls whether the AMD FCH watchdog will be enabled during boot. When selected, the <code>Watchdog timeout value</code> will appear, where one can specify the watchdog expiration timeout in seconds.</p> <p>The watchdog is useful when a platform hangs and needs to be reset automatically, which will happen if watchdog timer expires. Minimum timeout is 60s to let the OS take control over the watchdog (e.g. sp5100_tco watchdog driver for Linux) and keep reloading it to avoid resets.</p>"},{"location":"dasharo-menu-docs/dasharo-apu-configuration/#pci-express-power-management-features","title":"PCI Express power management features","text":"<p>When enabled, the firmware will attempt to enable Clock Power Management, ASPM L0s and L1 on PCI Express ports. Enabling these options may result in power savings at the cost of [PCI Express device performance reduction] (https://github.com/pcengines/coreboot/issues/387).</p>"},{"location":"dasharo-menu-docs/dasharo-system-features/","title":"Dasharo System Features","text":"<p>When entering the <code>Dasharo System Features</code> menu, one may see the following submenus to appear:</p> <p></p>"},{"location":"dasharo-menu-docs/dasharo-system-features/#dasharo-security-options","title":"Dasharo Security Options","text":"<p>This menu offers security-sensitive options like:</p> <ul> <li><code>BIOS boot medium lock</code> - enables/disables flash protection on the vboot   recovery firmware partition. Disable it if you need access to whole flash   with flashrom.</li> <li><code>Enable SMM BIOS write protection</code> - when enabled, allows only SMM code (the   privileged code installed by the firmware in the system memory) to write to   BIOS flash. Recommended to be enabled if Firmware setup password   is set. Disable the protection if you need access to flash with flashrom.</li> <li><code>Boot menu enabled</code> - enables/disables ability to enter boot manager menu.   Enabled by default. Can be disabled, to prevent from booting from non-default   boot media.</li> <li><code>Early boot DMA Protection</code> - Enables IOMMU DMA protection early during POST.   DMA protection is a feature that utilizes the IOMMU early in the boot process   to prevent rogue DMA-capable devices such as PCIe add-in cards,   USB4/thunderbolt devices from access to memory. This prevents a class of DMA   attacks that allow for exfiltration of secrets and installation of malware   early in the boot process.</li> <li><code>Keep IOMMU enabled when transfer control to OS</code> - (only available when   <code>Early boot DMA Protection</code> is selected) Keeps IOMMU DMA protection enabled   during ExitBootServices when control is passed to the OS. If unsure or see any   problems with DMA/IOMMU during OS boot, keep it disabled.   NOTE: Windows may not boot if the option is enabled.</li> <li><code>Enter Firmware Update Mode</code> - when selected, causes the platform to reset   and disable all firmware protections, including UEFI Secure Boot, for the   duration of one boot. The goal of the option is to simplify the update   process for the end user. Unsetting multiple security options and then   setting them back can be tiresome.</li> <li><code>Enable Wi-Fi + BT radios</code> - (applicable to laptops) - Enables or disables   radios for Wi-Fi and Bluetooth. When disabled, the slot is unconfigured and   power to the wireless module is disconnected.</li> <li><code>Enable Camera</code> - (applicable to laptops) - Enables or disables the integrated   camera. When disabled, power to the camera is disconnected and the camera can   not be enabled using the keyboard camera hotkey from the OS.</li> </ul>"},{"location":"dasharo-menu-docs/dasharo-system-features/#networking-options","title":"Networking Options","text":"<ul> <li><code>Enable network boot</code> - the option controls if the network boot should be   enabled or not. This option is disabled by default on most Dasharo supported   devices. When disabled, it prevents loading network controller drivers and   unregisters iPXE as boot option (iPXE disappears from   Boot Manager and   One Time Boot menus)</li> </ul>"},{"location":"dasharo-menu-docs/dasharo-system-features/#usb-configuration","title":"USB Configuration","text":"<ul> <li><code>Enable USB stack</code> - controls loading of UEFI USB drivers, when enabled all   USB drivers are loaded making USB keyboards and mass storage drives   functional in the firmware (to browse setup, press hotkeys or move around   bootloaders like GRUB). If disabled no USB device will work before OS is   loaded (firmware will not communicate with USB devices).</li> <li><code>Enable USB Mass Storage driver</code> - this option is blocked if USB stack is   disabled. If disabled, UEFI USB Mass Storage driver is not loaded and one   cannot boot from USB drives. Essentially this option controls the USB boot   capability. It does not affect other devices, like USB keyboards.</li> </ul>"},{"location":"dasharo-menu-docs/dasharo-system-features/#intel-management-engine-options","title":"Intel Management Engine Options","text":"<p>This submenu is used to access Intel Management Engine related options. Currently the only option available is <code>Intel ME mode</code> which allows to enable or disable Management Engine:</p> <p></p> <p>On the right side of the window there is a help section describing the option meaning. If the window is too small, the help section may be divided and not fully shown on the screen. To scroll the help section use <code>D</code> or <code>d</code> keys to scroll down and <code>U</code> or <code>u</code> to scroll up.</p> <p>Intel ME can be disabled in two ways:</p> <ul> <li><code>Disabled (Soft)</code> - when set, causes the Dasharo firmware to send   <code>ME_DISABLE</code> command via MEI/HECI. MEI/HECI interface is being hidden from OS   when ME is disabled.</li> <li><code>Disabled (HAP)</code> - when set, causes the Dasharo firmware to set HAP bit in   the flash descriptor. MEI/HECI interface is being hidden from OS when ME is   disabled. HAP method is much more efficient as it halts the ME firmware   execution even earlier than Soft Disable described above</li> </ul> <p></p> <p>When the mode is set to <code>Enabled</code>, Dasharo enables the Intel Management engine by either sending <code>ME_ENABLE</code> command via MEI/HECI or clearing the HAP bit in flash descriptor, depending on the previously active ME mode. MEI/HECI device should be functional in OS when ME is enabled.</p> <p>Any change in the Dasharo firmware setup requires saving the changes and a platform reset (unless specified otherwise).</p> <p>For more information about neutering and disabling ME see also me_cleaner.</p> <p>NOTE: me_cleaner is not supported on all platforms! If a platform supports me_cleaner (i.e. ME version is lower or equal 11.x) it is recommended to set HAP bit and clean the ME region with <code>me_cleaner</code> script permanently.</p> <p>If Intel Boot Guard is enabled, the Management Engine menu will also contain information related to Intel Boot Guard and its registers. Each register is parsed and displayed in human-readable form. This information is mostly intended for debugging and support purposes, but may also help interested users understand the security properties of their platform:</p> <p></p>"},{"location":"dasharo-menu-docs/dasharo-system-features/#chipset-configuration","title":"Chipset Configuration","text":"<p>The submenu contains general chipset options. Currently available options:</p> <ul> <li><code>Enable PS/2 controller</code> - enables/disables PS/2 controller on the platform.   When disabled PS/2 keyboards and mice will stop working in firmware and OS.   PS/2 controller will not be functional in OS. This option is not available on   laptops where PS/2 is used for the integrated keyboard and possibly touchpad.</li> <li><code>Enable watchdog</code> - controls the chipset watchdog functionality. The watchdog   is useful when a platform hangs and needs to be reset automatically, which   will happen if watchdog timer expires. Minimum timeout is 5 minutes to let the   OS take control over the watchdog (e.g. wdat_wdt watchdog driver for Linux)   and keep reloading it to avoid resets.</li> </ul> <p>Earlier firmware versions kick the watchdog automatically. Releases after 15.03.2024 expose the watchdog to the OS to update it instead.</p> <ul> <li><code>Watchdog timeout value</code> - watchdog timeout in seconds. Allowed range is   300-1024 seconds. Once the OS takes control of the watchdog, the timeout can   be configured as low as 1 second. The option is only visible if watchdog is   set to enabled.</li> </ul>"},{"location":"dasharo-menu-docs/dasharo-system-features/#power-management-options","title":"Power Management Options","text":"<p>The submenu contains general power management options.</p> <p></p> <p>Currently available options:</p> <ul> <li><code>Fan profile</code> - Sets of the fan operation modes (defaults to <code>Silent</code>):<ul> <li><code>Silent</code> - the fan will operate at lower speeds to reduce noise,</li> <li><code>Performance</code> - the fan will operate at higher speeds, to allow for    increased performance.</li> </ul> </li> <li><code>Platform sleep type</code> - sets the active sleep mode to be available for OS<ul> <li><code>Suspend to Idle (S0ix)</code> (default) - also known as modern standby. Select   this option if using Windows. S3 sleep mode may not be working well with   Windows for machines newer than 11th generation Intel Core processors.   S0ix will not work properly if ME is disabled.</li> <li><code>Suspend to RAM (S3)</code> - standard sleep mode that suspends the machine   state to RAM, supported on most operating systems (except Windows on 11th   generation Intel Core processors or newer). <p>Note: On some devices, S3 support is considered experimental. On these devices, the option will be marked as such.</p> </li> </ul> </li> <li><code>Battery Start Threshold</code> - The value set by this option represents the percentage of battery power; if it is above this value, the DUT won't start charging. If the DUT has started charging before this level, it will not stop until the battery stop threshold is reached.</li> <li><code>Battery Stop Threshold</code> - the value set by this option represents the percentage of battery power that the device will never exceed - it will stop charging.</li> </ul> <p>Flow chart for the two settings mentioned above:</p> <p></p> <ul> <li><code>Power state after power/AC loss</code> - controls  what power state the platform   should switch to when the main AC power is restored. Default value is   platform-dependent.</li> </ul> <p></p> <ul> <li><code>CPU Throttling Temperature Offset</code> - The temperature offset from TjMax   (maximum CPU temperature) above which the CPU will start throttling itself.   Also known the TCC offset. The current absolute throttling threshold   temperature is displayed in <code>Current CPU Throttling Threshold Temperature</code>   checkbox.</li> <li><code>USB ports power and charging</code> - Controls whether power is supplied to USB   ports while the platform is off. The available options are:<ul> <li><code>While System Is On</code> - The USB ports will be powered only while the device   is turned on or in sleep mode.</li> <li><code>Always On</code> - The USB ports will remain powered even while the device is   turned off. This may cause a reduction in standby battery life in battery   powered devices. Availability of ports that are powered in this mode   depends on your specific device, for a detailed specification, check your   mainboard's Hardware Configuration Matrix in the appropriate model   documentation in the Supported Hardware section.</li> </ul> </li> </ul>"},{"location":"dasharo-menu-docs/dasharo-system-features/#pcipcie-configuration","title":"PCI/PCIe Configuration","text":"<p>The submenu contains options related to the PCI and PCI Express devices and subsystem.</p> <p></p> <ul> <li><code>Enable PCIe Resizable BARs</code> - enables/disables the PCIe Resizable BARs   during PCI enumeration process. If enabled, the PCI Express devices   advertising more suitable memory resources, will be configured to use those   resources (that typically means bigger memory resources assigned to the   device). By default this option is disabled for compatibility reasons.</li> </ul> <p></p> <p></p> <ul> <li><code>OptionROM Execution Policy</code> - controls which OptionROMs are allowed to be   loaded and run. Default value may depend on platform (either <code>Disable all</code>   or <code>Enable All</code>)</li> </ul> <p></p> <p></p>"},{"location":"dasharo-menu-docs/dasharo-system-features/#memory-configuration","title":"Memory Configuration","text":"<p>The submenu contains options related to the RAM memory configuration.</p> <p> </p> <ul> <li><code>Memory SPD profile</code> - chooses the memory overclocking profile to use when   training the memory. Custom profiles are not yet supported. Currently, there   is no detection between DDR4 and DDR5 memory, so <code>XMP#3</code> profile is only   eligible for DDR5.</li> </ul> <p>WARNING: Changing this value may brick your system. Be sure to have a recovery method before modifying this setting. You have been warned.</p> <p></p>"},{"location":"dasharo-menu-docs/dasharo-system-features/#serial-port-configuration","title":"Serial Port Configuration","text":"<p>The submenu contains options related to the serial port configuration.</p> <p></p> <ul> <li><code>Enable Serial Port Console Redirection</code> - when enabled, the firmware will   output also on the serial port specific to the platform. Default value is   platform-dependent.</li> </ul> <p>NOTE: If Serial Port Console Redirection is enabled, the setup application and strings printed on the screen will not be stretched to the full screen size. It is due to the serial console working in 80x25 mode. Thus the console splitter must choose the highest resolution supported by all consoles.</p>"},{"location":"dasharo-menu-docs/dasharo-system-features/#cpu-configuration","title":"CPU Configuration","text":"<p>The submenu contains options related to the CPU.</p> <p></p> <ul> <li><code>Number of active P-cores</code> - sets the number of active Performance cores on   a hybrid CPU architecture system, such as 12th generation Intel Core or   later. By specifying a lower number of cores, the cores are getting   disabled. By default all cores are active, and there always must be one   P-core active in the system, unless the CPU has no P-cores.</li> <li><code>Number of active E-cores</code> - sets the number of active Efficient cores on a   hybrid CPU architecture system, such as 12th generation Intel Core or later.   By specifying a lower number of cores, the cores are getting disabled. By   default all cores are active, and there always must be one E-core active in   the system if the CPU has no P-cores, otherwise all E-cores may be disabled.</li> <li><code>Hyper-Threading</code> - enables/disables Hyper-Threading feature. By default   Hyper-Threading is enabled. Unchecking the option will cause all the   secondary threads on hyper-threading supported cores to be disabled. On   hybrid CPU architecture, only P-cores support Hyper-Threading.</li> </ul> <p></p> <p></p>"},{"location":"dasharo-menu-docs/dasharo-system-features/#additional-information","title":"Additional information","text":"<p>NOTE: Pressing F9 to reset to defaults resets all settings, not only the one that is currently selected.</p>"},{"location":"dasharo-menu-docs/device-manager/","title":"Device Manager","text":"<p>The Device Manager is a EDKII standard submenu which collects various device setups like TPM, UEFI Secure Boot, TCG OPAL Drive Password, SATA Password and others.</p> <p></p>"},{"location":"dasharo-menu-docs/device-manager/#tcg-drive-management","title":"TCG Drive Management","text":"<p>This menu allows one to set up TCG OPAL disk password and manage other TCG OPAL feature settings. The main view of the submenu looks as follows:</p> <p></p> <p>The submenu will list all the TCG OPAL capable disks. Selecting one of them with <code>ENTER</code> will cause entering the disk specific submenu:</p> <p></p> <p>Here one can enable the TCG OPAL security feature or restore factory default with the PSID (Physical Security ID). Physical Security ID is a drive specific key which is used to revert to factory default mode. The PSID can be typically found on the sticker present on the disk.</p> <p>Besides the feature enablement and factory restore options there is an action interactive entry on the main TCG Drive Management page:</p> <p></p> <p>It is used to perform TCG OPAL specific operations when the security feature is enabled. Enable/disable BlockSID will set/unset \"freeze locking\" of the drive features as requested by OS. One may also enable or disable physical presence (firmware popup confirmation of actions requested by OS) when switching BlockSID.</p> <p>To set up the password enter the desired disk submenu and enable the feature by selecting the checkbox. Note that not all disks support the security feature of TCG OPAL. Reset is required to apply changes. After reset you will be prompted to set admin password. When the admin password is set, more options become available for the disk:</p> <p></p> <p>All below options require reset to apply changes.</p> <ul> <li><code>Update Drive Admin Password</code> - to update current admin password. Prompt   window appears after reset to enter current and new password</li> <li><code>Set Drive User Password</code> - is used to set an optional user password.</li> <li><code>Secure Erase User Data</code> - performs secure erase of the data after reset.</li> <li><code>Admin Revert to factory default and Disable</code> - disables the admin password   (prompt will no longer appear during boot o unlock the drive) and the   security feature after reset. Optionally one may select to keep or discard   user data.</li> <li><code>PSID Revert to factory default and Disable</code> - in case admin password has   been forgotten PSID can be used to disable the security feature and admin   password after reset. This will also erase user data.</li> <li><code>Disable User</code> - disables the user functionality (and so the user password)   after reset.</li> </ul> <p>For more details about TCG OPAL please refer to TCG Storage Specifications and Key Management.</p>"},{"location":"dasharo-menu-docs/device-manager/#driver-health-manager","title":"Driver Health Manager","text":"<p>This submenu is informational only and displays the status of drivers that install UEFI driver health protocol. Typically it is installed by 3rdparty applications such as OptionROMs on graphics devices or network controllers for example.</p> <p></p>"},{"location":"dasharo-menu-docs/device-manager/#secure-boot-configuration","title":"Secure Boot Configuration","text":"<p>This submenu allows configuring UEFI Secure Boot functionality.</p> <p></p> <p>By default, Dasharo firmware boots with the default keys/certificates enrolled (see Custom mode and key management) and default UEFI Secure Boot state depending on platform (in most cases disabled).</p>"},{"location":"dasharo-menu-docs/device-manager/#enabling-secure-boot","title":"Enabling Secure Boot","text":"<p>Switching the <code>Enable Secure Boot</code> option will enable or disable Secure Boot on next boot.</p> <p></p> <p>The <code>Enable Secure Boot</code> option will be available (not grayed out) only if the keys/certificates are provisioned. You may see below image if you erase your Secure Boot keys/certificates or don't have PK enrolled:</p> <p></p>"},{"location":"dasharo-menu-docs/device-manager/#custom-mode-and-key-management","title":"Custom mode and key management","text":"<p>The basic menu allows only enabling or disabling Secure Boot. For advanced options, switch the <code>Secure Boot Mode</code> from <code>Standard Mode</code> to <code>Custom Mode</code>, which will cause the <code>Advanced Secure Boot Keys Management</code> submenu to appear.</p> <p></p> <p><code>Advanced Secure Boot Keys Management</code> menu content looks as follows:</p> <p></p> <ul> <li> <p><code>Reset to default Secure Boot Keys</code> will cause the following keys/certificates   to be enrolled:</p> <ul> <li>Microsoft Corporation KEK CA 2011,</li> <li>Microsoft Corporation KEK 2K CA 2023,</li> <li>Microsoft Signature Database (db) consisting of:<ul> <li>Microsoft Windows Production PCA 2011   and Windows UEFI CA 2023   to allow Windows OS Loader to load,</li> <li>Microsoft Corporation UEFI CA 2011   and Microsoft UEFI CA 2023   to load OEM-approved UEFI drivers and applications (e.g. shim),</li> </ul> </li> <li>Microsoft Forbidden Signature Database (dbx) published as  UEFI Revocation List File on uefi.org,</li> <li>Dasharo Platform Key (PK) certificate maintained by the Dasharo team. When   custom application and UEFI driver signing is desired, this key may be replaced   with the user's own PK.</li> </ul> <p>To learn more about those certificates, please visit Windows Secure Boot Key Creation and Management Guidance.</p> <p></p> </li> <li> <p><code>Erase to default Secure Boot Keys</code> will erase all Secure Boot keys and certificates   currently provisioned:</p> <p></p> <p></p> </li> </ul> <p>One may also delete and enroll individual keys, certificates and database signatures via <code>PK/KEK/DB/DBX/DBT Options</code> (scroll the menu down if <code>DBT Options</code> are not visible).</p>"},{"location":"dasharo-menu-docs/device-manager/#tcg2-configuration","title":"TCG2 Configuration","text":"<p>TCG2 Configuration submenu is responsible for displaying TPM 2.0 information and managing the module.</p> <p></p> <p>The basic information displayed are the TPM device family, interface, but also information about supported hashing algorithms.</p> <p></p> <p></p> <p>It is also possible to perform various TPM2 physical presence operations (<code>TPM2 Operation</code>) and enable or disable PCR banks.</p> <p></p> <p>The supported TPM2 operations are:</p> <ul> <li>Disabling or enabling Owner and Endorsement hierarchies</li> <li><code>TPM ClearControl(NO) + Clear</code> - performs TPM clear</li> <li>PCR Allocation - used to enable additional PCR banks</li> <li><code>LogAllDigests</code> - on next reboot (and only on next reboot), add digests for   all supported hashing algorithms to log file</li> <li><code>ChangeEPS</code> - clears the TPM and changes its identity</li> </ul> <p>For more details about the TPM operations see TCG Physical Presence Interface Specification</p>"},{"location":"dasharo-menu-docs/device-manager/#hdd-security-configuration","title":"HDD Security Configuration","text":"<p>HDD Security Configuration allows one to set SATA disk password. Note that all SATA disks will be displayed, even these that don't support the feature.</p> <p></p> <p>To check if the disk supports password feature, enter the specific disk submenu to see if <code>Security Supported</code> displays <code>Yes</code>:</p> <p></p> <p>If one scrolls down a bit, more information is displayed about current state of the disk password feature:</p> <p></p> <p></p> <p>At the bottom of the page there are two checkboxes:</p> <ul> <li><code>Request to set User Password</code> - this is the option to set the password on   the disk. Requires reset, after which the prompt windows will appear to set   the password. From now on the prompt will appear on each boot.</li> <li><code>Request to set Master Password</code> - this options changes the disk master   password. Master password is used to recover from forgotten User Password.</li> </ul> <p>Typically Master Password is provisioned during disk manufacturing and it will not be possible to change it without knowing what the master password is.</p> <p>To disable the User Password simply request to set the User Password again via the menu. After reset you will be asked to unlock the driver with current password and then type new password. To disable the password simply leave the field empty and confirm it twice by pressing <code>ENTER</code>. After that the password prompt will not appear again.</p>"},{"location":"dasharo-menu-docs/device-manager/#network-device-list","title":"Network Device List","text":"<p>This submenu is displayed when Network Boot is enabled and the network controller driver installs the necessary UEFI protocols. The menu lists the network devices with the UEFI protocol installed. One may check out the network controller information, like MAC address, driver used and link status. Example view with MAC address blurred:</p> <p></p> <p></p> <p></p>"},{"location":"dasharo-menu-docs/overview/","title":"Dasharo menu overview","text":"<p>This section describes the overview of the Dasharo firmware setup menu. In the subsections you will get to know:</p> <ul> <li>What options are available?</li> <li>How to use submenus and options?</li> <li>How the options and submenus work?</li> </ul> <p>Here you may watch a Dasharo menu walkthrough with commentary presenting Dasharo features.</p>"},{"location":"dasharo-menu-docs/overview/#dasharo-menu-guides","title":"Dasharo menu guides","text":"<p>The main menu is entered by selecting the Setup application in the Boot Manager Menu or by pressing the Setup hotkey while booting. The hotkey is shown in the top-left corner of the screen when the boot logo is displayed, for example <code>DEL</code>:</p> <pre><code>DEL   to enter Setup\nF11   to enter Boot Manager Menu\nENTER to boot directly\n</code></pre> <p>On certain devices like Novacustom laptops one will also be greeted with a firmware version printed on the screen (main firmware version and EC firmware version if applicable), for example:</p> <pre><code>Firmware version: Dasharo (coreboot+UEFI) v1.6.0\nEC firmware version: 2023-03-20_c398446\nF2    to enter Setup\nF7    to enter Boot Manager Menu\nENTER to boot directly\n</code></pre> <p>If any error happens (firmware version is unknown, could not be read or any other error) you will get an red error string:</p> <p></p> <p>OR</p> <p></p> <p>In such case please follow the EC firmware update instructions for a specific board variant.</p> <ul> <li> <p>Setup Main Page</p> <ul> <li>Dasharo APU Configuration (PC Engines   APUs only)</li> <li>User Password Management</li> <li>Device Manager</li> <li>Dasharo System Features</li> <li>One Time Boot</li> <li>Boot Maintenance Manager</li> </ul> </li> <li> <p>Boot Manager Menu - entered with a different key than   used for setup application. Lists all bootable options and allows one to   override the boot path.</p> </li> </ul>"},{"location":"dasharo-menu-docs/overview/#hotkeys","title":"Hotkeys","text":""},{"location":"dasharo-menu-docs/overview/#f9-reset-to-defaults","title":"F9: Reset to Defaults","text":"<ul> <li>The <code>F9</code> hotkey is a global reset option.</li> <li>Pressing <code>F9</code> will reset all BIOS settings across all menus to their default values. The only exception are the secure boot keys.</li> <li>This action is immediate and applies to all configurable options within the BIOS.</li> <li>Changes will be physically saved and effective on the platform after a reset.</li> </ul>"},{"location":"dasharo-menu-docs/overview/#f10-save-changes","title":"F10: Save Changes","text":"<ul> <li>The <code>F10</code> hotkey serves as a global save option.</li> <li>Pressing <code>F10</code> will save all changes made in any menu within the BIOS.</li> <li>Changes will be physically saved and effective on the platform after a reset.</li> </ul>"},{"location":"dasharo-menu-docs/overview/#important-notes","title":"Important Notes","text":"<ul> <li>Caution: Using the <code>F9</code> reset option will overwrite all custom configurations. Ensure you have noted any specific settings before resetting.</li> <li>Confirmation: Both <code>F9</code> and <code>F10</code> actions require confirmation to prevent  accidental changes.</li> <li>Reset Requirement: After saving changes with <code>F10</code> or reverting to defaults with <code>F9</code>, a platform reset is necessary for any changes to take effect.</li> </ul>"},{"location":"dasharo-menu-docs/overview/#main-page","title":"Main Page","text":"<p>The page is the main view of the firmware setup application. It contains the board model (<code>MS-7D25</code>), installed CPU and firmware version in the top-left corner. In the top-right corner the CPU frequency and system RAM amount are shown.</p> <p>From the main page one may access all menus and submenus available in the firmware setup. Besides the menus there is also an option to:</p> <ol> <li>Change the language (currently only English is supported)</li> <li><code>Continue</code> - execute the top first boot order priority</li> <li><code>Reset</code> - resets the platform.</li> </ol> <p>The currently available menus/submenus are as follows:</p> <ul> <li>User Password Management - allows to set   firmware setup password</li> <li>Device Manager - allows configuring various devices and   features like: UEFI Secure Boot, TPM device, SATA and TCG OPAL password, etc.   It may also contain informational menus like Driver Health Manager, Network   Device List and others.</li> <li>Dasharo System Features - contains submenus for   features specific to Dasharo products and Dasharo supported platforms</li> <li>One Time Boot - allows to choose which boot entry to   execute. It simply lists all available boot options and allows to select one   the same way as Boot Manager Menu</li> <li>Boot Maintenance Manager - allows to manipulate   various UEFI standard variables responsible for console and boot options. One   may choose which devices should be used for input and output, choose to boot   an arbitrary file or modify the boot options and boot order.</li> </ul> <p>NOTE: not all submenus may be available on your platform. Contact Dasharo Team for more information and possible feature extension of your platform.</p>"},{"location":"dasharo-menu-docs/overview/#user-password-management","title":"User Password Management","text":"<p>User Password Management menu allows one to set firmware setup admin password:</p> <p></p> <p>The password requirements are compliant to modern standards. See <code>Appendix A</code> at pages.nist.gov. The password doesn't need to contain anything more than lowercase letters to allow for using passphrases. Choosing a strong password is recommended, but not mandatory. Also the new password must be different from the last 5 passwords that were used before. The page shows the current status of <code>Admin Password</code> if it is provisioned or not.</p> <p>To disable the password, enter the <code>User Password Management</code> menu again and request to set new password. You will be asked to enter current password. When a window to provide new password pops up, leave the field empty and confirm it twice with <code>ENTER</code>. The password installation status on the menu page should change to <code>Not Installed</code>.</p>"},{"location":"dasharo-menu-docs/overview/#one-time-boot","title":"One Time Boot","text":"<p>When setup application is entered, one of the menus is called <code>One Time Boot</code>. As the name suggests it allows to override the boot just one time (not permanently). The usage principles are the same as for Boot Manager Menu.</p> <p>Example view of <code>One Time Boot</code> submenu:</p> <p></p> <p>On the right side of the menu window, there is a <code>DevicePath</code> which is a UEFI-compliant path to the device or file being executed. Depending on the file/device type, these paths may be different:</p> <p></p> <p></p> <p><code>DevicePaths</code> are defined in UEFI Specification. If you are interested in decoding those, read through the specification carefully.</p>"},{"location":"dasharo-menu-docs/overview/#boot-manager-menu","title":"Boot Manager Menu","text":"<p>Boot Manager Menu is an application that lists all bootable options and allows one to override the boot path.</p> <p>Boot Manager Menu is entered with a different key than setup application. It may be customized on your platform. The right key to use is always printed on the screen in the top-left corner, for example <code>F11</code>:</p> <pre><code>DEL   to enter Setup\nF11   to enter Boot Manager Menu\nENTER to boot directly\n</code></pre> <p>After pressing the right hotkey for Boot Manager Menu, a window should pop up:</p> <p></p> <p>On the bottom of the window there are instructions for moving and selecting entries.</p>"},{"location":"dasharo-tools-suite/overview/","title":"Dasharo Tools Suite","text":""},{"location":"dasharo-tools-suite/overview/#overview","title":"Overview","text":"<p>Dasharo Tools Suite (DTS) is a set of tools running in a minimal Linux environment to deploy, update, and maintain firmware on Dasharo-supported devices. For example, it can be used to update the firmware on a device or run the initial deployment, even when no OS is currently installed.</p> <ul> <li> <p>Releases - <code>meta-dts</code> GitHub   repository pages now collects all versions of <code>DTS</code> image on <code>Releases</code> tab.   To verify binary integrity with hash and signature please go there, grab   latest release and follow the instructions in Dasharo release signature   verification using the key for the   appropriate DTS release from   here.</p> </li> <li> <p>Building - describes how to build DTS.</p> </li> <li>Running - describes how to run DTS.</li> <li>Supported Hardware - lists which   hardware is supported by DTS.</li> <li>Features - provides more details about DTS   features.</li> </ul>"},{"location":"dasharo-tools-suite/overview/#reporting-issues","title":"Reporting issues","text":"<p>Thank you for using Dasharo Tools Suite. If you have encountered any problems with this system or would like to provide feedback for us - please open an issue on Dasharo issues. Dasharo Tools Suite has its own label: <code>DasharoToolsSuite</code> and issue template for bugs. Other types of issues in the repository are generic and can be used with the <code>DasharoToolsSuite</code> label.</p> <p>And if you have already used this system and would be interested in supporting the project, please check the How to support us? section.</p>"},{"location":"dasharo-tools-suite/overview/#gathering-additional-information-and-providing-logs","title":"Gathering additional information and providing logs","text":"<p>It is not always possible to copy/paste logs from DTS. In such cases, photos or screenshots are also acceptable. Just imagine you are a professional photographer trying to capture another natural miracle in the best quality possible.</p> <p>But remember that your privacy is on the first place. Do not share sensitive information.</p>"},{"location":"dasharo-tools-suite/releases/","title":"Release Notes","text":"<p>Following Release Notes describe the status of Open Source Software development for Dasharo Tools Suite.</p>"},{"location":"dasharo-tools-suite/releases/#latest-release","title":"Latest release","text":"<p>Latest release can be found on <code>meta-dts</code> GitHub repository, inside <code>Releases</code> tab. The button below will take you there.</p> <p>Latest release</p> <p>Using the latest release is strongly recommended. Using older versions may harm your system.</p>"},{"location":"dasharo-tools-suite/documentation/building/","title":"Building","text":"<p>We choose Yocto Project to prepare Dasharo Tools Suite system. DTS image can be built using publicly available sources. Thanks to publishing the build cache on cache.dasharo.com the time needed to finish the process should be significantly decreased.</p>"},{"location":"dasharo-tools-suite/documentation/building/#prerequisites","title":"Prerequisites","text":"<p>The following must be met to build DTS:</p> <ul> <li>Linux PC (tested on <code>Ubuntu 20.04 LTS</code>),</li> <li>docker installed,</li> <li>kas-container 3.0.2   script downloaded and available in PATH,</li> </ul> <pre><code>wget -O ~/bin/kas-container https://raw.githubusercontent.com/siemens/kas/3.0.2/kas-container\n</code></pre> <pre><code>chmod +x ~/bin/kas-container\n</code></pre> <ul> <li><code>meta-dts</code> repository cloned.</li> </ul> <pre><code>mkdir yocto &amp;&amp; cd yocto\n</code></pre> <pre><code>git clone https://github.com/Dasharo/meta-dts.git\n</code></pre>"},{"location":"dasharo-tools-suite/documentation/building/#build","title":"Build","text":"<p>From <code>yocto</code> directory, run:</p> <pre><code>SHELL=/bin/bash kas-container build meta-dts/kas.yml\n</code></pre> <p>Image build takes time, so be patient, and the build's finished, you should see something similar to (tasks number may differ):</p> <pre><code>Initialising tasks: 100% |###########################################################################################| Time: 0:00:01\nSstate summary: Wanted 2 Found 0 Missed 2 Current 931 (0% match, 99% complete)\nNOTE: Executing Tasks\nNOTE: Tasks Summary: Attempted 2532 tasks of which 2524 didn't need to be rerun and all succeeded.\n</code></pre> <p>Using the cache is enabled in <code>kas/cache.yml</code> file and can be disabled by removing content of that file.</p> <pre><code>cat kas/cache.yml\n</code></pre> <p>output:</p> <pre><code>---\nheader:\n  version: 11\n\nlocal_conf_header:\n  yocto-cache: |\n    SSTATE_MIRRORS ?= \"file://.* http://${LOCAL_PREMIRROR_SERVER}/${PROJECT_NAME}/sstate-cache/PATH\"\n    SOURCE_MIRROR_URL ?= \"http://${LOCAL_PREMIRROR_SERVER}/${PROJECT_NAME}/downloads\"\n    INHERIT += \"own-mirrors\"\n    LOCAL_PREMIRROR_SERVER ?= \"cache.dasharo.com\"\n    PROJECT_NAME ?= \"yocto/dts\"\n</code></pre>"},{"location":"dasharo-tools-suite/documentation/building/#build-image-with-uefi-secure-boot-support","title":"Build image with UEFI Secure Boot support","text":"<p>From <code>yocto</code> directory run:</p> <pre><code>SHELL=/bin/bash kas-container build meta-dts/kas-uefi-sb.yml\n</code></pre> <p>Image build takes time, so be patient and after build's finish you should see something similar to (the exact tasks numbers may differ):</p> <pre><code>Initialising tasks: 100% |###########################################################################################| Time: 0:00:04\nChecking sstate mirror object availability: 100% |###################################################################| Time: 0:00:03\nSstate summary: Wanted 892 Local 672 Mirrors 212 Missed 8 Current 1560 (99% match, 99% complete)\nNOTE: Executing Tasks\nNOTE: Tasks Summary: Attempted 5860 tasks of which 5841 didn't need to be rerun and all succeeded.\n</code></pre> <p>Image created with <code>kas-uefi-sb.yml</code> configuration file enable integration of UEFI Secure Boot into DTS using meta-secure-core. Building the image allow to prepare a PoC version with uses sample keys which by no mean should used in production. For user keys the script create-user-key-store.sh can be used but it was not tested yet. Quick start with instructions on how to use image are described in meta-efi-secure-boot.</p>"},{"location":"dasharo-tools-suite/documentation/building/#flash","title":"Flash","text":"<ul> <li>Find out your device name.</li> </ul> <pre><code>fdisk -l\n</code></pre> <p>output:</p> <pre><code>(...)\nDevice     Boot  Start    End Sectors  Size Id Type\n/dev/sdx1  *      8192 131433  123242 60,2M  c W95 FAT32 (LBA)\n/dev/sdx2       139264 186667   47404 23,2M 83 Linux\n</code></pre> <p>In this case the device name is <code>/dev/sdx</code>, but be aware, in the next steps, replace <code>/dev/sdx</code> with the right device name on your platform, or else you can damage your system!</p> <ul> <li>From where you ran image build type.</li> </ul> <pre><code>sudo umount /dev/sdx*\n</code></pre> <pre><code>cd build/tmp/deploy/images/genericx86-64\n</code></pre> <p>Here the file <code>dts-base-image-genericx86-64.wic.gz</code> should be available, which is the image of DTS. To flash image, you can use the same command shown in running section. Just change the file name.</p> <ul> <li>Boot the platform.</li> </ul>"},{"location":"dasharo-tools-suite/documentation/dasharo-transition/","title":"Dasharo firmware transition","text":"<p>This document describes the Dasharo Firmware transition via DTS. The transition can only be performed from a specific firmware to a specific firmware and is only supported for a limited set of platforms.</p> <p>Currently supported platforms and transitions:</p> <ul> <li>PC Engines apu2/3/4/6: transition from Dasharo   (coreboot+Seabios) to Dasharo   (coreboot+UEFI).</li> </ul>"},{"location":"dasharo-tools-suite/documentation/dasharo-transition/#the-workflow","title":"The workflow","text":"<p>Firstly, boot to DTS as described in running DTS documentation. Then, if your platform and firmware support the transition - you should see <code>6) Transition Dasharo Firmware</code> option. After pressing <code>6</code>, you should see DTS transition process. Your platform will reboot after the transition automatically. Here is an example:</p> <pre><code> Dasharo Tools Suite Script 2.5.0\n (c) Dasharo &lt;contact@dasharo.com&gt;\n Report issues at: https://github.com/Dasharo/dasharo-issues\n*********************************************************\n**                HARDWARE INFORMATION\n*********************************************************\n**    System Inf.: PC Engines apu3\n** Baseboard Inf.: PC Engines apu3\n**       CPU Inf.: AMD GX-412TC SOC\n**    RAM DIMM 0: Not Specified\n*********************************************************\n**                FIRMWARE INFORMATION\n*********************************************************\n** BIOS Inf.: coreboot v24.08.00.01\n*********************************************************\n**                DPP credentials\n*********************************************************\n**      Email: ***************\n**   Password: ***************\n*********************************************************\n**     1) Dasharo HCL report\n**     2) Update Dasharo Firmware\n**     3) Restore firmware from Dasharo HCL report\n**     4) Edit your DPP keys\n**     6) Transition Dasharo Firmware\n*********************************************************\nR to reboot  P to poweroff  S to enter shell\nK to launch SSH server  L to disable sending DTS logs\nC to display DPP credentials\n\nEnter an option:\n6\nGathering flash chip and chipset information...\nChipset found\nvendor=\"Winbond\" name=\"W25Q64BV/W25Q64CV/W25Q64FV\"\nChipset size\n8M\nWaiting for network connection ...\nNetwork connection have been established!\nDownloading board configs repository\nChecking if board is Dasharo compatible.\nWaiting for system clock to be synced ...\n\nPlease, select Dasharo firmware version to install:\n\n  d) DPP version (coreboot + UEFI)\n  b) Back to main menu\n\nEnter an option: d\n\nSubscription version (cooreboot + EDK2) selected\nDownloading Dasharo firmware...\nChecking Dasharo firmware checksum... Verified.\n\n\nPlease verify detected hardware!\n\nBoard vendor: PC Engines\nSystem model: apu3\nBoard model: apu3\n\nDoes it match your actual specification? (Y|n) y\n\nFollowing firmware will be used to deploy Dasharo:\nDasharo BIOS firmware:\n  - link: dasharo-pcengines-uefi/v0.9.0/pcengines_apu3_v0.9.0.rom\n  - hash: ae4f2cd5f3b2cd18e665e24ad48b2e623bb70cd2d9f7e7f647ca275bee2e4f21\n\nYou can learn more about this release on: https://docs.dasharo.com/\n\nDo you want to deploy this Dasharo Firmware on your platform (Y|n) y\n\nFound file config at 0x1eae40, type raw, compressed 3854, size 12269\nTransitioning Dasharo firmware...\nSuccessfully transitioned Dasharo firmware\nSyncing disks... Done.\nThe computer will reboot automatically in 5 seconds\nRebooting in 5 s:\n5...\n4...\n3...\n2...\n1...\nRebooting\n</code></pre>"},{"location":"dasharo-tools-suite/documentation/features/","title":"Features","text":"<p>This section describes the functionality of the Dasharo Tools Suite. These are:</p> <ul> <li>DTS available commands</li> <li>Dasharo zero-touch initial deployment,</li> <li>HCL Report,</li> <li>Firmware update,<ul> <li>Local firmware update,</li> </ul> </li> <li>EC transition,</li> <li>EC update,</li> <li>additional features,<ul> <li>run commands from iPXE shell automatically,</li> <li>run DTS using VentoyOS.</li> </ul> </li> </ul>"},{"location":"dasharo-tools-suite/documentation/features/#available-commands","title":"Available Commands","text":"<p>When DTS is started, it has following options for the user to choose from:</p> <ul> <li>1) Dasharo HCL Report - generate Hardware   Compatibility List Report</li> <li>2) Update Dasharo Firmware or Install Dasharo   Firmware</li> <li>3) Restore Firmware from Dasharo HCL Report</li> <li>4) Load your DPP     keys     - Load your Dasharo Pro Package (DPP) keys</li> <li>R Reboot</li> <li>P Poweroff</li> <li>S Enter shell</li> <li>K Launch SSH Server</li> <li>L Enable sending DTS   logs</li> </ul>"},{"location":"dasharo-tools-suite/documentation/features/#dasharo-zero-touch-initial-deployment","title":"Dasharo zero-touch initial deployment","text":"<p>DTS can be used to flash Dasharo firmware on your hardware. To achieve this, boot DTS, choose option number <code>2</code>. After creating report with firmware dump as backup, type <code>d</code> or <code>c</code> to confirm the installation of Dasharo firmware. Option <code>c</code> stands for community release which is available for anyone using Dasharo Tools Suite, option <code>d</code> stands for DPP release and it is only available to Dasharo Entry Subscription subscribers. If you have DPP subscription then do steps in How can I use my Dasharo Pro Package credentials section first.</p> <p>Next you will be asked two questions to confirm flashing. The first will be displayed with the detected information about the device you are using DTS on. The second will also provide the hash of Dasharo components which will then be used for flashing. You can compare them with the values listed in the supported hardware section on docs.dasharo.com. Both these questions can be accepted by typing <code>Y</code>.</p> <p>Procedure execution ends automatically on the reboot of the platform (unless it requires otherwise). After restarting the device, you can enjoy the basic version of Dasharo, which we provide for given hardware.</p> <p>This feature is supported on the following platforms:</p> <ul> <li>ASUS KGPE-D16,</li> <li>Dell OptiPlex 7010/9010,</li> <li>MSI PRO Z690-A DDR4,</li> <li>MSI PRO Z690-A DDR5,</li> <li>MSI PRO Z790-P DDR4,</li> <li>MSI PRO Z790-P DDR5,</li> <li>NovaCustom NV4x (only 11th Gen (Tiger Lake)),</li> <li>NovaCustom NS5x/7x (only 11th Gen (Tiger Lake)),</li> <li>ODROID-H4+.</li> </ul> <p>And partially (only EC firmware flashing) on:</p> <ul> <li>NovaCustom V540TU/TNx,</li> <li>NovaCustom V560TU/TNx.</li> </ul>"},{"location":"dasharo-tools-suite/documentation/features/#hcl-report","title":"HCL Report","text":"<p>DTS allows the generation of a package with logs containing hardware information. To create one, choose option number 1 and check out the disclaimer. If you would like to send the report to our servers, please remember about connecting the ethernet cable. More information can be found in glossary.</p> <p></p>"},{"location":"dasharo-tools-suite/documentation/features/#hcl-report-correctness","title":"HCL Report correctness","text":"<p>Please note DTS HCL Report assumes that your chipset is already supported by flashrom. There are also other false negative errors and unknowns, which we trying to fix to improve user experience.</p> <p>Always check <code>results</code> file to confirm the quality of your HCL report. Sample content of such file may look as follows:</p> <pre><code>[OK]    PCI configuration space and topology\n[UNKNOWN] USB devices and topology\n[OK]    Super I/O configuration\n[UNKNOWN] EC configuration\n[ERROR]   MSRs\n[OK]    SMBIOS tables\n[OK]    BIOS information\n[OK]    CMOS NVRAM\n[UNKNOWN] Intel configuration registers\n[OK]    GPIO configuration C header files\n[OK]    kernel dmesg\n[OK]    ACPI tables\n[UNKNOWN] Audio devices configuration\n[OK]    CPU info\n[OK]    I/O ports\n[OK]    Input bus types\n[OK]    Firmware image\n[OK]    I2C bus\n[UNKNOWN] ACPI tables\n[OK]    Touchpad information\n[OK]    DIMMs information\n[ERROR]   CBMEM table information\n[ERROR]   TPM information\n[ERROR]   AMT information\n[OK]    ME information\nResults of getting data:\n\nLegend:\n[OK]     Data get successfully\n[UNKNOWN]  Result is unknown\n[ERROR]    Error during getting data\n</code></pre> <p>Please report all errors experienced while performing a dump to dasharo-issues repository.</p>"},{"location":"dasharo-tools-suite/documentation/features/#hcl-report-using-an-external-firmware-binary","title":"HCL Report Using an External Firmware Binary","text":"<p>Note: The following feature is available in DTS version 2.7.2 and later.</p> <p>Proprietary or stock firmware may not support using the internal programmer to dump the contents of the flash memory that stores the firmware. This results in a less complete HCL report, which lacks an inbox firmware backup and the results of automated firmware analysis.</p> <p>As a workaround, DTS allows users to provide the firmware binary file manually. The firmware binary can be obtained, for example, by using an external programmer (NOTE: link describes writing operation, not reading!) or by dumping the firmware via BMC.</p> <p>To use a user-provided firmware binary in an HCL report, copy it to the <code>/firmware/external/</code> directory. This can be done manually (for example, by transferring the binary on a flash drive and copying it to the destination) or over the network. The following example demonstrates the latter method, copying the binary via SCP:</p> <ol> <li>Boot up the DTS.</li> <li>Enable the SSH server.</li> <li> <p>Create <code>/firmware/external</code> directory over ssh.</p> <pre><code>ssh root@&lt;target_ip_address&gt; 'mkdir -p /firmware/external'\n</code></pre> </li> <li> <p>Copy the firmware binary to the target platform at <code>/firmware/external/</code> via    <code>scp</code>. An example command is shown below:</p> <pre><code>scp &lt;path_to_firmware_binary&gt; root@&lt;target_ip_address&gt;:/firmware/external/\n</code></pre> </li> <li> <p>Proceed with generating the HCL report as usual.</p> </li> </ol> <p>If the internal programmer fails to dump the firmware from the platform, DTS will automatically use the user-supplied firmware binary. The following message confirms that this fallback is in use:</p> <pre><code>Firmware dump not found, but found user-supplied external binary.\n</code></pre>"},{"location":"dasharo-tools-suite/documentation/features/#bios-backup","title":"BIOS backup","text":"<p>One of the key components of HCL Report is your BIOS backup. To prepare BIOS backup of your platform, simply run HCL Report and decide if you would like to contribute information about your hardware configuration.</p> <p>Please consider the following options depending on your situation:</p> <ul> <li>YES - If you decide to contribute, you can always get back to   us and ask about BIOS backup, which   we will provide after simple verification that you are the owner of the   hardware.</li> <li>NO (default) - If you decide to not contribute, your situation depends on   the boot method you used to execute DTS:<ul> <li>Network Boot - please note that Dasharo booted over iPXE assumes no   storage available, so the report, and your BIOS backup are stored in   temporary memory and will not be available after reboot. Please make sure   to move HCL Report to not volatile storage. This can be done using option   <code>S to enter shell</code>,</li> <li>USB Boot - HCL Report and BIOS backup are saved to USB storage root   directory.</li> </ul> </li> </ul>"},{"location":"dasharo-tools-suite/documentation/features/#firmware-update","title":"Firmware update","text":"<p>DTS can be used to update Dasharo firmware. To achieve this, boot it on platform with flashed Dasharo and choose option number <code>2</code>. You may see additional information about available updates if you are not Dasharo Pro Package subscriber. If you have DPP subscription then do steps in How can I use my Dasharo Pro Package credentials section first.</p> <p>Next you will be asked two questions to confirm flashing. The first will be displayed with the detected information about the device you are using DTS on. The second will also provide the hash of Dasharo components which will then be used for flashing. You can compare them with the values listed in the supported hardware section on docs.dasharo.com. Both these questions can be accepted by typing <code>Y</code>.</p> <p>If you see the following warning during the process, you do not need to worry about it:</p> <pre><code>Warning: Setting BIOS Control at 0xdc from 0x8b to 0x89 failed.\nNew value is 0x8b.\n</code></pre> <p>Procedure execution ends automatically on the reboot of the platform (unless it requires otherwise). After restarting the device, you can enjoy the updated version of Dasharo, which we provide for given hardware.</p> <p>Below we provide an example of updating Dasharo firmware from version v1.1.0 to v1.1.1 on MSI PRO Z690-A DDR4.</p> <pre><code> Dasharo Tools Suite Script 2.0.0-rc1\n (c) Dasharo &lt;contact@dasharo.com&gt;\n Report issues at: https://github.com/Dasharo/dasharo-issues\n*********************************************************\n**                HARDWARE INFORMATION\n*********************************************************\n**    System Inf.: Micro-Star International Co., Ltd. MS-7D25\n** Baseboard Inf.: Micro-Star International Co., Ltd. PRO Z690-A WIFI DDR4(MS-7D25)\n**       CPU Inf.: 12th Gen Intel(R) Core(TM) i5-12600K\n**    RAM Channel-0-DIMM-0: KF3600C17D4/8GX\n**    RAM Channel-0-DIMM-1: KF3600C17D4/8GX\n**    RAM Channel-0-DIMM-0: KF3600C17D4/8GX\n**    RAM Channel-0-DIMM-1: KF3600C17D4/8GX\n*********************************************************\n**                FIRMWARE INFORMATION\n*********************************************************\n**      BIOS Inf.: 3mdeb Dasharo (coreboot+UEFI) v1.1.0\n*********************************************************\n**     1) Dasharo HCL report\n**     2) Update Dasharo Firmware\n**     3) Restore firmware from Dasharo HCL report\n**     4) Load your DPP keys\n*********************************************************\nSelect a menu option or\nR to reboot  P to poweroff  S to enter shell\nK to launch SSH server\n2\n\nWaiting for network connection ...\nNetwork connection established.\nChecking if board is Dasharo compatible.\nGathering flash chip and chipset information...\nFlash information: vendor=\"Programmer\" name=\"Opaque flash chip\"\nFlash size: 32M\nGetting platform specific GPG key... Done\nWaiting for system clock to be synced ...\nChecking for the latest Dasharo update available...\n\nCurrent Dasharo version: 1.1.0\nLatest available Dasharo version: 1.1.1\n\nAre you sure you want to proceed with update? (Y|n) y\n\nDownloading Dasharo firmware...Done\n\nPlease verify detected hardware!\n\nBoard vendor: Micro-Star International Co., Ltd.\nSystem model: MS-7D25\nBoard model: PRO Z690-A WIFI DDR4(MS-7D25)\n\nDoes it match your actual specification? (Y|n) y\n\nFollowing firmware will be used to install Dasharo\nDasharo BIOS firmware:\n  - link: https://3mdeb.com/(...)/msi_ms7d25_v1.1.1_ddr4.rom\n  - hash: 3b438422338cf4c13abdb25823a9b2a2ad6e82fabbe0d9ed41a16a6eae1f15ff\n\nYou can learn more about this release on: https://docs.dasharo.com/\n\nDo you want to update Dasharo firmware on your hardware? (Y|n) y\n\nChecking Dasharo firmware checksum... Verified.\nChecking Dasharo firmware signature... Verified.\n\nBacking up firmware configuration... Done.\nFound file config at 0xc24c0, type raw, compressed 5418, size 19725\nChecking flash layout.\nChecking vboot keys.\nUpdating Dasharo firmware...\nThis may take several minutes. Please be patient and do not power off your\ncomputer or touch the keyboard!\nSuccessfully updated Dasharo firmware\nSyncing disks... Done.\nThe computer will reboot automatically in 5 seconds\nRebooting in 5s:\n5...\n4...\n3...\n2...\n1...\nRebooting\n</code></pre>"},{"location":"dasharo-tools-suite/documentation/features/#firmware-update-mode","title":"Firmware Update Mode","text":"<p>If you boot into DTS when in Firmware Update Mode you will be asked if you want to continue with unattended update or enter DTS menu:</p> <pre><code>Dasharo Tools Suite 2.7.1 DasharoToolsSuite tty1\n\nDasharoToolsSuite login: root (automatic login)\n\nYou have entered Firmware Update Mode.:\n  1: If you wish to continue with unattended firmware update process\n  9: If you wish to go back to Dasharo Tools Suite menu\n\nSelect an option:\n</code></pre> <p>If you choose option 1 you will start unattended update, which is identical to update described in Firmware update except all questions will be skipped. If you choose <code>9</code> you will go back to DTS menu.</p>"},{"location":"dasharo-tools-suite/documentation/features/#local-firmware-update","title":"Local firmware update","text":"<p>To flash a local BIOS image (e.g. mounted from a USB stick), you can drop to the shell (option <code>S</code>) and use the <code>flashrom</code> binary provided inside DTS directly.</p> <p>DANGER: Failure to use <code>flashrom</code> correctly may result in an unbootable device. For example, never flash an image that does not contain an Intel Firmware Descriptor (IFD) region and/or Management Engine (ME) region to the whole chip.</p> <p>You can use <code>flashrom -p internal</code> without additional parameters to double check if <code>flashrom</code> detects your chipset. This will not write anything.</p> <p>The following <code>flashrom</code> command will only rewrite the BIOS region:</p> <pre><code>sudo flashrom -p internal --ifd -i bios -w [path/to/your/coreboot.rom]\n</code></pre> <p>If <code>flashrom</code> outputs the following, you do not need to worry about it:</p> <pre><code>Enabling flash write... Warning: Setting BIOS Control at 0xdc from 0x8b to 0x89 failed.\nNew value is 0x8b.\nSPI Configuration is locked down\n</code></pre>"},{"location":"dasharo-tools-suite/documentation/features/#update-issues","title":"Update issues","text":"<p>If you see the following pop-ups during the first boot after the update:</p> <p> </p> <p>You probably performed an update using a deprecated version of Dasharo Tools Suite and have not disabled BIOS lock. Do not worry, nothing bad has happened. If you backed up your old firmware, do the following steps:</p> <ol> <li>Reboot your device and turn off BIOS lock (you can find this option in Dasharo Security Options as <code>BIOS boot medium lock</code>).</li> <li>Boot the DTS you backed up your old firmware with and choose option 3, which will restore it.</li> <li>After restoring the firmware, perform another update, but make sure you are using the latest Dasharo Tools Suite version (new DTS has tools to protect you from such issues).</li> </ol> <p>If you used <code>flashrom</code> as described in Local firmware update, flash the firmware again, but make sure the BIOS lock is turned off this time.</p>"},{"location":"dasharo-tools-suite/documentation/features/#ec-transition","title":"EC transition","text":"<p>DTS allows performing full Embedded Controller firmware transition from the proprietary vendor EC firmware to the Dasharo EC firmware. Currently, this functionality is supported on this hardware</p> <p>Starting from DTS v1.2.0 to perform EC transition please run firmware update on the platform with proprietary vendor EC firmware.</p>"},{"location":"dasharo-tools-suite/documentation/features/#ec-update","title":"EC update","text":"<p>Note</p> <p>This section only applies to NovaCustom releases earlier than v2.0.0 and is replaced by the new automatic EC firmware sync feature.</p> <p>DTS allows to update open-source Embedded Controller firmware to the newer version. This is how we can achieve that.</p> <ul> <li> <p>Retrieve information about your current EC.</p> <pre><code>dasharo_ectool info\n</code></pre> <p>The output of the above-described command should contain information about the version of flashed firmware:</p> <pre><code>board: clevo/ns50mu\nversion: 2022-08-16_c12ff1a\n</code></pre> </li> <li> <p>Download the newest version of Embedded Controller firmware.</p> </li> <li>Plug in power supply, without it, flashing EC is not possible as losing power   may cause in damaged firmware.</li> <li> <p>Flash Embedded Controller firmware internally.</p> <pre><code>dasharo_ectool flash ec_file.rom\n</code></pre> <p>The output of the above-described command should look as follows:</p> <pre><code>file board: Ok(\"clevo/ns50mu\")\nfile version: Ok(\"2022-08-16_c12ff1a\")\nec board: Ok(\"clevo/ns50mu\")\nec version: Ok(\"2022-08-31_cbff21b\")\nWaiting 5 seconds for all keys to be released\nSync\nSPI Read 128K\nSaving ROM to backup.rom\nSPI Write 128K\nSPI Read 128K\nSuccessfully programmed SPI ROM\nResult: Ok(())\nSync\nSystem will shut off in 5 seconds\nSync\n</code></pre> </li> </ul> <p>Note: this is example output, versions may differ</p> <ul> <li>Computer will shut down automatically.</li> <li>Power on your computer. Booting process may take a while.</li> <li>After boot, choose option <code>S</code> to drop to Shell.</li> <li> <p>Retrieve information about your updated EC.</p> <pre><code>dasharo_ectool info\n</code></pre> <p>The output of the above-described command should contain information about the version of flashed firmware:</p> <pre><code>board: clevo/ns50mu\nversion: 2022-08-31_cbff21b\n</code></pre> </li> </ul>"},{"location":"dasharo-tools-suite/documentation/features/#additional-features","title":"Additional features","text":"<p>The section below presents a list of functionalities added to DTS, which were developed at the community's request and which do not necessarily relate strictly to Dasharo.</p>"},{"location":"dasharo-tools-suite/documentation/features/#run-commands-from-ipxe-shell-automatically","title":"Run commands from iPXE shell automatically","text":"<p>It is possible to automatically execute your chosen commands after iPXE boot. You can use the local-ipxe-server.sh script for that. What it does is:</p> <ul> <li>automatically download the latest version of DTS artifacts needed for iPXE   boot,</li> <li>creates a <code>dts.ipxe</code> bootchain file, which will boot DTS and also run your   custom script,</li> <li>creates a simple, python-based HTTP server, from which you will be able to   boot DTS.</li> </ul> <p>Note: This functionality is available from version 1.2.19.</p> <p>To use this functionality, please follow the steps presented below.</p> <p>Firstly, please clone meta-dts repository.</p> <pre><code>git clone https://github.com/Dasharo/meta-dts.git &amp;&amp; cd meta-dts\n</code></pre> <p>Then, start the script with the following command.</p> <pre><code>./scripts/local-ipxe-server.sh\n</code></pre> <p>Once you run the script, you will be prompted for the port of the server, like this.</p> <pre><code>--------------------------------------------------------------------------------\nThis script by default sets the server up on port 9000. If you want to use a\ndifferent port, for example 9001, then run the script like this:\n    ./meta-dts/scripts/ipxe-dts.sh 9001\nDo you want to continue? [y/n]\n</code></pre> <p>If you proceed, at the end the script will tell you how you can boot DTS through iPXE.</p> <pre><code>--------------------------------------------------------------------------------\nyou can now boot dts v1.2.18 through iPXE on another machine by running:\n    dhcp\n    chain http://192.168.4.158:9000/dts.ipxe\non that machine in the iPXE shell. It will also execute a simple \"commands.sh\"\nscript after booting. If you want to change its contents, just change the\n\"scripts/commands.sh\" file, and rerun this script.\n\nThis script by default sets the server up on port 9000. If you want to use a\ndifferent port, for example 9001, then run the script like this:\n    ./meta-dts/scripts/ipxe-dts.sh 9001\n--------------------------------------------------------------------------------\nServing HTTP on 0.0.0.0 port 9000 (http://0.0.0.0:9000/) ...\n</code></pre>"},{"location":"dasharo-tools-suite/documentation/features/#run-dts-using-ventoyos","title":"Run DTS using VentoyOS","text":"<p>VentoyOS allows operating systems to be booted from ISO files. Unfortunately, the ISO-formatted DTS image we've provided so far mounted the main file system in read-only mode, which, combined with the fact that most of DTS' functionality is strictly tied to the ability to write files there, made the system unusable. Consequently, we have stopped including ISO images in DTS releases since v1.2.20, pending the resolution of this issue. We will reintroduce them once we determine the appropriate action to address this dependency. Progress on this matter is being monitored through issue 288.</p>"},{"location":"dasharo-tools-suite/documentation/running/","title":"Running","text":"<p>The Dasharo Tools Suite can be started in various ways. Currently, there are two options:</p> <ul> <li>bootable over a network (iPXE),</li> <li>bootable USB stick image.</li> </ul> <p>The first one should always be preferred if possible, as it is the easiest one to use.</p>"},{"location":"dasharo-tools-suite/documentation/running/#bootable-over-a-network","title":"Bootable over a network","text":"<p>This section describes how to boot DTS using iPXE.</p>"},{"location":"dasharo-tools-suite/documentation/running/#requirements","title":"Requirements","text":"<p>Below are the requirements that must be met to run DTS over a network on the platform:</p> <ul> <li>Dasharo device with DTS functionality integrated,</li> <li>wired network connection,</li> <li>Secure Boot disabled,</li> <li>If device if flashed with Dasharo and support following functionality<ul> <li>disabled BIOS lock feature,</li> <li>disabled SMM BIOS write protection feature.</li> </ul> </li> </ul>"},{"location":"dasharo-tools-suite/documentation/running/#launching-dts","title":"Launching DTS","text":"<p>To access Dasharo Tools Suite:</p> <ul> <li>attach a wired network cable to the device's Ethernet port,</li> <li>power on the device, holding down the Boot Menu entry key,</li> <li>in the Boot Menu, select the <code>iPXE Network Boot</code> option,</li> <li> <p>in the Network Boot menu, select the <code>Dasharo Tools Suite</code> option, or enter   iPXE shell and type by hand:</p> <pre><code>dhcp net0\nchain https://boot.dasharo.com/dts/dts.ipxe\n</code></pre> <p>Warning</p> <p>Because of misconfigured iPXE on some firmware releases, booting over HTTPS is impossible, and the above command will fail. In that case, we recommend downloading the DTS image to USB. If you feel there is no risk of an MITM attack, you can proceed with <code>http://boot.dasharo.com/dts/dts.ipxe</code> at your own risk.</p> </li> <li> <p>the DTS menu will now appear.</p> </li> </ul>"},{"location":"dasharo-tools-suite/documentation/running/#launching-dts-nightly-builds","title":"Launching DTS nightly builds","text":"<p>Warning</p> <p>Nightly builds are for developers and for those who want to use the latest DTS without waiting for release. Hence, nightly builds are not tested and should be launched at your own risk!</p> <p>The DTS nightly builds are updated automatically every Saturday. The builds use the latest commit from the <code>meta-dts</code> repository <code>develop</code> branch and the <code>dts-scripts</code> repository <code>main</code> branch. The used commits could be checked in <code>nightly.ipxe</code> file.</p> <p>To access Dasharo Tools Suite nightly build, use the following commands in the iPXE shell, instead of the commands described in the chapter above:</p> <pre><code>dhcp\nchain https://boot.dasharo.com/dts/nightly.ipxe\n</code></pre> <p>Warning</p> <p>On some firmware releases, booting over HTTPS is not possible because of misconfigured iPXE, and the above command will fail. In that case, we recommend downloading the DTS image to USB. If you feel there is no risk of an MITM attack, you can proceed with <code>http://boot.dasharo.com/dts/nightly.ipxe</code> at your own risk.</p>"},{"location":"dasharo-tools-suite/documentation/running/#bootable-usb-stick","title":"Bootable USB stick","text":"<p>This section describes how to boot DTS using a USB stick.</p>"},{"location":"dasharo-tools-suite/documentation/running/#requirements_1","title":"Requirements","text":"<p>Below are the requirements that must be met to run DTS from a USB device on the platform:</p> <ul> <li>USB stick (at least 2GB),</li> <li>Latest image from releases   section.</li> <li>Wired network connection,</li> <li>Secure Boot disabled,</li> <li>If device if flashed with Dasharo and support following functionality<ul> <li>disabled BIOS lock feature,</li> <li>disabled SMM BIOS write protection feature.</li> </ul> </li> </ul>"},{"location":"dasharo-tools-suite/documentation/running/#launching-dts_1","title":"Launching DTS","text":"<p>To access Dasharo Tools Suite:</p> <ul> <li>flash the downloaded image onto USB stick,<ul> <li>you can use a cross-platform GUI installer - Etcher</li> <li>you can also use <code>dd</code> to flash from the command line</li> </ul> </li> </ul> <pre><code>gzip -cdk dts-base-image-v1.1.0.wic.gz | \\\nsudo dd of=/dev/sdX bs=16M status=progress conv=fdatasync\n</code></pre> <p>Notes</p> <ul> <li>this is an example done on the v1.1.0 image.</li> <li>replace \"sdX\" with the letter of your USB disk device. For example: sda,   sdb, sdc. It should not be partition number (for example, not sda1   or sda2).</li> </ul> <ul> <li>insert the USB stick into a USB in your device,</li> <li>boot from the USB stick,</li> <li>the DTS menu will now appear.</li> </ul>"},{"location":"dasharo-tools-suite/documentation/supported-hardware/","title":"Supported hardware","text":"<p>Dasharo Tools Suite was prepared to run on x86 platforms, but we can confirm that it boots on the following platforms:</p> <ul> <li>Dell OptiPlex 7010/9010,</li> <li>MSI PRO Z690-A DDR4,</li> <li>MSI PRO Z690-A DDR5,</li> <li>MSI PRO Z790-P DDR4,</li> <li>MSI PRO Z790-P DDR5,</li> <li>NovaCustom NV4x</li> <li>NovaCustom NS5x/7x,</li> <li>NovaCustom V540TU/TND,</li> <li>NovaCustom V560TU/TND/TNE,</li> <li>PC Engines apu2/3/4/6.</li> <li>ODROID-H4+</li> </ul>"},{"location":"dasharo-tools-suite/documentation/supported-hardware/#supported-hardware-for-firmware-transition-to-dasharo","title":"Supported hardware for firmware transition to Dasharo","text":"<p>DTS allows performing full Embedded Controller firmware transition from the proprietary vendor EC firmware to the Dasharo EC firmware on this hardware:</p> <ul> <li>NovaCustom NS5x/NS7x</li> <li>NovaCustom NV4x</li> <li>NovaCustom V540TU</li> <li>NovaCustom V540TNx</li> <li>NovaCustom V560TU</li> <li>NovaCustom V560TNx</li> </ul>"},{"location":"dev-proc/documentation-guidelines/","title":"Documentation guidelines","text":"<p>That document can be treated as an onboarding into creating and maintaining documentation in projects developed by Dasharo Team. It is a set of general rules and tips that you should have in mind while writing guides to any projects in Dasharo repositories.</p>"},{"location":"dev-proc/documentation-guidelines/#table-of-content","title":"Table of content","text":"<ul> <li>General rules</li> <li>Document type</li> <li>Useful tools</li> <li>Formatting</li> <li>Diagrams</li> </ul>"},{"location":"dev-proc/documentation-guidelines/#general-rules","title":"General rules","text":"<ul> <li>Make a plan - before starting a new document, you should know how it will look. It is good to prepare a table of content first, and then fill up planned chapters.</li> <li>Read twice before publish - everyone make mistakes. Before committing your changes, it is good to read this again and make sure that you do not make any typos, a dump of commands output is correct, or there are no other mistakes.</li> <li>Goal of document - Documentation is not written for everyone. Some documents contain only a list of commands with minor descriptions, some of them were created to describe research results, and others may be written for non-technical persons with a huge amount of data that are obvious and unnecessary to read by developers. Because of that, you should always know for who you are writing that document - it may be developers, testers, or non-technical management.</li> <li>Hierarchy of information - most important information should always be on top of the document. We should start with the title, short description, and table of contexts. The rest of the chapters should start with the most important one.</li> <li>30/90 rule - It is good to ask your reporter or someone else to do a quick review where approx 30% of the work was done. At this moment, you probably have prepared the initial draft of the document with a table of content and some remarks about content in planned chapters. The second review should be done when 90%  of the work is finished, and the document is almost done. With that workflow, you can make sure that you are on the same page with a reporter.</li> <li>Existing resources - We should not duplicate content that was previously described in another document. Some steps or explanations are related to a few documents, and it is not necessary to write the same again. It is good to use references to existing documents (like hyperlinks) - because of that, updating and maintenance of documentation are easier because the change in one document is related to several others. Also, if you see that a related document is outdated, it will be a much better choice to review and update them instead of writing another new one from scratch.</li> <li>Maintenance - documentation may be outdated after a few changes. We should keep that in mind and prepare an updated schedule. One of the ideas is to mark related documents in every pull request with technical changes. Of course, the best solution is to improve documentation with every change in code/architecture, but it is not always possible due to deadlines or lack of time. Marking documents to update in the future allows us to do that on better occasions - and we prevent situations where the reader must inform us that the documentation is highly outdated - or even useless.</li> <li>Archive - Projects are changing, and some topics from the past are not existing now. If the document describes the working of a non-existing mechanism, we should move it to the special folder with archived content. We can go back to that solution in the future, but it must be moved out to as not to mislead the reader.</li> </ul>"},{"location":"dev-proc/documentation-guidelines/#document-type","title":"Document type","text":"<p>Good documentation should be written in one of four modes. It can be a tutorial, how-to guide, technical reference, or explanation. These modes were proposed by Diataxis framework, and we want to follow that method in the future. Generally:</p> <ul> <li>Tutorials are learning-oriented, and their purpose is to take the reader by the hand through a series of steps to complete a project of some kind. It may be a getting started guide, end2end process, or preparing the working environment.</li> <li>How-to-guides should be written as a step list that is required to solve the problem. They are goal-oriented, which is the main difference between tutorials: how-to guides lead to solving some problems and are not focused on the learning experience. For example, building system images or modifying boot parameters.</li> <li>Reference guides are technical descriptions, and it is information-oriented. It is only information about some technical thing without an explanation of it in the larger context. A good example of that is a requirement list, description of functions or variables used in the program, or list of supported platforms.</li> <li>Explanation is a discussion focused on the understanding of some topic, like boot flow, description of specific communication protocol, or device provisioning. That document should explain the subject, not instruct how to do something.</li> </ul> <p>We should not create documents that are not related to these modes.</p>"},{"location":"dev-proc/documentation-guidelines/#useful-tools","title":"Useful tools","text":"<ul> <li>grammarly.com - online writing assistant who can improve your grammar and make the document clear. A premium account is a very useful option, but it is not a must. Core functionalities are available for free. It is highly recommended to use the Grammarly tool before committing changes.</li> <li>hemingwayapp.com - make your writing clear. Sometimes it catches things that are not detected by Grammarly.</li> <li>draw.io - we use that to prepare diagrams.</li> <li>paste.dasharo.com - pastebin alternative hosted by Dasharo.</li> <li>asciinema.org - free and open-source solution for   recording terminal sessions. Sometimes - especially in more complex cases, it is   good to present command sequences in this way.</li> </ul>"},{"location":"dev-proc/documentation-guidelines/#ai-usage","title":"AI usage","text":"<p>Please read this article to understand generally accepted usage models of AI during writing. TL;DR Yes, you can, but for error, logic, and grammar improvements, not for text generation. Whatever text AI generates for you should be carefully reviewed by you. Delivering BLIP (Bot Low Integrity Prose) disrespects readers who invest time and energy in understanding what was written.</p> <p>In extreme situations, such practice may lead to DDoS of organization members, which is essentially an open attack that cannot stay without response.</p>"},{"location":"dev-proc/documentation-guidelines/#formatting","title":"Formatting","text":"<p>General rules of formatting documents:</p> <ul> <li>Use markdown preview to verify that document is rendering correctly. That feature is available in VS code, Github/Gitlab web IDE, and other tools.</li> <li>Line with code should not have more than 80 characters. To follow that rule, it is good to set the line at width 80 in your IDE. Here is how to do it in VS code.</li> </ul> <p>We also maintain the repository Dasharo/dev-tools-configs with editors configs used by our community. Feel free to create PR with your configuration - you can give your proposition to improve existing settings or create configs for editors that don't exist yet in our repository. A properly configured editor simplifies correct formatting.</p>"},{"location":"dev-proc/documentation-guidelines/#diagrams","title":"Diagrams","text":"<p>We use PlantUML for creating diagrams. To install PlantUML, run the following command in your terminal:</p> <pre><code>sudo dnf install plantuml\n</code></pre> <p>Now, install the PlantUML plugin in Visual Studio Code. You can do this in VS Code by pressing <code>Ctrl</code> + <code>p</code> and type in <code>ext install plantuml</code>.</p> <p>Create new files in the <code>/uml</code> folder of the docs repository. Remember to commit them along with other files when making changes.</p> <p>To show a preview of a <code>.uml</code> file, open it in the editor and press <code>Alt</code> + <code>D</code> to open a preview to the side. The preview will be automatically updated when you save the <code>.uml</code> file.</p> <p>To export a diagram to a <code>.png</code> file, when you're done making changes, press <code>Ctrl</code> + <code>Shift</code> + <code>P</code> and type in <code>plantuml export current diagram</code>. As you type, the option to export will be autocompleted for you. Press Enter and select <code>png</code> - or any other file format you may need. Exported files are saved to <code>out/</code> directory.</p> <p>For more information on the UML language and PlantUML, see the following links:</p> <ul> <li>https://holub.com/uml/</li> <li>https://modeling-languages.com/best-uml-cheatsheets-and-reference-guides/</li> <li>https://plantuml.com/</li> <li>https://open-vsx.org/extension/jebbs/plantuml</li> </ul>"},{"location":"dev-proc/feature-bug-fix-dev-process/","title":"Features and bug fixes development","text":"<p>We are in favor of Test Driven Bug Fixing methodology for which process looks as follows:</p> <ol> <li>Create automated test that validates feature or reproduces bug - test fails at    this point</li> <li>Pull upstream <code>master</code> branch to Dasharo forked repository <code>master</code> branch</li> <li>Merge <code>master</code> to <code>&lt;platform&gt;/develop</code></li> <li>Create new branch <code>&lt;platform&gt;/&lt;feature&gt;</code> from <code>&lt;platform&gt;/develop</code></li> <li>Commit changes to <code>&lt;platform&gt;/&lt;feature&gt;</code></li> <li>Run test written in point 1 and make sure it pass.</li> <li>Run <code>&lt;platform&gt;</code> regression test suite and make sure new feature does not    introduce new bugs.</li> <li>Submit PR to <code>&lt;platform&gt;/develop</code></li> </ol>"},{"location":"dev-proc/fwupd/","title":"fwupd and LVFS","text":""},{"location":"dev-proc/fwupd/#introduction","title":"Introduction","text":"<p>This document describes the process for generating fwupd cabinet files, uploading them to LVFS, and serving them to end-users.</p>"},{"location":"dev-proc/fwupd/#prerequisites","title":"Prerequisites","text":"<p>fwupd integration depends on the capsule update protocol being implemented for the platform. Please make sure capsule update is enabled and functional on the platform before proceeding with fwupd integration.</p>"},{"location":"dev-proc/fwupd/#building-a-cabinet","title":"Building a cabinet","text":"<p>fwupd uses cabinet archives (.cab files) for storing firmware and its metadata. A cabinet contains, at minimum:</p> <ul> <li>The firmware binary (in our case, this will be the capsule update file)</li> <li>A small XML file with metadata (including the update protocol and GUID of the   device)</li> </ul> <p>For coreboot, a helper script to automate cabinet generation is provided in the coreboot repo's root directory.</p> <p>First, start by building the capsule file:</p> <pre><code>./capsule.sh make -t keys/TestRoot.pub.pem \\\n                  -o keys/TestSub.pub.pem \\\n                  -s keys/TestCert.pem -b\nOverwrite already existing 'novacustom-mtl-h-v1.0.0-rc2.cap'? [y/N] y\nCreated the capsule at 'novacustom-mtl-h-v1.0.0-rc2.cap'\n</code></pre> <p>Now prepare the cabinet:</p> <pre><code>./capsule_cabinet.sh novacustom-mtl-h-v1.0.0-rc2.cap\nFile novacustom-mtl-h-v1.0.0-rc2.cap.cab created\n</code></pre>"},{"location":"dev-proc/fwupd/#local-testing","title":"Local testing","text":"<p>Use fwupdmgr to locally test the cabinet:</p> <pre><code>sudo fwupdmgr install novacustom-mtl-h-v1.0.0-rc2.cap.cab --allow-reinstall\n[sudo] password for ubuntu:\nWaiting\u2026                 [***************************************]\nSuccessfully installed firmware\nAn update requires a reboot to complete. Restart now? [y|N]:\n</code></pre> <p>Press <code>y</code> to restart and check if the update proceeds without errors.</p>"},{"location":"dev-proc/fwupd/#uploading-to-lvfs","title":"Uploading to LVFS","text":"<p>Follow upstream fwupd documentation for a detailed guide for uploading cabinets to LVFS.</p>"},{"location":"dev-proc/hcl-maintainer/","title":"Dasharo HCL Maintainer documentation","text":"<p>This documentaintion aims to describe how to maintain Dasharo Hardware Compatibility List for CPUs, memory, mainboards and GPU.</p>"},{"location":"dev-proc/hcl-maintainer/#generating-entry","title":"Generating entry","text":""},{"location":"dev-proc/hcl-maintainer/#dasharo-hcl-report-parsing","title":"Dasharo HCL report parsing","text":"<p>Use dts-hw-conf-gen tool for automatic HCL report parsing.</p> <p>Reports can be sourced from: - 3mdeb Cloud - DPP download page</p>"},{"location":"dev-proc/hcl-maintainer/#extending-list","title":"Extending list","text":"<p>The list can be updated via manual or automatic means.</p> <p>The HCL tables are located in the Dasharo docs repository, and which can be updated via creating a pull request.</p> <p>Follow README.md for more details.</p>"},{"location":"dev-proc/hcl-maintainer/#automatic-table-extension","title":"Automatic table extension","text":"<p>Automatic table extension is currently supported for <code>memory</code> reports only. The script would insert new, unique lines and automatically sort the table.</p> <p>This feature is available from v1.0.0 of dts-hw-conf-gen.</p>"},{"location":"dev-proc/hcl-maintainer/#github-report","title":"Github report","text":""},{"location":"dev-proc/hcl-maintainer/#github-pull-request","title":"Github pull request","text":"<p>Go through standard review process for Dasharo documentation.</p>"},{"location":"dev-proc/screenshots/","title":"Taking screenshots in firmware","text":""},{"location":"dev-proc/screenshots/#introduction","title":"Introduction","text":"<p>Dasharo EDKII fork comes with the functionality of taking screenshots. This is useful for creating guides, how-tos and tests. This document is meant to show the best practices for taking screenshots.</p>"},{"location":"dev-proc/screenshots/#resolution","title":"Resolution","text":"<p>When taking screenshots, remember to set the display mode to 80x25. This makes the pictures easier to read when embedded into documentation. Notice how this:</p> <p></p> <p>is easier to read than this:</p> <p></p> <p>To set the mode in UEFI:</p> <ul> <li>Enter the UEFI Setup Menu</li> <li>Select <code>One Time Boot</code></li> <li>Select <code>UEFI Shell</code></li> <li>Type in <code>mode 80 25</code> and press Enter to switch mode</li> <li>Type in <code>exit</code> to go back to setup menu</li> </ul> <p>You can browse the setup menu to take your screenshots now.</p>"},{"location":"dev-proc/screenshots/#taking-screenshots","title":"Taking screenshots","text":"<p>The key combination for taking screenshots is <code>LCtrl</code> + <code>LAlt</code> + <code>F12</code>. When taking screenshots, you'll notice a colored status indicator in the top left corner of the screen. The colors indicate:</p> <ul> <li>Yellow - no writable FS found, screenshot is not taken</li> <li>Blue - current GOP is pitch black, screenshot is not taken</li> <li>Red - something went wrong, screenshot is not taken</li> <li>Green - screenshot taken and saved to PNG file</li> </ul> <p>PNG files are saved to the first writable partition, which will in most cases be the EFI System Partition. You can mount the ESP in Dasharo Tools Suite, e.g.:</p> <pre><code># mount /dev/nvme0n1p1 /mnt\n</code></pre> <p>and then copy the files from there, or just <code>scp</code> them to your workstation.</p>"},{"location":"dev-proc/screenshots/#pikvm","title":"PiKVM","text":"<p>If a platform has PiKVM connected and configured, you can use it to take screenshots instead. This makes it easier to save taken screenshots to your workstation.</p> <p>To take a screenshot in PiKVM, simply click on the <code>System</code> menu in the top-right corner of the page and click on <code>Screenshot</code>:</p> <p></p> <p>This will open the screenshot in a new tab. From there you can <code>right-click</code> -&gt; <code>Save image as...</code>, or simply press <code>Ctrl</code> + <code>S</code> to save the image.</p>"},{"location":"dev-proc/screenshots/#cropping","title":"Cropping","text":"<p>If you changed the mode prior to taking the screenshot, you'll notice that the screenshot captured the entire framebuffer with the small content screen centered in the middle. You'll need to crop them to size for usage in docs. You can do this using GIMP's <code>Crop to Content</code> feature.</p>"},{"location":"dev-proc/smbios-rules/","title":"Dasharo Product Guidelines: SMBIOS Information","text":""},{"location":"dev-proc/smbios-rules/#introduction","title":"Introduction","text":"<p>This document describes the guidelines for filling in the SMBIOS fields in devices supported by Dasharo. It is meant to be used primarily as a reference for Dasharo developers.</p>"},{"location":"dev-proc/smbios-rules/#bios-information-type-0","title":"BIOS Information (Type 0)","text":""},{"location":"dev-proc/smbios-rules/#vendor-field","title":"Vendor field","text":"<p>The Vendor field, for firmware with release date after 13 January 2022, is set as follows:</p> <pre><code>3mdeb\n</code></pre> <p>For firmware with release date before 13 January 2022:</p> <pre><code>3mdeb Embedded Systems Consulting\n</code></pre>"},{"location":"dev-proc/smbios-rules/#bios-version-field","title":"BIOS Version field","text":"<p>The BIOS Version string is defined as follows:</p> <pre><code>Dasharo ([major_framework]+[minor_framework]) v[version]\n</code></pre> <ul> <li><code>major_framework</code> refers to the primary framework in which the firmware is   developed, e.g. <code>coreboot</code> or <code>UEFI</code>.</li> <li><code>minor_framework</code> is the secondary framework, a supporting component for the   primary framework, e.g. a coreboot payload. May not always be used, e.g. if   <code>edk2</code> is used as the primary framework.</li> <li><code>version</code> means version according to official   Dasharo Versioning documentation.</li> </ul> <p>For TianoCore UEFIPayloadPkg, we use the simpler and more recognizable UEFI name.</p> <p>Examples:</p> <ul> <li><code>Dasharo (coreboot+UEFI) v1.0.0</code> - for coreboot-based builds with TianoCore UEFIPayload</li> <li><code>Dasharo (coreboot+SeaBIOS) v1.0.0</code> - for coreboot-based builds with SeaBIOS payload</li> <li><code>Dasharo (coreboot+Heads) v1.0.0</code> - for coreboot-based builds with Heads payload</li> <li><code>Dasharo (UEFI) v1.0.0</code> - for plain edk2-based builds</li> </ul>"},{"location":"dev-proc/smbios-rules/#system-information-type-1","title":"System Information (Type 1)","text":""},{"location":"dev-proc/smbios-rules/#devices-with-an-existing-bios-implementation","title":"Devices with an existing BIOS implementation","text":"<p>In this case, set all the fields that are relevant (excluding BIOS version and vendor) to the same values as the stock firmware.</p> <p>To obtain SMBIOS values from the stock firmware, either:</p> <ul> <li>Obtain the <code>fwdump-docker</code> logs from 3mdeb cloud</li> <li>Run <code>dmidecode -t 1</code> on the machine itself</li> </ul>"},{"location":"dev-proc/smbios-rules/#devices-with-no-existing-bios-implementation","title":"Devices with no existing BIOS implementation","text":"<p>In the case where the device does not have an existing supported BIOS or the client chooses to use different SMBIOS fields (e.g. to make it easier to differentiate devices), refer to the SMBIOS specification v3.5.0.</p>"},{"location":"dev-proc/source-code-structure/","title":"Source code structure","text":"<p>Every repository forked and maintained by Dasharo Release Team has following branch structure:</p> <ul> <li><code>master</code> or <code>main</code> - follows upstream project master or main branch</li> <li><code>dasharo</code> - contains all code releases for supported platforms, the list of    supported platforms is in   Hardware Compatibility List   section</li> <li><code>&lt;platform&gt;/rel_vX.Y.Z</code> - release branch for version X.Y.Z</li> <li><code>&lt;feature&gt;</code> - tracks development of feature</li> </ul> <p><code>&lt;platform&gt; = &lt;coreboot_mainboard_vendor&gt;_&lt;coreboot_mainboard_model&gt;</code> if platform is supported by coreboot, otherwise we use common sense and available information about hardware.</p>"},{"location":"dev-proc/source-code-structure/#remotes","title":"Remotes","text":"<p><code>Dasharo/coreboot</code> has submodules linked using absolute paths, therefore one can clone this repository directly.</p> <p>Previous guidelines suggested cloning upstream coreboot first and adding Dasharo as a separate remote, but this is no longer used except when building old versions.</p> <p>Clone the repository and submodules using the following commands:</p> <pre><code>git clone git@github.com:Dasharo/coreboot.git\ncd coreboot\ngit submodule update --init --checkout\ngit remote add upstream https://review.coreboot.org/coreboot.git\n</code></pre>"},{"location":"dev-proc/source-code-structure/#commit-message-guidelines","title":"Commit message guidelines","text":""},{"location":"dev-proc/source-code-structure/#commit-quality","title":"Commit quality","text":"<p>We keep patches for many repositories, but mainly for coreboot and edk2. Even when creating commits in our forks, we should follow the guidelines of the respective upstream projects, so the future upstream process is easier.</p> <p>In general, we want ensure that commits getting merged are of a similar quality as required by upstream projects (guidelines for coreboot).</p> <p>We want to stress specifically on the following aspects: * each commit can be built, * each commit has body message, providing more context, and explaining why the given change was necessary, * before merging a PR, we squash the changes if necessary, to achieve a similar granularity as if we would be sending the patch for upstream review.</p>"},{"location":"dev-proc/source-code-structure/#upstream-status","title":"Upstream-Status","text":"<p>This is an extra tag in git commit body inspired by how patches are maintained in the Yocto Project.</p> <p>The goal is to keep track of which patches should (eventually) be upstreamed, and which patches are Dasharo-specific.</p> <p>Currently, following <code>Upstream-Status</code> tags are available to choose from:</p> <p><code>Backport [revision]</code></p> <p>Patch has been backported from upstream. We should provide unique identification of the original source of the patch. Possible values for <code>revision</code>:</p> <ul> <li><code>CB:ID</code> - for coreboot gerrit ID, such as <code>CB:86758</code>, translating to: CB:86750</li> <li>git revision of the upstream project</li> <li>link to the mailing message, where the path has been submitted</li> </ul> <p><code>Inappropriate [reason]</code></p> <p>We believe that patch is not applicable for the upstream project, and provide some reasining for it. Possible values for <code>reason</code>:</p> <ul> <li><code>Dasharo downstream</code> - patch specific to Dasharo distribution</li> <li>other explanation - although we should try to avoid it</li> </ul> <p><code>Pending</code></p> <p>Patch classified as one for sending upstream, but not yet submitted.</p> <p><code>Submitted [where]</code></p> <p>Submitted to upstream. Possible value for <code>where</code>:</p> <ul> <li><code>CB:ID</code> - for coreboot gerrit ID, such as <code>CB:86750</code>, translating to: CB:86750</li> <li>for other cases, link to the review system should be provided</li> </ul>"},{"location":"dev-proc/source-code-structure/#tags","title":"Tags","text":"<p>Tags for Dasharo releases across repositories in the Dasharo GitHub organization use the following format: <code>&lt;platform&gt;_vX.Y.Z</code>.</p> <p><code>&lt;platform&gt; = &lt;coreboot_mainboard_vendor&gt;_&lt;coreboot_mainboard_model&gt;</code> if platform is supported by coreboot, otherwise we use common sense and available information about hardware.</p>"},{"location":"dev-proc/source-code-structure/#new-platform-support","title":"New platform support","text":"<p>Support for new platforms is submitted via PRs to the <code>dasharo</code> branch. All mainboards supported by Dasharo live in this branch.</p>"},{"location":"dev-proc/source-code-structure/#force-pushes-rules","title":"Force-pushes rules","text":"<p>Force-pushes to <code>dasharo</code> and <code>master</code> / <code>main</code> are forbidden with the exception of rebasing the <code>dasharo</code> branch on new coreboot versions.</p>"},{"location":"dev-proc/source-code-structure/#rebase-process","title":"Rebase process","text":"<ol> <li> <p>Update <code>master</code> / <code>main</code> branch to the recent coreboot upstream tag    (and fetch tags as well)</p> <pre><code>git checkout main\ngit fetch upstream\ngit pull upstream `git describe --tags upstream/main --abbrev=0`\n</code></pre> </li> <li> <p>Backup the old <code>dasharo</code> branch, for example:</p> <pre><code>git checkout dasharo\ngit checkout -b dasharo-4.21\ngit push -u origin dasharo-4.21\n</code></pre> </li> <li> <p>Rebase the current <code>dasharo</code> branch on the latest tag, for example:</p> <pre><code>git checkout -b dasharo-4.22\ngit rebase 4.22\n</code></pre> </li> <li> <p>Resolve conflicts, build issues and run tests.</p> </li> <li> <p>When issues are resolved and testing is completed, rename the branch to     <code>dasharo</code>:</p> <pre><code>git branch -d dasharo\ngit branch -M dasharo\n</code></pre> </li> <li> <p>Push the new <code>dasharo</code> branch:</p> <p>Info</p> <p>Only repository admin can force-push to protected branches. Contact your TL to finish this step.</p> <pre><code>git push -f origin dasharo\n</code></pre> </li> </ol>"},{"location":"dev-proc/source-code-structure/#merging-guidelines","title":"Merging guidelines","text":"<p>We want to keep the history linear. The <code>rebase</code> merging strategy is desired. Merge commits in the code repositories are not allowed. The <code>rebase</code> strategy should be the only one available in the GitHub web UI.</p> <p>Keeping the git history linear makes it easier to bisect issues and rebase commits.</p> <p>It is, however, strongly advised not to use GitHub web UI to perform code merges. The <code>signed-off</code> tends to be dropped (even when using the <code>rebase</code> strategy), which is problematic for some projects (e.g. it makes the coreboot lint checks fail after merging from the UI).</p> <p>The procedure of merging is as follows:</p> <ol> <li>Review the code in GitHub.</li> <li>Make sure to receive at least one <code>Approve</code> in the review process.</li> <li>Make sure that all change requests are resolved.</li> <li> <p>Merge the branch using git CLI. In case of merging the <code>feature</code> branch into    <code>dasharo</code> branch it may look as follows:</p> <pre><code>git fetch dasharo\ngit checkout origin/dasharo -b dasharo\ngit merge --ff-only origin/&lt;feature&gt;\ngit push origin dasharo\n</code></pre> </li> <li> <p>This should automatically trigger closing the MR and deleting the merged    branch on GitHub.</p> </li> <li> <p>Note that the merging may fail if the source (in this case: <code>feature</code>) branch    is not properly rebased on top of the target (in this case: <code>dasharo</code>)    branch. In such a case, one must rebase the source branch first:</p> <pre><code>git checkout origin/&lt;feature&gt;\ngit checkout -b &lt;feature&gt;\ngit rebase origin/dasharo\ngit push -f origin &lt;feature&gt;\n</code></pre> </li> </ol> <p>Remember to push the rebased branch before merging it to <code>dasharo</code>. Otherwise GitHub will not properly detect the merge and won't close the PR and delete the source branch. You should also wait for CI to pass without errors before merging, in rare cases where a rebase breaks something.</p>"},{"location":"dev-proc/source-code-structure/#hotfixes","title":"Hotfixes","text":"<p>For fixes for important issues discovered after release, create a new branch from the release tag, called <code>&lt;platform&gt;/rel_vx_y_z</code>, where the version number matches the release version. Commit fixes into this branch and when finished, bump the <code>z</code> (patch version) component of the version number.</p> <p>Fixes from this branch should be merged later back into <code>dasharo</code>. Branching from the previous release tag helps avoid introducing breaking changes that may have been merged to <code>dasharo</code> in the time after the affected release has been published.</p>"},{"location":"dev-proc/standard-release-process/","title":"Standard Release Process","text":"<p>Following procedure is generic description of release process of firmware for supported hardware platforms. Precise steps and any difference from standard process are described in platform specific documentation.</p> <p>The development process may differ depending on used firmware framework. Select the applicable tab for your framework below:</p>"},{"location":"dev-proc/standard-release-process/#process-steps","title":"Process steps","text":"GenericHeads <ol> <li>Checkout new branch <code>&lt;platform&gt;_rel_vX.Y.Z</code> from recent commit on <code>dasharo</code>    branch - to understand versioning scheme please read Versioning    section</li> <li>Merge current platform development branches to <code>&lt;platform&gt;_rel_vX.Y.Z</code></li> <li>(Optional) Create a release candidate by tagging <code>&lt;platform&gt;_vX.Y.Z-rcN</code></li> <li>Run platform regression test suite</li> <li>Fix all required issues and repeat from point 3 until fixed - this doesn't    mean all tests pass, this mean that approved set passed</li> <li>If results are accepted merge it to <code>dasharo</code> branch</li> <li> <p>Add tag, which should trigger CI and publish binaries. Tag should be    annotated and signed. For example:</p> <pre><code>git tag -a -s -m \"&lt;platform&gt;_vX.Y.Z\" &lt;platform&gt;_vX.Y.Z\n</code></pre> </li> </ol> <p>Heads development process is a little different and works closer to upstream repositories:</p> <ol> <li>Checkout the latest Heads upstream revision</li> <li>Create release branch for your platform <code>&lt;platform&gt;_rel_vX.Y.Z</code></li> <li> <p>Inside the <code>site-local</code> directory, create file <code>config</code> with the    following contents:</p> <pre><code>BRAND_NAME=Dasharo\n\nifeq \"novacustom-v560tu\" \"$(BOARD)\"\n\nexport CONFIG_COREBOOT_LOCALVERSION=\"\\(coreboot+heads\\) v[Enter version number here]\"\nexport CONFIG_COREBOOT_SMBIOS_PRODUCT_NAME=\"[Enter SMBIOS product name here]\"\n\nendif\n</code></pre> </li> <li> <p>Download Dasharo bootsplash from dasharo-blobs</p> </li> <li> <p>Convert Dasharo bootsplash from BMP to JPEG format:</p> <pre><code>magick bootsplash.bmp bootsplash.jpg\n</code></pre> </li> <li> <p>Copy Dasharo logo in JPEG format to <code>branding/Dasharo/bootsplash.jpg</code></p> </li> <li>Commit your changes and push to Dasharo Heads fork for review</li> </ol>"},{"location":"dev-proc/standard-release-process/#bugfixes","title":"Bugfixes","text":"<p>When developing patches, submit changes to upstream first:</p> <ol> <li>Checkout latest Heads upstream version</li> <li>Create branch for your bugfix</li> <li>Push branch to Dasharo Heads fork</li> <li>Submit PR to upstream Heads repository for review</li> <li> <p>Once merged, rebase your release branch onto the merged upstream commit:</p> <pre><code>git checkout master\ngit pull\ngit checkout &lt;platform&gt;_rel_vX.Y.Z\ngit rebase master\n</code></pre> <p>There should be no conflicts, because all changes are in <code>site-local</code> directory, which is always empty in upstream branches.</p> </li> </ol>"},{"location":"dev-proc/standard-release-process/#tagging-the-release","title":"Tagging the release","text":"<p>Once testing is complete, remove <code>-rcX</code> suffix from the version number, and then tag the release:</p> <pre><code>git tag &lt;platform&gt;_vX.Y.Z -s\ngit push origin &lt;platform&gt;_vX.Y.Z\n</code></pre> <p>You may now delete branch <code>&lt;platform&gt;_rel_vX.Y.Z</code> on GitHub. Because the release is tagged, GitHub garbage collection will not automatically delete the commit.</p>"},{"location":"dev-proc/versioning/","title":"Versioning","text":"<p>Dasharo Releases are versioned using Semantic Versioning and Keep A Changelog to document changes introduced in new releases.</p> <p>Major version zero (0.y.z) is for initial development or first release issued and may not support all Dasharo Quality Criteria.</p> <p>The only way to map Dasharo Version to version of Open Source Firmware framework or other components included in Dasharo Release is through release notes. Link to Dasharo Release Notes for your hardware platform can be found in menu on the left side (Supported Hardware-&gt;Hardware Model-&gt;Releases).</p> <p>Dasharo Releases can be divided into two categories:</p> <ul> <li>Dasharo Pro/Enterprise Package (formerly Dasharo Entry Subscription) Releases</li> <li>Dasharo Community Releases</li> </ul>"},{"location":"dev-proc/versioning/#dasharo-pro-package-releases","title":"Dasharo Pro Package Releases","text":"<p>Dasharo Pro/Enterprise Package (formerly Dasharo Entry Subscription) subscribers receive firmware updates more frequently than the community. The number of updates per year depends on the number of Dasharo Pro/Enterprise Package (formerly Dasharo Entry Subscription) sold and the availability of other funding (e.g., NLNet, corporate sponsors, community donations) but one or more per year. Dasharo Pro/Enterprise Package (formerly Dasharo Entry Subscription) Releases are characterized by a changing patch version (<code>z</code>). Fixes and features introduced in Dasharo Pro/Enterprise Package (formerly Dasharo Entry Subscription) Releases will also be available later as Dasharo Community Releases with public pre-built binaries in the respective release pages. In short, being a Dasharo Subscriber gives early access to the newest features and fixes.</p> <p>For details about the naming convention, please check here.</p> <p>How to become Dasharo Pro Package subscriber?</p>"},{"location":"dev-proc/versioning/#dasharo-community-releases","title":"Dasharo Community Releases","text":"<p>Timeline for Dasharo Community Releases is communicated in Dasharo Roadmap presentations during Dasharo User Group events. Each Dasharo Community Release has a zero patch version (<code>x.y.0</code>) and the only changing number is the minor version <code>y</code>. To be up-to-date with latest Dasharo Community Release updates, one can subscribed to free of charge mailing list for given hardware platform, for which the link can be found in menu on the left side (Supported Hardware-&gt;Hardware Model-&gt;Releases).</p>"},{"location":"dev-proc/versioning/#pc-engines-releases-and-its-exceptional-versioning-scheme","title":"PC Engines releases and its exceptional versioning scheme","text":"<p>Dasharo (coreboot+SeaBIOS) for PC Engines does not adhere to the typical versioning scheme used by Dasharo, which is semantic versioning. This is due to a couple of reasons:</p> <ul> <li>We want to convey that this series of releases is a direct continuation of   past efforts sponsored by PC Engines and published   here. By sticking to that versioning scheme, we   do not deviate from the agreed pattern and what users are accustomed to.</li> <li>We have utilized the same infrastructure, and maintaining versioning   according to the pattern used by us since 2017 has helped us minimize changes.</li> </ul> <p>The general rule for versioning pattern is as follows: <code>&lt;coreboot_rel_ver&gt;{.00.}&lt;dasharo_rel_num&gt;</code></p> <ul> <li><code>&lt;coreboot_rel_ver&gt;</code> - changed in February 2024, from x.y.z to YY.MM{.FF},   where <code>YY</code> represents the year, <code>MM</code> represents the month, and optional <code>{.FF}</code>   represents the patch number if any hotfix for the given release is created.</li> <li><code>{.00.}</code> - if no hotfix exists for the given coreboot release, we add <code>.00.</code>   to reserve space for a potential hotfix on that version.</li> <li><code>&lt;dasharo_rel_num&gt;</code> - indicates the number of versions released by the   Dasharo Team on top of the given coreboot release, starting from <code>01</code>, where   version <code>00</code> means no changes were applied on top of the coreboot release.</li> </ul>"},{"location":"dev-proc/versioning/#signing-keys","title":"Signing keys","text":"<p>In Dasharo we use following rules for keys:</p> <ul> <li>GPG RSA 4096 for signing and authentication and subkey for encryption</li> <li>There few types of naming conventions, which define <code>Real Name</code> field and   chain of trust schemes:<ul> <li>Software:<ul> <li>Real Name: <code>&lt;name&gt; open-source software release &lt;version&gt; signing key</code></li> <li>Signing key: <code>3mdeb Open Source Software Master Key &lt;contact@3mdeb.com&gt;</code></li> </ul> </li> <li>Firmware (deprecated):<ul> <li>Real Name: <code>&lt;name&gt; open-source firmware release &lt;version&gt; signing key</code></li> <li>or Real Name: <code>&lt;name&gt; Open Source Firmware Release &lt;version&gt; Signing Key</code></li> <li>Signing key: <code>3mdeb Dasharo Master Key</code></li> </ul> </li> <li>PC Engines (firmware exception):<ul> <li>Real Name: <code>PC Engines open-source firmware release &lt;version&gt; signing key</code></li> <li>Signing key: <code>3mdeb Open Source Firmware Master Key &lt;contact@3mdeb.com&gt;</code></li> </ul> </li> <li>Dasharo firmware produced by 3mdeb:<ul> <li>Real Name: <code>Dasharo release &lt;version&gt; compatible with &lt;name&gt; signing key</code></li> <li>Signing key: <code>3mdeb Dasharo Master Key</code></li> </ul> </li> <li>For Dasharo firmware produced by 3mdeb on customer's behalf:<ul> <li>Real Name: <code>Dasharo open-source firmware &lt;version&gt; for &lt;name&gt; signing key</code></li> <li>Signing key: <code>3mdeb Dasharo Master Key</code></li> </ul> </li> </ul> </li> </ul> <p><code>&lt;name&gt;</code> typically is in form <code>&lt;vendor&gt; &lt;model&gt;</code> or just <code>&lt;vendor&gt;</code> if we release firmware for whole line of products which can be support in one binary e.g. PC Engines. Examples:</p> <ul> <li><code>Dell OptiPlex 7010/9010</code></li> <li><code>ASUS KGPE-D16</code></li> <li><code>MSI MS7D25</code></li> <li><code>NovaCustom</code></li> <li><code>Tuxedo</code></li> </ul> <p>Most recent status should be reflected in 3mdeb-secpack repository.</p>"},{"location":"dev-proc/versioning/#promotion-to-production-level-versioning-v100-and-up","title":"Promotion to production-level versioning (v1.0.0 and up)","text":"<p>A release may be promoted to v1.0.0 once it meets the following criteria:</p> <ul> <li>Historical Foundation: There have been at least two releases targeting this   platform or one of its variants, targeting diverse user bases, over a span of   no fewer than five months.</li> <li>Sales Validation: Internal metrics confirm that a significant volume of   hardware devices were sold over the stated period.</li> <li>Testing Metrics: A minimum of 800 tests executed and a minimum pass rate of   98%.</li> </ul> <p>A release not meeting these criteria may only use a version number with 0 as its major component.</p>"},{"location":"ecosystem/overview/","title":"Ecosystem Overview","text":"<p>Dasharo ecosystem contain multiple components on various levels of organization. This section overview role of every component.</p> <p></p> <ul> <li>Open Source Firmware Community - semi-organised collections of contributors   to projects related to embedded firmware. Dasharo project contributors are   part of OSF community.</li> <li>Development - Dasharo Development describes processes which Embedded Firmware   Team uses for the development of Dasharo Modules, which are sometimes custom   services, but most of the time ready to use productised services, Open Core   or SaaS.</li> <li>Production - Dasharo Production describes the process of putting together Dasharo   Modules according to specific requirements. In this section we describe   development infrastructure, build environment, CI/CD and build publishing   methods. We also cover how production interacts with Dasharo Transparent   Validation System.</li> <li>Customer Infrastructure - Some customers may have the need of replicating part   of Dasharo Production process and infrastructure in their own environment,   which leads to repositories synchronization, different CI/CD setup and other   needs. This section describes interaction with Customer Infrastructure and   which part of Dasharo Production is deployable on the customer site.</li> <li>Transparent Validation - Dasharo Transparent Validation (DTV) is a set of   software, firmware and hardware components with the goal of simplifying and   improving long term maintenance of Dasharo firmware. In this section we   introduce components which belong to DTV.</li> <li>Testing Infrastructure - Part of Dasharo Transparent Validation responsible   for scheduling automated testing, publishing test results and interacting   with Dasharo Production in the area of release candidate quality confirmation.</li> </ul>"},{"location":"ecosystem/roadmap/","title":"Roadmap","text":"<p>Each features on below roadmap should be placed in public issue tracker, so it can be publicly referenced. Some places where issues can be discussed:</p> <ul> <li>Dasharo Github issues repo<ul> <li>especially issues tagged <code>enhancement</code>.</li> </ul> </li> <li>coreboot issues tracker</li> <li>edk2 bugzilla</li> </ul>"},{"location":"ecosystem/roadmap/#backlog","title":"Backlog","text":"<ul> <li>TrenchBoot Roadmap     firmware related issues.</li> <li>Dasharo Reference OS on USB stick to simplify firmware deployment</li> <li>fwupd/LVFS for firmware deployment</li> <li>ipxe for firmware deployment</li> </ul>"},{"location":"guides/capsule-update/","title":"Capsule Updates","text":""},{"location":"guides/capsule-update/#introduction","title":"Introduction","text":"<p>This document lists devices which support UEFI Update Capsules and demonstrates how to use them for a firmware update.  There is a more detailed overview which can be helpful in showing how this compares to other update methods.</p>"},{"location":"guides/capsule-update/#supported-devices","title":"Supported devices","text":"<p>Note</p> <p>Update Capsules are only supported in UEFI/EDK2 firmware versions, not in SeaBIOS or Heads-based firmware flavors.</p> <p>The following table describes which devices support Update Capsules and since which firmware release, if applicable.  If a particular device isn't mentioned, it means that it doesn't support this update method.</p> Manufacturer Device Starting with FW version Hardkernel Odroid H4+ v0.9.1 MSI Z690-A PRO v1.1.4 MSI Z790-P PRO v0.9.2 NovaCustom 11th Gen series v1.6.0 NovaCustom 12th Gen series v1.8.0 NovaCustom 14th Gen series v1.0.0 NovaCustom NUC BOX v0.9.0 Protectli Vault VP66xx v0.9.3"},{"location":"guides/capsule-update/#prerequisites","title":"Prerequisites","text":"<ul> <li>UEFI Shell   If your Dasharo firmware does not include the UEFI Shell as a boot option, you   will need an external boot device, such as a USB drive containing the UEFI   Shell.</li> <li>Storage device available from UEFI Shell   Not all file-systems are available to UEFI, so not all storage devices and   partition on them will be usable for the purpose of capsule updates.  An   ESP\u00a0(EFI System Partition, where <code>EFI/</code> directory is located) is a good choice   because it should be always readable by UEFI.   If you're running the UEFI Shell from a USB drive, this step is already   covered - you can simply continue using the same USB drive.</li> <li><code>CapsuleApp.efi</code>   This is a UEFI application which passes a capsule file to firmware to perform   an update.</li> <li>Firmware capsule   The firmware update capsule file itself.  Should have <code>.cap</code> file extension.</li> </ul>"},{"location":"guides/capsule-update/#whats-preserved-by-an-update","title":"What's preserved by an update","text":"Type Notes SMMSTORE holds UEFI Variables such as settings or boot order ROMHOLE only on MSI SMBIOS unique data like serial number or UUID boot logo set by the user GbE unique Gigabit Ethernet configuration (MAC address) <p>Preservation is done as a best effort. However some firmware changes are expected (e.g., current custom logo can be too large for the new firmware), thus a failure to move data in some cases won\u2019t necessarily abort an update.</p>"},{"location":"guides/capsule-update/#how-to-use-uefi-update-capsules","title":"How to use UEFI Update Capsules","text":"<p>Question</p> <p>This page describes the manual steps for capsule update. fwupd automates all of the steps described here, so you should only need to follow this guide if fwupd is unsupported for your device.</p> <p>Note</p> <p>Out of technical necessity, Intel Management Engine\u00a0(Intel ME) must be HAP-disabled in order for firmware to process a capsule successfully. If you're sure that the supplied capsule is the correct one, but you keep getting this error:</p> <pre><code>[FIRMWARE WARNING] Capsule updates are only supported while Intel ME is in HAP mode!\nCapsuleApp: failed to query capsule capability - Unsupported\n</code></pre> <p>Then double-check that Intel ME is in <code>Disabled (HAP)</code> state in the corresponding menu or switch it to that state before performing an update.</p> <ol> <li> <p>Copy <code>CapsuleApp.efi</code> and <code>firmware.cap</code> files to a partition\u00a0(the shorter    the path from the root, the easier it will be to find in the UEFI Shell).</p> </li> <li> <p>See the note above about Intel ME and HAP-disable it if it's enabled or    soft-disabled at the moment.  An update won't be initiated if this isn't    done\u00a0(<code>CapsuleApp.efi</code> will make an effort and give up, so no harm other than    update not happening).</p> </li> <li> <p>Enter Boot Manager Menu and select <code>UEFI Shell</code> entry.  Alternatively,    if you're in Setup, use One Time Boot which is a different way to do    the same.</p> </li> <li> <p>Press <code>Escape</code> to get to the prompt.  In practice pressing any key works the    same in most cases, so no problem if you didn't make it in 5 seconds.</p> </li> <li> <p>The first thing that UEFI Shell prints, even before the prompt with the    timer, is the list of file systems and block devices\u00a0(it can also be    retrieved later by running <code>map</code> command):        The hard part is to find the drive with <code>CapsuleApp.efi</code> and <code>firmware.cap</code>    among them. One way of doing it is going through <code>FS*</code> sequentially using    <code>ls</code> command:        Once the file-system is identified, run its name to switch to it:    </p> </li> <li> <p>If files are in file-system's root, no need to do anything here.  Otherwise,    use <code>cd</code> command to open a target directory to not have to enter full paths:    </p> </li> <li> <p>Now you should be in a position to initiate a capsule update\u00a0(run <code>ls</code> again    if in doubt about current location) via <code>CapsuleApp.efi    firmware.cap</code>\u00a0(substitute <code>firmware.cap</code> with an actual file name):    </p> </li> <li> <p>An ongoing firmware update with graphical progress bar looks like this:    </p> <p>Note</p> <p>Protectli devices have a textual progress bar.</p> <p>Warning</p> <p>Don't reboot or power off the device until the process is completed!</p> </li> </ol> <p>After either a successful or failed update, the machine should reboot automatically.  After that, if everything succeeded, you should have an updated firmware with data migrated from the previous version.</p> <p>Note</p> <p>Since the settings were preserved, remember to re-enable Intel Management Engine after the update.</p>"},{"location":"guides/capsule-update/#version-verification","title":"Version verification","text":"<p>Current version of the firmware can be seen in the top-left corner of the main page of the Setup.</p> <p></p>"},{"location":"guides/capsule-update/#troubleshooting","title":"Troubleshooting","text":"<p>In case the update process has aborted, one can run <code>CapsuleApp.efi -S</code> in UEFI Shell to get basic information pointing to the reason:</p> <p></p> <p>The most interesting field is <code>Capsule Status:</code>.  The error codes there are quite generic but still useful:</p> <ul> <li><code>Security Violation</code> indicates an issue with capsule's signature</li> <li><code>Not Ready</code> indicates that the capsule is unsupported by this firmware, likely   because it isn't compatible</li> </ul>"},{"location":"guides/capsule-update/#further-information","title":"Further information","text":"<ul> <li>Overview of Update Capsules</li> <li>Details on Update Capsules   (developer-oriented)</li> </ul>"},{"location":"guides/dasharo-reviewers-guide/","title":"Dasharo Reviewers Guide","text":"<p>Based on reviews of Dasharo compatible with MSI Z690-A DDR4/DDR5, we created the following guide to explain the performance gap between MSI proprietary and Dasharo open-source firmware, but in the long run, the same discoveries can apply to other Dasharo and open-source firmware solutions.</p>"},{"location":"guides/dasharo-reviewers-guide/#introduction","title":"Introduction","text":"<p>During the 23+ years of coreboot's existence, one aspect that has never been in-depth tested is how its performance compares against proprietary firmware solutions that run on the same hardware platform. The lack of performance testing is because, for most of the interested parties, the selling point of coreboot was the transparency of being open-source, and this rarely made direct comparisons about other features or functionality. Historically, most of what we could find about coreboot performance involves the lower POST times claims, but there needs to be more information regarding its runtime performance as measured in benchmarks, which is a significant point that end users are interested in. Sadly, we need more internal resources and the necessary field experience to conduct such exhaustive benchmark testing. Several significant findings came from third-party benchmarks and community reports, which is enough to know our current standing. Professional hardware reviewers should be better at performing and analyzing measures than we are.</p>"},{"location":"guides/dasharo-reviewers-guide/#why-we-ask-to-fine-tune-settings","title":"Why We Ask To Fine Tune Settings","text":"<p>In general, we found out in our limited benchmarking that performance out-of-the-box with Dasharo is measurably lower than performance with MSI proprietary firmware, in the order of 6-8% on the benchmarked Core i5 12600K. Lower performance was quickly tracked down to MSI using, by default, certain processor operating parameters that are quite different from the values stated on the Intel datasheets, resulting in alterations of the processor behavior that allows it to sustain Turbo Boost with higher clock speeds and for longer periods than otherwise possible, and thus appear to perform better overall. After normalizing across both MSI proprietary firmware and Dasharo, the values we found were different, and the benchmark difference was reduced to around 2% (21:19- 29:00).</p> <p>We also found several review websites that have already written articles and analysis about this matter. Mainboard vendors use default values above those specified by Intel (technically overclocking) to produce better performance results in benchmarks (AnandTech, TechSpot, VideoCardz, Gamers Nexus about cheating, GamersNexus about MSI default settings, GamersNexus Z490 YouTube Review, TechPowerUp, Tom's Hardware). Depending on whom you ask, using aggressive values by default can be seen either as a convenience, since the end user gets more performance without having to know how to configure the firmware, or as a form of cheating, due to the end user usually having no idea about these changes and that they are overclocking out-of-the-box. As for the time being, we're sticking to Intel specification default values; these mainboard vendors' custom optimizations hurt us because it makes the difference look much bigger than it is.</p> <p>What we want to showcase is how Dasharo (for this MSI port, coreboot + EDKII UefiPayloadPkg) performance compares against the proprietary firmware codebase. The only way to do so accurately is by ensuring that the hardware operating values are the same in both Dasharo and the original firmware so that the performance differences are not due to higher processor clock speeds thanks to higher Power Limits, unlimited Turbo Boost times, or similar tricks. Note that we are okay with out-of-the-box comparisons, but that wouldn't be directly an apples-to-apples comparison of the performance of both firmware codebases, which is our point. Thus, to make it fair, the hardware has to be tweaked to run with the same operating values on both. As you can't change values on Dasharo unless you're willing to recompile (or ask for a custom build with tweaked values), the easiest way is by bringing MSI firmware values down to Dasharo/Intel levels.</p>"},{"location":"guides/dasharo-reviewers-guide/#find-your-processor-intel-default-parameters","title":"Find Your Processor Intel Default Parameters","text":"<p>So far we've found six processor-configurable parameters that differ significantly: PL1, PL2, PL1 Tau, ICCMAX, DC_LL, and AC_LL. coreboot uses the values found on two sections of the Intel 12th Generation Intel Core Processors Datasheet (Volume 1 of 2).  You will have to check the datasheet to find the proper values for your processor so that you can manually input them onto MSI firmware. In the case of MSI firmware default values, we found no public information, so we only know how it autoconfigures the processors we tested. Note that on the datasheet, Intel doesn't mention processor models by name/number but instead classifies them by amount of P+E cores and Base Power TDP, so first, you have to check these two values from Intel Ark for your processor model, then check on the Datasheet tables what matches both classes to get the Intel default values for the configurable parameters.</p> <p>Here are examples covering the 12400, 12600K, 12900K and 12900KS (<code>Processor Line Thermal and Power - Package Turbo Specifications (S / HX - Processor Lines) - S-Processor Line LGA</code>) from this section of datasheet:</p> <ul> <li>12400 6+0 Core 65W PL1 = 65W PL2 = 117W PL1 Tau = 28s</li> <li>12600K 6+4 Core 125W PL1 = 125W PL2 = 150W PL1 Tau = 56s</li> <li>12900K 8+8 Core 125W PL1 = 125W PL2 = 241W PL1 Tau = 56s</li> <li>12900KS 8+8 Core 150W PL1 = 150W PL2 = 241W PL1 Tau = 56s</li> </ul> <p><code>VCCCORE DC Specifications - Processor VCCCORE Active and Idle Mode DC Voltage and Current Specifications - Segment S-Processor Line</code>  from this section of datasheet:</p> <ul> <li>12400 S-Processor Line (65W) 6+0 -Core ICCMAX = 151A DC_LL/AC_LL = 1.7 m\u03a9 (170)</li> <li>12600K S-Processor Line (125W) 6+4 -Core ICCMAX = 175A DC_LL/AC_LL = 1.7 m\u03a9 (170)</li> <li>12900K S-Processor Line (125W) 8+8 -Core ICCMAX = 280A DC_LL/AC_LL = 1.1 m\u03a9 (110)</li> <li>12900KS S-Processor Line (150W) 8+8 -Core ICCMAX = 280A DC_LL/AC_LL = 1.1 m\u03a9 (110)<sup>1</sup></li> </ul> <p>On S-Processor Line, AC_LL is the same as DC_LL.</p> <p>For reference, on a 12600K, the MSI 1.70 firmware on Auto with CPU Cooler Tuning set to Boxed Cooler (lowest values for auto-configuration) uses the following values vs. Dasharo/Intel defaults:</p> <ul> <li>MSI BIOS 1.70 PL1 = 241W PL2 = 241W PL1 Tau = 56s ICCMAX = 250A DC_LL/AC_LL = 80</li> <li>Dasharo 1.1.0 PL1 = 125W PL2 = 241W PL1 Tau = 56s ICCMAX = 175A DC_LL/AC_LL = 170</li> </ul>"},{"location":"guides/dasharo-reviewers-guide/#configure-msi-firmware-with-intel-default-parameters","title":"Configure MSI Firmware With Intel Default Parameters","text":"<p>After you have found your processor model values, you can input them on MSI firmware. Most likely, you want to start from default settings.</p> <p>Enter MSI Firmware, and change the following:</p> <ul> <li>Settings Menu (Left Panel) -&gt; Save &amp; Exit</li> <li>Restore Defaults (Confirm Yes)</li> <li>Save Changes and Reboot (Confirm Yes)</li> </ul> <p></p> <p>After the power off/on cycle, enter MSI firmware again, change the following values, then repeat Save Changes and Reboot:</p> <ul> <li>OC Menu (Left Panel) -&gt; Advanced CPU Configuration<ul> <li>Enhanced Turbo: Disabled (This is MSI name for Multi Core Enhancement)</li> <li>Long Duration Power Limit(W): PL1</li> <li>Long Duration Maintained(s): PL1 Tau</li> <li>Short Duration Power Limit(W): PL2</li> <li>CPU Current Limit (A): ICCMAX</li> <li>CPU Lite Load Control: Advanced (Required to input DC_LL and AC_LL as   numbers instead of \"Modes\")</li> <li>CPU AC Loadline: AC_LL</li> <li>CPU DC Loadline: DC_LL</li> </ul> </li> </ul> <p> </p>"},{"location":"guides/dasharo-reviewers-guide/#miscellaneous-comments","title":"Miscellaneous Comments","text":"<ul> <li>Since you can software flash Dasharo and flash MSI firmware again on the same   system, you likely want to use the same computer to test both firmware so   that no temperature or clock speeds difference could attribute to different   pressure on heatsink mounting or silicon lottery.</li> <li>MSI firmware bases its default (Auto) PL1, PL2, and ICCMAX values on the CPU   Cooler Tuning set. When using Restore Defaults on a 12600K, this setting   defaults to Water Cooler, which allows for technically unlimited PL1 and PL2   (4095W). Even the Boxed Cooler setting configures the 12600K to 241W PL1 and   241W PL2. Thus, you must manually set the individual values for controlled   results.</li> <li>So far, the setting that most affected benchmark scores are AC_LL and DC_LL.   PL1, PL2 and ICCMAX are limiting. They are only meaningful if the processor   gets limited by them, which would depend on the processor model (some have more   headroom than others. PL1 is 125W for both 6+4 12600K and 8+8 12900K, the   latter would be severely more limited), whereas the other two values are always   in effect.</li> </ul> <p>On the tested 12600K, the effect of the significantly lower values of AC_LL on DC_LL that MSI uses is a rather massive difference of 20 Watts in power consumption (as reported by ThrottleStop and HWiNFO, and also by lower processor temperatures) when running Cinebench R23. Thus, with MSI values (whenever on MSI or a custom Dasharo build with those), the 12600K doesn't even reach the PL1 limit, allowing it to maintain the highest Turbo Boost clock speeds infinitely, whereas, on Dasharo (or MSI with Intel default values), the extra power consumption makes it to go beyond PL1, eventually throttling back to slower clocks to keep under PL1.</p> <ul> <li>LCC (Loadline Calibration Control) is also present in another menu as CPU   Loadline Calibration Control, but we left it at Auto. We need to find out if   changes in CPU Lite Load Control / CPU AC Loadline / CPU DC Loadline change it   or if LCC operates the same regardless of changes to the previous options.</li> <li>The most critical performance-related bug we found in Dasharo involves   benchmarking Single Thread applications on Windows 11. With Dasharo, Windows   11 CPU Scheduler likes to move threads around between P and E cores, whereas   MSI firmware on the same scenario instead always favors P cores. Such behavior   significantly affects the scores of Single-Threaded benchmarks and makes them   highly variable depending on which core type a thread spent most of its time.   There may be MSRs (Model Specific Registers) related to Intel Thread Director   that we aren't aware of that manages this. The only workaround found is to set   CPU Affinity manually, which can be performed automatically with Process Lasso,   with the bonus of using Forced Mode to continuously re-apply the CPU Affinity   settings, as some applications, including Cinebench, like to change them when   you start to run the benchmark. Of course, this will not happen on P core, only   models like 12400. We did not test manual affinity tested on Linux.</li> <li>Dasharo currently doesn't support manually changing the memory clock speeds,   and it will default to the highest standard JEDEC profile supported by the   installed memory modules. MSI firmware also defaults to JEDEC profiles, so   out-of-the-box, they're matched at memory configuration, thus not a problem.   Many enthusiast-grade DDR4 modules use 3200 MHz (maximum supported by Alder   Lake-S) or higher and have that clock speed as an XMP profile, whereas the   standard JEDEC profile could be just 2133 or 2400 MHz. In most cases, a 3200   MHz DDR4 module will run at lower speeds than expected. There are modules rated   for JEDEC 3200 MHz 22-22-22 @ 1.2V that should work in both Dasharo and MSI   firmware, in case you're interested in testing this. It is also possible to   force Dasharo to use an XMP profile if you're willing to recompile or use a   custom build.</li> <li>There are a lot of other settings and MSRs (Model Specific Registers) that we   have yet to test. We track the progress of that effort in this   issue. Public Alder Lake FSP Integration Guide documents how to set   these settings On or Off, but there are few details about how they change the   Processor behavior. The remaining 2% of performance will come from matching all   these settings.</li> </ul> <ol> <li> <p>On the public datasheet, there is no DC_LL for the 8+8 150W class, only   8+8 125W, but we can confirm from alternate sources that this is the correct value.\u00a0\u21a9</p> </li> </ol>"},{"location":"guides/firmware-reflash/","title":"Flashing custom firmware","text":"<p>This document describes the steps for installing, reinstalling or downgrading Dasharo firmware.</p> <p>Warning</p> <p>This guide is for advanced users and firmware developers looking to install custom, older or development versions of firmware. If you're not sure if this applies to you, you probably don't need to follow this guide.</p>"},{"location":"guides/firmware-reflash/#prerequisites","title":"Prerequisites","text":"<p>If you're flashing firmware that is not signed with Dasharo vboot keys, you will need to disable some security measures first. Enter the UEFI setup menu and disable (if present):</p> <ul> <li>SMM BIOS Write Protection</li> <li>BIOS Boot Medium Lock</li> <li>UEFI Secure Boot</li> </ul> <p>If you plan on reflashing Intel ME firmware, you should also disable it using any of the available methods first.</p>"},{"location":"guides/firmware-reflash/#flashing","title":"Flashing","text":"<p>To install vendor firmware:</p> <pre><code>flashrom -p internal -w [firmware.bin]\n</code></pre> <p>To install a previous or custom version of Dasharo:</p> <p>Warning</p> <p>In general flashing only the BIOS region is needed when flashing older or custom versions of Dasharo. However, sometimes, an update of other regions is also necessary. If unsure, consult the release notes for your mainboard.</p> <pre><code>flashrom -p internal --ifd -i bios -w [firmware.bin]\n</code></pre>"},{"location":"guides/firmware-update/","title":"Firmware update","text":""},{"location":"guides/firmware-update/#introduction","title":"Introduction","text":"<p>This document is a guide for updating firmware on your Dasharo-powered device.</p> <p>Tip</p> <p>If your current firmware supports UEFI Update Capsules, there is a dedicated guide on their usage.  If unsure, check out the compatibility table there.</p>"},{"location":"guides/firmware-update/#firmware-update-mode","title":"Firmware Update Mode","text":"<p>Newer Dasharo releases support Firmware Update Mode, which performs updates automatically over the network.</p> <p>Does my device support Firmware Update Mode?</p> <p>Not sure if your device supports Firmware Update Mode? Check out the compatibility table in the Knowledge Base section.</p> <p>To enter Firmware Update Mode:</p> <ol> <li>Enter the Setup Menu and navigate to Dasharo System Features: </li> <li>Navigate to <code>Dasharo Security Options</code>: </li> <li>Select <code>Firmware Update Mode</code>: </li> <li>When prompted, press Enter to accept. The device will reboot in Firmware   Update Mode. </li> <li>After reboot, when prompted, press the indicated key on the keyboard.   Alternatively, to abort Firmware Update Mode, press Enter instead or simply   wait for the timeout to expire.</li> </ol> <p>Once in Firmware Update Mode, proceed with the firmware update steps outlined in device-specific documentation.</p> <p>After the firmware update is finished, the device will reboot automatically. If the update includes an Embedded Controller firmware update, it will be applied automatically after reboot and the device will reboot again.</p> <p>Tip</p> <p>Check out a more detailed explanation and rationale for Firmware Update Mode in the Knowledge Base section.</p>"},{"location":"guides/firmware-update/#manual-update","title":"Manual update","text":"<p>Firmware versions without support for Firmware Update Mode have various update procedures. Check out your device's Firmware Update documentation for more information.</p>"},{"location":"guides/firmware-update/#known-issues","title":"Known issues","text":""},{"location":"guides/firmware-update/#problem","title":"Problem","text":"<p>Platform: <code>MSI</code></p> <p>The following warnings appear when updating Dasharo:</p> <pre><code>The firmware binary to be flashed contains Flash Descriptor (FD), but FD is not writable!\nThe firmware binary contains Management Engine (ME), but ME is not disabled!\n</code></pre>"},{"location":"guides/firmware-update/#solution","title":"Solution","text":"<p>The locked Flash Descriptor makes it impossible to unlock and flash the Management Engine. The problem is not critical and you may continue with the update process. Your firmware will contain old ME. However, we advise to perform additional steps to flash it, as the old ME may cause some issues in the future. To do that, you will have to flash firmware with FD and ME externally using FlashBIOS. This will bypass the locks on those regions. If you wish to proceed with this approach, please follow the steps in the recovery guide. Keep in mind that the memory will need to be trained again, and firmware settings will be reset.</p>"},{"location":"guides/firmware-update/#problem_1","title":"Problem","text":"<p>Platform: <code>MSI Z790-P DDR4</code></p> <p>Dasharo version: Before <code>v0.9.2</code></p> <p>FlashBIOS does not work</p>"},{"location":"guides/firmware-update/#solution_1","title":"Solution","text":"<p>The problem is likely caused by the fact that we changed the versioning scheme of firmware. Due to this mismatch, FlashBIOS only works for <code>Z790-P DDR4</code> since <code>v0.9.2</code>. If you wish to update to that version, you will first need to flash the BIOS region with <code>v0.9.2</code> firmware and then use FlashBIOS to flash everything, including ME. You can flash BIOS with the following command:</p> <pre><code>flashrom -p internal --noverify-all --ifd -i bios -w &lt;firmware_file&gt;\n</code></pre>"},{"location":"guides/logo-customization/","title":"Boot logo replacement instructions","text":""},{"location":"guides/logo-customization/#introduction","title":"Introduction","text":"<p>The logo displayed at boot can be customized according to the client's preferences. For this, we have created a script that automates the process of replacing the logo. It is part of the Dasharo Configuration Utility - a tool designed to configure Dasharo binary images.</p>"},{"location":"guides/logo-customization/#procedure","title":"Procedure","text":"DasharoDasharo (coreboot + Heads) <p>Use the Dasharo Configuration Utility to put custom logo into a Dasharo coreboot image.</p> <pre><code>./dcu logo &lt;dasharo_image&gt; -l &lt;logo_file&gt;\n</code></pre> <p>Logo customization is not supported as of now. To replace the logo, you must rebuild the firmware. You need to replace the <code>branding/Dasharo/bootsplash.jpg</code> with your own, and proceed with the building manual.</p>"},{"location":"guides/reproducible-build-verification/","title":"Reproducible build verification","text":"<p>Reproducible builds are crucial from both security and open-source perspectives because they allow anyone to verify that the compiled binary of a software package truly matches the original source code. This ensures that no tampering, such as inserting malicious code during the build process, has occurred.</p> <p>The most obvious and undisputable way of verifying build reproduction is comparing the hashes of two given binaries. There are, however, corner cases where this is not an ideal approach - such as when the same binary is signed with a different key.</p>"},{"location":"guides/reproducible-build-verification/#romscope","title":"Romscope","text":"<p>To compare two binaries that were built from the same source but contain embedded signatures , we have developed romscope.</p>"},{"location":"guides/reproducible-build-verification/#basic-verification","title":"Basic verification","text":"<p>As an example, let's try to compare a NovaCustom NV4x ADL Dasharo version 1.7.2 binary obtained from our Releases page to a binary we will build from source for the same target.</p> <ul> <li>Obtain the official release binary</li> <li>Follow the Building manual   for NV4x 12th Gen, substituting <code>1.7.2</code> for <code>X.Y.Z</code> where necessary</li> <li>Create a common <code>romscope-test</code> directory and enter it</li> </ul> <pre><code>mkdir romscope-test\ncd romscope-test\n</code></pre> <ul> <li>Place both the downloaded release binary and your build result in the   directory, renaming the build result to <code>nv4x_adl_built.rom</code></li> <li>Calculate the <code>sha256</code> hash of the binaries:</li> </ul> <pre><code>\u03bb sha256sum *.rom\n00b6338389cc5d020b641629971aac6d4047be6134c6e8d0228140edc42584f6  novacustom_nv4x_adl_v1.7.2.rom\nc8beae48e72adc664a837c990ca89f6b1bb77399cb577e3f7b57206f0a6f0027  nv4x_adl_built.rom\n</code></pre> <p>As you can see, the hashes don't match, indicating a difference between the binaries. Does that mean the binary you have downloaded is really not the same as what you have built from source, and maybe even that the code for the release binary contains some malicious \"hidden features\"? That is precisely what we will find out using the <code>romscope</code> utility.</p> <ul> <li>Clone the <code>romscope</code> repository into <code>romscope-test</code> and enter it:</li> </ul> <pre><code>git clone https://github.com/dasharo/romscope\ncd romscope\n</code></pre> <p>For the purpose of reproducible build verification, we will use the <code>romscope compare</code> command.</p> <pre><code>\u03bb ./romscope compare ../novacustom_nv4x_adl_v1.7.2.rom ../nv4x_adl_built.rom\nExtracting file /home/flewinski/workspace/rep-builds-docs/novacustom_nv4x_adl_v1.7.2.rom\nExtracting file /home/flewinski/workspace/rep-builds-docs/nv4x_adl_built.rom\nVblock regions/fmap/VBLOCK_A.bin differs.\nVblock regions/fmap/GBB.bin differs.\nFiles match but signatures differ. Binaries are likely signed using different Vboot keys.\n</code></pre> <p>As you can see, the hash difference is not to be worried about - it only occurs because the signature is included in the binary, and a locally built binary will not be signed with the 3mdeb private key by default.</p>"},{"location":"guides/reproducible-build-verification/#detailed-report","title":"Detailed report","text":"<p>The utility also generates a detailed report, in the form of HTML pages containing diffs for each coreboot stage. This comes in handy when we need to verify that a difference between two binaries' code, which exceeds a mere signature mismatch, is functionally insignificant.</p> <p>As explained in the <code>README</code>:</p> <p>Consider the scenario: we have a release candidate binary and a final binary.  Only the version number was changed in the code. We want to prove that changing  the version number functionally does not influence any other portion of the  binary, which ensures that test results for the release candidate are also  valid for the final binary.</p> <p>When attempting such comparison, you should follow the criteria outlined in the Interpreting results section of the <code>README</code>. In the screenshots below, you can see an example output of running romscope on two binaries built from sources that differ only by the version number.</p> <p></p> <p>Here you can explicitly see a mere difference in version strings.</p> <p></p> <p>Here you can see some constant memory offset has been changed, likely due to the version strings not being the same length.</p> <p></p> <p>Here you can see a block of code has been relocated by a couple of lines, but not altered in any way.</p> <p></p> <p>Here's again a difference in version strings, build dates and some memory relocation.</p>"},{"location":"guides/signature-verification/","title":"Dasharo release signature verification","text":"<p>Dasharo uses digital signatures to guarantee the authenticity and integrity of certain important assets. This page explains how to verify those signatures. It is extremely important for your security to understand and apply these practices.</p>"},{"location":"guides/signature-verification/#why-one-should-verify-the-signatures","title":"Why one should verify the signatures?","text":"<p>Please refer to Qubes OS signature verification page: What digital signatures can and cannot prove.</p>"},{"location":"guides/signature-verification/#signature-verification-prcocedure","title":"Signature verification prcocedure","text":"<p>Each published Dasharo release is signed with a signing key corresponding to given platform and versions. The key infrastructure is stored in 3mdeb-secpack.</p> <p>For the signature verification we use the OpenPGP software like Qubes OS.</p> <p>To verify the integrity of the binaries published in release notes on this site, please follow the instructions below:</p> <ol> <li> <p>Import necessary keys to your keyring:</p> <pre><code>wget https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/keys/master-key/3mdeb-master-key.asc \\\n    -O - | gpg --import -\n</code></pre> <pre><code>wget https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/3mdeb-dasharo-master-key.asc  \\\n    -O - | gpg --import -\n</code></pre> <pre><code>wget &lt;release signing key URL&gt; -O - | gpg --import -\n</code></pre> <ul> <li><code>&lt;release signing key URL&gt;</code> is provided in the release notes</li> </ul> </li> <li> <p>Check the signatures on the keys:</p> <pre><code>gpg --check-signatures \"Dasharo\" \"3mdeb\"\n</code></pre> </li> <li> <p>Optionally set the trust level on the imported keys (if you have not done    so yet), for example <code>Dasharo Master Key</code>:</p> <pre><code>gpg --edit-key 0D5F6F1DA800329EB7C597A2ABE1D0BC66278008\ngpg (GnuPG) 2.4.3; Copyright (C) 2023 g10 Code GmbH\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n\npub  rsa4096/ABE1D0BC66278008\n    created: 2021-02-03  expires: 2026-02-02  usage: SC\n    trust: undefined     validity: undefined\nsub  rsa4096/EF3E219237E312A8\n    created: 2021-02-03  expires: 2026-02-02  usage: E\n[  undef ] (1). 3mdeb Dasharo Master Key\n\ngpg&gt; trust\npub  rsa4096/ABE1D0BC66278008\n    created: 2021-02-03  expires: 2026-02-02  usage: SC\n    trust: undefined     validity: undefined\nsub  rsa4096/EF3E219237E312A8\n    created: 2021-02-03  expires: 2026-02-02  usage: E\n[  undef ] (1). 3mdeb Dasharo Master Key\n\nPlease decide how far you trust this user to correctly verify other users' keys\n(by looking at passports, checking fingerprints from different sources, etc.)\n\n    1 = I don't know or won't say\n    2 = I do NOT trust\n    3 = I trust marginally\n    4 = I trust fully\n    5 = I trust ultimately\n    m = back to the main menu\n\nYour decision? 5\nDo you really want to set this key to ultimate trust? (y/N) y\n\npub  rsa4096/ABE1D0BC66278008\n    created: 2021-02-03  expires: 2026-02-02  usage: SC\n    trust: ultimate      validity: undefined\nsub  rsa4096/EF3E219237E312A8\n    created: 2021-02-03  expires: 2026-02-02  usage: E\n[  undef ] (1). 3mdeb Dasharo Master Key\nPlease note that the shown key validity is not necessarily correct\nunless you restart the program.\n</code></pre> <p>Setting the trust level of master key to ultimate will imply the full trust of the release signing keys. With full trust in the release signing keys, the warning:</p> <pre><code>gpg: WARNING: This key is not certified with a trusted signature!\ngpg:          There is no indication that the signature belongs to the owner.\n</code></pre> <p>will not appear (full trust or stronger). Set the trust level based on how you trust the keys (if you have validated them properly, obtained from legitimate source, etc.). After exiting the gpg program and editing the key again the trust level will be updated:</p> <pre><code>gpg --edit-key 0D5F6F1DA800329EB7C597A2ABE1D0BC66278008\ngpg (GnuPG) 2.4.3; Copyright (C) 2023 g10 Code GmbH\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n\ngpg: checking the trustdb\ngpg: marginals needed: 3  completes needed: 1  trust model: pgp\ngpg: depth: 0  valid:   4  signed:  10  trust: 0-, 0q, 0n, 0m, 0f, 4u\ngpg: depth: 1  valid:  10  signed:   0  trust: 10-, 0q, 0n, 0m, 0f, 0u\ngpg: next trustdb check due at 2024-03-24\npub  rsa4096/ABE1D0BC66278008\n    created: 2021-02-03  expires: 2026-02-02  usage: SC\n    trust: ultimate      validity: ultimate\nsub  rsa4096/EF3E219237E312A8\n    created: 2021-02-03  expires: 2026-02-02  usage: E\n[ultimate] (1). 3mdeb Dasharo Master Key\n</code></pre> </li> <li> <p>Download the binaries, SHA sums and their signature files</p> <pre><code>export BIN_URL=https://3mdeb.com/open-source-firmware/Dasharo/...\n</code></pre> <pre><code>wget ${BIN_URL} ${BIN_URL}.sha256 ${BIN_URL}.sha256.sig\n</code></pre> </li> <li> <p>Verify the signatures and binary integrity:</p> <pre><code>gpg -v --verify `basename $BIN_URL`.sha256.sig `basename $BIN_URL`.sha256\n</code></pre> <pre><code>sha256sum -c `basename $BIN_URL`.sha256\n</code></pre> </li> </ol> <p>Example verification of Dasharo release compatible with MSI PRO Z690-A DDR4:</p> <pre><code>miczyg@3M08:~ $ export BIN_URL=https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom\nmiczyg@3M08:~ $ wget ${BIN_URL} ${BIN_URL}.sha256 ${BIN_URL}.sha256.sig\n--2023-08-02 10:44:13--  https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom\nResolving 3mdeb.com (3mdeb.com)... 2001:41d0:301:5::26, 178.32.205.96\nConnecting to 3mdeb.com (3mdeb.com)|2001:41d0:301:5::26|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://dl.3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom [following]\n--2023-08-02 10:44:14--  https://dl.3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom\nResolving dl.3mdeb.com (dl.3mdeb.com)... 178.32.205.96\nConnecting to dl.3mdeb.com (dl.3mdeb.com)|178.32.205.96|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 33554432 (32M) [application/octet-stream]\nSaving to: \u2018msi_ms7d25_v1.1.1_ddr4.rom\u2019\n\nmsi_ms7d25_v1.1.1_d 100%[===================&gt;]  32.00M  24.4MB/s    in 1.3s\n\n2023-08-02 10:44:15 (24.4 MB/s) - \u2018msi_ms7d25_v1.1.1_ddr4.rom\u2019 saved [33554432/33554432]\n\n--2023-08-02 10:44:15--  https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom.sha256\nConnecting to 3mdeb.com (3mdeb.com)|2001:41d0:301:5::26|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://dl.3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom.sha256 [following]\n--2023-08-02 10:44:16--  https://dl.3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom.sha256\nConnecting to dl.3mdeb.com (dl.3mdeb.com)|178.32.205.96|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 93\nSaving to: \u2018msi_ms7d25_v1.1.1_ddr4.rom.sha256\u2019\n\nmsi_ms7d25_v1.1.1_d 100%[===================&gt;]      93  --.-KB/s    in 0s\n\n2023-08-02 10:44:16 (49.8 MB/s) - \u2018msi_ms7d25_v1.1.1_ddr4.rom.sha256\u2019 saved [93/93]\n\n--2023-08-02 10:44:16--  https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom.sha256.sig\nConnecting to 3mdeb.com (3mdeb.com)|2001:41d0:301:5::26|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://dl.3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom.sha256.sig [following]\n--2023-08-02 10:44:16--  https://dl.3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom.sha256.sig\nConnecting to dl.3mdeb.com (dl.3mdeb.com)|178.32.205.96|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 833 [application/pgp-signature]\nSaving to: \u2018msi_ms7d25_v1.1.1_ddr4.rom.sha256.sig\u2019\n\nmsi_ms7d25_v1.1.1_d 100%[===================&gt;]     833  --.-KB/s    in 0s\n\n2023-08-02 10:44:17 (11.5 MB/s) - \u2018msi_ms7d25_v1.1.1_ddr4.rom.sha256.sig\u2019 saved [833/833]\n\ngpg -v --verify `basename $BIN_URL`.sha256.sig `basename $BIN_URL`.sha256\nFINISHED --2023-08-02 10:44:17--\nTotal wall clock time: 3.3s\nDownloaded: 3 files, 32M in 1.3s (24.4 MB/s)\ngpg: enabled compatibility flags:\ngpg: Signature made Thu 23 Feb 2023 12:21:55 AM CET\ngpg:                using RSA key 89B569C42BB9FCCBC3C9CFDF5DC481E1F371151E\ngpg: using pgp trust model\ngpg: Good signature from \"Dasharo release 1.x compatible with MSI MS-7D25 signing key\" [unknown]\ngpg: WARNING: This key is not certified with a trusted signature!\ngpg:          There is no indication that the signature belongs to the owner.\nPrimary key fingerprint: 89B5 69C4 2BB9 FCCB C3C9  CFDF 5DC4 81E1 F371 151E\ngpg: binary signature, digest algorithm SHA256, key algorithm rsa4096\n\nmiczyg@3M08:~ $sha256sum -c `basename $BIN_URL`.sha256\nmsi_ms7d25_v1.1.1_ddr4.rom: OK\n</code></pre>"},{"location":"guides/vboot-signing/","title":"Dasharo vboot signing","text":""},{"location":"guides/vboot-signing/#introduction","title":"Introduction","text":"<p>Verified Boot is a method of verifying that the firmware compents haven't been tampered with. It uses cryptographic signatures to determine whether the firmware comes from trusted source. This document covers the procedure for generating vboot keys and configuring the coreboot build system to sign the binaries with the generated keys.</p>"},{"location":"guides/vboot-signing/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Functional Docker installation</p> <ul> <li>follow Install Docker Engine on Ubuntu</li> <li>follow Post-installation steps for Linux</li> </ul> </li> <li> <p>Clone dasharo-tools repository</p> </li> </ul> <pre><code>git clone https://github.com/Dasharo/dasharo-tools.git\n</code></pre>"},{"location":"guides/vboot-signing/#generating-keys","title":"Generating keys","text":"<p>Make sure that you are in the <code>dasharo-tools</code> repository</p> <p>Generate the keys with the following command:</p> <pre><code>./vboot/generate_keys keys\n</code></pre> <p>The keys will be created in the directory <code>$PWD/keys</code>, i.e. in the <code>keys</code> subdirectory in your current directory.</p>"},{"location":"guides/vboot-signing/#signing-image-without-rebuilding","title":"Signing image without rebuilding","text":"<p>This is the default procedure that should be followed by users downloading firmware from the <code>Release</code> section, who wishes to use their own keys for vboot.</p> <p>Make sure that you are in the <code>dasharo-tools</code> repository</p> <p>Be sure you have generated the keys as in Generate keys section. Assuming you have generated keys to the <code>keys/</code> directory:</p> <pre><code>./vboot/resign &lt;released_firmware_file&gt; keys\n</code></pre> <p>For example:</p> <pre><code>./vboot/resign protectli_vault_cml_v1.0.16_resigned.rom keys\n</code></pre> <p>The successful output can look like this:</p> <pre><code>...\nINFO: sign_bios_at_end: BIOS image does not have FW_MAIN_B. Signing only FW_MAIN_A\n - import root_key from /.../keys/root_key.vbpubk: success\n - import recovery_key from /.../keys/recovery_key.vbpubk: success\nsuccessfully saved new image to: /.../protectli_vault_cml_v1.0.16_resigned.rom\nThe /.../protectli_vault_cml_v1.0.16.rom was resigned and saved as: /.../protectli_vault_cml_v1.0.16_resigned.rom\n</code></pre> <p>Now the image will be signed with your own keys. Be sure to save the keys in a safe location, because you will need them to sign each firmware update. Otherwise, the firmware updates to RW partitions will not be executed by vboot.</p>"},{"location":"guides/vboot-signing/#adding-keys-to-the-coreboot-config","title":"Adding keys to the coreboot config","text":"<p>This procedure is only meant for developers or when you are rebuilding firmware by yourself.</p> <p>In the root of the coreboot tree, execute the following command:</p> <pre><code>make nconfig\n</code></pre> <p>Navigate to <code>Security</code> -&gt; <code>Verified Boot (vboot)</code> -&gt; <code>Vboot keys</code> and enter the paths to the keys in the appropriate fields.</p> <p>Exit <code>nconfig</code> by pressing <code>Esc</code> repeatedly and pressing <code>Enter</code> when prompted to save the configuration.</p> <p>Now, rebuild coreboot with this config to generate images signed with the chosen vboot keys.</p>"},{"location":"guides/lab-assembly/asrock_spc741d8/","title":"Laboratory stand dedicated to ASRock Rack SPC741D8-2L2T/BCM lab assembly guide","text":""},{"location":"guides/lab-assembly/asrock_spc741d8/#introduction","title":"Introduction","text":"<p>This document describes platform-specific details for assembling an ASRock Rack SPC741D8-2L2T/BCM testing stand. Use this document as reference while going through Generic Testing Stand Setup</p>"},{"location":"guides/lab-assembly/asrock_spc741d8/#prerequisites","title":"Prerequisites","text":"<p>The below table contains information about all elements which are needed to create the testing stand.</p> <ul> <li>ASRock Rack SPC741D8-2L2T/BCM platform</li> <li>RTE v1.1.0</li> <li>Sonoff S20 type E</li> <li>5x2 1mm pitch female header to 10x 2.54mm female DuPont connector adapter   cable</li> <li>2x female to female 2.54mm DuPont wire</li> <li>DB9 null modem cable</li> <li>DB9 serial port to 10 pin header adapter</li> <li>Board manual</li> </ul>"},{"location":"guides/lab-assembly/asrock_spc741d8/#connections","title":"Connections","text":"<p>The following sections describe how to enable all of the following features:</p> <ul> <li>serial connection to the platform,</li> <li>controlling power supply,</li> <li>enabling basic power actions with the platform (power off/power on/reset),</li> <li>external flashing with the RTE,</li> </ul>"},{"location":"guides/lab-assembly/asrock_spc741d8/#serial-connection","title":"Serial connection","text":"<p>Connect the DB9 to 10 pin header adapter to the COM1 header on the motherboard.</p> <p>Connect the DB9 null modem cable to the RTE DB9 connector and to the DB9 to 10 pin header adapter.</p>"},{"location":"guides/lab-assembly/asrock_spc741d8/#power-supply-controlling","title":"Power supply controlling","text":"<p>Connect the PSU power cord to Sonoff.</p>"},{"location":"guides/lab-assembly/asrock_spc741d8/#basic-power-operations-enabling","title":"Basic power operations enabling","text":"<p>Connect the RTE J11 header to the platform JFP1 header as described in the table:</p> RTE ASRock SPC741D8 PANEL1 header J11 pin 9 PWRBTN# J11 pin 8 RESET#"},{"location":"guides/lab-assembly/asrock_spc741d8/#external-flashing-enabling","title":"External flashing enabling","text":"<ol> <li>Connect the 5x2 1mm pitch female header to 10x 2.54mm female DuPont    connector adapter cable to the BIOS_PH1 header</li> <li>Map out the BIOS pins: Using a multimeter in continuity mode, probe each    of the 2.54mm pins against each of the pins on the SOIC-16 BIOS package</li> <li>Once you have labeled each of the pins, connect them to the RTE's SPI    header</li> </ol>"},{"location":"guides/lab-assembly/asrock_spc741d8/#complete-setup","title":"Complete Setup","text":"<p>After preparing all of the connections, three activities should also be performed to enable all of the test stand features:</p> <ol> <li> <p>Connect Sonoff to the mains:</p> <p></p> </li> <li> <p>Connect the RTE to the Internet by using the Ethernet cable.</p> </li> <li>Connect the RTE to the mains by using the microUSB 5 V/2 A power supply.</li> </ol>"},{"location":"guides/lab-assembly/asrock_spc741d8/#theory-of-operation","title":"Theory of operation","text":"<p>The following sections describe how to use all of the enabled features:</p> <ul> <li>serial connection to the platform,</li> <li>controlling power supply,</li> <li>enabling basic power actions with the platform (power off/power on/reset),</li> <li>external flashing with the RTE,</li> <li>device power status readout.</li> </ul>"},{"location":"guides/lab-assembly/asrock_spc741d8/#serial-connection_1","title":"Serial connection","text":"<p>The method of setting and using serial connection is described in the Serial connection guide.</p>"},{"location":"guides/lab-assembly/asrock_spc741d8/#power-supply-controlling_1","title":"Power supply controlling","text":"<p>Power supply controlling (in this case: controlling the state of Sonoff) should be performed with osfv_cli.</p> <p>To perform basic power operations use the commands described below:</p> <ol> <li> <p>Turn on the power supply:</p> <pre><code>osfv_cli sonoff --sonoff_ip &lt;sonoff_ip_address&gt; on\n</code></pre> </li> <li> <p>Turn off the power supply:</p> <pre><code>osfv_cli sonoff --sonoff_ip &lt;sonoff_ip_address&gt; off\n</code></pre> </li> </ol>"},{"location":"guides/lab-assembly/asrock_spc741d8/#basic-power-operations","title":"Basic power operations","text":"<p>Basic power operations should be performed based on the osfv_cli. To perform basic power operations use the commands described below:</p> <ol> <li> <p>Turn on the platform:</p> <pre><code>osfv_cli rte --rte_ip &lt;rte_ip_address&gt; pwr on\n</code></pre> </li> <li> <p>Turn off the platform:</p> <pre><code>osfv_cli rte --rte_ip &lt;rte_ip_address&gt; pwr off\n</code></pre> </li> <li> <p>Reset the platform:</p> <pre><code>osfv_cli rte --rte_ip &lt;rte_ip_address&gt; pwr reset\n</code></pre> </li> </ol> <p>Note, that in order for the above commands to work properly, the platform should be powered up: both Sonoff and the power supply must be turned on.</p>"},{"location":"guides/lab-assembly/asrock_spc741d8/#external-flashing","title":"External flashing","text":"<p>The external flashing procedure should be performed using OSFV cli.</p> <p>For external flashing hardware connection please refer to the board's recovery section (setup with RTE).</p>"},{"location":"guides/lab-assembly/asrock_spc741d8/#ethernet","title":"Ethernet","text":"<p>The board's IPMI Ethernet (2) as well as second Ethernet port (4) for host should be connected to the network.</p> <p></p>"},{"location":"guides/lab-assembly/gigabyte_mz33_ar1/","title":"Laboratory stand dedicated to MGigabyte MZ33-AR1 platform assembly guide","text":""},{"location":"guides/lab-assembly/gigabyte_mz33_ar1/#introduction","title":"Introduction","text":"<p>This document describes platform-specific details for assembling an Gigabyte MZ33-AR1 testing stand. Use this document as reference while going through Generic Testing Stand Setup</p>"},{"location":"guides/lab-assembly/gigabyte_mz33_ar1/#prerequisites","title":"Prerequisites","text":"<p>The below table contains information about all elements which are needed to create the testing stand.</p> <ul> <li>Gigabyte MZ33-AR1 platform</li> <li>RTE v1.1.0</li> <li>Sonoff S20 type E</li> <li>9x standard female-female connection wire 2.54 mm raster</li> <li>Pomona SOIC8 clip</li> <li>DB9 null modem cable</li> <li>Board manual</li> </ul>"},{"location":"guides/lab-assembly/gigabyte_mz33_ar1/#connections","title":"Connections","text":"<p>The following sections describe how to enable all of the following features:</p> <ul> <li>serial connection to the platform,</li> <li>controlling power supply,</li> <li>enabling basic power actions with the platform (power off/power on/reset),</li> <li>external flashing with the RTE,</li> </ul>"},{"location":"guides/lab-assembly/gigabyte_mz33_ar1/#serial-connection","title":"Serial connection","text":"<p>Connect the DB9 null moden cable to the RTE DB9 connector and DB9 connector on the rear panel of Gigabyte MZ33-AR1.</p>"},{"location":"guides/lab-assembly/gigabyte_mz33_ar1/#power-supply-controlling","title":"Power supply controlling","text":"<p>Connect the PSU power cord to Sonoff.</p>"},{"location":"guides/lab-assembly/gigabyte_mz33_ar1/#basic-power-operations-enabling","title":"Basic power operations enabling","text":"<p>Connect the RTE J11 header to the platform JFP1 header as described in the table:</p> RTE Gigabyte MZ33-AR1 FP_1 J11 pin 9 FP_1 pin 11 (PWR_ON) J11 pin 8 FP_1 pin 15 (RST) J15 pin 1 (GND) FP_1 pin 13 (GND) J10 pin 1 FP_1 pin 5  (PWR LED-) <p>The <code>Power LED-</code> has inverted polarity. When board is running, its state is low. When board is off, then the state is high. <code>Power LED+</code> is always high when PSU is on.</p>"},{"location":"guides/lab-assembly/gigabyte_mz33_ar1/#external-flashing-enabling","title":"External flashing enabling","text":"<ol> <li> <p>Connect the wire cables to the Pomona clip.</p> <p> </p> </li> <li> <p>Connect the Pomona clip to the SPI header    on RTE.</p> SPI header Pomona clip Vcc pin 5 (Vcc) GND pin 4 (GND) CS pin 1 (CS) SCLK pin 7 (CLK) MISO pin 2 (MISO) MOSI pin 8 (MOSI) <p></p> </li> <li> <p>Clip on the BIOS chip on the board:</p> <p></p> </li> </ol>"},{"location":"guides/lab-assembly/gigabyte_mz33_ar1/#complete-setup","title":"Complete Setup","text":"<p>After preparing all of the connections also three activities should be performed to enable all of the test stand features:</p> <ol> <li> <p>Connect Sonoff to the mains:</p> <p></p> </li> <li> <p>Connect the RTE to the Internet by using the Ethernet cable.</p> </li> <li>Connect the RTE to the mains by using the microUSB 5 V/2 A power supply.</li> </ol> <p>Complete setup should looks as follows:</p> <p> </p>"},{"location":"guides/lab-assembly/gigabyte_mz33_ar1/#theory-of-operation","title":"Theory of operation","text":"<p>The following sections describe how to use all of the enabled features:</p> <ul> <li>serial connection to the platform,</li> <li>controlling power supply,</li> <li>enabling basic power actions with the platform (power off/power on/reset),</li> <li>external flashing with the RTE,</li> <li>device power status readout.</li> </ul>"},{"location":"guides/lab-assembly/gigabyte_mz33_ar1/#serial-connection_1","title":"Serial connection","text":"<p>The method of setting and using serial connection is described in the Serial connection guide.</p>"},{"location":"guides/lab-assembly/gigabyte_mz33_ar1/#power-supply-controlling_1","title":"Power supply controlling","text":"<p>Power supply controlling (in this case: controlling the state of Sonoff) should be performed with osfv_cli.</p> <p>To perform basic power operations use the commands described below:</p> <ol> <li> <p>Turn on the power supply:</p> <pre><code>osfv_cli sonoff --sonoff_ip &lt;sonoff_ip_address&gt; on\n</code></pre> </li> <li> <p>Turn off the power supply:</p> <pre><code>osfv_cli sonoff --sonoff_ip &lt;sonoff_ip_address&gt; off\n</code></pre> </li> </ol>"},{"location":"guides/lab-assembly/gigabyte_mz33_ar1/#basic-power-operations","title":"Basic power operations","text":"<p>Basic power operations should be performed based on the osfv_cli. To perform basic power operations use the commands described below:</p> <ol> <li> <p>Turn on the platform:</p> <pre><code>osfv_cli rte --rte_ip &lt;rte_ip_address&gt; pwr on\n</code></pre> </li> <li> <p>Turn off the platform:</p> <pre><code>osfv_cli rte --rte_ip &lt;rte_ip_address&gt; pwr off\n</code></pre> </li> <li> <p>Reset the platform:</p> <pre><code>osfv_cli rte --rte_ip &lt;rte_ip_address&gt; pwr reset\n</code></pre> </li> </ol> <p>Note, that in order for the above commands to work properly, the platform should be powered up: both Sonoff and the power supply must be turned on.</p>"},{"location":"guides/lab-assembly/gigabyte_mz33_ar1/#external-flashing","title":"External flashing","text":"<p>The external flashing procedure should be performed using OSFV cli.</p> <p>For external flashing hardware connection please refer to the board's recovery section (setup with RTE).</p>"},{"location":"guides/lab-assembly/gigabyte_mz33_ar1/#ethernet","title":"Ethernet","text":"<p>The board IPMI Ethernet (5) as well as first Ethernet port (4) for host should be connected to the network.</p> <p></p>"},{"location":"guides/lab-assembly/minnowboard-turbot/","title":"Dasharo compatible with MinnowBoard Turbot - lab assembly guide","text":""},{"location":"guides/lab-assembly/minnowboard-turbot/#intro","title":"Intro","text":"<p>This document gathers various notes and documentation useful for development of Dasharo compatible with the MinnowBoard Turbot platform.</p>"},{"location":"guides/lab-assembly/minnowboard-turbot/#hardware-connection","title":"Hardware connection","text":""},{"location":"guides/lab-assembly/minnowboard-turbot/#requirements","title":"Requirements","text":"<ul> <li> <p>RTE</p> </li> <li> <p>USB-UART converter</p> </li> <li> <p>DC Jack - DC Jack wire</p> </li> </ul>"},{"location":"guides/lab-assembly/minnowboard-turbot/#serial","title":"Serial","text":"<p>MinnowBoard exposes a pin header with debug UART on <code>J4</code>.</p> <ul> <li>Attach the pins on MinnowBoard to the USB-UART converter.</li> </ul> USB-UART converter Minnowboard Uart header (J4) GND 1 (GND) TX 4 (RX) RX 5 (TX)"},{"location":"guides/lab-assembly/minnowboard-turbot/#spi","title":"SPI","text":"RTE header J7 pin Minnowboard header J1 pin 1 (NC) 3.3V connect from RTE J9 pin 1 2 (GND) 2 (GND) 3 (CS) 3 (SPICS#) via 1.2 kOhm resistor 4 (SCLK) 4 (SPICLK) 5 (MISO) 5 (SPIDI) 6 (MOSI) 6 (SPIDO) 7 (NC) Not connected 8 (NC) Not connected"},{"location":"guides/lab-assembly/minnowboard-turbot/#power-supply","title":"Power supply","text":"<ul> <li>Connect 5V power supply to RTE <code>J12</code> connector</li> <li>Connect RTE <code>J13</code> connector to MinnowBoard <code>J9</code> connector with a DC Jack - DC   Jack wire</li> </ul> <p>You can control the power supply using the osfv_cli tool:</p> <pre><code>osfv_cli rte --rte_ip &lt;rte-ip&gt; --model minnowmax rel tgl\n</code></pre> <ul> <li>Power switch can also be controlled from the RTE. Connect the power control pins according to the following table:</li> </ul> RTE MinnowBoard J11 Pin 9 J5 Pin 1 J15 GND J5 Pin 2 <p>The power state can be controlled with the <code>osfv_cli</code> script:</p> <pre><code>osfv_cli rte --rte_ip &lt;rte-ip&gt; --model minnowmax pwr on\nosfv_cli rte --rte_ip &lt;rte-ip&gt; --model minnowmax pwr off\n</code></pre> <ul> <li>Example setup:</li> </ul> <p></p>"},{"location":"guides/lab-assembly/minnowboard-turbot/#flashing-firmware","title":"Flashing firmware","text":"<p>You can flash firmware with the <code>osfv_cli</code> tool. Before trying to flash make sure that SPI is connected properly.</p> <pre><code>osfv_cli rte --rte_ip &lt;rte_ip&gt; --model minnowmax flash write --rom &lt;path_to_binary&gt;\n</code></pre>"},{"location":"guides/lab-assembly/msi-zx90/","title":"Laboratory stand dedicated to MSI PRO Z690-A/Z790-P platforms assembly guide","text":""},{"location":"guides/lab-assembly/msi-zx90/#introduction","title":"Introduction","text":"<p>This document describes platform-specific details for assembling an MSI PRO Z690-A and Z790-P testing stand. Use this document as reference while going through Generic Testing Stand Setup</p>"},{"location":"guides/lab-assembly/msi-zx90/#prerequisites","title":"Prerequisites","text":"<p>The below table contains information about all elements which are needed to create the testing stand.</p> <ul> <li>MSI PRO Z690-A or MSI PRO Z790-P platform</li> <li>RTE v1.1.0</li> <li>Sonoff S20 type E</li> <li>4x standard female-female connection wire 2.54 mm raster</li> <li>7x standard female-female connection wire 2.54/2.00 mm raster</li> <li>USB-UART converter with 4-wire cable</li> <li>4-pin header 2.54 mm raster</li> </ul>"},{"location":"guides/lab-assembly/msi-zx90/#msi-pro-z790-p","title":"MSI PRO Z790-P","text":"<p>MSI PRO Z790-P platform should be prepared in accordance with the Motherboard assembly documentation.</p>"},{"location":"guides/lab-assembly/msi-zx90/#connections","title":"Connections","text":"<p>The following sections describe how to enable all of the following features:</p> <ul> <li>serial connection to the platform,</li> <li>controlling power supply,</li> <li>enabling basic power actions with the platform (power off/power on/reset),</li> <li>external flashing with the RTE,</li> <li>device power status readout.</li> </ul>"},{"location":"guides/lab-assembly/msi-zx90/#serial-connection","title":"Serial connection","text":"<ol> <li> <p>Attach the jumpers in the RTE J16 header to enable header J18:</p> Jumper position (TX) Jumper position (RX) EXT + COM EXT + COM </li> <li> <p>Connect the RTE J18 header to the platform JBD1 header as described in the     table:</p> RTE MSI PRO Z690-A/Z790-P J18 pin 1 (GND) JBD1 pin 1 (pin closer to JBAT1) J18 pin 2 (RX) JBD1 pin 2 (pin further from JBAT1) <p>Note: Pins on JBD1 are not described in the documentation. They have been discovered experimentally. Pay attention to the connections.</p> <p> </p> </li> </ol>"},{"location":"guides/lab-assembly/msi-zx90/#power-supply-controlling","title":"Power supply controlling","text":"<p>Connect SeaSonic FOCUS Plus Platinum to Sonoff.</p>"},{"location":"guides/lab-assembly/msi-zx90/#basic-power-operations-enabling","title":"Basic power operations enabling","text":"<p>Connect the RTE J11 header to the platform JFP1 header as described in the table:</p> RTE MSI PRO Z690-A/Z790-P J11 pin 9 JFP1 pin 6 (PWR_ON) J11 pin 8 JFP1 pin 7 (RST) J15 pin 1 (GND) JFP1 pin 5 (GND) <p> </p>"},{"location":"guides/lab-assembly/msi-zx90/#external-flashing-enabling","title":"External flashing enabling","text":""},{"location":"guides/lab-assembly/msi-zx90/#without-discrete-tpm","title":"Without discrete TPM","text":"<p>Connect the RTE SPI header to the platform as described in the table:</p> RTE SPI header MSI PRO Z690-A/Z790-P J7 pin 1 (Vcc) JTPM1 pin 1 (SPI Power) J7 pin 2 (GND) JTPM1 pin 7 (GND) J7 pin 3 (CS) JTPM1 pin 5 (RESERVED / BIOS SPI CS pin) J7 pin 4 (SCLK) JTPM1 pin 6 (SPI Clock) J7 pin 5 (MISO) JTPM1 pin 3 (MISO) J7 pin 6 (MOSI) JTPM1 pin 4 (MOSI) <p>Note: external access to the flash chip is possible only from the JTPM header. JTPM1 is a 2mm pitch header, you will need 2mm to 2.54mm female-female dupont wires to connect to RTE.</p> <p> </p>"},{"location":"guides/lab-assembly/msi-zx90/#with-discrete-tpm","title":"With discrete TPM","text":"<p>Alternative connection with TPM and external flashing requires some preparation before a TPM can flashing wires can be connected. You will need:</p> <ul> <li>flat screwdriver</li> <li>pliers</li> <li>MSI SPI TPM 2.0</li> <li>6x test hook clips</li> <li>a 2mm pitch header 2x6 pin with long through pins</li> </ul> <p></p> <ol> <li> <p>Push down the black stopper down. You may help yourself with a small flat    screwdriver by creafully pushing it in the points 1, 2 and 3 shown in the    picture below:</p> <p></p> </li> <li> <p>Repeat pushing it down until the TPM goes fully in, leaving a small gap    between TPM connector and the header's black shield:</p> <p></p> </li> <li> <p>MSI TPM header has one \"no-pin\". Locate it on the TPM module and mark the    pin on the header to be removed:</p> <p></p> </li> <li> <p>Bend the marked pin to be removed:</p> <p></p> </li> <li> <p>Carefully keep bending the marked pin forwards and backwards until it    breaks:</p> <p></p> </li> <li> <p>Put the TPM onto the header and push the black shield up so that the gap is    removed:</p> <p></p> </li> <li> <p>Connect the test hook clips to the header's legs so that it matches the    JTPM1's SPI power, GND, BIOS SPI CS, SPI clock, MISO, MOSI:</p> <p> </p> </li> <li> <p>Connect such \"spider\" to the mainboard's JTPM1 header (remember to match    the \"no-pin: location).</p> </li> <li> <p>Connect the femal pin side of the test hook clips to the RTE:</p> RTE SPI header MSI Z690-A J7 pin 1 (Vcc) JTPM1 pin 1 (SPI Power) J7 pin 2 (GND) JTPM1 pin 7 (GND) J7 pin 3 (CS) JTPM1 pin 5 (RESERVED / BIOS SPI CS pin) J7 pin 4 (SCLK) JTPM1 pin 6 (SPI Clock) J7 pin 5 (MISO) JTPM1 pin 3 (MISO) J7 pin 6 (MOSI) JTPM1 pin 4 (MOSI) </li> </ol>"},{"location":"guides/lab-assembly/msi-zx90/#device-power-status-readout","title":"Device power status readout","text":"<p>Connect the RTE J1 header to the platform JFP1 header as shown in the picture below:</p> <p></p> <p>The values \u200b\u200bof <code>R1</code>, <code>R2</code>, <code>V1</code> and <code>V2</code> should meet the relationship according to the formula <code>R1/R2 = V2/V1</code>. <code>V1</code> cannot be greater than 3.3V (RTE property).</p>"},{"location":"guides/lab-assembly/msi-zx90/#complete-setup","title":"Complete Setup","text":"<p>After preparing all of the connections also three activities should be performed to enable all of the test stand features:</p> <ol> <li> <p>Connect Sonoff to the mains:</p> <p></p> </li> <li> <p>Connect the RTE to the Internet by using the Ethernet cable.</p> </li> <li>Connect the RTE to the mains by using the microUSB 5 V/2 A power supply.</li> </ol> <p>Complete setup should looks as follows:</p> <p></p>"},{"location":"guides/lab-assembly/msi-zx90/#theory-of-operation","title":"Theory of operation","text":"<p>The following sections describe how to use all of the enabled features:</p> <ul> <li>serial connection to the platform,</li> <li>controlling power supply,</li> <li>enabling basic power actions with the platform (power off/power on/reset),</li> <li>external flashing with the RTE,</li> <li>device power status readout.</li> </ul>"},{"location":"guides/lab-assembly/msi-zx90/#serial-connection_1","title":"Serial connection","text":"<p>The method of setting and using serial connection is described in the Serial connection guide.</p>"},{"location":"guides/lab-assembly/msi-zx90/#power-supply-controlling_1","title":"Power supply controlling","text":"<p>Power supply controlling (in this case: controlling the state of Sonoff) should be performed based on the <code>sonoff.sh</code> script implemented in <code>meta-rte</code> (OS image dedicated to the RTE platform).</p> <p>Note, that before using the above-mentioned script, it should be modified and <code>SONOFF_IP</code> parameter should be set in accordance with obtained Sonoff IP address.</p> <p>To perform basic power operations use the below-described commands:</p> <ol> <li> <p>Turn on the power supply:</p> <pre><code>./sonoff on\n</code></pre> </li> <li> <p>Turn off the power supply:</p> <pre><code>./sonoff on\n</code></pre> </li> </ol>"},{"location":"guides/lab-assembly/msi-zx90/#basic-power-operations","title":"Basic power operations","text":"<p>Basic power operations should be performed based on the <code>rte_ctrl</code> script implemented in <code>meta-rte</code> (OS image dedicated to the RTE platform). To perform basic power operations use the below-described commands:</p> <ol> <li> <p>Turn on the platform:</p> <pre><code>rte_ctrl pon\n</code></pre> </li> <li> <p>Turn off the platform:</p> <pre><code>rte_ctrl poff\n</code></pre> </li> <li> <p>Reset the platform:</p> <pre><code>rte_ctrl reset\n</code></pre> </li> </ol> <p>Note, that in order for the above commands to work properly, the platform should be powered up: both Sonoff and the power supply must be turned on.</p>"},{"location":"guides/lab-assembly/msi-zx90/#external-flashing","title":"External flashing","text":"<p>The external flashing procedure should be performed based on the scripts implemented on the RTE platform. To perform the flashing operation reproduce, the below-described steps:</p> <p>Note: the <code>flash.sh</code> script, used in this chapter, is available only in 0.8.1 or newer RTE OS releases, check meta-rte for more inf..</p> <ol> <li> <p>By using <code>scp</code> put the requested Dasharo file to the RTE:</p> <pre><code>scp &lt;path_to_firmware&gt;/&lt;firmware_file&gt; root@&lt;RTE_IP&gt;:/tmp/coreboot.rom\n</code></pre> <p>Where:</p> <ul> <li><code>path_to_firmware</code> - path to firmware, which should send to RTE,</li> <li><code>firmware_file</code> - the name of the firmware file, which should be sent     to RTE,</li> <li><code>RTE_IP</code> - IP address of the connected RTE.</li> </ul> </li> <li> <p>Login to RTE via <code>ssh</code> or <code>minicom</code>.</p> </li> <li> <p>Read the flash chip by executing the following command on RTE:</p> <pre><code>./flash.sh read tmp/dump.rom\n</code></pre> </li> <li> <p>If the reading was successful, the output from the command above should     contain the phrase <code>Verifying flash... VERIFIED</code>.</p> </li> <li> <p>Write the flash chip by executing the following command on RTE:</p> <pre><code>./flash.sh write /tmp/coreboot.rom\n</code></pre> <p>Do not interrupt the flashing procedure in any way (especially by changing connections). It may cause hardware damage!</p> </li> <li> <p>If the reading was successful, the output from the command above should     contain the phrase <code>Verifying flash... VERIFIED</code>.</p> </li> </ol>"},{"location":"guides/lab-assembly/msi-zx90/#device-power-status-readout_1","title":"Device power status readout","text":"<p>To read the current power status use the following command:</p> <pre><code>cat /sys/class/gpio/gpio12/value\n</code></pre> <p>Example output:</p> <ul> <li><code>1</code> means that the platform is turned on.</li> <li><code>0</code> means that the platform is turned off.</li> </ul>"},{"location":"guides/lab-assembly/msi-zx90/#usb-devices","title":"USB devices","text":"<p>USB 3.x (blue) ports in the 4 port column of rear I/O have an issue where if they are populated during boot, the boot process will slow to a crawl. Do not populate these ports on boards installed in the lab.</p>"},{"location":"guides/lab-assembly/novacustom/","title":"Laboratory stand dedicated to NovaCustom platforms assembly guide","text":""},{"location":"guides/lab-assembly/novacustom/#introduction","title":"Introduction","text":"<p>This document describes platform-specific details for assembling NovaCustom platforms in the rack. Use this document as reference while going through Generic Testing Stand Setup</p>"},{"location":"guides/lab-assembly/novacustom/#prerequisites","title":"Prerequisites","text":"<p>The below table contains platform-specific information about all elements which are needed to create testing stands for NovaCustom machines.</p> LaptopsNUC BOX <ul> <li>RTE v1.1.0</li> <li>RTE power supply 5V 2A Micro-USB</li> <li>Sonoff S26R2</li> <li>PiKVM</li> <li>FTDI FT232 USB-UART adapter</li> <li>3x standard female-female DuPont 2.54mm wire</li> </ul> <ul> <li>RTE v1.1.0</li> <li>RTE power supply 5V 2A Micro-USB</li> <li>Sonoff S26R2</li> <li>FTDI FT232 USB-UART adapter</li> <li>2x female-female 2.54mm wires</li> </ul>"},{"location":"guides/lab-assembly/novacustom/#theory-of-operation","title":"Theory of operation","text":"<p>The following sections describe how to use all of the enabled features:</p> <ul> <li>serial connection to the platform,</li> <li>controlling power supply,</li> <li>enabling basic power actions with the platform (power off/power on/reset),</li> </ul>"},{"location":"guides/lab-assembly/novacustom/#preparation","title":"Preparation","text":"<p>Prepare the platform for remote control:</p>"},{"location":"guides/lab-assembly/novacustom/#power-on-ac","title":"Power on AC","text":"<p>Due to the lack of an exposed power button signal, we're depending on the Power on AC feature to remotely power the device on and off. Follow the steps below to prepare the platform:</p> <ul> <li>Go to the UEFI Setup Menu -&gt; Dasharo System Features -&gt; Power Management   Options</li> <li>Switch the option <code>Power state after power/AC loss</code> to <code>Powered On</code></li> <li>Save and reset the platform</li> <li>Disconnect the internal battery</li> </ul>"},{"location":"guides/lab-assembly/novacustom/#internal-display","title":"Internal display","text":"<p>The internal display may be automatically used by the operating system or firmware, preventing the use of PiKVM. To work around this, ensure the internal display is disconnected.</p> <p>The internal display eDP connector is typically located near the CPU and the heatsink, and requires some force to pull out:</p> <p></p>"},{"location":"guides/lab-assembly/novacustom/#theory-of-operation_1","title":"Theory of operation","text":"<p>The following sections describe how to use all of the enabled features:</p> <ul> <li>serial connection to the platform,</li> <li>controlling power supply,</li> <li>enabling basic power actions with the platform (power off/power on/reset),</li> </ul>"},{"location":"guides/lab-assembly/novacustom/#preparation_1","title":"Preparation","text":""},{"location":"guides/lab-assembly/novacustom/#power-and-reset-buttons","title":"Power and reset buttons","text":"<p>See the onboard header chart from the NUC BOX manual:</p> <p></p> <p>Connect the power pin to RTE pin 410, and the reset pin to RTE pin 109 following the specification.</p>"},{"location":"guides/lab-assembly/novacustom/#sonoff","title":"Sonoff","text":"<p>Connect the platform to the mains through the Sonoff smart socket to allow remote power cutting/cold boot tests.</p> <p>If for some reason you are unable to use the POWER# and RESET# pins, you can fallback to depending on the Power on AC feature to remotely power the device on and off. Follow the steps below:</p> <ul> <li>Go to the UEFI Setup Menu -&gt; Dasharo System Features -&gt; Power Management   Options</li> <li>Switch the option <code>Power state after power/AC loss</code> to <code>Powered On</code></li> <li>Save and reset the platform</li> </ul>"},{"location":"guides/lab-assembly/novacustom/#serial-connection","title":"Serial connection","text":"<p>The platform does not have an exposed native serial interface. Instead, an FTDI FT232 USB to UART adapter is used.</p> <p>Follow the steps described in this article on the OSFV repo for a detailed serial setup guide and theory of operation.</p>"},{"location":"guides/lab-assembly/novacustom/#external-flashing","title":"External flashing","text":"<p>External flashing is currently not available on these platforms.</p>"},{"location":"guides/lab-assembly/odroid-assembly-guide/","title":"Laboratory stand dedicated to Odroid-H4 platforms assembly guide","text":""},{"location":"guides/lab-assembly/odroid-assembly-guide/#introduction","title":"Introduction","text":"<p>This document describes platform-specific details for assembling Odroid H4 testing stands. Use this document as reference while going through Generic Testing Stand Setup</p>"},{"location":"guides/lab-assembly/odroid-assembly-guide/#prerequisites","title":"Prerequisites","text":"<p>The below table contains platform-specific information about all elements which are needed to create testing stands for Odroid H4.</p> <ul> <li>RTE v1.1.0</li> <li>RTE power supply 5V 2A Micro-USB</li> <li>11x standard female-female connection wire 2.54 mm raster</li> <li>Pomona 8-pin SOIC clip</li> <li>2x RJ45 cable: 1 for RTE and 1 for the platform</li> <li>NVMe disk</li> <li>eMMC module for ODROID</li> </ul> <p>For netcard setup additionally:</p> <ul> <li>1x female 2.54 mm raster connection wire with a probe hook</li> <li>2x RJ45 cable: short patchcords for the netcard ports</li> <li>SATA SSD 2.5'' instead of NVMe disk</li> <li>SSD disk adapter to SATA+power connector</li> </ul> <p>If you have a proper SATA cable and power cable for the dedicated connectors on ODROID, use them instead.</p> <p></p>"},{"location":"guides/lab-assembly/odroid-assembly-guide/#external-flashing-enabling","title":"External flashing enabling","text":"<p>Connect the RTE SPI header to the platform using the 2.54 mm female-female wires and Pomona as shown in Generic testing stand setup to the flash chip on the bottom of your platform: </p>"},{"location":"guides/lab-assembly/odroid-assembly-guide/#serial-connection","title":"Serial connection","text":"<p>The method of setting and using serial connection is described in the Serial connection guide. In this case, you will need to enable UART port and connect it to the pins 6, 8 and 10 of ODROID's Peripheral Expansion Header using 2.54 mm female-female wires.</p> RTE J18 Odroid H4 EXPANSION HEADER J18 pin 1 (TX) pin 8  APU_UART_RXD_BUF J18 pin 2 (RX) pin 10 APU_UART_TXD_BUF J18 pin 3 (GND) pin 6  GND <p></p>"},{"location":"guides/lab-assembly/odroid-assembly-guide/#netcard-specific-setup","title":"Netcard specific setup","text":"<p>When assembling a netcard in the M.2 NVMe slot, ensure the standoffs are mounted first before mounting the netcard into ODROID. Then use a screw to secure the netcard connection:</p> <p></p> <p>After assembling the netcard, connect 2x RJ45 short patchcords to ports 1-2 and 3-4.  The automated validatio nwill use that connection to verify that Ethernet ports are functional and meet performance criteria.</p> <p></p> <p>When a netcard is present in the M.2 NVMe slot, it is not possible to have an NVMe disk anymore. Thus one needs to connect an SATA disk. ODROID H4+ and H4 Ultra have 4 SATA slots, which can be used as an alternative storage. Connect the SATA cable to one of the SATA connectors. Connect the black-red wire pair for SATA power to the pins 1 and 2 of ODROID's Peripheral Expansion Header. note that the red-black wire pair has to be isolated at the end, because the exposes metal surfaces on the connector may touch the neighboring pins of the ODROID's Peripheral Expansion Header.</p> <p>If you have a proper SATA cable and power cable for the dedicated connectors on ODROID, use them instead.</p> <p></p> SATA power cable Odroid H4 EXPANSION HEADER black pin 1 GND read pin 2 +5V_RUN_H"},{"location":"guides/lab-assembly/odroid-assembly-guide/#power-led-connection","title":"Power LED connection","text":"<p>The power LED indication is used often in the validation suites to check the power state of the platform. Connect RTE J10 pin 1 with the pins 4 of ODROID's Peripheral Expansion Header using 2.54 mm female-female wire. It allows the RTE to read the power LED state.</p> RTE J10 Odroid H4 EXPANSION HEADER J18 pin 1 pin 4 +3.3V_RUN_H <p>For netcard setup use the wire with probe hook, because the SATA power cable has a thick connector, which prevents standard 2.54mm wire to be connected:</p> <p>If you have a proper SATA cable and power cable for the dedicated connectors on ODROID, use regular 2.54mm wire instead.</p> <p></p>"},{"location":"guides/lab-assembly/odroid-assembly-guide/#theory-of-operation","title":"Theory of operation","text":"<p>The following sections describe how to use all of the enabled features:</p> <ul> <li>serial connection to the platform,</li> <li>controlling power supply,</li> <li>enabling basic power actions with the platform (power off/power on),</li> <li>external flashing with the RTE.</li> </ul>"},{"location":"guides/lab-assembly/odroid-assembly-guide/#power-supply-controlling","title":"Power supply controlling","text":"<p>Power supply controlling is performed with the relay module on RTE connected to one of RTE GPIOs. Power operation should be performed using the <code>rte_ctrl</code> script implemented in <code>meta-rte</code> (OS image dedicated to the RTE platform).</p> <p>To toggle the power supply use the below command:</p> <pre><code>rte_ctrl rel\n</code></pre>"},{"location":"guides/lab-assembly/odroid-assembly-guide/#basic-power-operations","title":"Basic power operations","text":"<p>Basic power operations should be performed based on the <code>rte_ctrl</code> script implemented in <code>meta-rte</code> (OS image dedicated to the RTE platform). To perform basic power operations use the below-described commands:</p> <ol> <li> <p>Turn on the platform:</p> <pre><code>rte_ctrl pon\n</code></pre> </li> <li> <p>Turn off the platform:</p> <pre><code>rte_ctrl poff\n</code></pre> </li> </ol> <p>Note, that in order for the above commands to work properly, the platform should be powered up: both RTE Relay and the power supply must be connected and turned on.</p>"},{"location":"guides/lab-assembly/odroid-assembly-guide/#external-flashing","title":"External flashing","text":"<p>The external flashing procedure should be performed based on the scripts implemented on the RTE platform. To perform the flashing operation reproduce, the below-described steps:</p> <p>Important</p> <p>It is recommended to detect the chip with the DC jack power cable disconnected from the Odroid. If the chip is successfully detected, you can reconnect the DC power jack and proceed with your task. If the chip fails to detect after reconnecting the power, you may need to attach an additional grounding cable to the RTE. This additional grounding is not always necessary, but it can resolve detection issues if they arise.</p> <ol> <li> <p>First run the flashrom command on RTE to check if the flash is detected by     following the first three steps from this guide     , this chip requires 3.3V.</p> </li> <li> <p>Next check if the pomona is connected properly.</p> <pre><code>flashrom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000\n</code></pre> </li> <li> <p>By using <code>scp</code> put the requested Dasharo file to the RTE:</p> <pre><code>scp &lt;path_to_firmware&gt;/&lt;firmware_file&gt; root@&lt;RTE_IP&gt;:/tmp/coreboot.rom\n</code></pre> <p>Where:</p> <ul> <li><code>path_to_firmware</code> - path to firmware, which should send to RTE,</li> <li><code>firmware_file</code> - the name of the firmware file, which should be sent     to RTE,</li> <li><code>RTE_IP</code> - IP address of the connected RTE.</li> </ul> </li> <li> <p>Login to RTE via <code>ssh</code> or <code>minicom</code>.</p> </li> <li> <p>Write the flash chip by executing the following command on RTE:</p> <pre><code>flashrom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000 -w /tmp/coreboot.rom\n</code></pre> <p>Do not interrupt the flashing procedure in any way (especially by changing connections). It may cause hardware damage!</p> </li> <li> <p>If the writing was successful, the output from the command above should     contain the phrase <code>Verifying flash... VERIFIED</code>.</p> </li> </ol>"},{"location":"guides/lab-assembly/odroid-assembly-guide/#usb-devices","title":"USB devices","text":"<p>Since some issues with USB controllers may only happen on selected USB ports, it's important to plug in USB devices to all 4 USB ports of the board.</p>"},{"location":"guides/lab-assembly/odroid-assembly-guide/#nvme-disk","title":"NVMe disk","text":"<p>Connect NVMe disk to the bottom M.2 slot for SSD. The disk will serve as main storage for operating systems.</p>"},{"location":"guides/lab-assembly/odroid-assembly-guide/#emmc-module","title":"eMMC module","text":"<p>Plug ODROID eMMC module to the eMMC connector on board. eMMC is optional storage for operating systems but may be used in automated testing to validate eMMC functionality.</p> <p></p>"},{"location":"guides/lab-assembly/pcengines/","title":"Laboratory stand dedicated to PC Engines platforms assembly guide","text":""},{"location":"guides/lab-assembly/pcengines/#introduction","title":"Introduction","text":"<p>This document describes platform-specific details for assembling PC Engines apu2/3/4/6 series testing stands. Author get through the procedure on PC Engines apu3 in his homelab. Use this document as reference while going through Generic Testing Stand Setup</p>"},{"location":"guides/lab-assembly/pcengines/#prerequisites","title":"Prerequisites","text":"<p>The below table contains platform-specific information about all elements which are needed to create testing stands for Protectli machines.</p> <p>Warning</p> <p>Please note that using RTE v1.0.0 or older change way how OSFV cli works. On v1.0.0 and older there is no need for additional step of enabling SPI GPIO, it is required only from v1.1.0 onwards. If it would not be reflected in model file it may lead to issues. For more details please check here.</p> <ul> <li>RTE v1.1.0 or RTE v1.0.0</li> <li>RTE power supply 5V 2A Micro-USB</li> <li>10x standard female-female connection wire 2.54 mm raster</li> <li> <p>4x RJ45 cable: 1 for RTE and 3 for the platform OR</p> <ul> <li>5x RJ45 cable for apu4: 1 for RTE and 4 for the platform</li> </ul> </li> <li> <p>apu2/3/4/6</p> </li> <li> <p>RS-232 D-Sub-D-Sub cross cable</p> </li> <li>Power to the apu2/3/4/6 is delivered by 2.5/5.5 mm DC Jack cable.</li> </ul>"},{"location":"guides/lab-assembly/pcengines/#external-flashing-enabling","title":"External flashing enabling","text":"RTE J7 pin PC Engines SPI pin 1 (VCC) 1 (VCC) 2 (GND) 2 (GND) 3 (CS) 3 (SPICS#) 4 (SCLK) 4 (SPICLK) 5 (MISO) 5 (SPIDI) 6 (MOSI) 6 (SPIDO) 7 (NC) Not connected 8 (NC) Not connected <p>SPI connection can be realized with IDC 8 pin wire, but 7th and 8th wires have to be opened.</p>"},{"location":"guides/lab-assembly/pcengines/#power-and-reset-switch-connection","title":"Power and Reset switch connection","text":"<p>Connect the RTE J11 header to the platform front panel header using 2.54mm wires as described in the table:</p> APU2/APU4APU3/APU6 RTE PC Engines J11 pin 6 J2 pin 3 (PWR) J11 pin 5 J2 pin 5 (RST) RTE PC Engines J11 pin 6 J3 pin 3 (PWR) J11 pin 5 J3 pin 5 (RST)"},{"location":"guides/lab-assembly/pcengines/#device-power-status-readout","title":"Device power status readout","text":"<p>Connect the RTE J1 header to the platform front panel header using 2.54mm wires as described in the table:</p> APU2APU3/APU4/APU6 RTE PC Engines J1 pin 1(Closer to J7 header) J4 pin 8 (APU_LED1) J1 pin 2 J4 pin 7 (APU_LED2) J1 pin 3 J4 pin 6 (APU_LED3) RTE PC Engines J1 pin 1(Closer to J7 header) J5 pin 8 (APU_LED1) J1 pin 2 J5 pin 7 (APU_LED2) J1 pin 3 J5 pin 6 (APU_LED3)"},{"location":"guides/lab-assembly/pcengines/#theory-of-operation","title":"Theory of operation","text":"<p>The following sections describe how to use all of the enabled features:</p> <ul> <li>serial connection to the platform,</li> <li>controlling power supply,</li> <li>enabling basic power actions with the platform (power off/power on/reset),</li> <li>external flashing with the RTE,</li> <li>CMOS reset.</li> </ul>"},{"location":"guides/lab-assembly/pcengines/#serial-connection","title":"Serial connection","text":"<p>The method of setting and using serial connection is described in the Serial connection guide.</p>"},{"location":"guides/lab-assembly/pcengines/#power-supply-controlling","title":"Power supply controlling","text":"<p>Power supply controlling is performed with the relay module on RTE connected to one of RTE GPIOs. Power operation should be performed using the <code>rte_ctrl</code> script implemented in <code>meta-rte</code> (OS image dedicated to the RTE platform).</p> <p>To toggle the power supply use the below command:</p> <pre><code>rte_ctrl rel\n</code></pre> <p>Or using OSFV cli from remote machine:</p> <pre><code>osfv_cli rte --model=&lt;APU2/3/4/6&gt; --rte_ip &lt;ip_address&gt; rel tgl\n</code></pre>"},{"location":"guides/lab-assembly/pcengines/#basic-power-operations","title":"Basic power operations","text":"<p>Basic power operations should be performed based on the <code>rte_ctrl</code> script implemented in <code>meta-rte</code> (OS image dedicated to the RTE platform). To perform basic power operations use the below-described commands:</p> <ol> <li> <p>Turn on the platform:</p> <pre><code>rte_ctrl pon\n</code></pre> </li> <li> <p>Turn off the platform:</p> <pre><code>rte_ctrl poff\n</code></pre> </li> <li> <p>Reset the platform:</p> <pre><code>rte_ctrl reset\n</code></pre> </li> </ol> <p>Or using OSFV cli from remote machine:</p> <pre><code>osfv_cli rte --model=&lt;APU2/3/4/6&gt; --rte_ip &lt;ip_address&gt; pwr on\n</code></pre> <pre><code>osfv_cli rte --model=&lt;APU2/3/4/6&gt; --rte_ip &lt;ip_address&gt; pwr off\n</code></pre> <pre><code>osfv_cli rte --model=&lt;APU2/3/4/6&gt; --rte_ip &lt;ip_address&gt; pwr reset\n</code></pre>"},{"location":"guides/lab-assembly/pcengines/#cmos-clear","title":"CMOS clear","text":"<p>To clear the CMOS, turn off the power with Sonoff or relay and use the following commands:</p> <pre><code>echo 1 &gt; /sys/class/gpio/gpio412/value\nsleep 10\necho 0 &gt; /sys/class/gpio/gpio412/value\n</code></pre>"},{"location":"guides/lab-assembly/pcengines/#s1-button","title":"S1 button","text":"<p>S1 button is used to re-enable disabled serial console. More information about this feature can be found in:</p> <ul> <li>S1 switch button properties</li> <li>Disable serial console and enable with S1 button</li> </ul> <p>To expose this feature to OSFV we have to add additional wire between:</p> APU2APU3/APU4/APU6 RTE J11 pin PC Engines J4 pin 7 5 (MODESW#) RTE J11 pin PC Engines J5 pin 7 5 (MODESW#)"},{"location":"guides/lab-assembly/pcengines/#usb-devices","title":"USB devices","text":"<p>Since some issues with USB controllers may only happen on select USB ports, it's important to plug in USB devices to all external USB ports of the board.</p>"},{"location":"guides/lab-assembly/pcengines/#sd-card","title":"SD card","text":"<p>Insert at least 16GB SD card into platform SD card socket.</p>"},{"location":"guides/lab-assembly/pcengines/#bios-wp","title":"BIOS WP","text":"<p>BIOS WP (aka SPIWP#) pin can be used to enable or disable write protection. Feature was described in sortbootorder documentation.</p> APU2APU3/APU4/APU6 RTE J11 pin PC Engines J2 pin 9 1 (SPIWP#) RTE J11 pin PC Engines J3 pin 9 1 (SPIWP#)"},{"location":"guides/lab-assembly/protectli/","title":"Laboratory stand dedicated to Protectli platforms assembly guide","text":""},{"location":"guides/lab-assembly/protectli/#introduction","title":"Introduction","text":"<p>This document describes platform-specific details for assembling Protectli VP2410, VP2420, VP4630/VP4650/VP4670, V1000 series testing stands. Use this document as reference while going through Generic Testing Stand Setup</p>"},{"location":"guides/lab-assembly/protectli/#prerequisites","title":"Prerequisites","text":"<p>The below table contains platform-specific information about all elements which are needed to create testing stands for Protectli machines.</p> <ul> <li>RTE v1.1.0</li> <li>RTE power supply 5V 2A Micro-USB</li> <li>6x standard female-female connection wire 2.54 mm raster</li> <li>6x standard female-female connection wire 2.54/2.00 mm raster</li> <li>2x RJ45 cable: 1 for RTE and 1 for the platform</li> </ul> <p>When there are 4 or more Ethernet ports on the platform, connect ports 3 and 4 together with an additional RJ45 cable.</p> VP2410VP2420VP4630/VP4650/VP4670V1000 seriesVP6630/VP6650/VP6670VP2430/VP2440 <ul> <li>VP2410 platform</li> <li>Power supply for the platform: 12V 5A</li> <li>Micro-USB to USB-A male-male cable for console</li> </ul> <ul> <li>VP2420 platform</li> <li>Power supply for the platform: 12V 5A</li> <li>Micro-USB to USB-A male-male cable for console</li> </ul> <ul> <li>VP4630/VP4650/VP4670 platform</li> <li>Sonoff S20 type E (relay unused due to disruptions in power during high CPU load)</li> <li>USB-UART converter with 4-wire cable</li> <li>4-pin header 2.54 mm raster</li> <li>Pomona SOIC8 clip</li> <li>Micro-USB to USB-A male-male cable for console</li> <li>Power supply for the platform:<ul> <li>VP4630: 12V 5A</li> <li>VP4650/VP4670: 12V 7.5A</li> </ul> </li> </ul> <ul> <li>V1000 series platform</li> <li>Power supply for the platform: 12V 4A</li> <li>USB-C to USB-A male-male cable for console</li> </ul> <ul> <li>VP6630/VP6650/VP6670 platform</li> <li>Sonoff S20 type E (relay unused due to disruptions in power during high CPU load)</li> <li>USB-UART converter with 4-wire cable</li> <li>4-pin header 2.54 mm raster</li> <li>USB-C to USB-A male-male cable for console</li> <li>Power supply for the platform: 12V 10A</li> </ul> <ul> <li>VP2430/VP2440 platform</li> <li>USB-C to USB-A male-male cable for console</li> <li>Power supply for the platform: 12V 5A</li> </ul>"},{"location":"guides/lab-assembly/protectli/#external-flashing-enabling","title":"External flashing enabling","text":"VP2410VP2420VP4630/VP4650/VP4670V1000 seriesVP6630/VP6650/VP6670VP2430/VP2440 <p>External flashing not possible with Pomona clip, the flash chip lies under the chassis, which serves the cooling purposes. One option is to drill a hole in the case where the flash chip lies.</p> <p>External flashing not possible with Pomona clip, the flash chip lies under the SODIMM module.</p> <p>Flash chip is socketed. One has to desolder the socket, solder the flash chip in place of the socket and connect the Pomona SOIC8 clip.</p> <p>Connect the RTE SPI header to the platform using the 2.54mm female-female wires as described in the table:</p> RTE SPI header 6pin flash header J7 pin 1 (Vcc)  pin 1 (SPI Power) J7 pin 2 (GND)  pin 2 (GND) J7 pin 3 (CS)  pin 4 (BIOS SPI CS pin) J7 pin 4 (SCLK)  pin 6 (SPI Clock) J7 pin 5 (MISO)  pin 5 (MISO) J7 pin 6 (MOSI)  pin 3 (MOSI) <p>Connect the J1 and J2 flash headers to the SPI header on RTE using 2.54mm to 2mm wires as described in the table:</p> RTE SPI header J2 flash header J7 pin 1 (Vcc) pin 1 (Vcc) J7 pin 4 (SCLK) pin 3 (CLK) J7 pin 6 (MOSI) pin 4 (MOSI) RTE SPI header J1 flash header J7 pin 2 (GND) pin 4 (GND) J7 pin 3 (CS) pin 1 (CS) J7 pin 5 (MISO) pin 2 (MISO) <p>Connect the J1 and J2 flash headers to the SPI header on RTE using 2.54mm to 2mm wires as described in the table:</p> RTE SPI header J2 flash header J7 pin 1 (Vcc) pin 1 (Vcc) J7 pin 4 (SCLK) pin 3 (CLK) J7 pin 6 (MOSI) pin 4 (MOSI) RTE SPI header J1 flash header J7 pin 2 (GND) pin 4 (GND) J7 pin 3 (CS) pin 1 (CS) J7 pin 5 (MISO) pin 2 (MISO)"},{"location":"guides/lab-assembly/protectli/#cmos-reset-circuit","title":"CMOS reset circuit","text":"VP2410VP2420VP4630/VP4650/VP4670V1000 seriesVP6630/VP6650/VP6670VP2430/VP2440 <p>Connect the RTE J11 header to the platform JCMOS1 header using 2.54mm to 2mm wires as described in the table:</p> RTE Protectli J11 pin 8 JCMOS1 pin 1 (CLR_CMOS) Any GND JCMOS1 pin 2 (GND) <p>Resetting CMOS is required for proper external flashing.</p> <p>Connect the RTE J11 header to the platform JCMOS1 header using 2.54mm to 2mm wires as described in the table:</p> RTE Protectli J11 pin 8 JCMOS1 pin 1 (CLR_CMOS) Any GND JCMOS1 pin 2 (GND) <p>Resetting CMOS is required for proper external flashing.</p> <p>Connect the RTE J11 header to the platform JCMOS1 header using 2.54mm to 2mm wires as described in the table:</p> RTE Protectli J11 pin 8 JCMOS1 pin 2 (CLR_CMOS) Any GND JCMOS1 pin 1 (GND) <p>Resetting CMOS is required for proper external flashing.</p> <p>Connect the RTE J11 header to the platform CLR_CMOS1 header using 2.54mm to 2mm wires as described in the table:</p> RTE Protectli J11 pin 8 CLR_CMOS1 pin 2 (CLR_CMOS) Any GND CLR_CMOS1 pin 3 (GND) <p>Resetting CMOS is required for proper external flashing.</p> <p>Connect the RTE J11 header to the platform JCMOS1 header using 2.54mm to 2mm wires as described in the table:</p> RTE Protectli J11 pin 8 JCMOS1 pin 2 (CLR_CMOS) Any GND JCMOS1 pin 1 (GND) <p>Resetting CMOS is required for proper external flashing.</p> <p>Connect the RTE J11 header to the platform JCMOS1 header using 2.54mm to 2.54mm wires as described in the table:</p> RTE Protectli J11 pin 8 JCMOS1 pin 2 (CLR_CMOS) Any GND JCMOS1 pin 1 (GND) <p>Resetting CMOS is required for proper external flashing.</p>"},{"location":"guides/lab-assembly/protectli/#theory-of-operation","title":"Theory of operation","text":"<p>The following sections describe how to use all of the enabled features:</p> <ul> <li>serial connection to the platform,</li> <li>controlling power supply,</li> <li>enabling basic power actions with the platform (power off/power on/reset),</li> <li>external flashing with the RTE,</li> <li>CMOS reset.</li> </ul>"},{"location":"guides/lab-assembly/protectli/#serial-connection","title":"Serial connection","text":"<p>The method of setting and using serial connection is described in the Serial connection guide.</p>"},{"location":"guides/lab-assembly/protectli/#power-supply-controlling","title":"Power supply controlling","text":"VP2410VP2420VP4630/VP4650/VP4670V1000 seriesVP6630/VP6650/VP6670VP2430/VP2440 <p>Power supply controlling is performed with the relay module on RTE connected to one of RTE GPIOs. Power operation should be performed using the <code>rte_ctrl</code> script implemented in <code>meta-rte</code> (OS image dedicated to the RTE platform).</p> <p>To toggle the power supply use the below command:</p> <pre><code>```bash\nrte_ctrl rel\n```\n</code></pre> <p>Power supply controlling is performed with the relay module on RTE connected to one of RTE GPIOs. Power operation should be performed using the <code>rte_ctrl</code> script implemented in <code>meta-rte</code> (OS image dedicated to the RTE platform).</p> <p>To toggle the power supply use the below command:</p> <pre><code>```bash\nrte_ctrl rel\n```\n</code></pre> <p>Power supply controlling (in this case: controlling the state of Sonoff) should be performed based on the <code>sonoff.sh</code> script implemented in <code>meta-rte</code> (OS image dedicated to the RTE platform).</p> <p>Note, that before using the above-mentioned script, it should be modified and <code>SONOFF_IP</code> parameter should be set in accordance with obtained Sonoff IP address.</p> <p>To perform basic power operations use the below-described commands:</p> <ol> <li> <p>Turn on the power supply:</p> <pre><code>osfv_cli sonoff --sonoff_ip &lt;sonoff_ip_address&gt; on\n</code></pre> </li> <li> <p>Turn off the power supply:</p> <pre><code>osfv_cli sonoff --sonoff_ip &lt;sonoff_ip_address&gt; off\n</code></pre> </li> </ol> <p>Power supply controlling is performed with the relay module on RTE connected to one of RTE GPIOs. Power operation should be performed using the <code>rte_ctrl</code> script implemented in <code>meta-rte</code> (OS image dedicated to the RTE platform).</p> <p>To toggle the power supply use the below command:</p> <pre><code>```bash\nrte_ctrl rel\n```\n</code></pre> <p>Power supply controlling (in this case: controlling the state of Sonoff) should be performed based on the <code>sonoff.sh</code> script implemented in <code>meta-rte</code> (OS image dedicated to the RTE platform).</p> <p>Note, that before using the above-mentioned script, it should be modified and <code>SONOFF_IP</code> parameter should be set in accordance with obtained Sonoff IP address.</p> <p>To perform basic power operations use the below-described commands:</p> <ol> <li> <p>Turn on the power supply:</p> <pre><code>osfv_cli sonoff --sonoff_ip &lt;sonoff_ip_address&gt; on\n</code></pre> </li> <li> <p>Turn off the power supply:</p> <pre><code>osfv_cli sonoff --sonoff_ip &lt;sonoff_ip_address&gt; off\n</code></pre> </li> </ol> <p>Power supply controlling is performed with the relay module on RTE connected to one of RTE GPIOs. Power operation should be performed using the <code>rte_ctrl</code> script implemented in <code>meta-rte</code> (OS image dedicated to the RTE platform).</p> <p>To toggle the power supply use the below command:</p> <pre><code>```bash\nrte_ctrl rel\n```\n</code></pre>"},{"location":"guides/lab-assembly/protectli/#basic-power-operations","title":"Basic power operations","text":"<p>Basic power operations should be performed based on the <code>rte_ctrl</code> script implemented in <code>meta-rte</code> (OS image dedicated to the RTE platform). To perform basic power operations use the below-described commands:</p> <ol> <li> <p>Turn on the platform:</p> <pre><code>rte_ctrl pon\n</code></pre> </li> <li> <p>Turn off the platform:</p> <pre><code>rte_ctrl poff\n</code></pre> </li> <li> <p>Reset the platform:</p> <pre><code>rte_ctrl reset\n</code></pre> </li> </ol> <p>Note, that in order for the above commands to work properly, the platform should be powered up: both Sonoff and the power supply must be turned on.</p>"},{"location":"guides/lab-assembly/protectli/#external-flashing","title":"External flashing","text":"<p>The external flashing procedure should be performed based on the scripts implemented on the RTE platform. To perform the flashing operation reproduce, the below-described steps:</p> <p>Note: the <code>flash.sh</code> script, used in this chapter, is available only in 0.8.1 or newer RTE OS releases, check meta-rte for more inf..</p> <ol> <li> <p>By using <code>scp</code> put the requested Dasharo file to the RTE:</p> <pre><code>scp &lt;path_to_firmware&gt;/&lt;firmware_file&gt; root@&lt;RTE_IP&gt;:/tmp/coreboot.rom\n</code></pre> <p>Where:</p> <ul> <li><code>path_to_firmware</code> - path to firmware, which should send to RTE,</li> <li><code>firmware_file</code> - the name of the firmware file, which should be sent     to RTE,</li> <li><code>RTE_IP</code> - IP address of the connected RTE.</li> </ul> </li> <li> <p>Login to RTE via <code>ssh</code> or <code>minicom</code>.</p> </li> <li> <p>Read the flash chip by executing the following command on RTE:</p> <pre><code>./flash.sh read tmp/dump.rom\n</code></pre> </li> <li> <p>If the reading was successful, the output from the command above should     contain the phrase <code>Verifying flash... VERIFIED</code>.</p> </li> <li> <p>Write the flash chip by executing the following command on RTE:</p> <pre><code>./flash.sh write /tmp/coreboot.rom\n</code></pre> <p>Do not interrupt the flashing procedure in any way (especially by changing connections). It may cause hardware damage!</p> </li> <li> <p>If the reading was successful, the output from the command above should     contain the phrase <code>Verifying flash... VERIFIED</code>.</p> </li> </ol>"},{"location":"guides/lab-assembly/protectli/#cmos-clear","title":"CMOS clear","text":"<p>To clear the CMOS, turn off the power with Sonoff or relay and use the following commands:</p> <pre><code>echo 1 &gt; /sys/class/gpio/gpio412/value\nsleep 10\necho 0 &gt; /sys/class/gpio/gpio412/value\n</code></pre>"},{"location":"guides/lab-assembly/protectli/#usb-devices","title":"USB devices","text":"<p>Since some issues with USB controllers may only happen on select USB ports, it's important to plug in USB devices to all 4 USB ports of the board.</p>"},{"location":"kb/capsule-updates-configs/","title":"Capsule Update releases","text":"<p>Dasharo releases that support Capsule Updates need to include a number of additional options in their coreboot configuration file. The options correspond to the required payload data described in Capsule Updates Details - Required Payload Data</p>"},{"location":"kb/capsule-updates-configs/#configuration","title":"Configuration","text":"<p>The coreboot configuration file can be found in the coreboot repository in the <code>configs/</code> directory under the name of <code>config.&lt;coreboot_mainboard_vendor&gt;_&lt;coreboot_mainboard_model&gt;</code>.</p> <p>The options that need to be set are:</p> <ul> <li><code>CONFIG_DRIVERS_EFI_MAIN_FW_GUID</code></li> <li><code>CONFIG_DRIVERS_EFI_MAIN_FW_VERSION</code></li> <li><code>CONFIG_DRIVERS_EFI_MAIN_FW_LSV</code></li> </ul>"},{"location":"kb/capsule-updates-configs/#config_drivers_efi_main_fw_guid","title":"CONFIG_DRIVERS_EFI_MAIN_FW_GUID","text":"<p>The value is a unique identifier of a firmware variant. The exact value is not important as long as it is the same in all compatible versions of a firmware variant and different from incompatible ones. When creating a new release compatible with the previous one, the value should not change. When creating a new release, for example when adding support to a new platform, the value has to be set. To get a new UUID for this config options on Linux, use the <code>uuidgen</code> command.</p> <p>Examples:</p> <ul> <li>An example UUID generated using <code>uuidgen</code> - <code>CONFIG_DRIVERS_EFI_MAIN_FW_GUID=\"27ec159a-bfeb-4ddd-a0b1-bc9c664e4216\"</code></li> </ul>"},{"location":"kb/capsule-updates-configs/#config_drivers_efi_main_fw_version","title":"CONFIG_DRIVERS_EFI_MAIN_FW_VERSION","text":"<p>The value represents the version of the current firmware as a 32bit number. This option is used to allow for reliable ordering and comparing different versions of the firmware that might exist and could be used to perform a Capsule Update. The <code>CONFIG_LOCALVERSION</code> option is a string representation of the version which does not allow reliable comparisons. The value consists of 8 hexadecimal digits which are grouped into four groups of two numbers. Each group represents a single component of a Dasharo version according to the Versioning <code>CONFIG_DRIVERS_EFI_MAIN_FW_VERSION</code> has to be updated on new releases to always match the <code>CONFIG_LOCALVERSION</code>.</p> <p>The value looks like <code>0xMMmmpprr</code>, where:</p> <ul> <li>MM - the MAJOR version</li> <li>mm - the MINOR version</li> <li>pp - the PATCH version</li> <li>rr - optional Release Candidate number</li> </ul> <p>For release versions the Release Candidate number is generally set to <code>80</code> (128 decimal) to make sure the version number is higher than any release candidate but still leave some headroom for increasing just in case.</p> <p>Examples:</p> <ul> <li>Release Candidate v1.5.2-rc3 - <code>CONFIG_DRIVERS_EFI_MAIN_FW_VERSION=\"0x01050203\"</code></li> <li>Release v0.9.1 - <code>CONFIG_DRIVERS_EFI_MAIN_FW_VERSION=\"0x00090180\"</code></li> </ul>"},{"location":"kb/capsule-updates-configs/#config_drivers_efi_main_fw_lsv","title":"CONFIG_DRIVERS_EFI_MAIN_FW_LSV","text":"<p>The value represents the lowest firmware version, that will be accepted as a valid one. A Capsule Update to a version lower than <code>CONFIG_DRIVERS_EFI_MAIN_FW_LSV</code> will not be allowed. May be used to forbid downgrading to versions with severe security vulnerabilities. The value takes the same format as <code>CONFIG_DRIVERS_EFI_MAIN_FW_VERSION</code></p> <p>Examples:</p> <ul> <li>Forbid changing the version to anything below release v0.1.0 - <code>CONFIG_DRIVERS_EFI_MAIN_FW_LSV=\"0x00010080\"</code></li> </ul>"},{"location":"kb/capsule-updates-overview/","title":"UEFI Capsule Updates","text":""},{"location":"kb/capsule-updates-overview/#introduction","title":"Introduction","text":"<p>This document provides information on a firmware update mechanism called UEFI Update Capsules.</p>"},{"location":"kb/capsule-updates-overview/#what-are-uefi-update-capsules","title":"What are UEFI Update Capsules","text":"<p>UEFI Update Capsules, or simply update capsules or even capsule updates, are a way of delivering firmware updates for UEFI firmware.  Simultaneously, it's a format in which corresponding firmware images are being delivered.</p> <p>As a format, update capsules are essentially a container consisting of a raw update image(s) along with metadata and optionally drivers necessary to carry out an update.</p>"},{"location":"kb/capsule-updates-overview/#why-use-update-capsules","title":"Why use Update Capsules","text":"<p>The distinguishing feature of update capsules is that this method of updates interacts with the currently running firmware.  This naturally gives it features which are harder to achieve with other update methods.</p>"},{"location":"kb/capsule-updates-overview/#extra-validation","title":"Extra Validation","text":"<p>Thanks to the metadata embedded into update capsules\u00a0(e.g., firmware kind and its version), an attempted update to an unsupported firmware image will result in a failure with no consequences for the device.</p> <p>Other update methods put responsibility for picking the right firmware release on the user, resulting in higher probability of making a mistake.</p>"},{"location":"kb/capsule-updates-overview/#embedded-flashing-code","title":"Embedded Flashing Code","text":"<p>Firmware reads and writes system flash chip as part of its normal operation. Capsule update mechanism reuses very same code to switch to a different firmware image.</p> <p>This way the means for firmware update are always there and require only minimal extra input to submit the capsule for an update.</p>"},{"location":"kb/capsule-updates-overview/#multiple-firmware-images","title":"Multiple Firmware Images","text":"<p>A single capsule can contain multiple firmware images each targeting a separate component\u00a0(e.g., system firmware and embedded controller\u00a0(EC) of a laptop) which can be processed in one go.</p> <p>This is different from performing such updates via other methods that typically require use of several firmware update tools in the right order.</p>"},{"location":"kb/capsule-updates-overview/#managing-dependencies","title":"Managing Dependencies","text":"<p>The metadata can even take into account compatibility requirements between firmware of different components.  For example, if you're trying to update a system firmware which requires EC version 1.2 but currently running EC firmware is of version 1.1, the update will no happen, likely avoiding bricking the device.</p>"},{"location":"kb/capsule-updates-overview/#convenience","title":"Convenience","text":"<p>When an operating system supports EFI Runtime Services, it can supply a capsule update to a running firmware which will to be applied after a reboot.</p>"},{"location":"kb/capsule-updates-overview/#migration","title":"Migration","text":"<p>Because current firmware is aware that it's being updated, it has a chance to migrate current settings after a successful update.</p>"},{"location":"kb/capsule-updates-overview/#security","title":"Security","text":"<p>Capsules are cryptographically signed to disallow updates from unauthorized third-parties.  Applying a capsule also requires the system firmware to be exposed without any extra protections only for the duration of an update, which is much shorter compared to other update methods when a whole OS might need to be boot.</p>"},{"location":"kb/capsule-updates-overview/#further-information","title":"Further information","text":"<p>A developer-oriented document about how to deal with update capsules in EDK2 is here.</p>"},{"location":"kb/edk2-capsule-updates/","title":"Working with UEFI capsule updates in EDK2","text":""},{"location":"kb/edk2-capsule-updates/#introduction","title":"Introduction","text":"<p>The purpose of this document is to provide an overview of means for working with UEFI update capsules that can be employed by an EDK2-based firmware.  This is, however, not an exhaustive list of such tools and there are other ways of managing capsules as is alluded to by the last section.</p>"},{"location":"kb/edk2-capsule-updates/#tools-in-edks-source-tree","title":"Tools in EDK's source tree","text":"<p><code>BaseTools/BinWrappers/PosixLike/GenerateCapsule</code>\u00a0(really <code>BaseTools/Source/Python/Capsule/GenerateCapsule.py</code>) can be used to generate/unpack/dump capsules.</p> <p><code>BaseTools/Source/Python/Pkcs7Sign</code> can be used for signing without <code>GenerateCapsule</code> but test keys there are more interesting.  The keys come in a form suitable for integration into EDK thus making them a good fit for initial testing.</p> <p><code>CapsuleApp.efi</code>\u00a0(<code>MdeModulePkg/Application/CapsuleApp</code>) can be used to test posting a capsule from a UEFI Shell\u00a0(or even a bootloader) in various modes\u00a0(normal, mass storage, UX capsule out of a BMP-file) or dump related information like ESRT\u00a0(EFI System Resource Table), available FMP\u00a0(Firmware Management Protocol) instances or result of a failed update attempt\u00a0(it's stored in EFI variables).  To use this application:</p> <ul> <li>include corresponding INF-file into package's DSC</li> <li>do not add it to FDF-file, as it won't be used there</li> <li>find the file inside build directory like   <code>DasharoPayloadPkgX64/RELEASE_COREBOOT/X64/CapsuleApp.efi</code> and transfer to   the system where it needs to be used\u00a0(likely along with a capsule file)</li> </ul>"},{"location":"kb/edk2-capsule-updates/#generatecapsule-files","title":"<code>GenerateCapsule</code> files","text":"<p>The tool is written in Python and can be used standalone after copying a small subtree of EDK2 sources:</p> <pre><code>BaseTools/\n\u251c\u2500\u2500 BinWrappers\n\u2502   \u2514\u2500\u2500 PosixLike\n\u2502       \u2514\u2500\u2500 GenerateCapsule\n\u2514\u2500\u2500 Source\n    \u2514\u2500\u2500 Python\n        \u251c\u2500\u2500 Capsule/...\n        \u2514\u2500\u2500 Common/...\n</code></pre>"},{"location":"kb/edk2-capsule-updates/#capsule-information","title":"Capsule information","text":"<p>Capsule is a bundle of:</p> <ul> <li>zero or more embedded drivers allowing for update code to come with a capsule   instead of being part of current firmware</li> <li>one or more firmware update images\u00a0(payloads)</li> <li>metadata describing each of the payloads</li> </ul> <p>Creation of a capsule requires providing most of that information, the rest have defaults suitable for most use cases without modifications.</p>"},{"location":"kb/edk2-capsule-updates/#required-payload-metadata","title":"Required payload metadata","text":""},{"location":"kb/edk2-capsule-updates/#basic-information","title":"Basic information","text":"<ul> <li><code>Payload</code> \u2014 path to file containing payload data</li> <li><code>Guid</code> \u2014 GUID that identifies firmware variant</li> <li><code>FwVersion</code> \u2014 version of the firmware in the capsule</li> <li><code>LowestSupportedVersion</code> \u2014 the lowest version that new firmware will allow   to downgrade to</li> </ul> <p>Versions are 32-bit unsigned integers, requiring a scheme to translate something like v0.9.1 or v24.05.00.01 into an integer.  Different firmware variants can employ different translation schemes.</p>"},{"location":"kb/edk2-capsule-updates/#signing-information","title":"Signing information","text":"<p>Signing takes three keys\u00a0(root, its subkey and subkey's subkey for signing):</p> <ul> <li><code>OpenSslTrustedPublicCertFile</code> \u2014 root key\u00a0(CA) used for verification</li> <li><code>OpenSslOtherPublicCertFile</code> \u2014 subkey for capsule updates\u00a0(included along   with signature)</li> <li><code>OpenSslSignerPrivateCertFile</code> \u2014 certificate for signing of the capsules</li> </ul> <p>This structure of signing keys is presupposed by <code>GenerateCapsule</code> and <code>Pkcs7Sign</code> but it seems to be a design decision of the tooling rather than a strict requirement on the length of a signing key chain by UEFI or cryptographic implementation in EDK2.  In particular, a chain of length 2\u00a0(without a subkey) can be used by specifying any certificate in place of the subkey\u00a0(root, signing certificate or literally any other; it won't be used by the code but still needs to be a valid certificate so the tools don't complain).</p>"},{"location":"kb/edk2-capsule-updates/#optional-payload-metadata","title":"Optional payload metadata","text":"<p>There are a few optional fields used to support updating multiple instances of the same device\u00a0(<code>HardwareInstance</code>), firmware spread out across several flash chips\u00a0(<code>UpdateImageIndex</code>), firmware with dependencies\u00a0(<code>Dependencies</code>) as well as for strengthening security\u00a0(<code>MonotonicCount</code>):</p> <ul> <li><code>HardwareInstance</code>\u00a0(defaults to <code>0</code>)</li> <li><code>UpdateImageIndex</code>\u00a0(defaults to <code>1</code>)</li> <li><code>Dependencies</code>\u00a0(defaults to no dependencies) which is a string in Depex format</li> <li><code>MonotonicCount</code>\u00a0(defaults to <code>0</code>) which is a 64-bit unsigned integer that is   supposed to guard against replay attacks\u00a0(its value is appended to the payload   image before signing)</li> </ul>"},{"location":"kb/edk2-capsule-updates/#capsule-creation","title":"Capsule creation","text":""},{"location":"kb/edk2-capsule-updates/#preparation","title":"Preparation","text":""},{"location":"kb/edk2-capsule-updates/#picking-a-guid","title":"Picking a GUID","text":"<p>Every firmware variant should have its own GUID which appears in several places:</p> <ul> <li>ESRT entry describing the firmware</li> <li>FMP instance capable of updating the firmware</li> <li>capsule metadata</li> </ul> <p>Switching between firmware variables is possible by adjusting GUID and version fields of a capsule meant to perform the switch.</p>"},{"location":"kb/edk2-capsule-updates/#preparing-signing-keys","title":"Preparing signing keys","text":"<p><code>BaseTools/Source/Python/Pkcs7Sign</code> contains everything necessary for testing purposes and that's what will be used below.</p> <p>Real-world usage requires proper key management.  Key generation is covered by the README of <code>Pkcs7Sign</code> as well as in tianocore's wiki. <code>Pkcs7Sign</code> additionally describes how to integrate generated keys into EDK2's build system.</p>"},{"location":"kb/edk2-capsule-updates/#preparing-generatecapsules-input","title":"Preparing <code>GenerateCapsule</code>'s input","text":"<p><code>GenerateCapsule</code> supports taking information via command-line keys or using a JSON file.  Using JSON file for configuration is more flexible and future-proof because options allow specifying only a single payload per capsule.  That said, capsule flags are accepted only in form of options.</p> <p>Example JSON file for a capsule that comes with an embedded FMP and uses test keys\u00a0(relative paths assume build of Dasharo coreboot):</p> <pre><code>{\n  \"EmbeddedDrivers\": [\n    {\n      \"Driver\": \"../Build/DasharoPayloadPkgX64/RELEASE_COREBOOT/X64/FmpDxe.efi\"\n    }\n  ],\n  \"Payloads\": [\n    {\n      \"Payload\": \"../../../../../build/coreboot.rom\",\n      \"Guid\": \"00112233-4455-6677-8899-aabbccddeeff\",\n      \"FwVersion\": \"0x01020000\",\n      \"LowestSupportedVersion\": \"0x00080000\",\n\n      \"OpenSslSignerPrivateCertFile\": \"BaseTools/Source/Python/Pkcs7Sign/TestCert.pem\",\n      \"OpenSslOtherPublicCertFile\": \"BaseTools/Source/Python/Pkcs7Sign/TestSub.pub.pem\",\n      \"OpenSslTrustedPublicCertFile\": \"BaseTools/Source/Python/Pkcs7Sign/TestRoot.pub.pem\"\n    }\n  ]\n}\n</code></pre> <p>Some notes on JSON:</p> <ul> <li><code>GenerateCapsule</code> warns if <code>EmbeddedDrivers</code> isn't provided, having an empty   array if one doesn't need to embed any drivers is enough to silence the   warning</li> <li>all\u00a0(even numerical) fields must be given as strings or there will be errors</li> <li>paths to files undergo expansion of environment variables</li> <li>relative paths are relative to current working directory</li> </ul>"},{"location":"kb/edk2-capsule-updates/#building-a-capsule","title":"Building a capsule","text":"<p>The operation is called <code>--encode</code>.  JSON file is assumed to be in EDK2's root directory.  Output files tend to use <code>.cap</code> extension.</p> <p>Commands that can be run from inside Dasharo variant of coreboot's tree with EDK2 payload:</p> <pre><code>cd payloads/external/edk2/workspace/Dasharo/\nBaseTools/BinWrappers/PosixLike/GenerateCapsule --encode \\\n                                                --capflag PersistAcrossReset \\\n                                                --json-file dasharo.json \\\n                                                --output dasharo.cap\n</code></pre> <p>In case more than one flag needs to be specified, values from multiple <code>--capflag</code> options are combined together.  There is no <code>InitiateReset</code> because Linux rejects capsules with this flag and requires a manual soft reset for persistent capsules\u00a0(<code>CapsuleApp.efi</code> does reset for persistent capsules by default, so no difference in behaviour for it).</p>"},{"location":"kb/edk2-capsule-updates/#capsule-introspection","title":"Capsule introspection","text":""},{"location":"kb/edk2-capsule-updates/#viewing-metadata","title":"Viewing metadata","text":"<p>This dumps capsule information on the screen\u00a0(doesn't perform signature verification):</p> <pre><code>BaseTools/BinWrappers/PosixLike/GenerateCapsule --dump-info dasharo.cap\n</code></pre> <p>Example output:</p> <pre><code>========\nEFI_CAPSULE_HEADER.CapsuleGuid      = 6DCBD5ED-E82D-4C44-BDA1-7194199AD92A\nEFI_CAPSULE_HEADER.HeaderSize       = 00000020\nEFI_CAPSULE_HEADER.Flags            = 00050000\n  OEM Flags                         = 0000\n  CAPSULE_FLAGS_PERSIST_ACROSS_RESET\n  CAPSULE_FLAGS_INITIATE_RESET\nEFI_CAPSULE_HEADER.CapsuleImageSize = 0081852D\nsizeof (Payload)                    = 0081850D\n--------\nEFI_FIRMWARE_MANAGEMENT_CAPSULE_HEADER.Version             = 00000001\nEFI_FIRMWARE_MANAGEMENT_CAPSULE_HEADER.EmbeddedDriverCount = 00000001\n  sizeof (EmbeddedDriver)                                  = 000179C0\nEFI_FIRMWARE_MANAGEMENT_CAPSULE_HEADER.PayloadItemCount    = 00000001\nEFI_FIRMWARE_MANAGEMENT_CAPSULE_HEADER.ItemOffsetList      =\n  0000000000000018\n  00000000000179D8\nEFI_FIRMWARE_MANAGEMENT_CAPSULE_IMAGE_HEADER.Version                = 00000003\nEFI_FIRMWARE_MANAGEMENT_CAPSULE_IMAGE_HEADER.UpdateImageTypeId      = 00112233-4455-6677-8899-AABBCCDDEEFF\nEFI_FIRMWARE_MANAGEMENT_CAPSULE_IMAGE_HEADER.UpdateImageIndex       = 00000001\nEFI_FIRMWARE_MANAGEMENT_CAPSULE_IMAGE_HEADER.UpdateImageSize        = 00800B05\nEFI_FIRMWARE_MANAGEMENT_CAPSULE_IMAGE_HEADER.UpdateVendorCodeSize   = 00000000\nEFI_FIRMWARE_MANAGEMENT_CAPSULE_IMAGE_HEADER.UpdateHardwareInstance = 0000000000000000\nEFI_FIRMWARE_MANAGEMENT_CAPSULE_IMAGE_HEADER.ImageCapsuleSupport    = 0000000000000001\nsizeof (Payload)                                                    = 00800B05\nsizeof (VendorCodeBytes)                                            = 00000000\n--------\nEFI_FIRMWARE_IMAGE_AUTHENTICATION.MonotonicCount                = 0000000000000000\nEFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.dwLength         = 00000AED\nEFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.wRevision        = 0200\nEFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.Hdr.wCertificateType = 0EF1\nEFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.CertType             = 4AAFD29D-68DF-49EE-8AA9-347D375665A7\nsizeof (EFI_FIRMWARE_IMAGE_AUTHENTICATION.AuthInfo.CertData)    = 00000AD5\nsizeof (Payload)                                                = 00800010\n--------\nNo EFI_FIRMWARE_IMAGE_DEP\n--------\nFMP_PAYLOAD_HEADER.Signature              = 3153534D (MSS1)\nFMP_PAYLOAD_HEADER.HeaderSize             = 00000010\nFMP_PAYLOAD_HEADER.FwVersion              = 00020000\nFMP_PAYLOAD_HEADER.LowestSupportedVersion = 00000000\nsizeof (Payload)                          = 00800000\n========\n</code></pre> <p>Don't confuse <code>EFI_CAPSULE_HEADER.CapsuleGuid</code> with firmware GUID.  The former defines kind of the capsule which is always equal to FMP for <code>GenerateCapsule</code>. Firmware GUID appears in the output as <code>EFI_FIRMWARE_MANAGEMENT_CAPSULE_IMAGE_HEADER.UpdateImageTypeId</code>.</p>"},{"location":"kb/edk2-capsule-updates/#unpacking-a-capsule","title":"Unpacking a capsule","text":"<p>The following creates a set of <code>decoded*</code> files and verifies signatures in the process:</p> <pre><code>BaseTools/BinWrappers/PosixLike/GenerateCapsule \\\n    --decode dasharo.cap \\\n    --output decoded \\\n    --signer-private-cert BaseTools/Source/Python/Pkcs7Sign/TestCert.pem \\\n    --other-public-cert BaseTools/Source/Python/Pkcs7Sign/TestSub.pub.pem \\\n    --trusted-public-cert BaseTools/Source/Python/Pkcs7Sign/TestRoot.pub.pem\n</code></pre> <p>Created files:</p> <ul> <li><code>decoded</code> \u2014 empty file\u00a0(<code>GenerateCapsule</code> needs a fix for this because it will    even truncate an existing file)</li> <li><code>decoded.EmbeddedDriver.1.efi</code> \u2014 embedded driver whose name is lost</li> <li><code>decoded.Payload.1.bin</code> \u2014 first payload, similarly without original name</li> <li><code>decoded.json</code> \u2014 reconstructed JSON file (some fields can be missing and some    others can be added with default values)</li> </ul> <p>Certificates can be omitted for <code>--decode</code>.  In this case signatures won't be verified but created files should be identical except for corresponding fields of the output JSON file.</p>"},{"location":"kb/edk2-capsule-updates/#capsule-authentication","title":"Capsule authentication","text":"<p>The verification of capsules is performed via public-key cryptography (the concepts most relevant here: key pairs and subkeys).  This security mechanism uses a root key pair like this:</p> <ol> <li>Public key is embedded into the firmware at build time (one key is enough,    but using multiple keys is also supported).</li> <li>Private key is used to (indirectly, via a subkey) sign capsules.</li> <li>Signature embedded in the capsule is validated against the public key when    an update is attempted to decide whether to perform the update.</li> </ol> <p>Things to note:</p> <ul> <li>public root key is well-known</li> <li>private root key is stored in a safe place and nobody but the owner should   know it, otherwise there is no security and whoever has access to the key can   compromise the firmware (which might as well be considered insecure if the key   is no longer private)</li> <li>root key pair can be changed only through a firmware update (not necessarily   via an update capsule)</li> <li>signature of a capsule is a feature of the capsule, but not of a firmware   image that it carries</li> </ul> <p>The last two points are relevant when one wants to transition from one root key pair to another.  This is possible to do via a capsule update as long as there is an ability to sign a capsule with the root key embedded into current firmware (the key itself or any key signed by it (subkey) should do if the signature includes all certificates necessary to validate it).  This works because while current firmware validates the capsule, contents of the capsule is free of any restrictions: it can have a different root key pair, it can even be a completely different firmware.  In other words, capsule authentication applies only to a single firmware update process.  That said, successive updates typically will share the same root key such that the whole series of firmware versions will be compatible with one another\u00a0(unless <code>LowestSupportedVersion</code> interferes).</p>"},{"location":"kb/edk2-capsule-updates/#generating-signing-keys-with-openssl","title":"Generating signing keys with OpenSSL","text":"<p>The process involves creation of 3 certificates, a local certificate authority\u00a0(CA)\u00a0in a directory and 14 files.  This warrants some overview of what's going to be done.</p> <p>Keys making up the chain will assume the following roles:</p> <ul> <li>root \u2014 self-signed certificate acting as the basis of a CA</li> <li>sub \u2014 second-level CA signed by root key</li> <li>sign \u2014 a signing key\u00a0(not a CA) that is signed by sub key</li> </ul> <p>A digital signature algorithm\u00a0(DSA) consists of a private key\u00a0(PK) algorithm and a digest algorithm.  Keys in a chain don't have to use the same DSA.  Also, most DSAs allow use of an arbitrary digest\u00a0(not Ed25519 or Ed448 which prescribe the use of SHA-512 and SHAKE-256 respectively).</p> <p>Keys exist independently of the chains in which they appear.  When stored, private keys are often encrypted.</p>"},{"location":"kb/edk2-capsule-updates/#key-generation-by-example","title":"Key generation by example","text":"<p>It will be easier to go into finer details while looking at the actual commands. The entire process can be broken into several stages:</p> <ol> <li>Creation of 3 certificates</li> <li>Construction of a CA</li> <li>Preparation of root certificate for inclusion into EDK</li> <li>Preparation of sign certificate for signing</li> </ol>"},{"location":"kb/edk2-capsule-updates/#make-certificates","title":"Make certificates","text":"<p>Using 4096-bit RSA keys as an example:</p> <pre><code>openssl genrsa -aes256 -out root.p8e 4096\nopenssl genrsa -aes256 -out sub.p8e 4096\nopenssl genrsa -aes256 -out sign.p8e 4096\n</code></pre> <p>Each of them is encrypted with AES-256.  The password is queried interactively for creation and each time the certificate is used to sign something.  Drop <code>-aes256</code> to not use encryption\u00a0(for a test or if you consider access to the files a complete compromise of the security).</p> <p><code>.p8e</code> extension is for PKCS\u00a0#8 format carrying an encrypted private key.</p>"},{"location":"kb/edk2-capsule-updates/#make-a-ca","title":"Make a CA","text":"<p>By default, directory for a CA is called <code>demoCA</code>, although it can be different depending on the OS.  It can be looked up in <code>/etc/ssl/openssl.cnf</code> as <code>dir = ...</code> in <code>[ CA_default ]</code> section (and that section is in turn referenced by <code>default_ca</code> in <code>[ ca ]</code> section).  The directory needs to be set up prior to using <code>openssl ca</code>:</p> <pre><code>mkdir -p demoCA/newcerts\ntouch demoCA/index.txt\necho 01 &gt; demoCA/serial\n</code></pre> <p>Initialize it with self-signed root certificate\u00a0(will ask for a password and certificate fields; country, state and organization fields must match root certificate, common name must be a unique non-empty value):</p> <pre><code>openssl req -new -x509 -days 3650 -key root.p8e -out root.pub.pem\n</code></pre> <p>Create certificate signing requests\u00a0(CSRs)\u00a0(don't bother with entering a challenge for CSRs, you won't be asked for it):</p> <pre><code>openssl req -new -key sub.p8e -out sub.csr\nopenssl req -new -key sign.p8e -out sign.csr\n</code></pre> <p>Perform the signing\u00a0(there will be password and confirmation prompts):</p> <pre><code>openssl ca -extensions v3_ca \\\n           -in sub.csr \\\n           -days 3650 \\\n           -cert root.pub.pem \\\n           -keyfile root.p8e \\\n           -notext \\\n           -out sub.pub.pem\nopenssl ca -in sign.csr \\\n           -days 3650 \\\n           -cert sub.pub.pem \\\n           -keyfile sub.p8e \\\n           -notext \\\n           -out sign.crt\n</code></pre> <p>The <code>-days 3650</code> is something to be adjusted and is provided as an example that certificate properties are set in a different command for root compared to other certificates.</p> <p><code>-notext</code> avoids dumping certificate details in text form to the output file thus making all certificates look consistent.  The details are easy to obtain by running <code>openssl x509 -in {cert-file} -text -noout</code> when needed.</p> <p><code>*.csr</code> files aren't necessary after successful signing and can be removed.</p> <p><code>.pub.pem</code> and <code>.crt</code> files contain essentially the same X.509 certificates, but the former is used for CAs.  There is little consistency or sense in extension for these types of files in general, so don't read too much meaning into them.</p>"},{"location":"kb/edk2-capsule-updates/#prepare-root-for-edk-build-system","title":"Prepare root for EDK build system","text":"<p>EDK gets root certificate(s) in a PCD.  The PCD name differ and support one or many certificates, in this case it's <code>gFmpDevicePkgTokenSpaceGuid.PcdFmpDevicePkcs7CertBufferXdr</code> which expects one or more certificates in DER\u00a0(binary) form combined via XDR\u00a0(simple format where big-endian 32-bit length is followed by that number of bytes).</p> <p>EDK provides <code>BinToPcd.py</code> that can generate a file for inclusion via <code>!include</code> in some DSC-file of an EDK package.</p> <pre><code>openssl x509 -in root.pub.pem -out root.cer -outform DER\npython payloads/external/edk2/workspace/Dasharo/BaseTools/Scripts/BinToPcd.py \\\n    -p gFmpDevicePkgTokenSpaceGuid.PcdFmpDevicePkcs7CertBufferXdr \\\n    -i root.cer \\\n    -x \\\n    -o CapsuleRootKey.inc\n</code></pre> <p><code>root.cer</code> can be removed afterward.</p>"},{"location":"kb/edk2-capsule-updates/#prepare-sign-certificate","title":"Prepare sign certificate","text":"<p><code>GenerateCapsule</code> and EDK will only ever need public parts of root and sub certificates, but sign certificate will have to be provided in combination with the corresponding private key.  This is achieved by packing the two parts via PKCS\u00a0#12 which is an archive file format.</p> <p><code>openssl pkcs12</code> either creates a PKCS\u00a0#12 file or converts it, thus requiring two invocations for obtaining the result in PEM format.</p> <p>First, create binary PKCS\u00a0#12\u00a0(certificate and corresponding private key):</p> <pre><code>openssl pkcs12 -export -inkey sign.p8e -in sign.crt -out sign.pfx\n</code></pre> <p>Add <code>-passout pass:</code> to perform export\u00a0(creation, that is) without encryption.</p> <p>Now convert binary PKCS\u00a0#12 into PEM form:</p> <pre><code>openssl pkcs12 -in sign.pfx -out sign.p12\n</code></pre> <p><code>-passin pass:</code> can be added if <code>sign.pfx</code> was created without a password to skip the prompt.</p> <p><code>-noenc</code>\u00a0(<code>-nodec</code> is deprecated in OpenSSL v3) can be added to avoid encrypting <code>sign.p12</code>.  Without this option, there will be a password prompt during the conversion and whenever a capsule is signed.</p> <p><code>sign.pfx</code> can now be removed.</p>"},{"location":"kb/edk2-capsule-updates/#supported-algorithms-and-digests","title":"Supported algorithms and digests","text":"<p>EDK has 2 libraries implementing <code>AuthenticateFmpImage()</code> which is responsible for verifying an FMP image:</p> <ul> <li><code>SecurityPkg/Library/FmpAuthenticationLibRsa2048Sha256</code></li> <li><code>SecurityPkg/Library/FmpAuthenticationLibPkcs7</code></li> </ul> <p>The first one supports only one kind of a key as indicated by its name. Nowadays the second library is much more likely to be used.  PKCS\u00a0#7 is a generic container for signature/signed data and the set of permitted algorithms and digests is defined by the implementation handling it.  There are two options in Dasharo EDK based on top of <code>edk2-stable202402</code> upstream release:</p> <ul> <li>OpenSSL v3.0.9</li> <li>MbedTLS v3.3.0</li> </ul> <p>However, because OpenSSL was never designed for embedded environments, it became prohibitively large in v3 which introduced providers feature.  This is why Dasharo uses MbedTLS and it will be the focus of the below discussion.</p> <p>Because MbedTLS deals with certificates prepared by OpenSSL tools, both constrain the set of what can be used.</p>"},{"location":"kb/edk2-capsule-updates/#build-time-configuration","title":"Build-time configuration","text":"<p>What's actually supported by MbedTLS depends on a specific build and which version of an EDK wrapper is being used.</p> <p>The library is configured via a set of defines in <code>CryptoPkg/Library/MbedTlsLib/Include/mbedtls/mbedtls_config.h</code>.  One of the most important ones is:</p> <pre><code>#define MBEDTLS_MPI_MAX_SIZE  1024\n</code></pre> <p>It specifies the maximum number of bytes available for multiple precision integers and puts a limit on private key algorithms.  <code>1024</code> is the default value that prevents the use of RSA keys longer than 8192 bits.  Elliptic curve\u00a0(EC) keys are much shorter in size, so the default doesn't affect them in any way.</p> <p>Another important set of defines is the list of enabled curves:</p> <pre><code>/* Short Weierstrass curves (supporting ECP, ECDH, ECDSA) */\n// #define MBEDTLS_ECP_DP_SECP192R1_ENABLED\n// #define MBEDTLS_ECP_DP_SECP224R1_ENABLED\n#define MBEDTLS_ECP_DP_SECP256R1_ENABLED\n#define MBEDTLS_ECP_DP_SECP384R1_ENABLED\n#define MBEDTLS_ECP_DP_SECP521R1_ENABLED\n// #define MBEDTLS_ECP_DP_SECP192K1_ENABLED\n// #define MBEDTLS_ECP_DP_SECP224K1_ENABLED\n// #define MBEDTLS_ECP_DP_SECP256K1_ENABLED\n// #define MBEDTLS_ECP_DP_BP256R1_ENABLED\n// #define MBEDTLS_ECP_DP_BP384R1_ENABLED\n// #define MBEDTLS_ECP_DP_BP512R1_ENABLED\n/* Montgomery curves (supporting ECP) */\n#define MBEDTLS_ECP_DP_CURVE25519_ENABLED\n#define MBEDTLS_ECP_DP_CURVE448_ENABLED\n</code></pre> <p>Mind that using EC requires the use of <code>MbedTlsLibFull</code> instead of <code>MbedTlsLib</code>, that's really the difference between the two wrappers.</p> <p>This define is supposed to enable RSASSA-PSS (see below though):</p> <pre><code>#define MBEDTLS_X509_RSASSA_PSS_SUPPORT\n</code></pre>"},{"location":"kb/edk2-capsule-updates/#digest-types","title":"Digest types","text":"<p>MbedTLS has the list of supported digests in <code>include/mbedtls/md.h</code>:</p> <pre><code>typedef enum {\n    MBEDTLS_MD_MD5,       /**&lt; The MD5 message digest. */\n    MBEDTLS_MD_SHA1,      /**&lt; The SHA-1 message digest. */\n    MBEDTLS_MD_SHA224,    /**&lt; The SHA-224 message digest. */\n    MBEDTLS_MD_SHA256,    /**&lt; The SHA-256 message digest. */\n    MBEDTLS_MD_SHA384,    /**&lt; The SHA-384 message digest. */\n    MBEDTLS_MD_SHA512,    /**&lt; The SHA-512 message digest. */\n    MBEDTLS_MD_RIPEMD160, /**&lt; The RIPEMD-160 message digest. */\n};\n</code></pre> <p>OpenSSL supports all of them\u00a0(see <code>openssl list -digest-algorithms</code>, but not all listed there work with X.509 certificates, not clear why).</p>"},{"location":"kb/edk2-capsule-updates/#private-key-algorithms","title":"Private key algorithms","text":"<p>These are listed in <code>include/mbedtls/pk.h</code> of MbedTLS:</p> <pre><code>typedef enum {\n    MBEDTLS_PK_NONE=0,\n    MBEDTLS_PK_RSA,\n    MBEDTLS_PK_ECKEY,\n    MBEDTLS_PK_ECKEY_DH,\n    MBEDTLS_PK_ECDSA,\n    MBEDTLS_PK_RSA_ALT,\n    MBEDTLS_PK_RSASSA_PSS,\n    MBEDTLS_PK_OPAQUE,\n} mbedtls_pk_type_t;\n</code></pre> <p>OpenSSL supports the following ones\u00a0(see <code>openssl list -signature-algorithms</code> but only those which were accepted by OpenSSL in the commands above are listed here):</p> <ul> <li><code>rsa</code></li> <li><code>rsa-pss</code></li> <li><code>ed25519</code></li> <li><code>ed448</code></li> <li><code>ec</code></li> </ul> <p><code>rsa</code> and <code>ec</code> are the only ones that actually worked.  While Ed25519 and Ed448 curves are there, that is far from a complete implementation of a corresponding DSAs.</p> <p><code>rsa-pss</code> is also explicitly enabled, but the following error reported at run-time:</p> <pre><code>/** Key algorithm is unsupported (only RSA and EC are supported). */\n#define MBEDTLS_ERR_PK_UNKNOWN_PK_ALG      -0x3C80\n</code></pre> <p>Suggesting that it's not actually supported even when enabled.  The situation might be similar to the elliptic curves above.</p>"},{"location":"kb/edk2-capsule-updates/#whats-actually-supported-and-how-to-use-it","title":"What's actually supported and how to use it","text":"<p>Valid digest names for OpenSSL:</p> <ul> <li><code>md5</code></li> <li><code>ripemd160</code></li> <li><code>sha1</code></li> <li><code>sha224</code></li> <li><code>sha256</code></li> <li><code>sha384</code></li> <li><code>sha512</code></li> </ul> <p>How a digest is to be specified depends on a particular subcommand:</p> <ul> <li><code>openssl ca</code> takes <code>-md {digest-name}</code></li> <li><code>openssl req</code> takes <code>-{digest-name}</code>\u00a0(confusingly documented as <code>-digest</code>)</li> </ul> <p><code>openssl genpkey</code> accepts <code>-algorithm {alg}</code> parameter and <code>rsa</code> or <code>ec</code> works.</p> <p>RSA key length's lower bound is 512 in OpenSSL and upper bound is 8192 in MbedTLS by default.  Key size can be configured with <code>-pkeyopt rsa_keygen_bits:numbits</code> if <code>openssl genpkey</code> is used.</p> <p>Given that MbedTLS has only 3 standard curves enabled, there are only 3 possibilities for an EC algorithm (use of <code>MbedTlsLibFull</code> is required):</p> <ul> <li><code>-pkeyopt ec_paramgen_curve:P-256</code></li> <li><code>-pkeyopt ec_paramgen_curve:P-384</code></li> <li><code>-pkeyopt ec_paramgen_curve:P-521</code></li> </ul>"},{"location":"kb/edk2-capsule-updates/#capsulesh-script","title":"<code>capsule.sh</code> script","text":""},{"location":"kb/edk2-capsule-updates/#building-a-capsule_1","title":"Building a capsule","text":"<p>As a convenience, there is a <code>capsule.sh</code> script which can be used to ease capsule creation by automating some of the steps.  Once a firmware has been built, an update capsule for it can be created by running the following from coreboot's root directory:</p> <pre><code>./capsule.sh make -t keys/TestRoot.pub.pem \\\n                  -o keys/TestSub.pub.pem \\\n                  -s keys/TestCert.pem\n</code></pre> <p>(The command assumes that signing keys from <code>BaseTools/Source/Python/Pkcs7Sign/</code> in EDK have been copied to <code>keys/</code>.)</p> <p>Add <code>-b</code> flag if the firmware targets a laptop, this will add a DXE for checking battery status.</p> <p>JSON file will be automatically generated based on the contents of coreboot's <code>.config</code> file which contains all the necessary information when the capsule support is enabled (and the script aborts if it's not the case).</p> <p>Output file name is generated based on coreboot options like <code>CONFIG_MAINBOARD_DIR</code> and <code>CONFIG_LOCALVERSION</code>, for example:</p> <ul> <li><code>emulation-qemu-q35-v0.2.0.cap</code></li> <li><code>msi-ms7d25-ddr4-v1.1.9.cap</code></li> </ul>"},{"location":"kb/edk2-capsule-updates/#generating-test-signing-keys","title":"Generating test signing keys","text":"<p>In order to test capsules signed with unsupported keys, one needs to generate a suitable set of keys which can be done like this:</p> <pre><code>./capsule.sh keygen my-test-keys\n</code></pre> <p>At the end the script prints commands to use the keys (wrapped manually here):</p> <pre><code>Installing root certificate (before build):\n  cp my-test-keys/CapsuleRootKey.inc \\\n     payloads/external/edk2/workspace/Dasharo/DasharoPayloadPkg/\n\nSigning a capsule (after build):\n  ./capsule.sh make -t my-test-keys/root.pub.pem \\\n                    -o my-test-keys/sub.pub.pem \\\n                    -s my-test-keys/sign.p12\n</code></pre> <p>Warning</p> <p>The generated keys are for testing only, field values are hard-coded and no additional encryption is employed to achieve a convenient non-interactive key creation.</p>"},{"location":"kb/edk2-capsule-updates/#extracting-standalone-generatecapsule","title":"Extracting standalone GenerateCapsule","text":"<p>To enable operations on capsules without full EDK's sources run:</p> <pre><code>./capsule.sh box\n</code></pre> <p>This produces <code>gepcap</code> directory with a relevant part of EDK.  The directory also includes a shell wrapper <code>GenerateCapsule</code> along with the test keys in <code>keys</code> subdirectory.</p>"},{"location":"kb/edk2-capsule-updates/#alternatives","title":"Alternatives","text":"<p>It's also possible to generate capsules via EDK's build system by configuring it in FDF file like its done in edk2-platforms here.  That's the EDK2-way of doing things via <code>SignedCapsulePkg</code>\u00a0(PDF) but it appears to be less flexible due to relying on the build system of EDK2 which is quite rigid for a large firmware variance that can be found in Dasharo.</p> <p>Because <code>GenerateCapsule</code> is in Python and at least part of the functionality is abstracted in form of modules, it's also possible to build custom tools on top of that.</p>"},{"location":"kb/firmware-update-mode/","title":"Firmware update","text":""},{"location":"kb/firmware-update-mode/#introduction","title":"Introduction","text":"<p>This document describes the operation and rationale for Firmware Update Mode.</p> <p>Tip</p> <p>If you are a user looking for a guide for updating firmware, check out the Guides section instead.</p>"},{"location":"kb/firmware-update-mode/#firmware-update-mode","title":"Firmware Update Mode","text":"<p>For enhanced firmware security, Dasharo uses a number of security mechanisms to prevent overwriting firmware. Depending on device, these may be some or all of the following:</p> <ul> <li>SPI flash write-protection - prevents overwriting the initial bootblock and   Verified Boot code</li> <li>SMM BIOS write protection - prevents all writes to BIOS flash memory outside   of privileged code running in System Management Mode</li> <li>UEFI Secure Boot - in combination with Linux Kernel Lockdown, prevents direct   access to the SPI flash controller from the OS</li> </ul> <p>If you are interested, see the Dasharo System Features section for more details.</p> <p>To allow updating firmware by the end user, these protections must be disabled first. To facilitate this, Dasharo has a Firmware Update Mode option that temporarily disables firmware security measures for the duration of one boot.</p>"},{"location":"kb/firmware-update-mode/#supported-devices","title":"Supported devices","text":"<p>The following table describes which devices support Firmware Update Mode and the starting firmware version, if applicable.</p> <p>Note</p> <p>Firmware Update Mode is currently only supported in UEFI firmware versions, not in SeaBIOS or Heads-based firmware flavors.</p> Manufacturer Device FUM supported Starting with FW version MSI Z690-A PRO Yes v1.1.2 MSI Z790-P PRO Yes v0.9.0 NovaCustom NS5x/7x ADL Yes v1.7.0 NovaCustom NS5x/7x TGL Yes v1.5.0 NovaCustom NV4x ADL Yes v1.7.0 NovaCustom NV4x TGL Yes v1.5.0 NovaCustom V5x0TU MTL Yes v0.9.0 NovaCustom V5x0TNx Yes v0.9.1 NovaCustom NUC BOX Yes v0.9.0"},{"location":"kb/firmware-update-mode/#how-to-use-firmware-update-mode","title":"How to use Firmware Update Mode","text":"<p>To enter Firmware Update Mode:</p> <ol> <li>Enter the Setup Menu and navigate to Dasharo System Features: </li> <li>Navigate to <code>Dasharo Security Options</code>: </li> <li>Select <code>Firmware Update Mode</code>: </li> <li>When prompted, press Enter to accept. The device will reboot in Firmware   Update Mode. </li> <li>After reboot, when prompted, press the indicated key on the keyboard.   Alternatively, to abort Firmware Update Mode, press Enter instead or simply   wait for the timeout to expire.</li> </ol> <p>Once in Firmware Update Mode, proceed with the firmware update steps outlined in device-specific documentation.</p>"},{"location":"kb/firmware-update-mode/#firmware-update-mode-flowchart","title":"Firmware Update Mode flowchart","text":""},{"location":"kb/flashregions/","title":"Intel Flash regions","text":""},{"location":"kb/flashregions/#introduction","title":"Introduction","text":"<p>In modern Intel platforms, the SPI flash is home to multiple different firmwares, and is shared between several masters. The SPI flash is divided into regions, each containing different firmware or configuration for a different purpose.</p> <p>This document describes the intricacies of SPI flash regions and explains when and which regions to flash. This documentation is specific to Intel-based platforms and may not apply to all platforms.</p>"},{"location":"kb/flashregions/#regions","title":"Regions","text":""},{"location":"kb/flashregions/#intel-flash-descriptor","title":"Intel Flash Descriptor","text":"<p>The IFD region is always located in the first sectors of the SPI flash and contains the layout of the flash. It also describes the access permissions for each master (which may be the host processor, Intel ME, and Intel Gigabit Ethernet). It can be considered the \"partition table\" equivalent for SPI Flash.</p> <p>On Dasharo platforms, this region is typically set to writable by the host processor, to allow certain features which require modifying the flash descriptor. Other, proprietary firmware implementations often lock this region, in which case external flashing is required.</p> <p>To enable parsing of regions described by the IFD in flashrom, append <code>--ifd</code> to your flashrom command. This argument is required if you want to flash specific regions described by the IFD, like BIOS, ME, GBE or the IFD itself.</p> <p>To include the IFD region in a flashrom read or write operation, append <code>-i fd</code> to your flashrom command</p>"},{"location":"kb/flashregions/#intel-gigabit-ethernet","title":"Intel Gigabit Ethernet","text":"<p>The Gigabit Ethernet (GbE) region is present on platforms which feature the Intel i219 series of network interfaces. This region describes the configuration of the network adapter, including the MAC address.</p> <p>This region should not be touched unless necessary, for example, if you're trying to change the MAC address of the platform.</p> <p>To include the GbE region in a flashrom read or write operation, append <code>-i gbe</code> to your flashrom command.</p>"},{"location":"kb/flashregions/#intel-management-engine","title":"Intel Management Engine","text":"<p>The Management Engine (ME) region contains the ME's firmware and configuration. This region is updated as part of regular BIOS updates.</p> <p>On Dasharo platforms, this region is typically left writable by the host to allow runtime firmware updates. On proprietary firmware implementations, this region may be read and / or write protected, in which case external flashing is required.</p> <p>To include the ME region in a flashrom read or write operation, append <code>-i me</code> to your flashrom command.</p>"},{"location":"kb/flashregions/#bios","title":"BIOS","text":"<p>The BIOS region is where the host firmware resides. This region is updated as part of regular BIOS updates.</p> <p>On Dasharo firmware, the region is typically unlocked for reading and flashing, but some parts of it may be write-protected using PRx registers.</p> <p>If you have the following in your flashrom output:</p> <pre><code>PR0: Warning: 0x001c0000-0x01ffffff is read-only.\n</code></pre> <p>then part of the BIOS region is protected and is not writable. On Dasharo firmware, this lock can usually be disabled by disabling <code>BIOS Boot Medium Lock</code> in the UEFI setup menu. On proprietary firmware implementations, look for a similarly named option, but your mileage may vary. Otherwise, external flashing is required.</p> <p>To include the BIOS region in a flashrom read or write operation, append <code>-i bios</code> to your flashrom command.</p>"},{"location":"kb/fwupd/","title":"fwupd","text":""},{"location":"kb/fwupd/#introduction","title":"Introduction","text":"<p>fwupd is an open-source project, that is widely used to make firmware updates almost as seamless and simple as updating system packages. It is supported by most hardware vendors and Linux distributions.</p> <p>The <code>fwupd</code> daemon relies on the Linux Vendor Firmware Service (LVFS) for distributing and managing the firmware binaries to the users.</p> <p>Note</p> <p><code>fwupd</code> depends on  Capsule Updates  support. Refer to the \"Firmware update\" section of your device  documentation (like this one).</p>"},{"location":"kb/fwupd/#usage","title":"Usage","text":"<p>The most popular Desktop Environments like Gnome and KDE automatically look for firmware updates on LVFS and suggest performing them with a simple button press.</p> Firmware update available in Gnome Software <p>For more advanced users or in more lightweight DEs/WMs <code>fwupdmgr</code> can be used in the terminal.</p> <ul> <li> <p>Detect the supported hardware</p> <pre><code>fwupdmgr get-devices\n</code></pre> </li> <li> <p>Refresh metadata from LVFS</p> <pre><code>fwupdmgr refresh\n</code></pre> </li> <li> <p>Check for available updates</p> <pre><code>fwupdmgr get-updates\n</code></pre> </li> <li> <p>Download and install the firmware updates</p> <pre><code>fwupdmgr update\n</code></pre> </li> </ul>"},{"location":"kb/fwupd/#references","title":"References","text":"<p>fwupd website fwupd github repository fwupd documentation</p>"},{"location":"kb/laptop-dev-env/","title":"NovaCustom laptop development environment","text":"<p>This document describes the process of configuring a development and debugging environment for NovaCustom laptops.</p> <p>The instruction is applicable for PCs running Fedora. If you're using a different distro, some commands (e.g. package installation) may be different.</p>"},{"location":"kb/laptop-dev-env/#embedded-controller","title":"Embedded Controller","text":"<p>This section describes the development environment for EC firmware on NovaCustom devices. The Embedded Controller firmware is heavily based on System76 EC firmware and makes use of open-source debugging tools and software also developed by System76.</p>"},{"location":"kb/laptop-dev-env/#flashing","title":"Flashing","text":"<p>This section outlines the parts and software needed to perform external flashing of the Embedded Controller.</p> <p>Size</p> <p>14 inch models</p> <p>15 and 16 inch models</p> <p>Programmer</p> <p>Arduino Mega 2560</p> <p>Arduino Mega 2560</p> <p>Adapter</p> <p>2x12 pin 2.54mm to 24 pin 0.5mm FFC</p> <p>2x12 pin 2.54mm to 24 pin 1mm FFC</p> <p>Cables</p> <p>FFC 0.5mm pitch 24 pin</p> <p>USB-A to USB-B</p> <p>USB-C to USB-C</p> <p>FFC 1.0mm pitch 24 pin</p> <p>USB-A to USB-B</p> <p>USB-C to USB-C</p> <p>Software</p> <p>ecflash</p> <p>ecflash</p>"},{"location":"kb/laptop-dev-env/#preparation","title":"Preparation","text":"<ol> <li> <p>Obtain a copy of the EC firmware and tools:</p> <pre><code>git clone https://github.com/Dasharo/ec.git\ncd ec\ngit submodule update --init --checkout\n./scripts/deps.sh\n</code></pre> </li> <li> <p>Follow the on-screen instructions to finish configuring your development environment.</p> </li> <li>Connect the Arduino to your workstation with a USB-A to USB-B cable. Do not connect the target laptop yet.</li> <li> <p>Flash the Arduino with debugger firmware:</p> <pre><code>make BOARD=arduino/mega2560\nmake BOARD=arduino/mega2560 flash\n</code></pre> </li> <li> <p>In the EC directory, build the EC flashing application:</p> <pre><code>cargo build --manifest-path ecflash/Cargo.toml --example isp --release\n</code></pre> </li> </ol>"},{"location":"kb/laptop-dev-env/#flash-the-target-laptop","title":"Flash the target laptop","text":"<ol> <li>Connect the Arduino to the target laptop with the appropriate FFC cable for    your model. If the cable is narrower than the socket on the laptop, align the    cable and socket to pin 0 (to the left).</li> <li>Connect a second cable (e.g. USB-C to USB-C) from the workstation to the    target - this cable is needed provide grounding.</li> <li> <p>Flash the target:</p> <pre><code>sudo ecflash/target/release/examples/isp [path/to/firmware.rom]\n</code></pre> </li> </ol>"},{"location":"kb/laptop-dev-env/#troubleshooting","title":"Troubleshooting","text":"<p>In case flashing fails, try the following:</p> <ul> <li>Try running the command again, sometimes it starts working on the third   attempt</li> <li>Try another grounding cable, USB-A to USB-C, or even HDMI to HDMI have been   shown to work</li> <li>Try with / without the internal battery connected</li> <li>Try with / without the AC adapter connected</li> <li>Try plugging in the AC adapter right before / after running the command (last   resort)</li> </ul>"},{"location":"kb/laptop-dev-env/#building","title":"Building","text":"<p>Build EC firmware:</p> <pre><code>make BOARD=your/board\n</code></pre>"},{"location":"kb/laptop-dev-env/#debugging","title":"Debugging","text":""},{"location":"kb/laptop-dev-env/#build-ec-firmware-with-debugger-support-enabled","title":"Build EC firmware with debugger support enabled","text":"<ol> <li> <p>In file <code>src/board/system76/common/common.mk</code>, enable parallel port debugging     and choose the log level to get the verbosity you need:</p> <pre><code># Set log level\n# 0 - NONE\n# 1 - ERROR\n# 2 - WARN\n# 3 - INFO\n# 4 - DEBUG\n# 5 - TRACE\nCFLAGS+=-DLEVEL=4\n\n# Uncomment to enable debug logging over keyboard parallel port\nCFLAGS+=-DPARALLEL_DEBUG\n\n# Uncomment to enable I2C debug on 0x76\n#CFLAGS+=-DI2C_DEBUGGER=0x76\n</code></pre> </li> <li> <p>Build firmware for the target:</p> <pre><code>make BOARD=your/board\n</code></pre> Model BOARD NV4xMZ/MB novacustom/nv4x_tgl NS5xMU novacustom/ns5x_tgl NS7xMU novacustom/ns5x_tgl NV4xPZ novacustom/nv4x_adl NS7xPU novacustom/ns5x_adl V540TU novacustom/v540tu V560TU novacustom/v560tu V540TNx novacustom/v540tnx V560TNx novacustom/v560tnx </li> <li> <p>Disconnect power from the target.</p> </li> <li> <p>Flash the firmware to the target:</p> <pre><code>make BOARD=your/board flash_external\n# or\nsudo ecflash/target/release/examples/isp path/to/your/ec.rom\n</code></pre> </li> <li> <p>Start the console:</p> <pre><code>make BOARD=your/board console_external\n</code></pre> </li> <li> <p>Connect power to the target.</p> </li> <li> <p>Power on the target and observe the console for logs.</p> </li> </ol>"},{"location":"kb/laptop-dev-env/#bios","title":"BIOS","text":"<p>This section describes the development environment for x86 firmware on NovaCustom devices.</p>"},{"location":"kb/laptop-dev-env/#flashing_1","title":"Flashing","text":"<p>This section outlines the parts and software needed to perform external flashing of the BIOS.</p> <p>BIOS flashing is the same as with other platforms, except on ADL and MTL models, where the BIOS chip has a WSON-8 form factor. The following table of specs is provided for convenience:</p> CPU generation Tiger Lake Alder Lake Meteor Lake Programmer CH341a CH341a CH341a v1.2 with voltage switch Probe SOIC-8 WSON-8 WSON-8 Voltage 3.3v 3.3v 1.8v Software flashrom flashrom flashrom <p>Use flashrom with the CH341a programmer:</p> <pre><code>flashrom -p ch341a --ifd -i bios -w [path/to/coreboot.rom]\n</code></pre>"},{"location":"kb/laptop-dev-env/#building_1","title":"Building","text":"<p>Please refer to the NovaCustom building manual.</p>"},{"location":"kb/laptop-dev-env/#debugging_1","title":"Debugging","text":"<p>Laptop firmware debugging is made difficult by the lack of user-accessible serial ports or other debug facilities. On NovaCustom laptops, we may gain serial console output from coreboot by sending it through the EC, to the EC debugger.</p>"},{"location":"kb/laptop-dev-env/#requirements","title":"Requirements","text":"<ul> <li>Target flashed with debug EC firmware</li> <li>EC debugger connected to the target</li> </ul>"},{"location":"kb/laptop-dev-env/#enabling-ec-console-redirection","title":"Enabling EC console redirection","text":""},{"location":"kb/laptop-dev-env/#coreboot","title":"coreboot","text":"<ol> <li>Open your coreboot menuconfig</li> <li> <p>Go to the <code>Console</code> menu and enable <code>System76 EC console output</code>:</p> <pre><code>[...]\n[ ] SMBus console output\n[*] System76 EC console output\n    Default console log level (7: DEBUG)  ---&gt;\n[*] Use loglevel prefix to indicate line loglevel\n[*] Use ANSI escape sequences for console highlighting\n[...]\n</code></pre> </li> </ol>"},{"location":"kb/laptop-dev-env/#edk2","title":"edk2","text":"<ol> <li>Open your coreboot menuconfig</li> <li>Go to the <code>Payload</code> menu</li> <li> <p>Set <code>edk2 build</code> to <code>Generate edk2 debug build</code>:</p> <pre><code>[...]\n(3323ed481d35096fb6a7eae7b49f35eff00f86cf) Insert a commit's SHA-1 or a branch name\n  edk2 build (Generate edk2 debug build)  ---&gt;\n(3rdparty/dasharo-blobs/novacustom/bootsplash.bmp) edk2 Bootsplash path and filename\n[...]\n</code></pre> </li> <li> <p>Go to the <code>Dasharo specific payload options</code> submenu</p> </li> <li> <p>Select <code>Enable edk2 logging to System76 EC</code></p> <pre><code>[*] Enable edk2 logging to System76 EC\n[*] Skip PS/2 keyboard detection check\n[*] Include iPXE in edk2 payload\n[...]\n</code></pre> </li> </ol>"},{"location":"kb/laptop-dev-env/#capturing-logs","title":"Capturing logs","text":"<p>Open your EC debug console and observe the console output. You should see coreboot and edk2 debug messages on your console.</p>"},{"location":"kb/pcr-measurements/","title":"PCR measurements performed by Dasharo firmware","text":""},{"location":"kb/pcr-measurements/#introduction","title":"Introduction","text":"<p>As part of measured boot process firmware hashes (measures) various pieces of code or data and updates PCRs of a TPM device.  This allows a user (typically, automatically) to attest integrity of the system by verifying PCR values after a boot or tying decryption of data to expected values.</p> <p>Usually the firmware is not the only entity which updates PCRs and even if it is, the number of updates can be large, so it's important to know which values do get measured to which PCRs and under what conditions (e.g., some measurements are done in response to user actions).</p> <p>TPM event log maintained throughout the boot process is meant to track this kind of information, but due to limitations of its format the log is rarely enough to understand all of the measurements.  This document is meant to describe when Dasharo updates PCRs so users would know which PCRs to use for sealing secrets and when to expect their values to be changed.</p> <p>Firmware components are described separately because not all components might be present in a given firmware variant.</p>"},{"location":"kb/pcr-measurements/#the-truth-about-pcr-usage","title":"The truth about PCR usage","text":"<p>TPM 1.2 Specification (section 3.3.3) and TPM 2.0 Specification (section 3.3.4) provide information on which PCRs are expected to be used for what purposes.  The problem is that instructions seemingly contradict themselves and even if when they don't, discerning which PCR is to be used for a particular code or data is far from an easy task.  This results in a disconnect between what's prescribed by those specification and how things are in practice.</p> <p>EDK is better at adhering to TCG specifications probably because of interactions between developers on both sides.  The way coreboot updates PCRs originally came from Chromebooks and its authors had a different interpretation of PCR allocations (see).  When EDK is used as a second-stage firmware after coreboot, you get a mix of both.</p>"},{"location":"kb/pcr-measurements/#coreboot-measurements","title":"coreboot measurements","text":""},{"location":"kb/pcr-measurements/#pcr-banks","title":"PCR banks","text":"<p>At the time of writing (September 2025) coreboot supports extending only a single bank of a PCR despite ability of TPM 2.0 to handle multiple banks.  A PCR bank, which corresponds to a specific hash function, is fixed at build time:</p> TPM version PCR Bank 1.2 SHA-1 only 2.0 SHA-256 only (default used by Dasharo, but there are other options) <p>This has an implication for TPM 2.0 case when multiple PCR banks are active and used by EDK.  This is handled by using dummy hash values (<code>0100...</code>) for missing digests (SHA-1) which do not correspond to actual PCR updates.  Doing this breaks replaying of TPM log unless fake digests are skipped, but it allows to comply with TPM event log format.</p>"},{"location":"kb/pcr-measurements/#pcr-measurements","title":"PCR measurements","text":"PCR Event type Condition Description PCR-0 EV_NO_ACTION IBG, Locality 3 Not a measurement, but a marker of startup locality PCR-0 EV_ACTION IBG Reconstructed IBB measurement PCR-2 EV_ACTION Always Stages, constant data, blobs, payload PCR-3 EV_ACTION If present Runtime data PCR-7 EV_ACTION IBG, optional Reconstructed authority measurement, pre-MeteorLake only, requested on provisioning <p>Non-IBG measurements are performed each time a particular part of firmware is read from ROM, which results in the same data being measured multiple times in some cases.</p> <p>IBG stands for Intel BootGuard (now part of CBnT), which is a static hardware-based Core Root of Trust for Measurement.  When a firmware image is configured and provisioned for IBG, CPU validates firmware and extends PCRs in the process.  No TPM event log exists at that point and it becomes a responsibility of coreboot to properly log the events done by hardware.</p> <p>Note</p> <p>Correctly replaying IBG measurements requires relatively recent versions of <code>tpm2_eventlog</code> (v5.6) or <code>fwupd</code> (v1.8.0) as older ones did not recognize non-default startup locality and produced invalid expected PCR values.</p>"},{"location":"kb/pcr-measurements/#edk-measurements","title":"EDK measurements","text":""},{"location":"kb/pcr-measurements/#pcr-banks_1","title":"PCR banks","text":"<p>EDK allows a user to select which TPM banks are active and aligns its measurements with that.  Practically this means usage of all available PCR banks by default.</p> <p>Note that coreboot handles PCR banks differently, see above for more details and implications.</p>"},{"location":"kb/pcr-measurements/#pcr-measurements_1","title":"PCR measurements","text":"<p>The order of the rows reflects typical order of measurements in the event log but it's not fixed and depends on TPM version (different drivers do things differently), user actions (picked a boot option from a menu or not), failure to boot and other things.</p> <p>ATM (at the moment) in the table means as of September 2025.  Empty cells match contents of the last non-empty cell, so that it's easier to read sequences of measurements.</p> PCR:Event type Condition Description PCR-0:EV_S_CRTM_VERSION Always Firmware version (empty string ATM) PCR-0:EV_EFI_PLATFORM_FIRMWARE_BLOB Always UEFI firmware volume base+size (TPM2 could use v2 of the event, but doesn't ATM), can appear more than once PCR-7:EV_EFI_VARIABLE_DRIVER_CONFIG Always for TPM 2.0 61dfe48b-ca93-d211-aa0d-00e098032b8c:SecureBoot variable These variables set 61dfe48b-ca93-d211-aa0d-00e098032b8c:PK variable 61dfe48b-ca93-d211-aa0d-00e098032b8c:KEK variable cbb219d7-3a3d-9645-a3bc-dad00e67656f:db variable cbb219d7-3a3d-9645-a3bc-dad00e67656f:dbx variable PCR-0:EV_POST_CODE TPM present ACPI tables which are about to be published but not yet finalized for publishing PCR-2:EV_EFI_BOOT_SERVICES_DRIVER Option ROMs UEFI is loading an option ROM. PCR-4:EV_EFI_BOOT_SERVICES_APPLICATION Boot menu/Setup Hash of an EFI application implementing UI PCR-1:0x00DA0000 First boot try Dasharo-specific EFI variables (NUL-terminated ASCII name followed by variable's value) PCR-1:EV_EFI_VARIABLE_BOOT First boot try 61dfe48b-ca93-d211-aa0d-00e098032b8c:BootOrder variable 61dfe48b-ca93-d211-aa0d-00e098032b8c:Boot0000... variables PCR-4:EV_EFI_ACTION Any boot try \"Calling EFI Application from Boot Option\" PCR-0..7:EV_SEPARATOR Always Separator, the one for PCR-7 can appear earlier PCR-1:EV_EFI_HANDOFF_TABLES First boot try SMBIOS base+size (could use v2 of the event, but doesn't ATM) PCR-4:EV_EFI_BOOT_SERVICES_APPLICATION Any boot try Hash of an EFI application (bootloader, UEFI shell, etc.) PCR-7:EV_EFI_VARIABLE_AUTHORITY Unknown Measurements done by shim as an extension of SecureBoot, listed here to show where they appear PCR-8..9:EV_IPL Unknown Measurements done by a bootloader (GRUB, shim, etc.), listed here to show where they appear PCR-9:EV_EVENT_TAG Early OS PCR data Measurements done by a kernel (EFI stub of Linux hashes initrd or kernel options), listed here to show where they appear PCR-5:EV_EFI_ACTION OS is booting \"Exit Boot Services Invocation\" \"Exit Boot Services Returned with Success\""},{"location":"kb/pcr-measurements/#other-sources-of-measurements","title":"Other sources of measurements","text":"<p>Applications started by firmware to boot the system continue to measure code and data they use and also show up in the event log.  You can find more details in the documentation of respective tools (e.g., for GRUB2 or shim).</p>"},{"location":"kb/pcr-measurements/#caveats","title":"Caveats","text":""},{"location":"kb/pcr-measurements/#first-boot","title":"First Boot","text":"<p>First boot is somewhat special due to firmware initializing its state.  This includes SecureBoot-related variables which generate <code>EV_EFI_VARIABLE_DRIVER_CONFIG</code> events.  SecureBoot is considered to be on at the start, but then it's switched to its default off state.  As a result, event log on first and subsequent boots will differ even if no configuration is touched by the user.</p>"},{"location":"kb/pcr-measurements/#accuracy","title":"Accuracy","text":"<p>Exact list of measurements depends on the combination of firmware components, their versions, installed hardware, TPM version, runtime settings and at least user actions.  This is why this document can only enumerate things which typically appear in event logs and can't go much further.</p>"},{"location":"kb/pcr-measurements/#repeated-entries","title":"Repeated entries","text":"<p>Sometimes the same thing is measured multiple times (usually to the same PCR, digest is the same if that thing is unchanged) or many similar things get measured in sequence.  Keep this in mind when looking for something in the event log as it can sometimes appear more than once, including several times in a row.</p>"},{"location":"kb/pcr-measurements/#log-entries-changing-values","title":"Log entries changing values","text":"<p>Bootloaders or components of operating systems might update SecureBoot configuration automatically thus changing PCR values.  Similarly, any kind of software update or even update of configuration can potentially change behavior and cause an unexpected PCR value.  In such cases PCR values tend to stabilize after a reboot.</p>"},{"location":"kb/pcr-measurements/#conditional-measurements","title":"Conditional measurements","text":"<p>Some things are measured dynamically when they get used which in turn is controlled by some setting.  This can result in a single configuration change affecting event log in multiple places, for example disabling a device can:</p> <ul> <li>change value of a corresponding option which is measured</li> <li>remove an entry with a measurement of device's OptionROM</li> <li>remove some of the <code>BootXXX</code> variables and update <code>BootOrder</code> to reflect that</li> </ul> <p>Another example of a conditional measurement is entering firmware setup or using boot menu.  Doing that causes a measurement of EFI application that implements corresponding user interface.</p>"},{"location":"osf-trivia-list/capsule-update/","title":"Frequenty Asked Questions about Capsule Update","text":""},{"location":"osf-trivia-list/capsule-update/#q-why-was-the-traditional-flashrom-based-method-replaced-by-capsule-based-one","title":"Q: Why was the traditional flashrom-based method replaced by capsule-based one?","text":"<p>A: There are many advantages of capsule-based update. First of all, it's much easier[1]:</p> <p>The steps to update efi firmware are:</p> <ol> <li><code>cat firmware.cap &gt; /dev/efi_capsule_loader</code></li> <li><code>reboot</code></li> </ol> <p>Not only is it simpler but also more efficient, because there is no need for manual reset and disabling all of the protections before update, thus the whole process takes less time. Speaking of protection the last but not least reason is safety, the signed coalesced data can only be accessed after signatures are verified by edk2, ensuring no unauthorized activity is allowed.</p>"},{"location":"osf-trivia-list/capsule-update/#q-is-fwupd-still-linux-only","title":"Q: Is fwupd still Linux only?","text":"<p>A: No, fwupd isn't Linux only. Even the oldest release on GitHub (Feb 3, 2020) has fwupd-1.3.7-setup-x86_64.exe. We also added support for BSD systems as part of fwdup-BSD project.</p> <p>However, this isn't the only software that uses capsules to perform the update, Windows also uses it (although this would require creating and distributing firmware as drivers through Windows Update, which is beyond the scope of this project). Linux can also be compiled with EFI_CAPSULE_LOADER which exposes an interface for sending capsules to the firmware by a simple write to file.</p>"},{"location":"osf-trivia-list/capsule-update/#q-where-in-the-process-are-signatures-verified","title":"Q: Where in the process are signatures verified?","text":"<p>A: As mentioned above, signatures are verified by edk2, on coalesced data. There are decisions made earlier based on presence of data, not on it's content. Hence the focus on not allowing booting an OS with full access to flash enabled when edk2 decides that the capsule isn't valid.</p>"},{"location":"osf-trivia-list/capsule-update/#q-why-is-coreboot-needed-while-edk2-is-gathering-capsule-chunks-form-memory","title":"Q: Why is coreboot needed while edk2 is gathering capsule chunks form memory?","text":"<ul> <li>It is coreboot that applies flash write protections, which must temporarily be lifted for edk2 to perform the update.</li> <li>coreboot also implements code for writing to flash (as an extension of SMMSTORE_V2), so edk2 doesn't even need to be aware of each chipset's unique way of interacting with the SPI controller.</li> </ul>"},{"location":"osf-trivia-list/dasharo-pro-package/","title":"Frequently Asked Questions about Dasharo Pro Package","text":""},{"location":"osf-trivia-list/dasharo-pro-package/#how-can-i-download-the-dasharo-pro-package-binaries","title":"How can I download the Dasharo Pro Package binaries?","text":"<p>If you've purchased the Dasharo Pro Package, you should have received an email containing all the necessary details to access your binaries. Here's how you can download them:</p> <ol> <li> <p>Locate Your Email: Check the email account you used to purchase the    subscription. Look for an email from Dasharo that includes your subscription    data. This email will contain several vital pieces of information:</p> <ul> <li>Password: The password you'll need to access the files.</li> <li>Expiration Date: The date until your subscription is valid.</li> </ul> </li> <li> <p>Access the Download Page: Open your web browser and navigate to the    following URL:</p> <pre><code>https://dl.dasharo.com\n</code></pre> </li> <li> <p>Enter Your Password: Once you visit the above link, you'll be prompted    to enter a username and password. Use the password from your subscription    email. The username is your email address.</p> </li> <li> <p>Download the Binaries: After entering the password, you can access the    bucket containing the binaries. You can now download them as needed.</p> </li> </ol> <p></p> <p>Notes:</p> <ul> <li>Ensure you enter the password exactly as it appears in your email, as it is   case-sensitive.</li> <li>If you have not received your email or cannot find it, check your spam folder   or contact Dasharo support for assistance.</li> </ul> <p>Following these steps, you can access and download your Dasharo Pro Package binaries without issues. If you encounter any problems, don't hesitate to contact the Dasharo support team for further assistance.</p>"},{"location":"osf-trivia-list/dasharo-pro-package/#does-the-pro-package-keys-have-any-bearing-on-the-hardware-or-bios","title":"Does the Pro Package keys have any bearing on the hardware or BIOS?","text":"<p>The keys/credentials are used by the Dasharo Tools Suite only (a compact Linux distributions developed for the purpose of simplifying Dasharo firmware deployment and updates) to:</p> <ul> <li>determine your subscription type (heads or UEFI flavor of the firmware),</li> <li>determine your subscription validity (whether the subscription is valid for the platform you try to install Dasharo on),</li> <li>download the firmware binaries to install or update Dasharo for the platform (binaries are not unique, Dasharo Tools Suite downloads the same binaries for every subscriber for given platform and subscription type),</li> <li>locate HCL report for your specific platform, that was made during initial deployment of Dasharo firmware in a scenario where you would like to install back the original firmware (HCL reports contains a dup of the previous firmware and is used to flash it back on the platform). Not all platform support restoring the original firmware, i.e. NovaCustom laptops are shipped only with Dasharo firmware and can't be flashed with proprietary firmware using this method.</li> </ul> <p>The keys/credentials have no other usages outside Dasharo Tools Suite and have no impact on other components of the system.</p>"},{"location":"osf-trivia-list/dasharo-pro-package/#how-can-i-unsubscribe-from-a-dpp-newsletter","title":"How can I unsubscribe from a DPP newsletter","text":"<p>Emails sent from DPP newsletters have an <code>Unsubscribe</code> link at the bottom, which will take you to Listmonk's unsubscribe form.</p> <p>If you choose to <code>Unsubscribe from all future e-mails</code>, you will be blocklisted from every list in 3mdeb Listmonk's instance. It is currently impossible to unsubscribe from only one private list - see related issue.</p> <p>Warning</p> <p>Choosing <code>Wipe your data</code> will remove you from Listmonk and revoke your DPP access. Please refrain from using this option.</p>"},{"location":"osf-trivia-list/dasharo/","title":"Frequenty Asked Questions about Dasharo","text":""},{"location":"osf-trivia-list/dasharo/#what-is-dasharo","title":"What is Dasharo?","text":"<p>Dasharo is registered trademark and product developed by 3mdeb.</p> <p>Dasharo is an open-source firmware distribution focusing on:</p> <ul> <li>carefully selected hardware platforms,</li> <li>zero-touch initial deployment,</li> <li>clean and simple code,</li> <li>long-term maintenance,</li> <li>professional support,</li> <li>transparent validation,</li> <li>extensive and structured documentation,</li> <li>privacy-respecting implementation,</li> <li>liberty for the owners and</li> <li>trustworthiness for all.</li> </ul> <p>Dasharo consists of productized services, set of open-source repositories, and quality control which help to provide scalable, modular, easy to combine open-source BIOS, UEFI, and firmware solutions. It offers the components that are needed to develop and maintain a high quality, and modular firmware, for the stability and security of your platform.</p> <p>For individuals Dasharo provides optional features in subscription model called Dasharo Pro Package.</p>"},{"location":"osf-trivia-list/dasharo/#why-3mdeb-created-dasharo","title":"Why 3mdeb created Dasharo?","text":"<p>3mdeb created Dasharo to establish a recognized brand with a proven history of successful firmware integrations. Dasharo aims to deliver added value to customers and the community as an open-source firmware distribution, such as transparent validation, long-term maintenance, bleeding-edge integration for modern hardware, and other products requested by the community and customers.</p> <p>3mdeb has been providing services related to open-source firmware for years and has been asked multiple times by various parties to create a recognized brand. Therefore, the creation of Dasharo was a move to fulfill that need and establish a marketing vehicle to deliver value to customers.</p> <p>In addition, 3mdeb plans to provide a camp for all coreboot refugees, including platforms moved to branches due to the need for code evolution, such as Intel Intel Quark SoC deprecation and LEGACY_SMP_INIT &amp; RESOURCE_ALLOCATOR_V3. We want to provide solutions for those requiring long-term maintenance and firmware support. More elaborate explanation of our position you can find below.</p> <p>Dasharo typically supports fully open platforms like Raptor Computing Systems Talos II family, ASUS KGPE-D16, and other which are not as open but provide modern computing experience, such as MSI PRO Z690-A DDR4/DDR5. The goal is to provide a reliable, secure, and scalable firmware solution for a wide range of platforms and applications, aligning with the vision of a new golden age of computing advocated by experts in computer architecture.</p>"},{"location":"osf-trivia-list/dasharo/#what-dasharo-provides","title":"What Dasharo provides?","text":"<p>Dasharo has 10 rules that govern the production and release of firmware within its ecosystem. Dasharo rules define what we deliver with every release. These rules are:</p> <ol> <li>Every release of firmware produced by Dasharo Ecosystem must contain source code, binary, SHA256 hash, and Dasharo cryptographic signature of that hash.</li> <li>Dasharo Universe contains structured documentation for key activities related to open-source firmware life-cycle: initial deployment, update and recovery.</li> <li> <p>Cryptographic keys hierarchy should be followed:</p> <ul> <li>CEO/Founder (GPG fingerint: <code>E030 9B2D 85A6 7E84 6329  E34B B2EE 71E9 67AA 9E4C</code>) which signs</li> <li>3mdeb Master Key (GPG fingerint: <code>1B57 85C2 965D 84CF 85D1  652B 4AFD 81D9 7BD3 7C54</code>) which signs</li> <li>3mdeb Dasharo Master Key (GPG fingerint: <code>0D5F 6F1D A800 329E B7C5  97A2 ABE1 D0BC 6627 8008</code>) which signs</li> <li>Customer Open Source Firmware Release x.y Signing Key (e.g. Novacustom Open Source Firmware Release 1.0 Signing Key)</li> <li>or dedicated 3mdeb keys to given platform.</li> </ul> <p>Keys can be found in 3mdeb-secpack repository.</p> </li> <li> <p>Every release of firmware produced by Dasharo Ecosystem must have an attached test report according to requirements. Every test should be described by test specification documentation.</p> </li> <li>Customer-specific Dasharo validation procedures are delivered with the release notes directly to the customer and does not have to be publicly available.</li> <li>Every firmware produced by Dasharo Ecosystem use Semantic Versioning 2.0.0 compatible versioning scheme. For details please check description.</li> <li>Every firmware produced by Dasharo Ecosystem should use Keep A Changelog 1.0.0 compatible scheme as changelog format.</li> <li>Every Dasharo firmware release should be delivered with integrity and signature verification procedures.</li> <li>Every Dasharo firmware release must contain a detailed description of components and links to the range of code changes since the last release.</li> <li>Dasharo Ecosystem uses open-source software to create and maintain its firmware solutions, and the company strives to maintain transparency in its processes and procedures.</li> </ol> <p>These 10 rules are designed to ensure that every release of firmware produced by Dasharo Ecosystem is reliable, secure, and meets the needs of customers and the community. By following these rules, Dasharo Ecosystem provides a consistent and high-quality firmware solution for a wide range of platforms and applications.</p>"},{"location":"osf-trivia-list/dasharo/#what-is-dasharo-binary-blob-policy","title":"What is Dasharo binary blob policy?","text":"<p>Modern x86 platforms' firmware requires closed source blobs to be integrated into the image to properly initialize the silicon. The ecosystem is shifting towards designs and technologies with a lot of small microcontrollers and intellectual property (IP) blocks specialized in a very thin range of tasks. Those microcontrollers and IP blocks typically require firmware blobs as well. Some of the blobs are clearly visible, some may be obfuscated and hidden inside the silicon or other firmware blobs (e.g. Intel Management Engine region contains multiple other blobs besides the ME firmware - more about Intel ME blob).</p> <p>So Dasharo's binary blob policy is as follows:</p> <p>Integrate only the necessary amount of blobs required for proper platform operation and minimize the amount of blobs that are optional whenever possible by providing open equivalent implementations or removing them if there is no functional impact on the platform operation. Ultimately the blobs should be attested and properly documented. Dasharo Team is trying to achieve it by working on firmware SBOMs.</p> <p>Dasharo also works without blobs on platforms that allow that. For example, ASUS KGPE-D16 can run without any blobs (officially there is no PSP on that hardware, and Opteron 6200 series CPUs can run without microcode patches). There is also a libre, POWER9-based server/workstation Talos II by Raptor Computing Systems, which also do not use any binary blobs, however it is more expensive than x86 platforms.</p>"},{"location":"osf-trivia-list/dasharo/#what-is-dasharo-non-lts-release","title":"What is Dasharo non-LTS release?","text":"<p>Dasharo non-LTS release is a release that is validated with a reduced set of tests. The non-LTS name is adopted from distributions which mark their Long Term Support (LTS) releases as extensively validated/higher quality assurance. For example see Ubuntu documentation.</p> <p>The reduced set of tests includes the test cases marked with <code>minimal-regression</code> tag in the OSFV repository. Tagging the tests allow to run a subset of tests with given tag. Example command, how to run <code>minimal-regression</code> tests can be found here.</p> <p>Dasharo releases which are not marked as non-LTS undergo a full set of regression tests applicable for a platform. To check results of the tests or the test scope for given release, visit OSFV results repository.</p>"},{"location":"osf-trivia-list/dasharo/#why-dasharo","title":"Why Dasharo?","text":""},{"location":"osf-trivia-list/dasharo/#open-source-firmware-ecosystem-problems","title":"Open-source firmware ecosystem problems","text":"<p>Every open-source project has its own internal dynamics, history and politics. We are always looking for a solution that endorse non-aggression principle and peaceful coexistence, which hopefully will allow everyone to compete based on the same rules. We believe that market is big enough for all players and, if not we should make market bigger, not fight for every possible piece causing collateral damage.</p> <p>Eventually, in the community, we are all human beings, including all our good and bad features. In some cases, sympathy and antipathy cause unexpected dynamics. This impacts every community.</p> <p>We also should be aware that the open-source ecosystem is a place of OPSEC and PSYWAR techniques use, which leads to redirecting energy and resources into directions that make open-source community activity less competitive.</p> <p>In our opinion, massive energy is wasted in the open-source firmware community because of incorrect focus, like religious flame wars about philosophical principles, security paranoia without having an idea of threat modeling, or revolutionary ideas and plans for how to overthrow multibillion-dollar industry overlords. Although we may enjoy discussion during Dasharo open-source firmware vPubs during everyday job would like to focus on delivering value to those who can vote by choosing open-source firmware/hardware/ISA based product to help change the computer industry.</p> <p>Overall there is no economy around open-source firmware, and nobody seems to care much about that. It impacts the upstreaming process, the number of contributors, and reviewers. There are huge players with their own interests, small open-source firmware vendors like 3mdeb and community members essentially working for free. Without middle-size companies standing behind open-source firmware-based products, not much will change. To fill the space between big players and small boutique dev companies, we have to have products with the volume on the market because the hardware market understands only sales volumes, nothing else.</p> <p>We want to work on changing the above paradigms or at least improve the state-of-the-art relation in the community to the level where threats will have a reasonably small impact. We believe that open-source firmware is a critical tool, which should be used consciously to ensure privacy and liberty.</p>"},{"location":"osf-trivia-list/dasharo/#what-is-open-source-firmware-distribution","title":"What is open-source firmware distribution?","text":"<p>Dasharo is 3mdeb's firmware distribution and all its components are open-source. We provide releases in binary form. As you know in most cases on x86 for firmware to be useful it has to cooperate with closed blobs. In all binary releases we are making sure we provide information where all components are coming from.</p> <p>Dasharo works without blobs on platforms that allow that. When we are saying Dasharo open-source firmware distribution we mean code that is delivered by 3mdeb that is open-source. We have no influence on the code provided by 3rd parties (e.g. FSP, ME, GbE etc.).</p> <p>In coreboot community there was some controversy about calling Dasharo open-source firmware distribution (for details please check gerrit review). We respect coreboot community opinion, so we agreed that in case of coreboot documentation it would be better to use open-source based firmware distribution. It doesn't mean we agree with that decision:</p> <ul> <li>Definitions and rules used in coreboot documentation review are not clear.</li> <li>Rules seem not to be applied equally to all contributors of   coreboot distribution.</li> </ul>"},{"location":"osf-trivia-list/dasharo/#why-dasharo-is-not-called-coreboot-firmware-distribution","title":"Why Dasharo is not called coreboot firmware distribution?","text":"<p>While the coreboot is now the default open-source framework for Dasharo, we do not want to limit Dasharo to one framework. We also expect another firmware frameworks to be a base for Dasharo, such as U-Boot, oreboot, Slim Bootloader, or pure EDK II.</p> <p>Moreover, coreboot is not enough in most cases for booting modern computer. Most Dasharo flavors are currently based on coreboot with EDK II payload, but we also have coreboot with skiboot/heads payload, and we expect more flavors to appear in the future.</p>"},{"location":"osf-trivia-list/dasharo/#what-value-dasharo-provides-in-comparison-to-coreboot","title":"What value Dasharo provides in comparison to coreboot?","text":"<ul> <li>Dasharo is open-source firmware distribution based on   coreboot and other open-source firmware frameworks   (e.g. Tianocore EDKII), you can think   about Dasharo and coreboot relation in the same way as you think about   Debian/Ubuntu/RedHat and Linux. That means it can provide better   cost-effectiveness, security, transparency and customizability than   proprietary alternative.</li> <li>There are seven characterestics of Dasharo:<ul> <li>carefully selected hardware platforms,</li> <li>zero-touch initial deployment,</li> <li>clean and simple code,</li> <li>long-term maintenance,</li> <li>professional support,</li> <li>transparent validation,</li> <li>extensive and structured documentation,</li> <li>privacy-respecting implementation,</li> <li>liberty for the owners,</li> <li>trustworthiness for all.</li> </ul> </li> </ul>"},{"location":"osf-trivia-list/dasharo/#dasharo-zero-touch-initial-deployment","title":"Dasharo Zero-Touch Initial Deployment","text":"<p>Documentation supported hardware provides information about initial deployment, updates and recovery procedures. Developed by Dasharo Team Dasharo Tools Suite (DTS) operating system supports users by automating the deployment process, which helps reducing errors and inconsistencies, and make sure the firmware can be further updated to new version without any problems. DTS also provides controlled and secure environment for initial deployment and update of firmware, reducing the risk of tampering or unauthorized changes.</p> <p>Dasharo Zero-Touch Initial Deployment is smooth, effortless and user-friendly process, which reduces user frustration and improves satisfaction.</p> <p>Use of DTS largely improves firmware adoption, hardware compatibility reporting and binary blobs transmission, as well as recovery.</p> <p>For more details about zero-touch initial deployment please read relevant DTS documentation.</p>"},{"location":"osf-trivia-list/dasharo/#dasharo-clean-and-simple-code","title":"Dasharo Clean and Simple Code","text":"<p>Dasharo is an open-source distribution project with a simple code structure described in detail here. While the project benefits from the simplicity of the coreboot source code, it is continuously researching and improving its development process and tools to provide a superior experience for developers.  One example of this ongoing work is the improvements made to fork maintenance, currently being tracked in this issue on the Dasharo GitHub repository. The project also explores the concept of a bootstrapable toolchain, discussed in the build process section of the project documentation.</p>"},{"location":"osf-trivia-list/dasharo/#dasharo-long-term-maintenance","title":"Dasharo Long Term Maintenance","text":"<ul> <li>We provide long term maintenance - coreboot community for various reasons, do   not merge some patches, because of understaffing, lack of reviewers. Some   changes have long way to upstream, we maintain those patches and make them   work before those will go upstrea. If ever, we are committed to maintain   platforms which are moved to branch in coreboot.</li> <li>Firmware update - we are registered consultants for fwupd/LVFS and   enable customers and community platforms, so they can get seamless firmware   update in Linux.</li> </ul>"},{"location":"osf-trivia-list/dasharo/#dasharo-professional-support","title":"Dasharo Professional Support","text":"<p>Dasharo Support coming in form of three following packages:</p> <ul> <li>Dasharo Community Package (DCP) - donation-driven development.</li> <li>Dasharo Support Package (DSP) - annual firmware support package.</li> <li>Dasharo Enterprise Package (DEP) - custom SLA, corporate, and open roadmap   alignment advisory.</li> </ul> <p>The Dasharo Community Support Program is an open-source firmware support initiative that leverages the expertise of community members and developers to improve firmware solutions for a range of hardware models.</p> <p>Platforms in scope of the program should comply with Dasharo quality criteria, which we slowly gather in Dasharo Certified Firmware Program.</p> <p>3mdeb supports and maintains DCP-approved firmware through Dasharo Support Package (DSP) and Dasharo Enterprise Package (DEP). These packages offer essential services like porting to new platforms, developing device drivers, debugging, and fixing bugs. Companies can rely on 3mdeb's expertise to ensure their systems remain secure, up-to-date, and reliable.</p> <p>If you are interested in our services please contact us here.</p>"},{"location":"osf-trivia-list/dasharo/#dasharo-transparent-validation","title":"Dasharo Transparent Validation","text":"<ul> <li>We provide transparent validation results - coreboot in itself provide no   guarantees around release quality and do not provide binary distribution (for   reference please check coreboot project scope, we provide   those in scope of validation we perform.</li> </ul>"},{"location":"osf-trivia-list/dasharo/#dasharo-trustworthiness-for-all","title":"Dasharo Trustworthiness for All","text":"<ul> <li>We provide ready to use binaries with GPG based signing scheme that improve   verification where firmware coming from.</li> </ul>"},{"location":"osf-trivia-list/dasharo/#what-are-the-differences-between-the-official-coreboot-repository-and-the-dasharo-repository","title":"What are the differences between the official coreboot repository and the Dasharo repository?","text":"<p>Dasharo focuses on specific platforms listed in supported hardware section of Dasharo Universe documentation.</p> <p>Dasharo repository contains release tags which are associated with Dasharo Certification Program providing certain quality criteria including test results. We always trying to minimize delta, but sometimes it can be up to 5k SLOC (or more I guess e.g. Talos II coreboot support).</p>"},{"location":"osf-trivia-list/dasharo/#what-is-dasharo-certified-firmware-program","title":"What is Dasharo Certified Firmware Program?","text":"<p>The Dasharo Certified Firmware (DCF) Program is a highly specialized certification program that benchmarks open-source firmware ecosystem deliverables. The program ensures that firmware is stable, secure, and dependable while aligning with the Dasharo values. DCF encourages developers to create their version of Dasharo or contribute to the Dasharo project or coreboot upstream, enabling them to leverage the power of open-source development to create custom firmware tailored to their specific needs based on years of Dasharo quality assurance results. The program's rigorous certification process entails comprehensive testing in the Dasharo Certification Lab, ensuring that the firmware binary meets the strict standards established by the program. By aligning with the Dasharo values, the certification program improves the overall posture of the open-source firmware ecosystem, making it long-term maintainable, sustainable, and trustworthy and providing specific service level agreements and warranties to commercial customers and the community.</p>"},{"location":"osf-trivia-list/dasharo/#what-is-dcf-approved-firmware","title":"What is DCF-approved firmware?","text":"<p>The Dasharo Certified Firmware provides long-term maintenance over ten years after the CPU microarchitecture release, which means that OEM, ODM, hardware vendors, and other companies can rely on the firmware for a long time without worrying about end-of-life issues. Moreover, DCF-approved vendors must provide professional support channels to ensure that other business entities can rely on those channels for long-term support regarding firmware and software.</p> <p>The validation process for DCF is transparent. Test results and bug reports are always publicly available, allowing the community to continually identify issues and improve the firmware. However, in case of a security embargo, the results can be kept under a strict but well-defined policy, ensuring the security of the firmware.</p>"},{"location":"osf-trivia-list/dasharo/#future-work","title":"Future work","text":"<p>These future goals align with the values of privacy, liberty, and trustworthiness in the context of firmware development and the broader tech industry. We would like to implement following features as part of Dasharo Certification Program:</p> <ul> <li>Privacy-respecting implementation: By working on solutions that allow users   to deactivate potentially malicious components, like ME or PSP, the firmware   will respect user privacy and help mitigate data privacy concerns. This   approach gives users more control over their devices and reduces the risk of   unauthorized access or surveillance. Discussion and more detail in dedicated   issue.</li> <li>Liberty for the owners: Respecting the liberty of hardware owners to repair   and transfer ownership without risking the leak of personally identifiable   data is crucial. This approach supports the right-to-repair movement and   ensures that users maintain control over their personal information even when   they modify or pass on their devices. Discussion and more detail in dedicated   issue.</li> <li>Trustworthiness for all: By publishing known good measurements for each boot   phase and storing those measurements in tamper-resistant mediums, such as   TPM, during the boot process will increase security and confidence in the   firmware. Users and other stakeholders can verify that the firmware executed   during the boot process is genuine and uncompromised by making reference   measurements publicly available. Discussion and more detail in dedicated   issue.</li> </ul>"},{"location":"osf-trivia-list/dasharo/#why-there-is-no-amd-mainboard-supported-in-dasharo","title":"Why there is no AMD mainboard supported in Dasharo ?","text":"<p>Unfortunately, from the perspective of a small open-source firmware vendor, it isn't easy to work with AMD. Despite our experience with AMD SoCs since 2016, we could not yet deliver Dasharo for a modern (Zen core-based) platform. We're trying hard, but Intel has a better ecosystem for open-source firmware development.</p> <p>The reason for that state may be because AMD is in a rush, and they are understaffed in all areas compared to their success. We've been doing AMD open-source firmware development for 6+ years, including our yearly reports of open-source firmware status at FOSDEM, but the level of support for small volume firmware development companies is not yet at the level of competition.</p> <p>AGESA distribution was a problem in the past, but we solved that, and Dasharo for AMD is possible. Because Dynamic Root of Trust can work without blob, we favor AMD, but we can't do anything without a partner who can sponsor the development effort. We are on the market of open-source firmware vendors, not hardware vendors.</p>"},{"location":"osf-trivia-list/dasharo/#can-you-port-dasharo-to-my-mainboard","title":"Can you port Dasharo to my mainboard?","text":"<p>There are other versions of the same questions:</p> <ul> <li>Dasharo supports mainboard X; I have mainboard Y (or X'). Can you teach me   how to port Dasharo to my mainboard?</li> <li>Can you help me port Dasharo to my mainboard?</li> </ul> <p>TL;DR: No, we can't. In Dasharo, we support only carefully selected targets.</p> <p>The answer to that question requires understanding many aspects of the open-source firmware business we learned over the years. The critical point is that we can't help to port arbitrary targets. Hardware has to be carefully selected to bring the most benefits to the open-source firmware community and improve the sustainability of the ecosystem. Random hardware porting lead to an unmaintainable stack of platforms that no one adapts in scale, which does not lead to market change in the correct direction. Lack of commercial adoption is part of coreboot problems as a project, and we would like to avoid this mistake.</p> <p>We have strict criteria based on various aspects explained in Dasharo Community Support section.</p> <p>Dasharo Team tries to select platforms with long-term availability potential.</p> <p>Because we are fully responsible for hardware that we enable in open-source firmware ecosystem, our releases have to pass the Dasharo Certification criteria.  The whole effort is relatively expensive and, in most cases, not feasible for enabling one platform. That's why in most cases, our customers are OEM/ODM, angel investors, or communities that need reasonable quantities of hardware (&gt;200pcs).</p> <p>If the board comes with variants with minimal differences required for support in an open-source firmware stack, and one of the variants is part of the Dasharo Support Package, Dasharo Enterprise Package, or Dasharo Community Support, there is a chance to put that hardware on the relevant roadmap. In such a case, don't hesitate to contact us; we will see what we can do. However, the community member who requested support for the platform should also offer their help in validating the firmware and maintenance. That kind of request will be more than welcome from active community members. New members should consider ways to help us to gain a reputation that can lead to influencing Dasharo Community Supported roadmap.</p>"},{"location":"osf-trivia-list/deployment/","title":"Deployment","text":"<p>Deployment section of Dasharo Knowledge Base FAQ considers topic of open-source firmware deployment, which may include operations of reading and writing SPI NOR flash, as well as binary modifications.</p> <p>If you can't find the answer to your questions feel free to contact us through Community Channels or submit issue through Dasharo Github.</p>"},{"location":"osf-trivia-list/deployment/#flashrom","title":"Flashrom","text":"<p>Following sections explain how to deal with most common <code>flashrom</code> problem.</p>"},{"location":"osf-trivia-list/deployment/#how-to-install-dasharo-flashrom-fork","title":"How to install Dasharo flashrom fork ?","text":"<ul> <li>Install flashrom v1.1 or newer with your distribution's package manager if   you don't have it installed yet. If your distro doesn't provide flashrom or   provides an outdated one, you can build it yourself using   this instruction.</li> <li>Or compile recent version of flashrom:</li> </ul> <p>If you need flashrom for Dasharo-supported hardware and for some reason you cannot use DTS, please consider the compilation of Dasharo flashrom fork.</p> <p>For compilation details and related issues, please check flashrom documentation and community.</p>"},{"location":"osf-trivia-list/deployment/#perform-dry-run-to-detect-the-problems-early","title":"Perform dry run to detect the problems early","text":"<p>Most of the problems can be detected early and avoided without attempting to flash the firmware. You may check for most of the errors described here by doing a dry run (not passing any firmware binary):</p> <pre><code>sudo flashrom -p internal\n</code></pre> <p>In below sections there are example errors that you may find in the output of above command.</p>"},{"location":"osf-trivia-list/deployment/#could-not-get-io-privileges-operation-not-permitted","title":"<code>Could not get I/O privileges (Operation not permitted)</code>","text":"<p>If you see a flashrom error like this:</p> <pre><code>ERROR: Could not get I/O privileges (Operation not permitted).\nYou need to be root.\nError: Programmer initialization failed.\n</code></pre> <p>It means you have insufficient privileges to perform initialization. Please use <code>sudo</code> before <code>flashrom</code> command.</p>"},{"location":"osf-trivia-list/deployment/#devmem-mmap-failed-operation-not-permitted","title":"<code>/dev/mem mmap failed: Operation not permitted</code>","text":"<pre><code>/dev/mem mmap failed: Operation not permitted\nFAILED!\nFATAL ERROR!\nError: Programmer initialization failed.\n</code></pre> <p>Linux kernel restricts access to IOMEM. To fix that add <code>iomem=relaxed</code> to the kernel command line.</p> <p>Recommended way to fix the problem:</p> <ul> <li>Edit <code>/etc/default/grub</code>:</li> </ul> <pre><code>GRUB_CMDLINE_LINUX=\"iomem=relaxed\"\n</code></pre> <ul> <li>Update GRUB2 config with:</li> </ul> <pre><code>sudo update-grub2\n</code></pre> <ul> <li>Alternatively, if previous command doesn't work:</li> </ul> <pre><code>sudo grub-mkconfig -o /boot/grub/grub.cfg\n</code></pre> <ul> <li>Reboot and try <code>flashrom</code> command again</li> </ul> <p>Other method:</p> <ul> <li>Edit <code>grub.cfg</code> in <code>/boot/grub/</code>:</li> </ul> <pre><code>linux /boot/vmlinuz-4.15.0-115-generic ro quiet iomem=relaxed\n</code></pre> <ul> <li>Reboot and try <code>flashrom</code> command again</li> </ul> <p>Last resort you can try to modify boot option runtime. YMMV:</p> <ul> <li>If your computer uses BIOS for booting, then hold down the Shift, or if   your computer uses UEFI for booting, press Esc several times, while GRUB   is loading to get the boot menu. And, after getting a GRUB menu, press E   on a boot entry to append <code>iomem=relaxed</code> to kernel command line and press   Ctrl+X or F10 to boot. Although this setting is temporary and will   last only during the next boot, this way is faster and a customer doesn't   need to re-generate anything.</li> </ul> <p>Please note having it as a temporary setting maybe is slightly better for security (there's a reason why it's disabled by default).</p> <p>If the above does not resolve the problem, the kernel may be compiled with strict devmem, which prohibits accessing the IOMEM. You should then take different Linux system.</p>"},{"location":"osf-trivia-list/deployment/#transaction-error-between-offset","title":"<code>Transaction error between offset ...</code>?","text":"<pre><code>SPI Configuration is locked down.\nFREG0: Flash Descriptor region (0x00000000-0x00000fff) is read-only.\nFREG2: Management Engine region (0x00005000-0x005fffff) is locked.\nNot all flash regions are freely accessible by flashrom. This is most likely\ndue to an active ME. Please see https://flashrom.org/ME for details.\nAt least some flash regions are read protected. You have to use a flash\nlayout and include only accessible regions. For write operations, you'll\nadditionally need the --noverify-all switch. See manpage for more details.\nEnabling hardware sequencing due to multiple flash chips detected.\nOK.\nFound Programmer flash chip \"Opaque flash chip\" (12288 kB, Programmer-specific) mapped at physical address 0x0000000000000000.\nReading flash... Transaction error between offset 0x00005000 and 0x0000503f (= 0x00005000 + 63)!\nRead operation failed!\nFAILED.\n</code></pre> <p>Most probably it means problem lays in ME not allowing to read its region. One of the method to mitigate the issues is to put ME in Manufacturing Mode. Such operation depends on ME version, SPI flash layout and platform design. Detail information you should find in sections dedicated to given hardware. To access documentation for supported hardware please go to Hardware Compatibility List.</p> <p>Please note we consider further mitigations in Dasharo Roadmap.</p>"},{"location":"osf-trivia-list/deployment/#warning-no-chipset-found","title":"<code>WARNING: No chipset found</code>","text":"<p>If you see the following in the flashrom output:</p> <pre><code>WARNING: No chipset found. Flash detection will most likely fail.\nNo EEPROM/flash device found.\nNote: flashrom can never write if the flash chip isn't found automatically.\n</code></pre> <p>that means your flashrom version is incorrect. Follow the procedure of building flashrom or use DTS.</p>"},{"location":"osf-trivia-list/deployment/#chip-write-protection-enabled","title":"Chip write protection enabled","text":"<p>If you see anything like this in the flashrom output (or similar, the hex number may differ):</p> <pre><code>PR0: Warning: 0x001c0000-0x01ffffff is read-only.\n</code></pre> <p>That means you did not disable <code>BIOS boot medium lock</code> correctly. GO back to firmware setup and disable the option as described in Prerequisites. Flashrom update procedure containing <code>--ifd -i bios</code> parameters will fails if you do not disable the protection. The procedure using the <code>--fmap -i RW_SECTION_A -i RW_SECTION_B</code> parameters is not affected.</p>"},{"location":"osf-trivia-list/deployment/#warning-bios-region-smm-protection-is-enabled","title":"<code>Warning: BIOS region SMM protection is enabled!</code>","text":"<p>If you see anything like this in the flashrom output (or similar, the hex number may differ):</p> <pre><code>Warning: BIOS region SMM protection is enabled!\nWarning: Setting Bios Control at 0xdc from 0xaa to 0x89 failed.\nNew value is 0xaa.\n</code></pre> <p>Any attempt to flash the firmware will fail. That means you did not disable <code>Enable SMM BIOS write protection</code> option correctly. Go back to firmware setup and disable the option as described in Prerequisites.</p>"},{"location":"osf-trivia-list/deployment/#how-to-use-flashrom-to-backup-vendor-bios","title":"How to use flashrom to backup vendor BIOS?","text":"<p>It is always a good idea to backup the original BIOS of your hardware, before switching to open-source firmware.</p> <ul> <li>Boot Dasharo Tools   Suite</li> <li>Choose option <code>S) to enter shell</code>.</li> <li>Read content of SPI NOR flash:</li> </ul> <pre><code>flashrom -p internal -r bios_backup_`date +%Y%m%d`.bin\n\nflashrom v1.2-551-gf47ff31 on Linux 5.10.0-9-amd64 (x86_64)\nflashrom is free software, get the source code at https://flashrom.org\n\nUsing clock_gettime for delay loops (clk_id: 1, resolution: 1ns).\nFound chipset \"Intel Q77\".\nEnabling flash write... SPI Configuration is locked down.\nThe Flash Descriptor Override Strap-Pin is set. Restrictions implied by\nthe Master Section of the flash descriptor are NOT in effect. Please note\nthat Protected Range (PR) restrictions still apply.\nEnabling hardware sequencing due to multiple flash chips detected.\nOK.\nFound Programmer flash chip \"Opaque flash chip\" (12288 kB, Programmer-specific) mapped at physical address 0x0000000000000000.\nReading flash... done.\n</code></pre> <p>If you face any issues, please refer to the troubleshooting section for hardware platform.</p>"},{"location":"osf-trivia-list/dts/","title":"Dasharo Tools Suite","text":""},{"location":"osf-trivia-list/dts/#what-is-dasharo-tools-suite","title":"What is Dasharo Tools Suite?","text":"<p>Dasharo Tools Suite (DTS) is like a swiss army knife for Dasharo firmware: you can execute initial deployment, firmware update and even dump machine logs for debugging and development support.</p> <p>Also refer to DTS Overview.</p>"},{"location":"osf-trivia-list/dts/#how-to-get-dasharo-pro-package-releases-using-dasharo-tools-suite","title":"How to get Dasharo Pro Package Releases using Dasharo Tools Suite?","text":"<p>Dasharo Pro Package Releases can be used to perform firmware updates with DTS by providing Dasharo Pro Package credentials obtained after buying a Dasharo Pro Package.</p> <p>Commercial use of DTS should be discussed directly with 3mdeb or Dasharo Team.</p>"},{"location":"osf-trivia-list/dts/#how-can-i-use-my-dasharo-pro-package-credentials","title":"How can I use my Dasharo Pro Package credentials","text":"<p>After purchasing the Dasharo Pro Package, you should receive an email with keys to use with Dasharo Tools Suite. This section describes how to do it.</p> <ul> <li> <p>Firstly, run DTS from a USB flash drive, documentation on this is included   here.</p> </li> <li> <p>After booting, you will see a text menu, choose option number 4,   <code>Load your DPP keys</code>, by pressing <code>4</code> and <code>Enter</code>.</p> </li> <li> <p>Next, rewrite the credentials received in the following order:</p> <ul> <li><code>e-mail</code>,</li> <li><code>password</code>.</li> </ul> </li> <li> <p>Credentials will be verified by DTS attempting to connect to our server. If   successful, the message <code>Verification of the Dasharo DPP was successful. They   are valid and will be used.</code> will be displayed.</p> </li> </ul> <p>Below is a short demo that presents loading of the DPP keys.</p> <pre><code> Dasharo Tools Suite Script 2.6.0\n (c) Dasharo &lt;contact@dasharo.com&gt;\n Report issues at: https://github.com/Dasharo/dasharo-issues\n*********************************************************\n**                HARDWARE INFORMATION\n*********************************************************\n**    System Inf.: Emulation QEMU x86 q35/ich9\n** Baseboard Inf.: Emulation QEMU x86 q35/ich9\n**       CPU Inf.: QEMU Virtual CPU version 2.5+\n**    RAM Virtual: Not Specified\n*********************************************************\n**                FIRMWARE INFORMATION\n*********************************************************\n** BIOS Inf.: 3mdeb Dasharo (coreboot+UEFI) v0.2.1-rc1\n*********************************************************\n**     1) Dasharo HCL report\n**     2) Update Dasharo Firmware\n**     4) Load your DPP keys\n**     6) Transition Dasharo Firmware\n*********************************************************\nR to reboot  P to poweroff  S to enter shell\nK to launch SSH server  L to enable sending DTS logs\n\nEnter an option:\n4\n\nEnter DPP email:   you@example.com\n\nEnter password:    password\nDasharo DPP credentials have been saved\n</code></pre>"},{"location":"osf-trivia-list/dts/#how-to-support-us","title":"How to support us?","text":"<p>In general there are three ways to support us:</p>"},{"location":"osf-trivia-list/dts/#i-have-more-time-than-money-and-i-can-code","title":"I have more time than money and I can code","text":"<p>Please help us develop Dasharo influence on open-source firmware market and spread the word about it. There are multiple ways to do that:</p> <ul> <li>Join Dasharo Matrix   Community and   support other members of community</li> <li>Join Dasharo open-source firmware   vPub or   other related event organized by 3mdeb or Dasharo Team.</li> <li>Write a Google review</li> <li>Follow us on social   media and help   spreading the word about Dasharo.</li> <li>Contribute   documentation, test results, Dasharo Hardware Compatibility List   Reports</li> </ul> <p>To get access to DTS SE you should contact 3mdeb or Dasharo Team and prove your contribution regarding above areas of support and influence. If it would be meaningful we would be glad to give you access to DTS SE for a year.</p>"},{"location":"osf-trivia-list/dts/#i-have-more-time-than-money-and-i-cant-code","title":"I have more time than money and I can't code","text":"<p>Please contribute ideas for new features, review documentation and help testing bug fixes.</p> <p>If you would like to pursue that path please contact us on Dasharo - General Matrix channel to agree on scope of contribution to avoid any potential collision with other developers. To get access to DTS SE you should contact 3mdeb or Dasharo Team with links to your contribution and we would be glad to provide one year of DTS SE updates.</p>"},{"location":"osf-trivia-list/dts/#i-have-more-money-than-time","title":"I have more money than time","text":"<p>Please donate using one of available methods and contact 3mdeb or Dasharo Team to let us know about your donation. Minimal donating to access DTS SE with one year update support is 60EUR.</p>"},{"location":"osf-trivia-list/dts/#how-can-i-help-the-support-team-diagnose-my-problem-faster","title":"How can I help the support team diagnose my problem faster?","text":"<p>If you are having issues with functionalities provided by the DTS start menu, you can help by providing logs.</p> <p>To do that, follow the instructions below:</p> <ol> <li>Boot DTS.</li> <li>Enable sending logs by pressing <code>L</code>.</li> <li>Reproduce the problem.</li> <li>The logs will be sent automatically after exiting from the menu (entering    shell, powering off the system or rebooting using the options in DTS menu) or    after successful or failed update/install or failed firmware restore.</li> </ol> <p>If you haven't enabled sending logs, then in case of failed update/install/restore you will be asked if you want to send them to 3mdeb:</p> <pre><code>Do you want to send console logs to 3mdeb? [n/y]: y\n</code></pre> <p>Tip</p> <p>If the automatic log submission does not work in your case, you can view and copy the archive with logs manually from <code>/tmp/logs/*.tar.gz</code> or if the archive wasn't created you can copy logs themselves from <code>/tmp/logs/dts*.log</code> and <code>/var/local/*.log</code>. Depending on your platform configuration and connection method there might be different amount of files e.g.</p> <pre><code>bash-5.2# ls /tmp/logs/\ndts-verbose_tty1.log  dts-verbose_ttyS0.log  dts_tty1.log  dts_ttyS0.log\n</code></pre> <p>After collecting or automatically submitting logs, please report the problem by creating an issue on GitHub and/or \"Dasharo Premier Support\" Matrix channel. If the logs contain sensitive information, such as credentials, please report the issue via email instead.</p> <p>Make sure to provide details that will help us reproduce the issue, such as the machine model, Dasharo and DTS version, etc., in accordance with the sections of the provided template and in case of automatically submitted logs please also include time and date when those logs were sent.</p>"},{"location":"osf-trivia-list/dts/#how-can-i-verify-dpp-credentials-logged-in-dts","title":"How can I verify DPP credentials logged in DTS?","text":"<p>After providing credentials and pressing \"Enter\", select the <code>s</code> option to enter the console. Type the command:</p> <pre><code>cat /etc/cloud-pass\n</code></pre> <p>This command will print two lines. The first line will be the email, and the second will be the password you provided. Verify the lines to ensure they match your credentials.</p>"},{"location":"osf-trivia-list/introduction/","title":"Open Source Firmware Trivia Questions List (OSFTQL)","text":"<p>Goal of following questions list is to provide answers to terribly trivial topics or questions that were asked and answered gazillion times. We believe to move forward with so limited resources we have to stop wasting community precious time on something we agree on, but move forward with discussion.</p> <p>Other role of this list is to create taxonomy of OSF trivia questions for community and Dasharo customers, to avoid repeating explanation of topics which most of community already agree on.</p>"},{"location":"osf-trivia-list/introduction/#osftql0003-binary-blobs-what-are-they-what-do-we-need-them-for","title":"<code>[OSFTQL0003]</code> Binary blobs - what are they? What do we need them for?","text":"<p>Binary blobs are a term referring to proprietary, closed-source software components. They are called \"blobs\" because, unlike open-source code, you can't see their internal structure, nor verify their security; they are an undifferentiated mass (or \"blob\") of binary data. While often frowned upon in the Open Source community for being inauditable and suspicious, some are required by coreboot for most of the recent platforms. Here are some common types of binary blobs you might encounter when working with coreboot:</p> <ul> <li> <p>CPU Microcode:</p> <ul> <li>Modern CPUs often require microcode updates to fix bugs or security    vulnerabilities. These microcode updates are usually distributed as binary    blobs.</li> </ul> </li> <li> <p>Memory Initialization:</p> <ul> <li>Some platforms require binary blobs for memory initialization. The code    that sets up the RAM is sometimes provided only in binary form by the    hardware manufacturer.</li> </ul> </li> <li> <p>Video BIOS:</p> <ul> <li>The video BIOS (VBIOS) is a piece of firmware that initializes the    graphics hardware. In some cases, the VBIOS might be required to get    graphical output during the boot process.</li> </ul> </li> <li> <p>Management Engine (ME) Firmware (Intel platforms):</p> <ul> <li>Intel's Management Engine is a controversial component required for    Intel systems to boot. It requires a binary blob.</li> </ul> </li> <li> <p>Platform Security Processor (PSP) Firmware (AMD platforms):</p> <ul> <li>Similar to Intel's ME, AMD's Platform Security Processor (PSP) requires    binary firmware to function.</li> </ul> </li> <li> <p>Firmware Support Package (FSP) (Intel platforms):</p> <ul> <li>Intel provides a Firmware Support Package (FSP) which is a binary blob    used to initialize the processor, memory, and chipset on some Intel    platforms.</li> </ul> </li> <li> <p>Embedded Controller (EC) Firmware:</p> <ul> <li>The firmware for the embedded controller (which handles things like    power management, fan control, etc.) may also be a binary blob.</li> </ul> </li> </ul> <p>To see in fine detail which are required for your platform of interest, please refer to this coreboot wiki page.</p>"},{"location":"osf-trivia-list/me/","title":"Introduction","text":"<p>Until Nehalem (ME version 6) it was possible to remove ME firmware completely. Starting with Nehalem, ME firmware can't be completely removed.</p> <ul> <li>If ME firmware is missing, the PC will not boot at all</li> <li>Earlier ME versions left a 30 minute grace period for recovering from   a bad flash, but this is no longer true</li> </ul> <p>Three methods to reduce ME's capabilities have been found: neutering, disabling and soft-disabling.</p> <ul> <li>Removing non-essential portions of the ME's firmware is commonly referred   to as neutering ME</li> <li>Setting a bit in the Flash Descriptor which acts as a kill-switch which   tells ME to hang after initialization is usually what we mean by   disabling ME</li> </ul>"},{"location":"osf-trivia-list/me/#neutering-me","title":"Neutering ME","text":"<p>Neutralizing ME: removing non-essential portions of the ME's firmware</p> <ul> <li>Also called \"neutering\"</li> <li>Not initially designed by Intel</li> </ul> <p>Method discovered by Trammel Hudson and implemented by Nicola Corna in me_cleaner project removes all modules other than those required for platform init</p> <ul> <li>Modules left in ME 6.0 - 10.x: <code>ROMP</code>, <code>BUP</code></li> <li> <p>Modules left in ME &gt;= 11.x: <code>rbe</code>, <code>kernel</code>, <code>syslib</code>, <code>bup</code>, sometimes   also <code>mfs</code> A neutered ME will initialize hardware, then throw an error due to missing firmware</p> </li> <li> <p>This sometimes results in power management issues</p> <ul> <li>Therefore it's not recommended in production without extensive testing</li> </ul> </li> <li>Functions provided by ME will no longer be operational</li> </ul> <p>ME &gt;= v11.x: Sometimes <code>mfs</code> also needs to be preserved. <code>mfs</code> is responsible for some of the hardware initialization.</p>"},{"location":"osf-trivia-list/me/#why-is-it-possible","title":"Why is it possible?","text":"<ul> <li>The FPT is not signed, has just a checksum</li> <li>The partitions are individually signed</li> <li>The offset and size of each partition are saved in each FPT entry</li> </ul> <p>Source: Intel ME myths and reality, Igor Skochinsky &amp; Nicola Corna</p>"},{"location":"osf-trivia-list/me/#soft-disabling-me","title":"Soft-disabling ME","text":"<p>It's also possible to put ME into a soft-disabled state by sending a HECI <code>SET_ME_DISABLE</code> or <code>HMRFPO_ENABLE</code> message</p> <ul> <li>BIOS needs to send these messages</li> <li>ME will stay disabled until a corresponding <code>ENABLE</code> message is sent</li> <li>Functional ME firmware must be present</li> <li>Usually what the \"Disable ME\" option in some BIOSes does</li> <li>Also offered as an option when buying some laptops (e.g. Dell)</li> </ul>"},{"location":"osf-trivia-list/me/#hap-altmedisable-bit-aka-disabling-me","title":"HAP / AltMeDisable bit (aka disabling ME)","text":"<p>Method discovered in 2017 by Positive Technologies. Initially introduced by Intel for government/intelligence purposes.</p> <ul> <li>Not even the US government trusts ME entirely!</li> </ul> <p>Also supported by the me_cleaner project Involves setting an undocumented, secret bit in the Flash Descriptor which acts as a kill-switch for the ME</p> <ul> <li><code>AltMeDisable</code> on ME versions &lt; 11.x</li> <li>HAP (High Assurance Platform) on ME versions &gt;= 11.x</li> </ul> <p>Leaves ME in a stopped state, lets it shut down gracefully instead of erroring out - This can help prevent issues with power management that may arise from   disabling the ME - Supported by some OEMs</p>"},{"location":"osf-trivia-list/me/#3mdeb-official-statement","title":"3mdeb official statement","text":"<p>Whenever it is possible 3mdeb try to minimize impact of (CS)ME/SPS/TXE or any other firmware residing on peripheral or built-in CPUs.</p>"},{"location":"osf-trivia-list/sovereign-boot-wizard/","title":"Frequently Asked Questions about Sovereign Boot Provisioning Wizard","text":""},{"location":"osf-trivia-list/sovereign-boot-wizard/#why-the-key-fingerprint-is-not-showing-when-asked-to-trust-a-new-bootloader","title":"Why the key fingerprint is not showing when asked to trust a new bootloader?","text":"<p>If the fingerprint is not shown, then either the image is unsigned or there was something wrong when parsing the image. In such case the Sovereign Boot Provisioning Wizard may display empty data.</p> <p>Also In the RC1 version of the Sovereign Boot Provisioning Wizard, the signature parsing was not yet implemented. Thus the fingerprints were intended to be empty.</p>"},{"location":"osf-trivia-list/sovereign-boot-wizard/#will-the-enrolled-keys-change-if-the-os-gets-updated","title":"Will the enrolled keys change if the OS gets updated?","text":"<p>Enrolled keys will not change without the user explicit action, e.g. modification through firmware setup or the Sovereign Boot Provisioning Wizard itself.</p> <p>Operating system will not be able to change the keys nor any Secure Boot variable, because Sovereign Boot Provisioning Wizard removes KEK, and enrolls an ephemeral PK. KEK and PK are the only keys that can sign an authorized update to Secure Boot db/dbx variables.</p>"},{"location":"osf-trivia-list/sovereign-boot-wizard/#will-bios-password-prevent-an-attacker-to-trust-a-newly-attached-bootloader","title":"Will BIOS password prevent an attacker to trust a newly attached bootloader?","text":"<p>The only BIOS password feature currently available in Dasharo is the BIOS Setup Menu password. This password prevents only unauthorized entrances to setup menu. It is not able to protect against trusting a newly attached bootloader by using the Sovereign Boot Provisioning Wizard capability to prompt to trust the bootloader when bootloader. verification fails.</p> <p>That is why besides enabling Sovereign Boot Provisioning Wizard, one should also enable:</p> <ul> <li>Either BIOS boot password   that will authorize the user before attempting to boot anything.</li> <li>Or Sovereign Boot Provisioning Wizard lockdown   mode to disable the   possibility to trust bootloaders that fail verification after Sovereign Boot   Wizard is provisioned. Once lockdown mode is enabled, the BIOS Setup Menu   should be enabled and set as well.</li> </ul>"},{"location":"osf-trivia-list/sovereign-boot-wizard/#sovereign-boot-password-protection-is-not-implemented-yet","title":"Sovereign Boot password protection is not implemented yet?","text":"<p>The only BIOS password feature currently available in Dasharo is the BIOS Setup Menu password. This password prevents only unauthorized entrances to setup menu. As the Sovereign Boot Provisioning Wizard runs outside of the BIOS setup application, one needs a BIOS Boot password feature.</p> <p>BIOS Boot Password is currently at the feature request stage, which you may track here. This password will be checked before the BIOS attempt to run any bootloader, thus preventing the Wizard to be triggered by the bootloader verification failure and potentially trust any bootloader without BIOS boot password owner's consent.</p>"},{"location":"osf-trolling-list/build_process/","title":"<code>[OSFI001]</code> Build process","text":""},{"location":"osf-trolling-list/build_process/#osfi0010-there-is-no-healthy-osf-without-reproducible-builds","title":"<code>[OSFI0010]</code> There is no healthy OSF without reproducible builds","text":""},{"location":"osf-trolling-list/build_process/#what-are-the-reproducible-builds","title":"What are the reproducible builds?","text":"<p>Reproducible Builds and a lot of its aspects is well explained on the linked website.</p>"},{"location":"osf-trolling-list/build_process/#why-are-reproducible-builds-crucial-osf","title":"Why are reproducible builds crucial OSF?","text":"<p>This is because knowing hashes of firmware components, we can calculate expected TPM PCRs values. By knowing good PCR values and being able to predict further values after firmware update, we are gaining the following advantages:</p> <ul> <li> <p>We can easily confirm if the firmware is valid by reading TPM PCRs and compare   to reference integrity measures (RIM), RIM can be calculated by build exactly   the same version of OSF.</p> <p>NOTE: Please note that depending on your threat model using TPM chip with closed source firmware implementation may lead to solution which is not trustworthy.</p> </li> <li> <p>Process of replying measurements provided in TPM Event Log is simpler because   we can easily obtain software and confirm hashes used during PCR extension   the process was valid and the same as produced by the software build process</p> </li> <li>Looking for bugs by using bisection is easier since being able to build every   commit of software in a reproducible manner give us confidence that there would   be no change in behavior between 2 consecutive builds</li> <li>Consistent behavior for given hash can be confirmed by test results tied to   given hash in that way users looking at test results may expect exactly the   same behavior for firmware binaries with the same hash</li> <li>Long term maintenance should be easier if firmware build would be   reproducible over a long time, because often happen some firmware land in   industrial applications, e.g., robots, trains, smart city infrastructure, if   the bug will be detected after a long time; it is important to have tools and be   able to confirm the same binary can be generated in the future. If we know given   toolchain reproduce binary bit by bit we are sure it also reproduces   software/firmware behavior. In that light making small incremental   improvement using a toolchain that gives reproducible results give us higher   the chance that we will not introduce uncontrolled change in behavior and code   the change will be reflected by the compilation process without affecting previous   software behavior.</li> </ul>"},{"location":"osf-trolling-list/build_process/#osfi0011-docker-containers-as-build-systems-considered-harmful","title":"[OSFI0011] Docker containers as build systems \"considered harmful.\"","text":"<p>Docker containers for a couple of last years become the default method for providing reproducible runtime environment for software as well those started to be very useful for developers to transfer exact configuration for building given software stack. We wrote about the usefulness of Docker containers in embedded software development environment on 3mdeb blog.</p> <p>After a long time of using Docker containers for embedded software development and build environments we noticed problems for long time maintenance and reproducibility.</p>"},{"location":"osf-trolling-list/build_process/#coreboot-sdk-problems","title":"coreboot-sdk problems","text":"<p>The example can be <code>coreboot-sdk</code> used for building coreboot project.</p> <p>A good summary of the problem was provided by Thrilleratplay in guix-docker repo:</p> <p>Currently, the coreboot build environment, <code>coreboot-sdk</code>, uses a Debian docker base image.  To install additional required packages, <code>apt-get update</code> must be run.  The resulting Docker image is hosted in the Docker hub repository to be retrieved at any time in the future.  However, at any time in the future, building the same docker file will generate a different image based on the latest packages used in apt-get.  Over time, as packages are updated due to bug, security or feature improvements, the docker image's provenance in the docker hub repository becomes increasingly difficult, if not impossible, to audit and reproduce.</p> <p>Some more detailed notes related to <code>coreboot-sdk</code> issues are presented below.</p> <ol> <li>There is no meaningful versioning of SDK    [1] - at some point,    there was versioning 1.32-53, now switched to git SHA. Both seemed to have    no meaning and were released at arbitrary points in time. The result is that it    is hard to find which version of SDK works with the coreboot tree version.</li> <li>Validation of coreboot-sdk is not sufficient - for example, recently, python    fixes were merged [2],    somehow this change passed all QA checks, but SeaBIOS use python (not python2    or python3) and all builds using this version of SDK that compile SeaBIOS fail.</li> <li><code>coreboot-sdk</code> is based on moving target Debian sid. It is close to impossible    to build the same Docker images at 2 different points in time.</li> <li>coreboot-sdk enforce given version of ACPI spec - this may not always be    a good thing to use the most recent compiler and update code accordingly    since it can easily break OSes.</li> </ol>"},{"location":"osf-trolling-list/build_process/#why-we-care","title":"Why we care?","text":"<ol> <li>Whenever we deliver code or service to community or customer, we provide    build environment which, for the sake of quality user support, should be    stable.</li> <li>CI pipelines rely on those containers. Replacing docker image in CI pipeline    whenever something change defeat the purpose of having automation and    increase maintenance cost significantly and increase maintenance cost    significantly</li> </ol>"},{"location":"osf-trolling-list/build_process/#requirements-for-osf-dev-and-build-process","title":"Requirements for OSF dev and build process","text":"<p>Open-source firmware development and build environment SHOULD have: * meaningful release process * meaningful validation process, at least basic build system and dev env   capabilities should be tested * meaningful revisions with a clear explanation of what software stack can be build   with what version of dev and build system, a description should include   side-spec compliance, e.g., ACPI, SMBIOS, UEFI, etc. * reproducible process that works across systems and in the long run * signature, so anyone can identify where build and dev env coming from and if   it is trustworthy</p>"},{"location":"osf-trolling-list/build_process/#ideas-for-solving-the-above-issues","title":"Ideas for solving the above issues","text":"<ol> <li>Docker images are not reproducible - this is a known fact, and if we are    extremely serious about stability, security and quality, we should stop    using a not reproducible build environment. Of course, there is some work    making Docker images reproducible, but it opens Pandora's box    [3]    of Yocto or Buildroot. Another path could be Nix or Guix, which is currently    pursued in the community OSFW #guix-buildstack channel</li> <li>this is a private channel; feel free to ping anyone from 3mdeb Team to join.</li> <li>coreboot toolchain is built by its own build system, which would be hard to    couple with Dockerfile or something else.</li> <li>Docker images can be signed using <code>docker trust</code> commands as described    here.</li> <li>Other idea would be to use <code>wget</code> and <code>dpkg -i</code> for every needed package in    <code>Dockerfile</code> that create base image for reproducible toolchain. Of course   that means quite extensive dependency management, but maybe simplicity is worth   the effort.</li> <li>It is also possible to maintain VMs per given coreboot (or other OSF)   version. That may mean long term VM image compatibility issues as well as   problems with making sure images would work with various hypervisor versions.   It is even more complex if multiple OS should be supported. VMs also have quite   big overhead in terms of performance</li> </ol> <p>I'm not tracking all activity in the community, so some claims may be plain wrong. Please let me know what I miss when I'm wrong.</p>"},{"location":"osf-trolling-list/build_process/#osfi0012-difference-between-regular-release-binaries-and-dev_signed-binaries","title":"[OSFI0012] Difference between regular release binaries and <code>dev_signed</code> binaries","text":"<p>We publish two types of binaries. Regular release binaries which are signed with release key and <code>dev_signed</code> binaries which are signed with the developer key used by Dasharo build system. The purpose of the latter binaries is for users who build Dasharo from source to be able to verify if their binary is the same as the one we build (binary is reproducible).</p>"},{"location":"osf-trolling-list/jsm_documentation/","title":"Jira Service Management client procedure","text":""},{"location":"osf-trolling-list/jsm_documentation/#dasharo-support-package","title":"Dasharo Support Package","text":"<p>If you are interested in starting cooperation using the Support Package, it is the perfect time to start. The Support Package will help us allocate resources and a secure timeline for your needs. To ensure that we can provide comprehensive assistance with your current products and future new developments, we encourage you to choose our new Support Package for more streamlined cooperation, guaranteed availability, and quick, on-time delivery.</p>"},{"location":"osf-trolling-list/jsm_documentation/#why-should-you-add-requests-to-jira-service-management","title":"Why should you add requests to Jira Service Management?","text":"<p>JSM allows you to easily keep track of the status of individual requests. Each new request you add means analysis and pricing of task execution. This conversation will take place on JSM. Progress on the request will also be reported using JSM.</p>"},{"location":"osf-trolling-list/jsm_documentation/#before-you-raise-your-first-request","title":"Before you raise your first request","text":"<p>Remember to provide a list of email addresses of people that need access to the portal. It's required to prepare the organization, where requested people will automatically receive updates on the ticket statuses.</p>"},{"location":"osf-trolling-list/jsm_documentation/#how-to-add-a-request","title":"How to add a request","text":""},{"location":"osf-trolling-list/jsm_documentation/#raising-requests-using-the-portal","title":"Raising requests using the portal","text":"<p>To add a new request using the web service:</p> <ol> <li>Go to portal    and select the project.</li> <li>Select a type of request and provide the required data. You can also add    attachments by dragging and dropping them into any part of the web page, or    by clicking the <code>Browse</code> button.</li> <li>When you are ready to send the request, click Send. Your request is created    and awaits our response.</li> </ol> <p></p> <p></p>"},{"location":"osf-trolling-list/jsm_documentation/#raising-requests-using-email","title":"Raising requests using email","text":"<p>If you prefer raising a request using email, you can do this by sending a message to special email address generated for the project.</p> <p>The email address will be provided to you by separate message.</p>"},{"location":"osf-trolling-list/jsm_documentation/#communication-through-the-jira-service-desk","title":"Communication through the Jira Service Desk","text":"<p>You can always add a comment to the request and attach files. You can do it directly from the JSM request page or using email simply by replying to the email thread.</p> <p>We'll also add comments, questions and quotations in the comment section.</p>"},{"location":"osf-trolling-list/jsm_documentation/#what-happens-after-you-raise-a-request","title":"What happens after you raise a request","text":"<p>We'll soon let you know about the cost and what solutions are proposed. You'll also receive information on which requests will be resolved in the next release.</p>"},{"location":"osf-trolling-list/jsm_documentation/#process-and-request-statuses","title":"Process and request statuses","text":"<p>The diagram below presents what the workflow of JSM requests looks like.</p> <p></p> <ul> <li><code>Open</code> - your request is created and visible for us, but we didn't start working on it yet.</li> <li><code>Analysis</code> - our team is analyzing your request. We will soon let you know what will be the cost of resolving this request.</li> <li> <p><code>Waiting for the client</code> - your action is required to continue working on the request. Most of the time it will be:</p> <ol> <li>acceptance of the estimated effort</li> <li>need for additional clarification. <p>Note that the request with this status is waiting for your response. Delaying a response will result with lack of progress being made on the request.</p> </li> </ol> </li> <li> <p><code>Approved</code> - you have accepted the cost, and we will soon start working to resolve the request.</p> </li> <li><code>Rejected</code> - you have rejected the cost of resolving the request, and we will not work on this request.</li> <li><code>In progress</code> - we are actively working on the request.</li> <li><code>On hold</code> - the progress on resolving the request has been paused, and the work may be resumed in the future.</li> <li> <p><code>Closed</code> - the request has been resolved, but there was no work to be done or work was stopped due to:</p> <ol> <li>the client's decision</li> <li>feasibility study showed 0% success rate</li> <li>other</li> </ol> </li> <li> <p><code>Done</code> - the request is resolved, and work has been completed.</p> </li> </ul>"},{"location":"osf-trolling-list/jsm_documentation/#support-budget","title":"Support budget","text":"<p>After completing the requests, you'll receive information about the state of your support budget by email (by default two times a month).</p>"},{"location":"osf-trolling-list/jsm_documentation/#slas","title":"SLAs","text":"<p>Our team aims to provide the best support experience. We want you to always be up to date on the status of your request. We are doing our best to reply on your request in less that 36 hours.</p>"},{"location":"osf-trolling-list/trusted_computing/","title":"<code>[OSFI002]</code> Trusted computing","text":""},{"location":"osf-trolling-list/trusted_computing/#osfi0020-crtm-what-it-stand-for","title":"<code>[OSFI0020]</code> CRTM what it stand for?","text":"<p>According to TCG Glossary v1.1 rev1.0 published in 2017 correct definition is:</p> <p>The instructions executed by the platform when it acts as the RTM. [Formerly described as \u201cCore Root of Trust for Measurement\u201d. Code Root of Trust for Measurement is the preferred expansion.] This acronym expansion is preferred.</p> <p>Not every one agree with that expansion of CRTM abbreviation. What do you think?</p>"},{"location":"projects/capsule-updates/","title":"UEFI Capsule Update for coreboot with EDK II","text":""},{"location":"projects/capsule-updates/#abstract","title":"Abstract","text":"<p>The project integrates UEFI capsule update methods into coreboot with EDK II firmware frameworks to streamline firmware updates. UEFI capsule update is an industry-standard approach widely supported by hardware vendors, providing a secure method for delivering firmware updates.</p> <p>By adopting UEFI capsule update methods, the project aims to simplify the update process and enhance the user experience, providing a more reliable approach compared to complex flashrom-based updates, which are still common in the open-source firmware distributions based on coreboot. Due to security measures, OS-level access to firmware is intentionally restricted, which in turn makes it increasingly challenging to apply firmware updates from the operating system. This limitation poses difficulties in utilizing traditional flashrom-based methods for firmware updates. The expected outcomes of the project include enhanced firmware update capabilities, a simplified user experience, heightened security, and enhanced compatibility.</p>"},{"location":"projects/capsule-updates/#involvement-with-projects-or-organisations-relevant-to-this-project","title":"Involvement with projects or organisations relevant to this project","text":"<p>Relevant projects:</p> <ul> <li>coreboot [1]</li> <li>Dasharo compatible with MSI PRO Z690-A DDR4 (and the subsequent port for the</li> <li>DDR5 variant) [2]</li> <li>Dasharo compatible with Dell Optiplex [3]</li> <li>EDKII [4]</li> <li>Fwupd (LVFS) [5]</li> <li>U-Boot [6]</li> </ul> <p>3mdeb has been a licensed provider of quality coreboot consulting services since 2016. We are well-known in the open-source community for maintaining th firmware of the PC Engines APU series platform since 2016, delivering high-quality firmware releases each month and providing technical support on PC Engines and OPNSense forums. Our contribution to the coreboot project reaches (as of 26th of July 2023):</p> <p>319 individual patches merged to the official coreboot repository 33481 lines of code added 41097 lines of code removed</p> <p>Moreover, we constantly develop Dasharo, which is an open-source firmware distribution focusing on clean and simple code, long-term maintenance, transparent validation, privacy-respecting implementation, liberty for the owners, and trustworthiness for all. More details can be found here [7].</p>"},{"location":"projects/capsule-updates/#project-scope","title":"Project scope","text":"<p>Task 1. Enable Capsule Updates in coreboot</p> <ul> <li>GitHub Milestone for tracking   progress</li> </ul> <p>This task enhances coreboot by enabling support for UEFI Capsule Update. It modifies coreboot to be able to access beyond 4GB, and implements mechanisms for identifying capsule image locations. Capsule coalescing logic is ported to coreboot to consolidate firmware update capsules into a single memory region. coreboot is adjusted to reserve this memory region and pass the information to the UEFI payload. Additionally, a new SMI handler is implemented to write to SPI flash, enabling full BIOS image overwrite only when a valid capsule update is present.</p> <ul> <li>Enable memory access above 4GB</li> <li>Parse capsule location from UEFI variables in coreboot</li> <li>Gather capsules into one region</li> <li>Reserve memory containing capsules and pass it to the payload</li> <li>Add SMI handler for flashing firmware updates</li> </ul> <p>Task 2. Enable capsule updates in coreboot EDK II UEFI Payload</p> <ul> <li>GitHub Milestone for tracking   progress</li> </ul> <p>The UEFI payload integration phase integrates enhanced coreboot firmware with the UEFI system, ensuring accurate tracking of firmware updates via the EFI System Resource Table (ESRT). A library instance facilitates flash access operations within UEFI, supported by an SMI handler in coreboot.</p> <p>Updates to Firmware Descriptor (FDF) and Device Scope Configuration (DSC) files are made, enabling boot mode selection and invoking ProcessCapsules() during firmware updates. coreboot version information is extracted and incorporated into the ESRT to prevent rollback. The workflow is streamlined to generate capsules containing coreboot.rom images, with automation where feasible.</p> <ul> <li>Implement PlatformFlashAccessLib leveraging coreboot SMI handler</li> <li>Modify FDF/DSC files and capsule processing</li> <li>Parse version reported by coreboot for ESRT</li> <li>Develop process for building capsules from coreboot.rom</li> </ul> <p>Task 3. Test the solution on a hardware</p> <ul> <li>GitHub Milestone for tracking   progress</li> </ul> <p>This task will involve testing the UEFI Capsule Update on hardware to ensure its proper functionality and compatibility. The CAPSULE_ENABLE feature will be validated using test signing keys before transitioning to product-specific ones. Furthermore, a mechanism will be tested to prevent the operating system from booting until a reboot occurs following the firmware update process. The primary objective is to ensure that the system remains secure and stable after firmware updates are applied.</p> <ul> <li>Verify feature using test signing keys</li> <li>OS block booting verification</li> </ul> <p>Task 4. Secure Firmware Signing</p> <ul> <li>GitHub Milestone for tracking   progress</li> </ul> <p>This task focuses on implementing secure firmware signing processes for update integrity and authenticity. OpenSSL utilities are used for generating signing keys, enhancing security. A streamlined binary compilation procedure simplifies the signing process for end-users. OpenSSL command line utilities are utilized to generate necessary signing keys. The milestone includes creating a user-friendly procedure for binary signing without embedding private keys into build system, ensuring consistency and efficiency. Comprehensive documentation for end-users will be provided, detailing firmware update procedures and feature utilization.</p> <ul> <li>Generate signing keys using OpenSSL utilities</li> <li>Develop binary compilation without using a private key</li> <li>End-user documentation</li> </ul> <p>Task 5. Enhanced Boot Process with vboot A/B Support</p> <ul> <li>GitHub Milestone for tracking   progress</li> </ul> <p>This task improves the firmware update process for security, stability, and user-friendliness. Integrating the vboot A/B scheme ensures a reliable fallback for problematic updates, while automated execution of the UX capsule enhances the user experience. Enhancements will support the vboot A/B scheme for fallbacks and use the UX capsule to inform users of update progress. This prevents user impatience during longer update times, reducing the risk of platform malfunction due to premature reboot attempts.</p> <ul> <li>Add support for the vboot A/B scheme</li> <li>Automate the creation and execution of the UX capsule</li> </ul> <p>Task 6. Test and release UEFI Capsule Update for coreboot and EDK II</p> <ul> <li>GitHub Milestone for tracking   progress</li> </ul> <p>This task involves the testing and release of firmware updates for MSI platforms. The main objective is to thoroughly verify the successful update process and ensure system stability and security after implementing the new firmware update method. This entails rigorous testing to guarantee the reliability and integrity of the updated firmware on both platforms.</p> <ul> <li>Test and publish release for MSI PRO Z790-P</li> <li>Test and publish release for MSI PRO Z690-A DDR4/DDR5</li> </ul> <p>Task 7. Upstream of the UEFI Capsule Update for coreboot with EDK II in coreboot</p> <ul> <li>GitHub Milestone for tracking   progress</li> </ul> <p>The primary objective is to upstream the UEFI Capsule Update functionality directly into the coreboot codebase, ensuring its availability as part of the coreboot project and expanding the firmware update capabilities for coreboot-supported systems. The code implementing UEFI Capsule Update for coreboot with EDK II shall be upstreamed to the official coreboot repository at review.coreboot.org.</p> <p>Task 8. Upstream of the UEFI Capsule Update for coreboot with EDK II in EDK II</p> <ul> <li>GitHub Milestone for tracking   progress</li> </ul> <p>The objective is to integrate the UEFI Capsule Update implementation into the official codebase, contributing to the EDK II ecosystem and improving firmware update capabilities for coreboot-supported systems. The code implementing UEFI Capsule Update for coreboot with EDK II will be upstreamed to the official EDK II repository at github.com/tianocore/edk2.</p>"},{"location":"projects/capsule-updates/#expected-flow-of-update-process","title":"Expected flow of update process","text":"<p>This represents technical flow of update process. Note that this may not represent the final state of the project, as some implementation details may be revised before the project is finalized.</p> <p></p> <ul> <li>Solid arrows represent transition of execution flow.</li> <li>Dotted arrows represent data transfer (read, write).</li> <li>The diagram shows only features added for this project, without the usual   initialization steps performed by coreboot or edk2.</li> <li>Actions in <code>opt</code> boxes are taken only when capsules are present, others are   executed unconditionally.</li> <li>In the future, capsule updates will be initialized from OS instead of UEFI   application started manually from UEFI Shell.</li> </ul>"},{"location":"projects/capsule-updates/#compare-your-own-project-with-existing-or-historical-efforts","title":"Compare your own project with existing or historical efforts","text":"<p>3mdeb's embedded systems developers are experienced engineers accustomed to firmware development on desktops. There are a few successfully enabled coreboot supported Dell machines that were enabled by 3mdeb and other platforms based on Intel FSP. By leveraging our knowledge and experience from the ESRT project, which plays a vital role within the operating system to initiate capsule updates at the system level, we bring valuable insights and advancements to the firmware update process.</p> <p>Through our contributions, we aim to promote open-source firmware adoption and facilitate a more robust and secure firmware update process, benefiting open-source firmware community and and ensuring a user-friendly and efficient firmware update experience for end-users.</p> <ul> <li>MSI Z690-A PRO DDR4 / DDR5: https://review.coreboot.org/c/coreboot/+/63463</li> <li>Dell OptiPlex 7010/9010 SFF: https://review.coreboot.org/c/coreboot/+/40351</li> <li>Dell Precision T1650: https://review.coreboot.org/c/coreboot/+/62212</li> <li>Libretrend LT1000: https://review.coreboot.org/c/coreboot/+/30360</li> <li>Protectli FW2B/FW4B: https://review.coreboot.org/c/coreboot/+/32076</li> <li>Protectli FW6: https://review.coreboot.org/c/coreboot/+/33839</li> <li>Fwupd for BSD: https://www.phoronix.com/news/FWUPD-To-The-BSDs</li> <li>EFI System Resource Table (ESRT): https://reviews.freebsd.org/rG24f398e7a153a05a7e94ae8dd623e2b6d28d94eb</li> </ul>"},{"location":"projects/capsule-updates/#significant-technical-challenges-you-expect-to-solve-during-the-project","title":"Significant technical challenges you expect to solve during the project","text":"<p>The coreboot and EDK II firmware frameworks need to be modified to support UEFI capsule update methods. This integration requires understanding and implementing the UEFI specification, especially the EFI_FIRMWARE_MANAGEMENT_PROTOCOL, FMP capsule format, and EFI System Resource Table (ESRT).</p> <p>Adapting coreboot and EDK II to support these mechanisms will involve extensive code changes and ensuring compatibility with the UEFI standard. Solving these challenges will involve significant code modifications, rigorous testing, and an active collaboration with the coreboot and EDK II communities to ensure successful integration and smooth functionality.</p>"},{"location":"projects/capsule-updates/#ecosystem-of-the-project","title":"Ecosystem of the project","text":"<p>Although 3mdeb will be responsible for the whole implementation and testing, anyone is also welcome to test, develop code, and report issues after the results will be published. For the project to be successful, the outcomes should be included in the upstream coreboot and edk2 projects for the benefit of the wider community. That is why we expect high level of engagement with communities of both of this projects at each stage of the project, to make sure the proposed solution can be accepted upstream.</p> <p>There are members of the open-source community interested in this outcome:</p> <ul> <li> <p>Richard Hughes - This proposal is an important step forward for coreboot moving towards the industry standard UpdateCapsule update method. With this functionality we can use the existing generic capsule plugin rather than having to configure each board with flashrom. From a security point of view, updating using flashrom means the SPI device cannot be locked at runtime, and moving to UpdateCapsule allows the vendor to secure the platform significantly. This proposal is an important step forward for coreboot.</p> </li> <li> <p>Wessel klein Snakenborg (NovaCustom) - As a leading provider of customizable and privacy-focused laptops, NovaCustom is committed to offering our customers the most secure and seamless user experience. We are dedicated to providing our valued customers with the best possible user experience. The project, UEFI Capsule Update for coreboot with EDK II, perfectly aligns with this commitment. By integrating the widely supported UEFI capsule update methods into our open-source firmware frameworks, we aim to highly improve the firmware update process for our users. With this implementation, updating firmware becomes a breeze, as our customers can seamlessly utilize the popular firmware update management tool for Linux systems: fwupd. This user-friendly approach ensures that our customers can easily and securely keep their laptops up-to-date with the latest features and security enhancements. Increasing the accessibility of the firmware update procedure encourages people to perform firmware updates more promptly, thereby enhancing the overall security of coreboot+EDK-II.</p> </li> </ul>"},{"location":"projects/capsule-updates/#review","title":"Review","text":"<p>Further reviews and suggestions are welcome. You can do it in two ways:</p> <ul> <li>using Giscus on the bottom of this page</li> <li>contributing to this repository directly via Pull Request</li> </ul>"},{"location":"projects/capsule-updates/#funding","title":"Funding","text":"<p>This project is partially funded through NGI0 Entrust, a fund established by NLnet with financial support from the European Commission's Next Generation Internet program. Learn more at the NLnet project page.</p>"},{"location":"projects/sovereign-boot-wizard/","title":"Sovereign Boot Provisioning Wizard","text":""},{"location":"projects/sovereign-boot-wizard/#introduction-and-motivation","title":"Introduction and motivation","text":"<p>Sovereign Boot Provisioning Wizard is an UEFI application designed to guide end users through the provisioning of UEFI Secure Boot. The objective is to offer a user-controllable mechanism for managing platform trust relationships and establishing UEFI Secure Boot infrastructure, with a primary focus on transparency, informed consent, and usability.</p> <p>Unlike traditional firmware interfaces, which expose UEFI Secure Boot as a collection of loosely connected toggleable settings and unmanaged certificate stores, this application presents a coherent, wizard-like experience. Its purpose is to make the process of reviewing and enrolling platform keys intuitive for users who are not security experts.</p>"},{"location":"projects/sovereign-boot-wizard/#specification","title":"Specification","text":"<p>The application is implemented based on the Sovereign Boot Provisioning Wizard Specification (current revision v0.1.0).</p>"},{"location":"projects/sovereign-boot-wizard/#credits","title":"Credits","text":"<p>This research has been supported by Power Up Privacy, a privacy advocacy group that seeks to supercharge privacy projects with resources so they can complete their mission of making our world a better place.</p> <p>Author of the idea and motivation: Patrick Schleizer.</p> <p>Design and technical support: Aaron Rainbolt.</p>"},{"location":"projects/sovereign-boot-wizard/#contribution","title":"Contribution","text":"<p>One may contribute to the project in many ways:</p> <ul> <li>request features and changes, report issues via   GitHub (use   SovereignBoot   label)</li> <li>open Pull Requests to Dasharo EDK2   (application code is under   <code>DasharoModulePkg/Application/SovereignBootWizard</code>)</li> <li>open Pull Requests to verified-boot   repository to suggest changes to   the specification</li> </ul>"},{"location":"projects/sovereign-boot-wizard/#future-ideas","title":"Future ideas","text":"<p>This is backlog of future ideas and improvements obtained via community feedback:</p> <ul> <li>Add BIOS Boot Password feature</li> <li>Handle OptionROMs in Sovereign Boot Wizard</li> <li>Key discovery on filesystems in Sovereign Boot Wizard</li> <li>Supporting different security models in Sovereign Boot Wizard</li> <li>Implement Sovereign Boot Wizard lockdown mode</li> </ul> <p>Feel free to suggest new improvements and features to extend the Sovereign Boot Provisioning Wizard.</p> <p>If you have any questions about Sovereign Boot Provisioning Wizard, visit the FAQ.</p>"},{"location":"projects/sovereign-boot-wizard/#releases","title":"Releases","text":""},{"location":"projects/sovereign-boot-wizard/#rc4-2025-09-30","title":"RC4 - 2025-09-30","text":""},{"location":"projects/sovereign-boot-wizard/#fixed","title":"Fixed","text":"<ul> <li>Sovereign Boot Wizard does not discover alternative bootloaders yet</li> </ul>"},{"location":"projects/sovereign-boot-wizard/#binaries","title":"Binaries","text":"<p>qemu_q35_sovereign-boot-rc4.rom qemu_q35_sovereign-boot-rc4.rom.sha256</p>"},{"location":"projects/sovereign-boot-wizard/#sbom","title":"SBOM","text":"<ul> <li>coreboot based on 24.12 revision qemu_q35_sovereign_boot-rc4<ul> <li>License</li> </ul> </li> <li>Dasharo EDKII fork based on edk2-stable202502 revision sovereign-boot-rc4<ul> <li>License</li> </ul> </li> </ul>"},{"location":"projects/sovereign-boot-wizard/#building","title":"Building","text":"<p>Follow the instructions for QEMU. Checkout <code>qemu_q35_sovereign_boot-rc4</code> tag on coreboot repository and use new <code>qemu_svboot</code> target as an argument to <code>./build.sh</code> script.</p>"},{"location":"projects/sovereign-boot-wizard/#video-demonstration","title":"Video demonstration","text":"<p>Watch a short demonstration of Sovereign Boot Wizard in action. This video covers the new features of the Sovereign Boot Wizard and complements the documentation.</p>"},{"location":"projects/sovereign-boot-wizard/#rc3-2025-08-29","title":"RC3 - 2025-08-29","text":""},{"location":"projects/sovereign-boot-wizard/#added","title":"Added","text":"<ul> <li>Filtering and skipping Microsoft certificates in the image signatures</li> <li>Sovereign Boot tested on Hardkernel ODROID-H4 hardware</li> </ul>"},{"location":"projects/sovereign-boot-wizard/#fixed_1","title":"Fixed","text":"<ul> <li>Measured boot reports volume full error when chaining EFI binary from the   Sovereign Boot Provisioning   Wizard</li> <li>UEFI Secure Boot variables protection not yet tested</li> </ul>"},{"location":"projects/sovereign-boot-wizard/#known-issues","title":"Known issues","text":"<ul> <li>Sovereign Boot Wizard does not discover alternative bootloaders yet</li> </ul>"},{"location":"projects/sovereign-boot-wizard/#sbom_1","title":"SBOM","text":"<ul> <li>coreboot based on 24.12 revision hardkernel_odroid_h4_sovereign_boot-rc3<ul> <li>License</li> </ul> </li> <li>coreboot based on 24.12 revision qemu_q35_sovereign_boot-rc3<ul> <li>License</li> </ul> </li> <li>Dasharo EDKII fork based on edk2-stable202502 revision sovereign-boot-rc3<ul> <li>License</li> </ul> </li> </ul>"},{"location":"projects/sovereign-boot-wizard/#building_1","title":"Building","text":"<ul> <li> <p>ODROID-H4</p> <p>Follow the instructions for ODROID-H4 by using <code>hardkernel_odroid_h4_sovereign_boot-rc3</code> tag to checkout coreboot repository. The resulting file will be placed in <code>&lt;coreboot_dir&gt;/build/coreboot.rom</code>.</p> </li> <li> <p>QEMU:</p> <p>Follow the instructions for QEMU. Checkout <code>qemu_q35_sovereign_boot-rc3</code> tag on coreboot repository and use new <code>qemu_svboot</code> target as an argument to <code>./build.sh</code> script.</p> </li> </ul>"},{"location":"projects/sovereign-boot-wizard/#video-demonstration_1","title":"Video demonstration","text":"<p>Watch a short demonstration of Sovereign Boot Wizard in action. This video covers the new features of the Sovereign Boot Wizard and complements the documentation.</p>"},{"location":"projects/sovereign-boot-wizard/#rc2-2025-07-31","title":"RC2 - 2025-07-31","text":""},{"location":"projects/sovereign-boot-wizard/#added_1","title":"Added","text":"<ul> <li>Parsing of signatures embedded into boot options:<ul> <li>Enumerating all signatures present in the image</li> <li>Certificate chain enumeration for each signature</li> <li>Certificate validity time checks</li> <li>Signature integrity checks against the image hash</li> <li>Check for certificate/hash presence in DB and DBX</li> </ul> </li> <li>Calculation of image and certificate SHA256 hashes</li> <li>Detection of unsigned images and displaying their hashes</li> <li>Parsing DER encoded X509 certificates and exposing the information in   human-readable format</li> <li>Enrolling the certificates and image hashes to DB/DBX</li> <li>Ephemeral PK enrollment to finalize provisioning of Sovereign Boot</li> <li>Option to skip trust decision for a certificate or image</li> </ul>"},{"location":"projects/sovereign-boot-wizard/#known-issues_1","title":"Known issues","text":"<ul> <li>Measured boot reports volume full error when chaining EFI binary from the   Sovereign Boot Provisioning   Wizard</li> <li>UEFI Secure Boot variables protection not yet tested</li> </ul>"},{"location":"projects/sovereign-boot-wizard/#sbom_2","title":"SBOM","text":"<ul> <li>coreboot based on 24.12 revision qemu_q35_sovereign_boot-rc2<ul> <li>License</li> </ul> </li> <li>Dasharo EDKII fork based on edk2-stable202502 revision sovereign-boot-rc2<ul> <li>License</li> </ul> </li> </ul>"},{"location":"projects/sovereign-boot-wizard/#building_2","title":"Building","text":"<p>Follow the instructions for QEMU. Checkout <code>qemu_q35_sovereign_boot-rc2</code> tag on coreboot repository and use new <code>qemu_svboot</code> target as an argument to <code>./build.sh</code> script.</p>"},{"location":"projects/sovereign-boot-wizard/#testing","title":"Testing","text":"<p>Currently implemented set of functionalities can be validated using OSFV.</p> <ol> <li> <p>Clone the repository and checkout the revision with tests:</p> <pre><code>git clone https://github.com/Dasharo/open-source-firmware-validation.git\ngit checkout sovereign-boot-rc2\n</code></pre> </li> <li> <p>Set up the testing environment as described in    README.md.</p> </li> <li>Download the <code>qemu_q35.rom</code> binary from Binaries section and    place it in the <code>open-source-firmware-validation</code> directory.</li> <li>Obtain the DTS v2.5.0 image from the DTS release    page and place it, e.g. in    <code>$HOME</code> directory.</li> <li>Obtain the Sovereign Boot test data    image    (<code>svboot_test_data.img</code>) and place it, e.g. in <code>$HOME</code> directory.</li> <li> <p>Start the QEMU with the following command in separate window/tab in the    <code>open-source-firmware-validation</code> directory:</p> <pre><code>HDD_PATH=~/dts-base-image-v2.5.0.wic HDD2_PATH=~/svboot_test_data.img \\\n  ./scripts/ci/qemu-run.sh graphic os\n</code></pre> </li> <li> <p>Start the new test cases in the window where test environment was prepared:</p> <pre><code>robot -L TRACE -v rte_ip:127.0.0.1 -v snipeit:no -v config:qemu \\\n  -t \"SVB004*\" dasharo-security/sovereign-boot.robot\n</code></pre> </li> </ol>"},{"location":"projects/sovereign-boot-wizard/#video-demonstration_2","title":"Video demonstration","text":"<p>Watch a short demonstration of Sovereign Boot Wizard in action. This video covers the new features of the Sovereign Boot Wizard and complements the documentation.</p>"},{"location":"projects/sovereign-boot-wizard/#rc1-2025-06-30","title":"RC1 - 2025-06-30","text":""},{"location":"projects/sovereign-boot-wizard/#added_2","title":"Added","text":"<ul> <li>First engineering release of the Sovereign Boot Provisioning Wizard</li> <li>Basic parsing of boot options: displaying description, hardware path and file path</li> <li>Integration of the Sovereign Boot Provisioning Wizard into UEFI Boot Manager:<ul> <li>wizard is invoked during boot when system is unprovisioned</li> <li>wizard is invoked when system is provisioned and the boot option does not   pass the UEFI Secure Boot verification</li> </ul> </li> <li>Integration of the Sovereign Boot Provisioning Wizard into UEFI firmware   setup:<ul> <li>wizard can be disabled/enabled in the UEFI Secure Boot Configuration menu</li> <li>wizard can be manually invoked from the UEFI Secure Boot Configuration menu</li> <li>disabling the wizard causes to reset the UEFI Secure Boot keys to defaults</li> </ul> </li> </ul>"},{"location":"projects/sovereign-boot-wizard/#sbom_3","title":"SBOM","text":"<ul> <li>coreboot based on 24.12 revision qemu_q35_sovereign_boot-rc1<ul> <li>License</li> </ul> </li> <li>Dasharo EDKII fork based on edk2-stable202502 revision sovereign-boot-rc1<ul> <li>License</li> </ul> </li> </ul>"},{"location":"projects/sovereign-boot-wizard/#building_3","title":"Building","text":"<p>Follow the instructions for QEMU (<code>qemu_full</code> target).</p>"},{"location":"projects/sovereign-boot-wizard/#testing_1","title":"Testing","text":"<p>Currently implemented set of functionalities can be validated using OSFV.</p> <ol> <li> <p>Clone the repository and checkout the revision with tests:</p> <pre><code>git clone https://github.com/Dasharo/open-source-firmware-validation.git\ngit checkout fce9dbc78007fb94c23070974834e47784205af4\n</code></pre> </li> <li> <p>Set up the testing environment as described in README.md.</p> </li> <li>Download the <code>qemu_q35.rom</code> binary from Binaries section and    place it in the <code>open-source-firmware-validation</code> directory.</li> <li>Obtain the DTS v2.5.0 image from the DTS release    page and place it, e.g. in    <code>$HOME</code> directory.</li> <li> <p>Start the QEMU with the following command in separate window/tab in the    <code>open-source-firmware-validation</code> directory:</p> <pre><code>HDD_PATH=~/dts-base-image-v2.5.0.wic ./scripts/ci/qemu-run.sh graphic os\n</code></pre> </li> <li> <p>Start the test suite in the window where test environment was prepared:</p> <pre><code>robot -L TRACE -v rte_ip:127.0.0.1 \\\n    -v snipeit:no -v config:qemu \\\n    dasharo-security/sovereign-boot.robot\n</code></pre> </li> </ol>"},{"location":"projects/sovereign-boot-wizard/#video-demonstration_3","title":"Video demonstration","text":"<p>Watch a short demonstration of Sovereign Boot Wizard in action. This video covers basic usage of the Sovereign Boot Wizard and complements the documentation.</p>"},{"location":"projects/trenchboot-aem-v2/","title":"TrenchBoot as Anti Evil Maid","text":""},{"location":"projects/trenchboot-aem-v2/#abstract","title":"Abstract","text":"<p>As Qubes OS users, promoters, and developers, we understand how essential it is to be aware of the latest developments in maintaining the security of your favorite operating system. We're excited to share our plans to integrate the TrenchBoot Project into Qubes OS's new Anti-Evil Maid (AEM) implementation. As you may know, traditional firmware security measures like UEFI Secure Boot and measured boot, even with a Static Root of Trust (SRT), may only sometimes be enough to ensure a completely secure environment for your operating system. Compromised firmware may allow for the injection of malicious software into your system, making it difficult to detect. To overcome these limitations, many silicon vendors have started implementing Dynamic Root of Trust (DRT) technologies to establish a secure environment for operating system launch and integrity measurements. We're excited to take advantage of these advancements through integration with the TrenchBoot Project.</p> <p>The usage of DRT technologies like Intel Trusted Execution Technology (TXT) or AMD Secure Startup becomes more and more significant, for example, Dynamic Root of Trust for Measurement (DRTM) requirements of Microsoft Secured Core PCs.  In open-source projects, DRTM hasn't found its place yet, but that gradually changes. The demand on having firmware independent Roots of Trust is increasing and projects that satisfy this demand are growing, for instance, TrenchBoot.  TrenchBoot is a framework that allows individuals and projects to build security engines to perform launch integrity actions for their systems. The framework builds upon Boot Integrity Technologies (BITs) that establish one or more Roots of Trust (RoT) from which a degree of confidence that integrity actions were not subverted is derived. The project has grown a lot thanks to the previous NLnet NGI0 PET grant and now it looks for further expansion into extensive use of the DRT technologies in open-source and security-oriented operating systems like Qubes OS. Qubes OS Anti Evil Maid (AEM) software heavily depends on the availability of the DRTM technologies to prevent the Evil Maid attacks.  However, the project hasn't evolved much since the beginning of 2018 and froze on the support of TPM 1.2 with Intel TXT in legacy boot mode (BIOS). This effectively limits the usage of this security software to older Intel machines only. TPM 1.2 implemented SHA1 hashing algorithm which is nowadays considered weak in the era of forever-increasing computer performance and quantum computing. The solution to this problem comes with a newer TPM 2.0 with more agile cryptographic algorithms and SHA256 implementation by default.  Qubes OS AEM software suffers from the following:</p> <ol> <li>Lack of TPM 2.0 support to handle more secure hashes and safer design of the    TPM firmware according to a newer specification.</li> <li>Qubes OS AEM has never supported any AMD processors with AMD Secure Startup    technology. Implementing AMD support would make a huge impact and broaden    the usage of DRTM technologies.</li> </ol> <p>The initial AEM implementation relied on the Trusted Boot project, Intel's reference implementation of Intel TXT. It had never any plans to support AMD processors. TrenchBoot is filling this gap supporting both Intel and AMD hardware which makes it an ideal target to replace Trusted Boot in Qubes OS AEM implementation. Furthermore, the project grant would be used to implement the missing pieces in the Qubes OS AEM software to cover the AMD and Intel support for both TPM 1.2 and TPM 2.0.</p>"},{"location":"projects/trenchboot-aem-v2/#compare-your-own-project-with-existing-or-historical-efforts","title":"Compare your own project with existing or historical efforts","text":"<p>3mdeb is a licensed provider for quality coreboot consulting services for 7 years. We are well-known in the open-source community for maintaining firmware of the PC Engines APU series platform for over 7-years. Delivering high-quality firmware releases each month and providing technical support on PC Engines and OPNSense forums. 3mdeb embedded systems developers are experienced engineers accustomed to operating systems development. Our developers have contributed to the fwupd support for Qubes OS. 3mdeb is also regularly co-organizing mini-conference events with Qubes OS maintainer Marek Marczykowski-G\u00f3recki where various topics related to Qubes OS security are discussed. Among them, the Anti Evil Maid was frequently presented by 3mdeb engineers:</p> <ul> <li>Anti Evil Maid for Intel coreboot-based platform</li> <li>Anti Evil Maid for modern AMD UEFI-based platform</li> </ul> <p>3mdeb, with financial support from Qubes OS, developed a proof of concept replacing Trusted Boot with TrenchBoot on Intel hardware with TPM 1.2. Qubes OS and 3mdeb already tested a new solution with Qubes OS Anti Evil Maid, which is available for community use. The result of this solution can be seen in the published blog post that concludes the first phase of integrating TrenchBoot Anti Evil Maid for Qubes OS. The numbering of the next phases of the project will commence with number 2 in order to maintain consistency with the work already completed in phase 1. The following application describes the remaining work required to have production quality adoption in one of the most popular secure operating system on the market.</p>"},{"location":"projects/trenchboot-aem-v2/#what-are-the-significant-technical-challenges-you-expect-to-solve","title":"What are the significant technical challenges you expect to solve","text":"<p>First of all Qubes OS AEM software consists of software packages providing Trusted Boot and the Qubes OS TPM scripts. These software packages would need to replace the Trusted Boot with TrenchBoot supported GRUB2 and Xen.</p> <p>Secondly, the TPM scripts require adding support for TPM 2.0 equivalent functionality. AEM requires access to non-volatile RAM inside TPM which is defined differently in the TPM 2.0 specification compared to TPM 1.2.</p> <p>Another challenge would be to update the TrenchBoot components for AMD platforms to the recent boot protocol, which will allow AMD platforms to take advantage of the QubesOS AEM feature, and TrenchBoot.</p>"},{"location":"projects/trenchboot-aem-v2/#requested-support","title":"Requested support","text":"<ol> <li> <p>Phase 2 - TPM 2.0 support in Qubes OS AEM (Intel hardware):</p> <ul> <li> <p>Implement support for TPM 2.0 module in Xen</p> <p>Required to measure Dom0 kernel and initial ram disk before they are executed.</p> </li> <li> <p>Implement support for TPM 2.0 event log in Xen</p> <p>Required to log the Dom0 kernel and initial ram disk hashes to the TPM event log. The event log could be used for future system attestation.</p> </li> <li> <p>Implement parallel CPU cores bring-up for DRTM launch</p> <p>Currently the CPU cores are being woken up in parallel, but later they are hacked to be waiting in a queue. If any interrupt would come at that time, it could be a serious danger. It has to be fixed as soon as possible, as required by Intel TXT specification.</p> </li> <li> <p>Integrate TPM 2.0 software stack into Qubes OS Dom0</p> </li> <li> <p>Extend the AEM scripts to detect TPM version on the platform</p> <p>While AEM fully supports TPM 1.2 there is no support for TPM 2.0 at all. When the TPM family is determined the script should use the appropriate software stack for given TPM. The task implements the AEM TPM 1.2 equivalent functionalities using TPM 2.0 software stack and as a result allowing the use of TPM 2.0 with Qubes OS AEM. It will require implementing the access to TPM 2.0 NVRAM, sealing and unsealing the secret data and generating TOTP.</p> </li> <li> <p>Extend the AEM scripts to use appropriate software stack for TPM 2.0</p> <p>Currently, only TPM 1.2 is supported in Qubes OS AEM service code. The 3 items above will ensure the necessary software for TPM 2.0 is available and AEM scripts executed early from the initrd can detect which TPM family is present on the platform and use appropriate software stack and functions. TPM 1.2 and TPM 2.0 software stacks are not compatible so the scripts themselves must use proper API for given TPM and its respective software stack.</p> </li> <li> <p>Update Qubes OS AEM documentation</p> </li> <li> <p>Test the solution on Intel hardware with TPM 1.2 and 2.0 using legacy   boot mode</p> </li> </ul> </li> <li> <p>Phase 3 - Update to the newest TrenchBoot boot protocol:</p> <ul> <li> <p>Code rebase onto the most recent work implementing Secure Launch protocol   being upstreamed to Linux and GRUB</p> <p>The current state of TrenchBoot support has diverged with what was developed for QubesOS AEM for Intel hardware with TPM 1.2. The task aims to update the work and align with the TrenchBoot boot protocol being upstreamed to GRUB and Linux kernel. Xen shall take similar approach as Linux kernel in terms of DRTM launch.</p> </li> <li> <p>Test the solution on Intel hardware with TPM 1.2 and TPM 2.0 using   legacy boot mode</p> </li> </ul> </li> <li> <p>Phase 4 - AMD support for Qubes OS AEM with TrenchBoot:</p> <ul> <li> <p>Update the Secure Kernel Loader (formerly LandingZone) package support   for QubesOS</p> <p>Since the initial work done by 3mdeb engineers for AMD AEM in Qubes OS a lot of time has passed and Secure Kernel Loader - SKL (formerly Landing Zone) has improved a lot and added new features. SKL is an open-source module written by TrenchBoot developers required by AMD Secure Startup technology to perform DRTM launch. The task aims to refresh the previous work and update the SKL package for Qubes OS to the newest revision.</p> </li> <li> <p>TrenchBoot Secure Kernel Loader (SKL) improvements for AMD server   CPUs with multiple nodes</p> <p>While SKL was extensively tested on System on Chip and single CPU platforms, it was not much tested on workstation/server segment CPUs which are more complex. For example one server CPU package may contain two independent CPUs inside called nodes. Each node will enable protection on the SKL during DRTM execution. This protection has to be disabled on each node when TrenchBoot DRTM tasks are done. The task implements the correct support for server CPUs in TrenchBoot SKL.</p> </li> <li> <p>Update TrenchBoot boot protocol for AMD in GRUB2</p> <p>Some work to implement TrenchBoot support for Qubes OS on AMD hardware has been done. GRUB2 with TrenchBoot support has been added to Qubes building system on 3mdeb fork. The task aims to update the work and align with the TrenchBoot boot protocol being upstreamed to GRUB2 and Linux kernel.</p> </li> <li> <p>Update TrenchBoot boot protocol for AMD in Secure Kernel Loader</p> <p>The task aims to update the TrenchBoot boot protocol for AMD platforms in Secure Kernel Loader and align with the TrenchBoot boot protocol being upstreamed to GRUB2 and Linux kernel.</p> </li> <li> <p>Test the solution on AMD hardware with TPM 2.0 and TPM 1.2 with legacy   boot mode</p> </li> </ul> </li> </ol>"},{"location":"projects/trenchboot-aem-v2/#projects-or-organizations-relevant-to-this-project-before","title":"Projects or organizations relevant to this project before?","text":"<ol> <li>Qubes OS</li> <li>Xen Hypervisor</li> <li>GNU GRUB</li> <li>TrenchBoot</li> <li>Invisible Things Lab</li> <li>Apertus Solutions</li> <li>Oracle</li> <li>3mdeb</li> </ol>"},{"location":"projects/trenchboot-aem-v2/#the-ecosystem-of-the-project","title":"The ecosystem of the project","text":"<p>3mdeb has a good relationship with the maintainers of relevant projects which will participate in review of the work:</p> <ul> <li>Marek Marczykowski-G\u00f3recki (Invisible Things Lab CTO) - Qubes OS maintainer</li> <li>Andrew Cooper (Citrix) - Xen Hypervisor Maintainer</li> <li>Daniel Kiper (Oracle) - GRUB2 Maintainer</li> <li>Daniel Smith (Apertus Solutions) - TrenchBoot founder and maintainer</li> </ul>"},{"location":"projects/trenchboot-aem-v2/#review","title":"Review","text":"<p>Further reviews and suggestions are welcome. You can do it in two ways:</p> <ul> <li>using Giscus on the bottom of this page</li> <li>contributing to this repository directly via Pull Request</li> </ul>"},{"location":"projects/trenchboot-aem/","title":"TrenchBoot as Anti Evil Maid","text":"<p>This is out of date and left here as a reference. Please use the current version of the plan for up-to-date information</p>"},{"location":"projects/trenchboot-aem/#abstract","title":"Abstract","text":"<p>The firmware is the heart of the security of a given system and should always be up-to-date to maintain the computer's security. However, being up to date does not prevent the firmware vulnerabilities from appearing. The Static Root of Trust (SRT) like Unified Extensible Firmware Interface (UEFI) Secure Boot and measured boot provided by the firmware is not always sufficient to establish a secure environment for an operating system. If the firmware is compromised, it could inject malicious software into operating system components and prevent the machine owner from detecting it. Silicon vendors implement alternative technologies to establish a Dynamic Root of Trust (DRT) to provide a secure environment for operating system launch and integrity measurements. Either from SRT or DRT, these integrity measurements can be used for operating system attestation. However, DRT technologies are designed to provide the ability to establish a secure environment for integrity measurements at any arbitrary point of time instead of relying on the firmware, which requires machine reset to establish the aforementioned secure environment.</p> <p>The usage of DRT technologies like Intel Trusted Execution Technology (TXT) or AMD Secure Startup becomes more and more significant, for example, Dynamic Root of Trust for Measurement (DRTM) requirements of Microsoft Secured Core PCs. DRTM hasn't found its place in open-source projects yet, but that gradually changes. The demand on having firmware independent Roots of Trust is increasing, and projects that satisfy this demand are growing, for instance, TrenchBoot. TrenchBoot is a framework that allows individuals and projects to build security engines to perform launch integrity actions for their systems. The framework builds upon Boot Integrity Technologies (BITs) that establish one or more Roots of Trust (RoT) from which a degree of confidence that integrity actions were not subverted is derived. The project has grown a lot thanks to the previous NLnet NGI0 PET grant and now it looks for further expansion into extensive use of the DRT technologies in open-source and security-oriented operating systems like Qubes OS. Qubes OS Anti Evil Maid (AEM) software heavily depends on the availability of the DRTM technologies to prevent the Evil Maid attacks. However, the project hasn't evolved much since the beginning of 2018 and froze on the support of TPM 1.2 with Intel TXT in legacy boot mode (BIOS). Because of that, the usage of this security software is effectively limited to older Intel machines only. TPM 1.2 implemented SHA1 hashing algorithm, which is nowadays considered weak in the era of forever-increasing computer performance and quantum computing. The solution to this problem comes with a newer TPM 2.0 with more agile cryptographic algorithms and SHA256 implementation by default. Qubes OS AEM software suffers from the following:</p> <ol> <li>Lack of TPM 2.0 support to handle more secure hashes and safer design of the    TPM firmware according to a newer specification.</li> <li>Lack of UEFI mode support. All modern systems boot in UEFI mode only. Legacy    boot modes are being deprecated and dropped from the PC firmware. The AEM    usage is not possible on most if not all modern machines.</li> <li>Qubes OS AEM has never supported AMD processors with AMD Secure Startup    technology. Implementing AMD support would make a significant impact and    broaden the usage of DRTM technologies.</li> </ol> <p>The initial AEM implementation relied on the Trusted Boot, Intel's reference implementation of Intel TXT. It never had any plans to support AMD processors. TrenchBoot is filling this gap, supporting both Intel and AMD hardware which makes it an ideal target to replace Trusted Boot in Qubes OS AEM implementation. Furthermore, the project grant would be used to implement the missing pieces in the Qubes OS AEM software to cover the AMD and Intel support for both TPM 1.2 and TPM 2.0.</p>"},{"location":"projects/trenchboot-aem/#compare-your-own-project-with-existing-or-historical-efforts","title":"Compare your own project with existing or historical efforts","text":"<p>3mdeb is a licensed provider for quality coreboot consulting services since 2016. We are well-known in the open-source community for maintaining the firmware of the PC Engines APU series platform since 2016. Delivering high-quality firmware releases each month and providing technical support on PC Engines and OPNSense forums. 3mdeb embedded systems developers are experienced engineers accustomed to operating systems development. Our developers have contributed to the fwupd support for Qubes OS. 3mdeb is also regularly co-organizing mini-conference events with Qubes OS maintainer Marek Marczykowski-G\u00f3recki, where various topics related to Qubes OS security are discussed. Among them, the Anti Evil Maid was frequently presented by 3mdeb engineers:</p> <ul> <li>Anti Evil Maid for Intel coreboot-based platform</li> <li>Anti Evil Maid for modern AMD UEFI-based platform</li> </ul> <p>A similar approach was already tried by Assured Information Security (AIS) to boot Xen in UEFI mode with Intel TXT DRTM technology. However, this is only a tiny portion of the work covered by our proposal. Additionally, Qubes OS does not launch using Xen.efi like in the AIS work but uses Multiboot2 protocol with GRUB2 instead, making this approach unusable. Moreover, the Xen.efi approach is much more complex and assumes usage of Trusted Boot, limiting the feature to Intel hardware only.</p>"},{"location":"projects/trenchboot-aem/#what-are-the-significant-technical-challenges-you-expect-to-solve","title":"What are the significant technical challenges you expect to solve","text":"<p>First of all, Qubes OS AEM software consists of software packages providing Trusted Boot and the Qubes OS TPM scripts. These software packages would need to replace the Trusted Boot with TrenchBoot supported GRUB2 and Xen. Secondly, the TPM scripts require adding support for TPM 2.0 equivalent functionality. AEM requires access to non-volatile RAM inside TPM, which is defined differently in the TPM 2.0 specification compared to TPM 1.2.</p> <p>Another challenge would be to make Xen possible to boot in UEFI boot mode without Boot Services defined in UEFI specification. Boot Services are a set of functions exposed in UEFI structures that are used to help with handling the boot process. However, the main principle of DRTM technologies is to not depend on any external code that is not a part of the operating system software to be executed after DRTM. UEFI Boot Services are a part of the firmware of which DRTM tries to be independent. The whole security concept of DRTM depends on cutting the ties with firmware. Thus the work includes implementing the capability in Xen not to use the UEFI Boot Services, which GRUB2 would terminate before DRTM is executed. Xen also contains an option not to use the UEFI Runtime Services. Runtime Services is a set of functions available throughout the whole machine lifetime, which means some firmware functionalities are available even when the operating system is launched.</p> <p>Removing the Boot Services from Xen brings certain drawbacks to the system because the Boot Services hold essential information like memory map, TPM event log, graphics framebuffer, etc. This information must be extracted by GRUB before Boot Services are terminated and passed to the Xen. The proposed solution is to pass this information via the Multiboot2 tags defined in the specification for this particular Boot Services information.</p> <p>Another challenge would be to get the work merged in the upstream repositories. It would ensure the long-term support and maintenance of the solution and availability. Providing software packages to be used out of the box is crucial for technology availability.</p>"},{"location":"projects/trenchboot-aem/#requested-support","title":"Requested support","text":"<ol> <li> <p>Phase 1: TrenchBoot Intel TXT and TPM 1.2 support</p> <ul> <li> <p>Add TPM 1.2 support for Intel TXT in TrenchBoot GRUB2</p> <p>The TrenchBoot support hasn't been implemented and verified with TPM 1.2 on Intel TXT path. This requirement ensures that the TPM 1.2 is also supported for older Intel hardware with Intel TXT.</p> </li> <li> <p>Xen Secure Launch - Intel TXT support in Xen for TrenchBoot</p> <p>Due to the requirements of Intel TXT and how it is utilized, it is impossible to use the Xen boot protocols defined in the UEFI or Multiboot2 specifications. This task aims to create a custom Intel TXT entry point for Xen, which would hand off to the standard Multiboot2 entry point and enable the direct launch of Xen by GRUB via DRTM on Intel hardware. Additionally, there is no support for launching Xen with Intel TXT other than Trusted Boot. It has to be ported from Trusted Boot specific code:</p> <ul> <li>constructing MLE header</li> <li>waking up APs</li> <li>restoring MTRRs</li> <li>reserving the TXT memory</li> <li>reenabling SMIs</li> <li>handling TXT shutdown and S3 resume/suspend</li> <li>TPM event log finding</li> </ul> </li> <li> <p>Test the solution on Intel hardware with TPM 1.2 with legacy boot mode</p> </li> </ul> </li> <li> <p>Phase 2 - Qubes OS AEM TPM 2.0 support:</p> <ul> <li> <p>Extend the AEM scripts to detect TPM version on the platform</p> <p>As TPM 1.2 and TPM 2.0 use different software stacks and tools, it is necessary to distinguish the TPM module family and use the appropriate software. The task will implement the logic to distinguish the TPM families.</p> </li> <li> <p>Extend the AEM scripts to use the appropriate software stack for TPM 2.0</p> <p>While AEM fully supports TPM 1.2, there is no support for TPM 2.0 at all. When the TPM family is determined, the script should use the appropriate software stack for the given TPM. The task implements the AEM TPM 1.2 equivalent functionalities using TPM 2.0 software stack and as a result allowing the use of TPM 2.0 with Qubes OS AEM. It will require implementing the access to TPM 2.0 NVRAM, sealing and unsealing the secret data, and generating TOTP.</p> </li> <li> <p>Test the solution on Intel hardware with TPM 2.0 with legacy boot mode</p> </li> </ul> </li> <li> <p>Phase 3 - Qubes OS AEM AMD support:</p> <ul> <li> <p>Rebase and refresh TrenchBoot GRUB2 for QubesOS</p> <p>Some work to implement TrenchBoot support for Qubes OS on AMD hardware has been done. GRUB2 with TrenchBoot support has been added to Qubes building system on 3mdeb fork The task aims to refresh the work and align with the upstream Qubes OS GRUB2 repository</p> </li> <li> <p>Clean up the Secure Kernel Loader (formerly LandingZone) package support   for QubesOS</p> <p>Since the initial work done by 3mdeb engineers for AMD AEM in Qubes OS, a lot of time has passed, and Secure Kernel Loader - SKL (formerly Landing Zone) has improved a lot and added new features. SKL is an open-source module written by TrenchBoot developers required by AMD Secure Startup technology to perform DRTM launch. The task aims to refresh the previous work and update the SKL package for Qubes OS to the newest revision.</p> </li> <li> <p>TrenchBoot Secure Kernel Loader (SKL) improvements for AMD server CPUs with   multiple nodes</p> <p>While SKL was extensively tested on System on Chip and single CPU platforms, it was not tested on workstation/server segment CPUs which are more complex. For example, one server CPU package may contain two independent CPUs inside called nodes. Each node will enable protection on the SKL during DRTM execution, and this protection must be disabled on each node when TrenchBoot DRTM tasks are done. The task implements the correct support for server CPUs in TrenchBoot SKL.</p> </li> <li> <p>Test the solution on AMD hardware with TPM 2.0 and TPM 1.2 with legacy boot   mode</p> </li> </ul> </li> <li> <p>Phase 4 - Xen UEFI boot mode with DRTM:</p> <ul> <li> <p>TrenchBoot support for UEFI boot mode for AMD in GRUB</p> <p>While TrenchBoot DRTM was extensively tested on Intel hardware with UEFI firmware and Linux, it was not on AMD platforms. This task ensures that DRTM works with UEFI boot mode on AMD processors in GRUB2 and Linux without UEFI Boot Services.</p> </li> <li> <p>TrenchBoot support for UEFI boot mode in Xen</p> <p>When UEFI boot mode with TrenchBoot is working with GRUB2 and Linux, all that is missing to fully support AMD and Intel hardware with Qubes OS AEM is the Xen support to boot in UEFI mode without Boot Services. This requires a significant amount of work to ensure that all information that Xen would obtain from UEFI Boot Services would still be available. The information has to be passed by GRUB2 to Xen via Multiboot2 protocol:</p> <ul> <li>EFI memory map</li> <li>Framebuffer information</li> <li>PCI devices information with their option ROMs</li> </ul> <p>Additionally \"EFI boot services not terminated\" Multiboot2 tag must not be passed to Xen by GRUB2 on DRTM launch when GRUB2 will terminate Boot Services. Xen should detect such situations and act according to the state of Boot Services. Xen will be implemented to:</p> <ul> <li>parse the EFI memory map, framebuffer information, and PCI devices    information passed by GRUB2</li> <li>do not expose the \"EFI boot services\" Multiboot2 tag indicating that    Xen can be executed without UEFI Boot Services presence</li> <li>allocate the memory space for the trampoline used to launch other    processors or use the allocation done by GRUB2 if necessary</li> <li>do not go error path when Boot Services are not present and skip all    calls to UEFI Boot Services by using the information provided by    GRUB2</li> </ul> </li> <li> <p>Test the solution on AMD and Intel hardware with TPM 2.0 and TPM 1.2 with   legacy and UEFI boot mode</p> </li> </ul> </li> </ol>"},{"location":"projects/trenchboot-aem/#projects-or-organizations-relevant-to-this-project-before","title":"Projects or organizations relevant to this project before?","text":"<ol> <li>Qubes OS</li> <li>Xen Hypervisor</li> <li>GNU GRUB</li> <li>TrenchBoot</li> <li>Invisible Things Lab</li> <li>Apertus Solutions</li> <li>Oracle</li> <li>3mdeb</li> </ol>"},{"location":"projects/trenchboot-aem/#the-ecosystem-of-the-project","title":"The ecosystem of the project","text":"<p>3mdeb has a good relationship with the maintainers of relevant projects which will participate in the review of the work:</p> <ul> <li>Marek Marczykowski-G\u00f3recki (Invisible Things Lab CTO) - Qubes OS maintainer</li> <li>Andrew Cooper (Citrix) - Xen Hypervisor Maintainer</li> <li>Daniel Kiper (Oracle) - GRUB2 Maintainer</li> <li>Daniel Smith (Apertus Solutions) - TrenchBoot founder and maintainer</li> </ul>"},{"location":"projects/trenchboot-aem/#review","title":"Review","text":"<p>Further reviews and suggestions are welcome. You can do it in two ways:</p> <ul> <li>using Giscus on the bottom of this page</li> <li>contributing to this repository directly via Pull Request</li> </ul>"},{"location":"quality-principles/introduction/","title":"Dasharo Quality Principles","text":""},{"location":"quality-principles/introduction/#secure-delivery","title":"Secure Delivery","text":"<p>Each Dasharo release is secured cryptographically, ensuring with RSA 4096 keys the authenticity of binary SHA-256 integrity checksum. The three-step key verification is guarantees that your client receives a clean file without any third-party modifications. Integrity and signature verification procedure is included, so that the key compliance can be easily checked.</p>"},{"location":"quality-principles/introduction/#secure-maintenance","title":"Secure Maintenance","text":"<p>Dasharo doesn't believe in security through obscurity. That is why each Dasharo firmware is supported with the system of Transparent Validation, proving its efficiency and quality with testing results. As an Open Source product, it provides timely emergency releases and patches together with long-lasting maintenance.</p>"},{"location":"quality-principles/introduction/#credibility","title":"Credibility","text":"<p>Dasharo values credibility. Each release is extended by a validation report based on a project charter and a complete changelog with a description of the product versioning.</p>"},{"location":"quality-principles/introduction/#transparency","title":"Transparency","text":"<p>Generic testing procedures for a given Dasharo product line are included in the product documentation. Specific testing procedures are delivered in the form of a PDF document accompanying a release.</p>"},{"location":"quality-principles/introduction/#availability","title":"Availability","text":"<p>Dasharo product line page includes a hardware compatibility platform list. The platform for which the new product line is created becomes its reference platform. The consecutive hardware platforms are added to the hardware compatibility list (HCL).</p>"},{"location":"quality-principles/introduction/#compliance","title":"Compliance","text":"<p>No danger of version lock. Dasharo releases are versioned according to the [Semantic Versioning 2.0.0] (https://semver.org/) specification for the sake of consistency. Release notes comply with the [Keep A Changelog 1.0.0] specification (https://keepachangelog.com/en/1.0.0/).</p>"},{"location":"resources/hcl/cpu/pro-z690-a-wifi-ddr4/","title":"PRO Z690 A (WIFI) (DDR4)","text":"CPU Model Dasharo version Source 12th Gen Intel(R) Core(TM) i3-12100 v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i3-12100T v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12400 v1.0.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12400 v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12400F - [Github PR][3] 12th Gen Intel(R) Core(TM) i5-12400F v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12400F v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12400F v1.1.3 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12500T v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600 v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v1.0.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v1.1.1-rc4 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v1.1.2 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v1.1.3 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i7-12700K v1.0.0 Qubes HCL reports 12th Gen Intel(R) Core(TM) i7-12700K v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i7-12700K v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i7-12700K v1.1.2 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i7-12700K v1.1.3 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i7-12700KF v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i9-12900K v0.4.0 Qubes HCL reports 12th Gen Intel(R) Core(TM) i9-12900K v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i9-12900K v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i9-12900K v1.1.2 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i9-12900KF v1.1.1 [Github PR][4] 12th Gen Intel(R) Core(TM) i9-12900KS v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i9-12900T v1.1.0 Dasharo HCL Report 13th Gen Intel(R) Core(TM) i5-13600K v0.9.0 Dasharo HCL Report 13th Gen Intel(R) Core(TM) i5-13600K v1.1.2 Dasharo HCL Report 14th Gen Intel(R) Core(TM) i7-14700K v0.9.0 Dasharo HCL Report"},{"location":"resources/hcl/cpu/pro-z790-p-wifi-ddr4/","title":"PRO Z690-A (WIFI) (DDR4)","text":"CPU Model Dasharo version Source 12th Gen Intel(R) Core(TM) i5-12500 v0.9.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12500 v0.9.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v0.9.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v0.9.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v0.9.2 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i7-12700K v0.9.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i7-12700K v0.9.1 Dasharo HCL Report 13th Gen Intel(R) Core(TM) i5-13600K v0.9.0 Dasharo HCL Report 13th Gen Intel(R) Core(TM) i7-13700K v0.9.1 Dasharo HCL Report 13th Gen Intel(R) Core(TM) i5-13600K v0.9.1 Dasharo HCL Report 13th Gen Intel(R) Core(TM) i5-13700K v0.9.1 Dasharo HCL Report 13th Gen Intel(R) Core(TM) i9-13900K v0.9.0 Dasharo HCL Report 14th Gen Intel(R) Core(TM) i9-14900K v0.9.0 Dasharo HCL Report 14th Gen Intel(R) Core(TM) i9-14900K v0.9.1 Dasharo HCL Report 14th Gen Intel(R) Core(TM) i9-14900K v0.9.2 Dasharo HCL Report 14th Gen Intel(R) Core(TM) i9-14900KF v0.9.0 Dasharo HCL Report 14th Gen Intel(R) Core(TM) i9-14900KS v0.9.1 Dasharo HCL Report"},{"location":"resources/hcl/gpu/manual/","title":"GPU HCL (manual)","text":"GPU name Memory size Memory type Bandwidth PCI-E Gen Multi-Graphics Technology Results AMD Radeon RX 5700 XT 8 GB GDDR6 448GB/s Gen4 1 NVIDIA GeForce GTX 1060 3072 MB GDDR5 192GB/s Gen3 1 [Qubes HCL reports][1] MSI Radeon RX 6950 XT 16 GB GDDR6 576GB/s Gen4 1 EVGA NVIDIA RTX 2080 8 GB GDDR6 448GB/s Gen3 1 PNY NVIDIA RTX A5000 24 GB GDDR6 768GB/s Gen4 1 NVIDIA GeForce GTX 1080TI 11264 MB GDDR5X 484GB/s Gen3 1 [Qubes HCL reports][2] MSI Radeon RX 6500 XT MECH 2X 4G OC 4 GB GDDR6 180GB/s Gen4 1 Works only on Dasharo v1.1.0 or newer MSI GeForce RTX 3060 GAMING Z TRIO LHR 12 GB GDDR6 358GB/s Gen4 1"},{"location":"resources/hcl/gpu/z690-a-automatic/","title":"Z690-A automatic","text":"Vendor Name GPU Code Name Model PCI VendorID:ModelID Multi-Graphics Config Results Advanced Micro Devices, Inc. AMD/ATI Device 1002 1002:7480 No Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Ellesmere Radeon RX 470/480/570/570X/580/580X/590 1002:67df No Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Navi 10 Radeon RX 5600 OEM/5600 XT / 5700/5700 XT 1002:731f No Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Navi 10 Radeon RX 5600 OEM/5600 XT / 5700/5700 XT 1002:731f Yes (2) Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Navi 21 Radeon RX 6800/6800 XT / 6900 XT 1002:73bf No Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Navi 22 Radeon RX 6700/6700 XT/6750 XT / 6800M 1002:73df No Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Navi 22 Radeon RX 6700/6700 XT/6750 XT / 6800M/6850M XT 1002:73df No Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Navi 23 Radeon RX 6600/6600 XT/6600M 1002:73ff No Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Navi 23 Radeon RX 6650 XT 1002:73ef No Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Device 1002 1002:744c No Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Device 1002 1002:744c Yes (2) Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Device 1002 1002:7480 No Dasharo HCL report NVIDIA Corporation GA106 Geforce RTX 3050 10de:2507 No Dasharo HCL report NVIDIA Corporation GA106 RTX A2000 10de:2531 No Dasharo HCL report NVIDIA Corporation GK104 GeForce GTX 660 Ti 10de:1183 No Dasharo HCL report NVIDIA Corporation GP106 GeForce GTX 1060 3GB 10de:1c02 No Dasharo HCL report NVIDIA Corporation GP106 GeForce GTX 1060 3GB 10de:1c02 Yes (2) Dasharo HCL report NVIDIA Corporation GP108 GeForce GT 1030 10de:1d01 No Dasharo HCL report NVIDIA Corporation TU104GL Quadro RTX 4000 10de:1eb1 Yes (2) Dasharo HCL report NVIDIA Corporation TU116 GeForce GTX 1650 SUPER 10de:2187 No Dasharo HCL report NVIDIA Corporation TU117GLM Quadro T1000 Mobile 10de:1fb0 No Dasharo HCL report"},{"location":"resources/hcl/memory/pro-z690-a-wifi-ddr4/","title":"MSI Z690-A (WIFI) (DDR4)","text":"Manufacturer Part Number Size Speed Configuration 1/2/4 Dasharo version Source Corsair CMH16GX4M2E3200C16 8192 MB 2133 MT/s (PC4-17000) -/-/\u2714 v1.1.1 Dasharo HCL report Corsair CMK16GX4M1D3000C16 16384 MB 2133 MT/s (PC4-17000) \u2714/-/- v1.1.1 Dasharo HCL report Corsair CMK16GX4M2B3200C16 8192 MB 2133 MT/s (PC4-17000) -/-/\u2714 v1.1.1 Dasharo HCL report Corsair CMK32GX4M2B3200C16 16384 MB 2133 MT/s (PC4-17000) \u2714/-/- v1.0.0 Dasharo HCL report Corsair CMK32GX4M2B3200C16 16384 MB 2133 MT/s (PC4-17000) \u2714/-/- v1.1.1 Dasharo HCL report Corsair CMK32GX4M2E3200C16 16384 MB 2133 MT/s (PC4-17000) -/-/\u2714 v1.1.0 Dasharo HCL report Corsair CMK32GX4M2E3200C16 16384 MB 2133 MT/s (PC4-17000) \u2714/-/- v1.1.1 Dasharo HCL report Corsair CMK64GX4M2E3200C16 32768 MB 2133 MT/s (PC4-17000) \u2714/-/- v1.1.1 Dasharo HCL report Crucial Technology BL16G32C16U4B.16FE 16384 MB 2666 MT/s (PC4-21300) \u2714/-/- v1.1.0 Dasharo HCL report Crucial Technology BL16G32C16U4B.16FE 16384 MB 2666 MT/s (PC4-21300) \u2714/-/- v1.1.1 Dasharo HCL report Crucial Technology BLS16G4D32AESB.M16FE 16384 MB 2400 MT/s (PC4-19200) \u2714/-/- v1.1.1 Dasharo HCL report Crucial Technology CT8G4DFS8266.C8FJ 8192 MB 2666 MT/s (PC4-21300) \u2714/-/- v1.1.0 Dasharo HCL report Essencore Limited (former ISD Technology Limited) KD4AGU880-36A180X 16384 MB 2666 MT/s (PC4-21300) -/-/\u2714 v1.1.1 Dasharo HCL report G Skill Intl F4-3600C18-32GVK 32768 MB 2666 MT/s (PC4-21300) \u2714/-/- v1.1.2 Dasharo HCL report Kingston KF3200C16D4/16GX 16384 MB 2400 MT/s (PC4-19200) \u2714/-/- v1.1.1 Dasharo HCL report Kingston KF3200C16D4/16GX 16384 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.1 Dasharo HCL report Kingston KF3200C16D4/32GX 32768 MB 2400 MT/s (PC4-19200) -/-/\u2714 v0.4.0 Dasharo HCL report Kingston KF3200C16D4/32GX 32768 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.0 Dasharo HCL report Kingston KF3200C16D4/32GX 32768 MB 2400 MT/s (PC4-19200) \u2714/-/- v1.1.1 Dasharo HCL report Kingston KF3200C16D4/32GX 32768 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.1 Dasharo HCL report Kingston KF3600C16D4/16GX 16384 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.1 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v0.9.0 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) \u2714/-/- v1.0.0 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.0.0 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.0 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.1 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.1-rc4 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.2 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.3 Dasharo HCL report Kingston KF3600C18D4/32GX 32768 MB 2400 MT/s (PC4-19200) \u2714/-/- v1.1.1 Dasharo HCL report Kingston KF3600C18D4/32GX 32768 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.2 Dasharo HCL report Kingston KF3600C18D4/32GX 32768 MB 2400 MT/s (PC4-19200) \u2714/-/- v1.1.3 Dasharo HCL report Patriot Memory 4400 C19 Series 8192 MB 2133 MT/s (PC4-17000) \u2714/-/- v1.0.0 Dasharo HCL report Samsung M378A2G43AB3-CWE 16384 MB 3200 MT/s (PC4-25600) \u2714/-/- v1.1.1 Dasharo HCL report Silicon Power Computer &amp; Communications 16384 MB 3200 MT/s (PC4-25600) -/-/\u2714 v1.1.1 Dasharo HCL report Team Group Inc. TEAMGROUP-UD4-3200 16384 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.2 Dasharo HCL report Thermaltake Technology Co Ltd RG26D408GX2-3600C18A 8192 MB 2666 MT/s (PC4-21300) \u2714/-/- v1.1.0 Dasharo HCL report"},{"location":"resources/hcl/memory/pro-z690-a-wifi/","title":"PRO Z690-A (WIFI)","text":"DIMM vendor Part Number Size SPD profile Configuration 1/2/4 Kingston KF556C40BB/8 8GB 5600MT/s 40-40-40 1.25V \u2714/\u2714/\u2714 Crucial CT8G48C40U5.M4A1/8 8GB 4800MT/s 40-39-39 1.1V \u2714/\u2714/\u2714 ADATA AD5U48008G-S 8GB 4800MT/s 40-40-40 1.1V \u2714/\u2714/\u2714"},{"location":"resources/hcl/memory/pro-z790-p-wifi-ddr4/","title":"PRO Z790-P (WIFI) (DDR4)","text":"DIMM vendor Part Number Size SPD profile Configuration 1/2/4"},{"location":"resources/hcl/memory/pro-z790-p-wifi/","title":"PRO Z790-P (WIFI)","text":"DIMM vendor Part Number Size SPD profile Configuration 1/2/4"},{"location":"transparent-validation/ec-debugger/uart-relay/","title":"STM32 Nucleo L432KC I2C EC debugger","text":""},{"location":"transparent-validation/ec-debugger/uart-relay/#introduction","title":"Introduction","text":"<p>This document describes the process of configuring, connecting and using an STM32 based Dasharo EC debugger.</p>"},{"location":"transparent-validation/ec-debugger/uart-relay/#prerequisites","title":"Prerequisites","text":"<p>To make use of this debugger, you will need:</p> <ul> <li>STM32 Nucleo L432KC board</li> <li>USB Type micro-B (to Type A or C) cable for connecting to host</li> <li>A DUT (Device Under Test) with the required debugging wires installed</li> <li>Some jumper wires</li> <li>minicom installed on the host system</li> </ul> <p>To build the required Nucleo firmware, you'll also need to:</p> <ul> <li>Follow Zephyr Getting Started</li> <li>Install Zephyr SDK</li> <li>Install West</li> </ul>"},{"location":"transparent-validation/ec-debugger/uart-relay/#preparation","title":"Preparation","text":"<p>To build and flash the required Nucleo firmware:</p> <ol> <li> <p>Build the I2C to UART relay firmware:</p> <pre><code>$ west init -m https://github.com/Dasharo/zephyr-i2c-to-uart.git --mr master\n$ west update\n$ west build --board nucleo_l432kc zephyr-i2c-to-uart/app/\n</code></pre> </li> <li> <p>Connect the Nucleo to your host system via USB</p> </li> <li> <p>Flash the firmware to the board:</p> <pre><code>$ west flash\n</code></pre> </li> </ol>"},{"location":"transparent-validation/ec-debugger/uart-relay/#connections","title":"Connections","text":"<p>Make the following connections:</p> <ul> <li>Laptop SCL to Nucleo pin <code>D1/TX</code></li> <li>Laptop SDA to Nucleo pin <code>D0/RX</code></li> <li>Laptop ground to any of the <code>GND</code> pins on the Nucleo</li> </ul>"},{"location":"transparent-validation/ec-debugger/uart-relay/#test","title":"Test","text":"<p>Verify that the UART relay is working correctly:</p> <ul> <li>Enable <code>Serial Console Redirection</code> in the UEFI Setup menu on the DUT</li> <li>Connect the Nucleo to your host system</li> <li> <p>Run the following command:</p> <pre><code>$ minicom -D /dev/ttyACM0\n</code></pre> </li> </ul> <p>You should see the UEFI console in your minicom window.</p> <p>Only input (capturing logs) is supported at this moment. Output (control of the DUT) is currently unimplemented.</p>"},{"location":"transparent-validation/ec-information/ec-explained/","title":"NovaCustom EC test documentation","text":""},{"location":"transparent-validation/ec-information/ec-explained/#power-states","title":"Power states","text":"<p>This section describes the logic used by the EC to control platform power states depending on AC adapter presence.</p>"},{"location":"transparent-validation/ec-information/ec-explained/#shutdown-with-ac-connected","title":"Shutdown, with AC connected","text":"<p>The machine switches to system power state S5, using little to no power. As a result pressing the power button to turn it on, will result in a warmboot. (S0 \u2192 S5 \u2192 S0)</p>"},{"location":"transparent-validation/ec-information/ec-explained/#ac-detach-while-turned-off","title":"AC detach while turned off","text":"<p>EC disables all power planes, and the platform is set to G3 power state. Therefore, in that case pressing the power button results in a coldboot. (S0 \u2192 S5 \u2192 G3 \u2192 S0)</p>"},{"location":"transparent-validation/ec-information/ec-explained/#shutdown-with-ac-disconnected","title":"Shutdown, with AC disconnected","text":"<p>The machine actually enters S5 and proceeds to G3 soon after. Pressing the power button will result a coldboot. (S0 \u2192 S5 \u2192 G3 \u2192 S0 )</p>"},{"location":"transparent-validation/msi-z690/presale-assembly-and-validation/","title":"Presale device assembly and validation","text":""},{"location":"transparent-validation/msi-z690/presale-assembly-and-validation/#introduction","title":"Introduction","text":"<p>This document describes the assembly procedure of the MSI PRO Z690-A DDR4 with specified components in requirements.</p>"},{"location":"transparent-validation/msi-z690/presale-assembly-and-validation/#requirements","title":"Requirements","text":"Part Model Name Image Motherboard MSI PRO Z-690A DDR4 CPU Intel Core i5-12600K, 3.7G Cooling Noctua CPU NH-U12S Redux (w/ Noctua NM-i17xx-MP78 Mounting Kit) RAM Kingston Fury Beast, DDR4, 4*8GB (32GB Total), 3600MHz, CL17 Power Supply Seasonic Focus PX 750W 80 Plus Platinum Storage SSD Intel 670p 512 GB M.2 2280 PCI-E x4 Gen3 NVMe Enclosure SilentiumPC Armis AR1 <p>Additionally, you will need a regular Phillips screwdriver and thermal paste. Try not to tighten all the elements to the maximum, as it will make disassembly difficult. Remember that make all connections in the grounding strap.</p>"},{"location":"transparent-validation/msi-z690/presale-assembly-and-validation/#device-assembly","title":"Device assembly","text":""},{"location":"transparent-validation/msi-z690/presale-assembly-and-validation/#full-set-assembly","title":"Full set assembly","text":"<p>Section below describes the procedure of complete assembling of the working station.</p> <ol> <li>Unpack all equipment.</li> <li> <p>Place the motherboard in front of you, this is the component with which most     of the operations will be performed. It's best to put something softer under     the board so as not to damage it, e.g. during the installation of RAM     modules.</p> <p></p> </li> <li> <p>To install the CPU on the motherboard first, open the CPU socket:</p> <p></p> </li> <li> <p>Insert the processor carefully and tighten it with the dedicated mechanism:</p> <p></p> </li> <li> <p>To install the CPU cooler, the parts shown in the picture below are     necessary:</p> <p></p> </li> <li> <p>Attach the black stand to the bottom of the motherboard, then apply and screw     down the remaining parts except the cooler itself and apply thermal paste.     After these steps, the CPU area should look like this:</p> <p></p> </li> <li> <p>Then attach the cooler from above by tightening the two screws. Most likely,     for this operation, it is necessary to dismantle the fan and restore it     after tightening the screws.</p> <p></p> </li> <li> <p>Install the memory module into the DIMM slots. To insert a single module,     open the latch on both sides. Then insert the RAM and gently press the     module downward at both ends of the module and the latch will close     automatically. Always insert memory modules in the DIMMA2 slot first.</p> <p></p> </li> <li> <p>Install the M.2 solid-state drive (SSD) into the M.2 slot. Remove the two     screws from the cover and the one responsible for disk stabilization. Insert     the SSD into the M.2 slot and tighten the previously removed screws.</p> <p></p> </li> <li> <p>Take the enclosure of the computer and open one side as shown in the picture     below:</p> <p></p> </li> <li> <p>Install the rear panel by inserting it from the inside of the enclosure     and pressing it lightly.</p> <p></p> </li> <li> <p>Insert the motherboard into the case but do not twist it, some pins are     hard to connect when the motherboard is screwed. The photo below shows the     slots that should be filled in the next steps.</p> <p></p> </li> <li> <p>Connect the fan from the CPU cooler to the slot marked <code>I</code>.</p> <p></p> </li> <li> <p>Connect the cables from the front panel to the appropriately marked places:</p> <p></p> <p>A detailed description of the connection cable marked <code>D</code> can be found in the Board manual in section: JFP1, JFP2: Front Panel Connectors. To verify correct connection of the cable marked <code>D</code>, you can compare them to the pictures below:</p> <p>Connection from the inside: </p> <p>Connection from the outside: </p> </li> <li> <p>Connect the speaker to the slot marked before <code>E</code>:</p> <p></p> </li> <li> <p>Screw the motherboard to the enclosure.</p> </li> <li> <p>Connect the power supply to the motherboard using the cables marked RE25 for     connection to the <code>G</code> and <code>H</code> slots and the cable marked RJ21 to connect the     <code>F</code> slots.</p> <p></p> </li> <li> <p>Connect the fan built into the enclosure to the indicated place:</p> <p></p> </li> <li> <p>Bundle the cables so that they don't interfere with the fans or other     components.</p> </li> <li>Close the case of the computer.</li> </ol>"},{"location":"transparent-validation/msi-z690/presale-assembly-and-validation/#motherboard-assembly-only","title":"Motherboard assembly only","text":"<p>Section below describes the procedure of assembling the motherboard.</p> <p>To prepare the motherboard the following operations should be performed:</p> <ol> <li>Go through steps 1-8 from     Full set assembling section.</li> <li>Go through 13th step from Full set assembling section.</li> <li>Connect cable marked <code>D</code> to allows power on the device as described in     the 14th point of the     Full set assembling section.</li> <li>Connect the power supply to the motherboard as described in the 17th point     of the Full set assembling section.</li> </ol>"},{"location":"transparent-validation/msi-z690/presale-assembly-and-validation/#device-validation","title":"Device validation","text":"<ol> <li>Connect the device to the mains.</li> <li>Power on the device with the button located on the front panel.</li> <li>If all connections have been made correctly, the device should start and     the boot logo should be shown.</li> <li>Install Dasharo firmware in accordance with     Initial Deployment -     the <code>Migrating SMBIOS unique data</code> chapter can be skipped.</li> <li>Power on the device.</li> <li>Boot to Linux system (Ubuntu is recommended).</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>sudo dmidecode -t 0 | grep Version\n</code></pre> </li> <li> <p>The output of the command above should be similar to:     <code>Version: Dasharo (coreboot+UEFI) &lt;version&gt;</code> where the version should     correspond to the version of the flashing binary used eg. v1.0.0.</p> </li> <li>Check in the system that everything is working properly.</li> </ol>"},{"location":"transparent-validation/msi-z690/presale-assembly-and-validation/#useful-content","title":"Useful content","text":"<ul> <li>Building manual - documentation contains information on how to     build Dasharo compatible with the MSI PRO Z690-A DDR4.</li> <li>Board manual - documentation contains detailed information about     the motherboard and its operations.</li> </ul>"},{"location":"transparent-validation/muxpi/basic-validation/","title":"muxPi board validation","text":"<p>In case of any troubles, first it is recommended to read     comprehend Theory of Operations for muxPi     devices.</p>"},{"location":"transparent-validation/muxpi/basic-validation/#necessary-components-preparation","title":"Necessary components preparation","text":"<ul> <li>NanoPi</li> <li>muxPi</li> <li>ETH, microUSB&lt;-&gt;USB cables, power supply (5V/2A Dc 5.5/2.1mm jack)</li> <li>2 SDcards (minimum 8GB each)</li> <li>IDC-uSD adapter (DUT&lt;-&gt;SD card)</li> <li>SD card adapter (USB&lt;-&gt;SD card)</li> <li>Device bootable from SD card (e.g. RPI)</li> </ul>"},{"location":"transparent-validation/muxpi/basic-validation/#nanopi-setup","title":"NanoPi setup","text":"<ol> <li>Prepare microSD card (minimum 8GB) for NanoPi NEO operating system.</li> <li>Download and extract image -     link</li> <li>Flash image into microSD card (Etcher     tool could be helpful)</li> </ol>"},{"location":"transparent-validation/muxpi/basic-validation/#muxpi-setup","title":"muxPi setup","text":"<ol> <li>Attach NanoPi to muxPi connectors.</li> <li>Plug ETH cable to RJ45 NanoPi port.</li> <li>Plug microUSB&lt;-&gt;USB cable to muxPi and your machine.</li> <li> <p>Plug in power supply. </p> </li> <li> <p>Make sure that jumpers are correctly set according to image:</p> <p></p> </li> <li> <p>Connect to NanoPi using terminal:</p> <pre><code>sudo minicom -D /dev/ttyUSB0 -o -b 115200`\n</code></pre> </li> <li> <p>Save ip address:</p> <pre><code>ifconfig\n</code></pre> </li> <li> <p>Connect to NanoPi via ssh (with password: <code>fa</code>):</p> <p><code>bash ssh root@192.168.4.XXX</code></p> </li> <li> <p>Or via serial connection.</p> <p>NOTE: Connecting with MuxPi through serial will automatically login as non root user <code>pi</code> with password <code>pi</code>.</p> </li> </ol>"},{"location":"transparent-validation/muxpi/basic-validation/#validation-steps","title":"Validation steps","text":""},{"location":"transparent-validation/muxpi/basic-validation/#1-install-wiringnp","title":"1. Install WiringNP","text":"<pre><code> git clone https://github.com/friendlyarm/WiringNP\n cd WiringNP/\n chmod 755 build\n ./build\n</code></pre> <ul> <li>verify installation:</li> </ul> <pre><code>gpio readall\n</code></pre> <ul> <li>If your installation is successful the following messages will show up:</li> </ul> <pre><code> +-----+-----+----------+------+---+-NanoPi-NEO--+------+----------+-----+-----+\n | BCM | wPi |   Name   | Mode | V | Physical | V | Mode | Name     | wPi | BCM |\n +-----+-----+----------+------+---+----++----+---+------+----------+-----+-----+\n |     |     |     3.3V |      |   |  1 || 2  |   |      | 5V       |     |     |\n |  12 |   8 |  GPIOA12 | ALT5 | 0 |  3 || 4  |   |      | 5V       |     |     |\n |  11 |   9 |  GPIOA11 | ALT5 | 0 |  5 || 6  |   |      | 0v       |     |     |\n | 203 |   7 |  GPIOG11 |  OFF | 0 |  7 || 8  | 0 | ALT5 | GPIOG6   | 15  | 198 |\n |     |     |       0v |      |   |  9 || 10 | 0 | ALT5 | GPIOG7   | 16  | 199 |\n |   0 |   0 |   GPIOA0 | ALT5 | 0 | 11 || 12 | 0 |  OUT | GPIOA6   | 1   | 6   |\n |   2 |   2 |   GPIOA2 |  OFF | 0 | 13 || 14 |   |      | 0v       |     |     |\n |   3 |   3 |   GPIOA3 |  OFF | 0 | 15 || 16 | 0 |  OFF | GPIOG8   | 4   | 200 |\n |     |     |     3.3v |      |   | 17 || 18 | 0 |  OFF | GPIOG9   | 5   | 201 |\n |  64 |  12 |   GPIOC0 | ALT4 | 0 | 19 || 20 |   |      | 0v       |     |     |\n |  65 |  13 |   GPIOC1 | ALT4 | 0 | 21 || 22 | 0 | ALT5 | GPIOA1   | 6   | 1   |\n |  66 |  14 |   GPIOC2 | ALT4 | 0 | 23 || 24 | 1 |  OUT | GPIOC3   | 10  | 67  |\n +-----+-----+----------+------+---+----++----+---+------+----------+-----+-----+\n | BCM | wPi |   Name   | Mode | V | Physical | V | Mode | Name     | wPi | BCM |\n +-----+-----+----------+------+---+-NanoPi-NEO--+------+----------+-----+-----+\n\n +-----+----NanoPi-NEO USB/Audio-+----+\n | BCM | wPi |   Name   | Mode | V | Ph |\n +-----+-----+----------+------+---+----+\n |     |     |       5V |      |   | 25 |\n |     |     |  USB-DP1 |      |   | 26 |\n |     |     |  USB-DM1 |      |   | 27 |\n |     |     |  USB-DP2 |      |   | 28 |\n |     |     |  USB-DM2 |      |   | 29 |\n |     |     |    IR-RX |      |   | 30 |\n |  17 |  19 |  GPIOA17 |  OFF | 0 | 31 |\n |     |     |  PCM/I2C |      |   | 32 |\n |     |     |  PCM/I2C |      |   | 33 |\n |     |     |  PCM/I2C |      |   | 34 |\n |     |     |  PCM/I2C |      |   | 35 |\n |     |     |       0V |      |   | 36 |\n +-----+-----+----------+------+---+----+\n\n +-----+----NanoPi-NEO Debug UART-+----+\n | BCM | wPi |   Name   | Mode | V | Ph |\n +-----+-----+----------+------+---+----+\n |   4 |  17 |   GPIOA4 | ALT5 | 0 | 37 |\n |   5 |  18 |   GPIOA5 | ALT5 | 0 | 38 |\n +-----+-----+----------+------+---+----+\n</code></pre>"},{"location":"transparent-validation/muxpi/basic-validation/#2-cortex-m0-flashing","title":"2. Cortex-M0 flashing","text":"<p>The second controllable unit on the muxPi board is embedded microcontroller <code>STM32 F030C6T6</code> from Cortex-M0 family. It is required to flash special binary prepared by Tizen group (the code is not open yet, but this process is in progress). To flash muxPi's microcontroller, follow steps below:</p> <ol> <li>Make sure that VDD jumper is left open.</li> <li>Download binary file - link.</li> <li>Copy binary to nanoPi: <code>scp &lt;path-to-file&gt; root@192.168.4.XXX:/root/</code></li> <li>Update package lists (nanoPi): <code>apt-get update</code></li> <li>Install stm32flash utility (nanoPi): <code>sudo apt-get install stm32flash</code></li> <li>Export GPIO: <code>gpio mode 3 out</code> and <code>gpio mode 7 out</code></li> <li>Set Cortex-M0 to \"Flashing mode\": <code>gpio write 7 1</code></li> <li>Power up microcontroller: <code>gpio write 3 1</code></li> <li>Flash firmware: <code>stm32flash -w /root/firmware-05.bin -v -g 0x0 /dev/ttyS2</code></li> <li>Power off microcontroller: <code>gpio write 3 0</code></li> <li>Set Cortex-M0 to \"Execution mode\": <code>gpio write 7 0</code></li> <li>Power on microcontroller: <code>gpio write 3 1</code></li> </ol> <p>From now on, muxPi's LCD should light on and display:</p> <pre><code>    *  MuxPi  *\n    HW: 1.0 SW: 0.5\n</code></pre>"},{"location":"transparent-validation/muxpi/basic-validation/#3-sd-adapter","title":"3. SD Adapter","text":"<ol> <li> <p>Connect IDC-uSD adapter to the muxPI board:</p> <p></p> </li> <li> <p>Insert the microSD card to microSD card slot accessible on the bottom side of    muxPi board.</p> </li> <li> <p>To enable microSD card reader, connect to Cortex from MuxPi via minicom:</p> <pre><code>minicom -D /dev/ttyS2\n</code></pre> <p>and enter in minicom following commands:</p> <pre><code>ts\n</code></pre> <p>and then</p> <pre><code>dut\n</code></pre> <p>NOTE: Each command should return <code>OK</code></p> </li> <li> <p>Connect IDC-uSD adapter to a SD card adapter plugged into your machine</p> <p>NOTE: You need to force IDC-uSD adapter to insert into SD card adapter</p> </li> <li> <p>(On your machine) Check if device is connected: <code>dmesg -w</code> should help. You should also be able to read and write data to uSD card from file manager.</p> </li> <li>Flash image into microSD card (for RPI or other device bootable form SD card).</li> <li>Disconnect uSD adapter form a SD card adapter and connect to the device (e.g. RPI).</li> <li>Connect device to the power supply, now device should boot via IDC-uSD adapter.</li> </ol>"},{"location":"transparent-validation/muxpi/basic-validation/#4-screening","title":"4. Screening","text":"<ol> <li>It is recommended to use screen program for communication:</li> <li>Install screen: <code>sudo apt-get install screen</code></li> <li>Open connection (from muxPi): <code>screen /dev/ttyS2 115200,cs8,ixon,ixoff</code></li> <li>Write <code>help</code> and press Enter.</li> </ol> <p>Help output:</p> <pre><code>help --- This help\nversion --- Display version of the firmware\necho --- Get (no arguments) or set ('on' or 'off') echo on serial \"console\": echo [on|off]. The default value is on.\npower --- Get (no arguments) or set ('on' or 'off') or switch off and on ('tick') power supply for DUT: power [on|off|tick]\nhdmi --- Get (no arguments) or set ('on' or 'off') HDMI HOTPLUG pin: hdmi [on|off]\ndyper --- Get (no second argument) or set ('on' or 'off') DyPer state: dyper 1|2 [on|off]\n mux --- Connect microSD card to external connector (DUT) or card reader (ts): mux [dut|ts]\n dut --- Connect microSD card and power to DUT: dut\n  ts --- Connect microSD card and power to TS: ts\n led --- Get (no second or third argument) or set ('R G B') color of led (1 | 2), ex: led 1 255 0 255\n clr --- Clear oled display\ntext --- Print text on the OLED display: text x y color content\ndraw --- Draw an object on the OLED display: draw object x1 y1 [x2 y2], objects are:\n         - point x y color - draws one point at given coordinates\n         - line x1 y1 x2 y2 color - draws line between given coordinates\n         - rectangle left top width height color - draws line between given coordinates\n         - circle x y radius color - draws line between given coordinates\ncolor must be 'on', 'off' or 'inv'\n adc --- Print current adc value of all (if no arguments are given) or one specified channel, ex: adc 1\nvoltage --- Print current voltage [mV] of all (if no arguments are given) or one specified channel, ex: voltage 1\ncurrent --- Print current current [mA] being consumed by DUT\nlthor --- Get (no second argument) or set state of lthor control signals:\n         - lthor switch [usb|uart] - redirect DUT's USB wires to NanoPi's 'usb' or 'uart'\n         - lthor id [usb|uart] - switch DUT's USB to 'usb' or 'uart' mode\n         - lthor vbus [on|off] - switch DUT's VBUS 'on' or 'off'\n         - lthor combo [usb|uart] - make DUT and MuxPi USB work in 'usb' or 'uart' mode - no get function\n\n key --- Get current state of given key or both if no key number is given: key [1|2]\nuart --- Get current value of UART voltage or set if new value is given [in millivolts]\n</code></pre> <p>NOTE: <code>help</code> might not display anything. Then try to use minicom.</p> <p>Minicom quick guide:</p> <ol> <li>Install minicom: <code>sudo apt-get install minicom</code></li> <li>Connect via minicom: <code>sudo minicom -D /dev/ttyS2 -o -b 115200</code></li> <li> <p>Type: <code>help</code></p> <p>NOTE: If output is the same as above then basic validation for muxPi is done.</p> </li> </ol> <p>Images source: Wiki Tizen</p>"},{"location":"transparent-validation/muxpi/theory-of-operations/","title":"MuxPi - Theory of Operations","text":""},{"location":"transparent-validation/muxpi/theory-of-operations/#block-diagram","title":"Block diagram","text":""},{"location":"transparent-validation/muxpi/theory-of-operations/#muxpi-setup","title":"muxPi setup","text":""},{"location":"transparent-validation/muxpi/theory-of-operations/#nanopi-neo","title":"NanoPi NEO","text":"<p>Preparation of the muxPi's \"heart\":</p> <ol> <li>Prepare microSD card (minimum 8GB) for NanoPi NEO operating system.</li> <li>Download and extract image - link</li> <li>Flash image into microSD card (Etcher tool could be helpful)</li> <li>Insert card to NanoPi microSD slot.</li> <li>Attach NanoPi to muxPi connectors.</li> <li>Plug Ethernet cable to RJ45 NanoPi port.</li> </ol>"},{"location":"transparent-validation/muxpi/theory-of-operations/#serial-communication","title":"Serial communication","text":"<p>There are two methods to setup serial communication with muxPi:</p> <ul> <li> <p>with microUSB&lt;-&gt;USB cable</p> <p></p> </li> <li> <p>with UART/USB converter</p> <p>Attach USB/UART converter to muxPi's left addon female header (<code>GND</code>,  <code>DBG UART RX</code>, <code>DBG UART TX</code> on pinout image below):</p> <p></p> <p>and plug USB connector to the computer. Next, open connection in PC terminal by typing:</p> <pre><code>sudo minicom -D /dev/ttyUSB0 -o -b 115200.\n</code></pre> <p><code>/dev/ttyUSB0</code> is example device - check whether <code>USB0</code> is the correct one</p> </li> </ul>"},{"location":"transparent-validation/muxpi/theory-of-operations/#jumpers-configuration","title":"Jumpers configuration","text":"<ul> <li>UART - pins <code>Vloc</code> &amp; <code>VCC</code> - if jumped then internal voltage generator is     used as voltage reference for data lines and powers up target device. If     open then voltage reference for data lines comes from target device and     internal voltage generator is unused.</li> <li> <p>USB/ETH - determines what USB data lines of one USB HUB are connected to. If     first two pins are jumped then USB lines are connected to add-on connector.     If last two pins are jumped then these lines are connected tu USB&lt;-&gt;ETH     converter. If none of the pins are jumped then the only connection is the      upper socket of double connector.</p> <p>NOTE: The upper socket of double USB-A connector must be left empty if USB&lt;-&gt;ETH is selected or add-on connector is selected and something is connected to these data lines on the addon! NOTE: Both jumpers must be placed in the same position!</p> </li> <li> <p>VDD - if this pins are jumped then the VDD and 3V3 are always on. If this is     left open then VDD and 3V3 are controlled by NanoPi. The usage example is     setting value of USB ID potentiometer (which is located underneath NanoPi).     But when NanoPi NEO is removed there is no way to turn on power for     microcontroller (that is when VDD jumper is helpful).</p> <p>NOTE: If there is no particular need then leave this jumper open.</p> </li> </ul>"},{"location":"transparent-validation/muxpi/theory-of-operations/#power-supply","title":"Power supply","text":"<p>To power on MuxPi with NanoPi attached, plug the 5V/2A DC 5.5/2.1mm power supply jack to the CON1 muxPi's connector. Power consumption of MuxPi should be less then 1A assuming no addons connected.</p> <p></p>"},{"location":"transparent-validation/muxpi/theory-of-operations/#ip-address","title":"IP address","text":"<p>To check which IP address has been assigned, type in terminal: <code>ifconfig</code>.</p> <p>OPTIONAL STEP: To set static IP, create the following file:</p> <pre><code>sudo vi /etc/NetworkManager/NetworkManager.conf\n</code></pre> <p>Edit NetworkManger.conf and set the value of \"managed\" under \"ifupdown\" to false:</p> <pre><code>[ifupdown]\nmanaged=false\n</code></pre> <p>Add network setting to <code>/etc/network/interfaces</code>:</p> <pre><code>sudo vi /etc/network/interfaces\n</code></pre> <p>Here is sample of <code>/etc/network/interfaces</code>:</p> <pre><code># The loopback network interface\nauto lo\niface lo inet loopback\n\n# network interface not managed by Network Manager\nallow-hotplug eth0\niface eth0 inet static\naddress 192.168.4.XXX\nnetmask 255.255.255.0\ngateway 192.168.4.1\ndns-nameservers 192.168.4.1\n</code></pre> <p>Restart the whole device:</p> <pre><code>reboot\n</code></pre> <p>Now you should be able to connect to device through ssh:</p> <pre><code>ssh root@192.168.4.XXX\n</code></pre> <p>with the password: <code>fa</code></p>"},{"location":"transparent-validation/muxpi/theory-of-operations/#install-wiringnp","title":"Install WiringNP","text":"<p>Connect to NanoPi NEO through ssh (serial connection automatically login to non root user <code>pi</code>), then type:</p> <pre><code>git clone https://github.com/friendlyarm/WiringNP\ncd WiringNP/\nchmod 755 build\n./build\n</code></pre> <p>Verify installation:</p> <pre><code>gpio readall\n</code></pre> <p>If your installation is successful the following messages will show up:</p> <pre><code> +-----+-----+----------+------+---+-NanoPi-NEO--+------+----------+-----+-----+\n | BCM | wPi |   Name   | Mode | V | Physical | V | Mode | Name     | wPi | BCM |\n +-----+-----+----------+------+---+----++----+---+------+----------+-----+-----+\n |     |     |     3.3V |      |   |  1 || 2  |   |      | 5V       |     |     |\n |  12 |   8 |  GPIOA12 | ALT5 | 0 |  3 || 4  |   |      | 5V       |     |     |\n |  11 |   9 |  GPIOA11 | ALT5 | 0 |  5 || 6  |   |      | 0v       |     |     |\n | 203 |   7 |  GPIOG11 |  OFF | 0 |  7 || 8  | 0 | ALT5 | GPIOG6   | 15  | 198 |\n |     |     |       0v |      |   |  9 || 10 | 0 | ALT5 | GPIOG7   | 16  | 199 |\n |   0 |   0 |   GPIOA0 | ALT5 | 0 | 11 || 12 | 0 |  OUT | GPIOA6   | 1   | 6   |\n |   2 |   2 |   GPIOA2 |  OFF | 0 | 13 || 14 |   |      | 0v       |     |     |\n |   3 |   3 |   GPIOA3 |  OFF | 0 | 15 || 16 | 0 |  OFF | GPIOG8   | 4   | 200 |\n |     |     |     3.3v |      |   | 17 || 18 | 0 |  OFF | GPIOG9   | 5   | 201 |\n |  64 |  12 |   GPIOC0 | ALT4 | 0 | 19 || 20 |   |      | 0v       |     |     |\n |  65 |  13 |   GPIOC1 | ALT4 | 0 | 21 || 22 | 0 | ALT5 | GPIOA1   | 6   | 1   |\n |  66 |  14 |   GPIOC2 | ALT4 | 0 | 23 || 24 | 1 |  OUT | GPIOC3   | 10  | 67  |\n +-----+-----+----------+------+---+----++----+---+------+----------+-----+-----+\n | BCM | wPi |   Name   | Mode | V | Physical | V | Mode | Name     | wPi | BCM |\n +-----+-----+----------+------+---+-NanoPi-NEO--+------+----------+-----+-----+\n\n +-----+----NanoPi-NEO USB/Audio-+----+\n | BCM | wPi |   Name   | Mode | V | Ph |\n +-----+-----+----------+------+---+----+\n |     |     |       5V |      |   | 25 |\n |     |     |  USB-DP1 |      |   | 26 |\n |     |     |  USB-DM1 |      |   | 27 |\n |     |     |  USB-DP2 |      |   | 28 |\n |     |     |  USB-DM2 |      |   | 29 |\n |     |     |    IR-RX |      |   | 30 |\n |  17 |  19 |  GPIOA17 |  OFF | 0 | 31 |\n |     |     |  PCM/I2C |      |   | 32 |\n |     |     |  PCM/I2C |      |   | 33 |\n |     |     |  PCM/I2C |      |   | 34 |\n |     |     |  PCM/I2C |      |   | 35 |\n |     |     |       0V |      |   | 36 |\n +-----+-----+----------+------+---+----+\n\n +-----+----NanoPi-NEO Debug UART-+----+\n | BCM | wPi |   Name   | Mode | V | Ph |\n +-----+-----+----------+------+---+----+\n |   4 |  17 |   GPIOA4 | ALT5 | 0 | 37 |\n |   5 |  18 |   GPIOA5 | ALT5 | 0 | 38 |\n +-----+-----+----------+------+---+----+\n</code></pre>"},{"location":"transparent-validation/muxpi/theory-of-operations/#cortex-m0-flashing","title":"Cortex-M0 flashing","text":"<p>The second controllable unit on the muxPi board is embedded microcontroller <code>STM32 F030C6T6</code> from Cortex-M0 family. It is required to flash special binary prepared by Tizen group (the code is not open yet, but this process is in progress). To flash muxPi's microcontroller, follow steps below:</p> <ol> <li>Make sure that <code>VDD</code> jumper is left open.</li> <li>Download binary file - link</li> <li>Copy binary to nanoPi: <code>scp &lt;path-to-file&gt; root@192.168.4.XXX:/root/</code></li> <li>Update package lists (nanoPi): <code>apt-get update</code></li> <li>Install stm32flash utility (nanoPi): <code>sudo apt-get install stm32flash</code></li> <li>Export GPIO: <code>gpio mode 3 out</code> and <code>gpio mode 7 out</code></li> <li>Set Cortex-M0 to \"Flashing mode\": <code>gpio write 7 1</code></li> <li>Power up microcontroller: <code>gpio write 3 1</code></li> <li>Flash firmware: <code>stm32flash -w firmware-05.bin -v -g 0x0 /dev/ttyS2</code></li> <li>Power off microcontroller: <code>gpio write 3 0</code></li> <li>Set Cortex-M0 to \"Execution mode\": <code>gpio write 7 0</code></li> <li>Power on microcontroller: <code>gpio write 3 1</code></li> </ol> <p>From now on, muxPi's LCD should light on and display:</p> <pre><code>*  MuxPi  *\nHW: 1.0 SW: 0.5\n</code></pre>"},{"location":"transparent-validation/muxpi/theory-of-operations/#software-installation","title":"Software installation","text":"<p>NOTE: It is recommended to cross-compile muxPi's software on your host machine</p>"},{"location":"transparent-validation/muxpi/theory-of-operations/#building-using-docker","title":"Building using docker","text":"<p>Prerequisites: <code>Docker</code>, <code>Make</code>.</p> <ol> <li>Clone repository: <code>git clone https://github.com/SamsungSLAV/muxpi.git</code>.</li> <li>Change directory: <code>cd muxpi/sw/nanopi</code>.</li> <li>Build muxPi software: <code>make docker-build</code></li> </ol> <p>Resulting binaries will be in <code>bin</code> directory.</p>"},{"location":"transparent-validation/muxpi/theory-of-operations/#building-from-source","title":"Building from source","text":"<p>Prerequisites: <code>git</code>, <code>go (1.10+)</code></p> <ol> <li>Go get it: <code>go get github.com/SamsungSLAV/muxpi</code></li> <li>Change directory: <code>cd $GOPATH/src/github.com/SamsungSLAV/muxpi/sw/nanopi</code></li> <li>Download dependencies: <code>go get ./...</code></li> <li> <p>Build binaries:</p> <pre><code>mkdir -p bin\nGOARCH=arm GOOARM=7 GOOS=linux go build -o bin/stm ./cmd/stm/\nGOARCH=arm GOOARM=7 GOOS=linux go build -o bin/fota ./cmd/fota/\n</code></pre> </li> </ol>"},{"location":"transparent-validation/muxpi/theory-of-operations/#install-muxpi-power","title":"Install muxpi-power","text":"<p><code>muxpi-power</code> - tool for controlling power supply for  MuxPi's main board.</p> <ol> <li> <p>Copy muxpi-power files (change <code>XXX</code> to proper values):</p> <pre><code>scp power/muxpi-power root@192.168.4.XXX:/usr/bin\nscp power/systemd/muxpi-power.service root@192.168.4.XXX:/etc/systemd/system\n</code></pre> </li> <li> <p>On your MuxPi device, enable and start muxpi-power service:</p> <pre><code>systemctl enable muxpi-power.service\nsystemctl start muxpi-power.service\n</code></pre> </li> </ol>"},{"location":"transparent-validation/muxpi/theory-of-operations/#install-stm","title":"Install stm","text":"<p><code>stm</code> - tools/libs for communicating with STM32F030 microcontroller.</p> <ol> <li> <p>Copy stm binary and systemd files (change <code>XXX</code> to proper values):</p> <pre><code>scp bin/stm_armv7 root@192.168.4.XXX:/usr/bin/stm\nscp stm/systemd/stm.service root@192.168.4.XXX:/etc/systemd/system\nscp stm/systemd/stm-user.socket root@192.168.4.XXX:/etc/systemd/system\nscp stm/systemd/stm.socket root@192.168.4.XXX:/etc/systemd/system\nscp stm/stm root@192.168.4.XXX:/usr/local/bin/stm\n</code></pre> </li> <li> <p>On your MuxPi device - create group stm and add your user:</p> <pre><code>groupadd stm\nusermod -aG stm root\n</code></pre> </li> <li> <p>On your MuxPi device - enable stm sockets:</p> <pre><code>systemctl daemon-reload\nsystemctl enable stm.socket stm-user.socket\nsystemctl start stm.socket stm-user.socket\n</code></pre> </li> </ol>"},{"location":"transparent-validation/muxpi/theory-of-operations/#install-fota","title":"Install fota","text":"<p><code>fota</code> - tools/libs for flashing devices - usually microSD card.</p> <ol> <li> <p>Copy fota binary to MuxPi device (change <code>XXX</code> to proper values):</p> <pre><code>scp bin/fota_armv7 root@192.168.4.XXX:/usr/bin/fota\n</code></pre> </li> <li> <p>On your MuxPi device - create a symlink from <code>/usr/local/bin/fota</code> to <code>/usr/bin/fota/</code>. Only <code>/usr/local/bin/fota/</code> should be used by software interfacing with MuxPi. This allows to swap fota implementation to your preferred tool:</p> <pre><code>ln -s /usr/bin/fota /usr/local/bin/fota\n</code></pre> </li> </ol>"},{"location":"transparent-validation/muxpi/theory-of-operations/#dut-setup","title":"DUT setup","text":""},{"location":"transparent-validation/muxpi/theory-of-operations/#dut-power-supply","title":"DUT power supply","text":"<p>MuxPi is capable of:</p> <ul> <li>power switching on/off</li> <li>current measurement</li> </ul> <p>Power switching - it can switch power supply up to 5A and 250VAC. One line is connected directly and one is connected through relay.</p> <p>Current measurement - It is able to measure up to -/+5A and is galvanically isolated from the rest of components thanks to use of Hall effect current sensor ACS712ELCTR-05B-T. It is connected to unswitchable power line. The current sensor is bypassed with 3 0R resistors that can be populated if current sensor is not needed. These resistors must not be populated if current measurement is required.</p> <p></p>"},{"location":"transparent-validation/muxpi/theory-of-operations/#uart-connections","title":"UART connections","text":"<ul> <li><code>GND</code> - digital ground of MuxPi board</li> <li><code>N.C.</code> - not connected</li> <li><code>Vloc</code> - local voltage - voltage may be generated internally on MuxPi if the   DUT, or anything else we are connecting to, has not power pin. Nn such case   voltage generator must be set to desired value and activated. Command \"uart   3300\" must be sent to Cortex-M0, where 3300 is desired voltage given in   millivolts. The voltage range is from 0 to 5000mv. Pins <code>Vloc</code> an <code>VCC</code> must   be connected each other. Typical jumper is a perfect connector for this   purpose. <code>Vloc</code> may be also used to power up additional converter RS232C. For   example if converter to RS232C (+/-12v) must be used then it may be powered   from <code>Vloc</code> pin.</li> <li><code>VCC</code> - power of DUT. If dut has no such power pin then it must be connected to Vloc and vloc must be configured properly as stated above.</li> <li><code>DUT RX</code> - receiver data line in the DUT - through this line MuxPi sends data to the DUT</li> <li><code>DUT TX</code> - transmitter data line in the DUT - from this line MuxPi reads data form the DUT</li> <li><code>DUT CTS</code> - Clear To Send - hardware handshake</li> <li><code>DUT RTS</code> - Ready To Send - hardware handshake</li> </ul> <p>Example configuration for OrangePi (DUT) uart connection:</p> <ol> <li>Set 3.3V Vloc (/dev/ttyS2 terminal): <code>uart 3300</code></li> <li>Attach UART jumper (<code>Vloc</code> and <code>Vcc</code>).</li> <li>Connect GND, RX and TX (without crossing).</li> <li>Open connection: <code>screen /dev/ttyS1 115200,cs8,ixon,ixoff</code></li> </ol> <p>NOTE: <code>RX</code>, <code>TX</code>, <code>XTS</code>, <code>RTS</code> are crossed on the board so you don't need     to cross the wires by yourself. NOTE: A device powered from <code>Vloc</code> mustn't draw more than 50mA of current.</p>"},{"location":"transparent-validation/muxpi/theory-of-operations/#add-ons","title":"Add-ons","text":"<p>Add-ons headers are extensions for attaching new shields or simply using NanoPi and CortexM0 interfaces:</p> <p></p> <ul> <li><code>5V</code> - power supply - not switchable - always present</li> <li><code>3V3</code> - switchable (controlled by NanoPi) 3.3V power supply</li> <li><code>I2C0 SDA</code> - I2C0 SDA line connected to NanoPi</li> <li><code>I2C0 SCL</code> - I2C0 SCL line connected to NanoPi</li> <li><code>DBG UART TX</code> - UART0 (debug) of NanoPi</li> <li><code>DBG UART RX</code> - UART0 (debug) of NanoPi</li> <li><code>USB B+/-</code>, <code>USB A+/-</code> USB host lines connected to NanoPi through USB HUB</li> <li><code>GND</code> - ground lines</li> <li><code>N.C</code>. - not connected</li> </ul> <p></p> <ul> <li><code>SPI0 CLK</code> - SPI0 clock line connected to NanoPi</li> <li><code>SPI0 MOSI</code> - SPI0 \"master output slave input\" line connected to NanoPi</li> <li><code>SPI0 CS</code> - SPI0 \"chip select\" line connected to NanoPi</li> <li><code>SPI0 MISO</code> - SPI0 \"master input slave output\" line connected to NanoPi</li> <li><code>PI GPIO 1,2,3</code> - GPIO (General Purpose Input/Output) connected to NanoPi NEO.   Ports PG11, PL11, PA17 respectively.</li> <li><code>ST GPIO 1,2,3</code> - GPIO connected to Cortex-M0 microcontroller. Ports PB3, PB4,   PB5 of STM32F03C6T6 respectively.</li> <li><code>ADC1,2</code> - analog inputs connected to analog to digital converter of Cortex-M0   microcontroller. Ports PA1, PA2 respectively. Voltage range of this input is 0   to 3.3V. This lines are not buffered in any way so attention must paid when   dealing with them.</li> <li><code>GND</code> - ground lines</li> </ul> <p>NOTE: PI GPIO 1 has additional special function. It is connected to Cortex-M0     Boot0 pin which enables firmware download mode during microcontroller boot.     1 - enables this mode while 0 disables it. So it is useless as GPIO when     the microcontroller is being booted.</p>"},{"location":"transparent-validation/muxpi/theory-of-operations/#dypers","title":"DyPers","text":"<p>Dyper is a small, electromagnetic relay which is controllable by software. There are 2 dypers on MuxPi board. Each of them has two channels. Both channels are switched at the same time with the same command. So both of them can be on and both can be off but there is no way to turn one on and one off. They can be controlled by CortexM0 - examples here.</p>"},{"location":"transparent-validation/muxpi/theory-of-operations/#eth-and-usb","title":"ETH and USB","text":"<p>ETH and upper USB of double USB socket share the same USB channel from USB HUB. Jumpers located at the rear side of double USB connector allow to disconnect this USB from ETH and connect to add-on connector. Details on this topic are covered in jumpers section.</p> <p></p>"},{"location":"transparent-validation/muxpi/theory-of-operations/#usb-m","title":"USB-M","text":"<p>This is USB connector dedicated to mobile devices from Samsung company. This connector has controllable Vbus line and also controllable ID line.</p> <p></p> <p>More information about this type of interface, it's capabilities and example of flashing smartphone can be found here.</p>"},{"location":"transparent-validation/muxpi/theory-of-operations/#sd-adapter","title":"SD Adapter","text":"<p>This connector is used to connect microSD card, put into MuxPi, to a DUT.</p> <p></p> <p>This connector requires IDC-uSD cable adapter:</p> <p></p> <p>Target microSD card must be attached to microSD card reader accessible on bottom side of muxPi board.</p> <p>To enable microSD card reader, connect to Cortex from MuxPi via minicom:</p> <pre><code>minicom -D /dev/ttyS2\n</code></pre> <p>and enter in minicom following commands:</p> <pre><code>ts\n</code></pre> <p>and then:</p> <pre><code>dut\n</code></pre> <p>Each command should return <code>OK</code></p> <p>After doing this you can connect the uSD's end of the cable adapter to the external card reader and check if it is correctly recognized by PC. You should also be able to run the microcontroller from the card attached to MuxPi if the card contains appropriate OS.</p>"},{"location":"transparent-validation/muxpi/theory-of-operations/#interacting-with-muxpi","title":"Interacting with muxPi","text":""},{"location":"transparent-validation/muxpi/theory-of-operations/#connection-with-nanopi","title":"Connection with NanoPi","text":"<p>User can simply open SSH connection by (password: <code>fa</code>):</p> <p><code>ssh root@&lt;muxpi-ip-address&gt;</code></p> <ul> <li>or use serial connection mentioned here</li> </ul> <p>NOTE: Connecting with MuxPi through serial will automatically login as non     root user <code>pi</code> with password <code>pi</code>.</p>"},{"location":"transparent-validation/muxpi/theory-of-operations/#user-interface","title":"User interface","text":"<p>Features operable directly via NanoPi GPIOs:</p> #Pin (board) #WiringNP Description Low state \"0\" High state \"1\" 12 1 LED1 LED off LED on 13 2 LED2 LED off LED on 15 3 Power (Cortex m0) Power off Power on 7 7 Boot (Cortex m0) Execution mode Flashing mode <p>NOTE: Initially, above GPIOs are not exported. Set GPIOs mode with <code>gpio mode   &lt;#WiringNP&gt; out</code>.</p> <p>Example LED1 control:</p> <ul> <li>LED1 on: <code>gpio write 1 1</code></li> <li>LED1 off: <code>gpio write 1 0</code></li> </ul> <p>Example of flashing Cortex-M0 is described here.</p> <p>The microcontroller is connected to NanoPi NEO with UART. This UART is connected to third UART of NanoPi - /dev/ttyS2. The port is configured to 115200,8,N1 and cannot be changed without modification of the firmware. The protocol is text based, simple and human readable. Each command has to be ended with 'n' or 'r' character. Each command is confirmed with 'OK' string or error string.</p> <p>It is recommended to use <code>screen</code> program for communication:</p> <ol> <li>Install screen: <code>sudo apt-get install screen</code></li> <li>Open connection (from muxPi): <code>screen /dev/ttyS2 115200,cs8,ixon,ixoff</code></li> <li>Write <code>help</code> and press <code>Enter</code>.</li> </ol> <p>Features operable through Cortex-M0 microcontroller (help output):</p> <pre><code>help --- This help\nversion --- Display version of the firmware\necho --- Get (no arguments) or set ('on' or 'off') echo on serial \"console\": echo [on|off]. The default value is on.\npower --- Get (no arguments) or set ('on' or 'off') or switch off and on ('tick') power supply for DUT: power [on|off|tick]\nhdmi --- Get (no arguments) or set ('on' or 'off') HDMI HOTPLUG pin: hdmi [on|off]\ndyper --- Get (no second argument) or set ('on' or 'off') DyPer state: dyper 1|2 [on|off]\n mux --- Connect microSD card to external connector (DUT) or card reader (ts): mux [dut|ts]\n dut --- Connect microSD card and power to DUT: dut\n  ts --- Connect microSD card and power to TS: ts\n led --- Get (no second or third argument) or set ('R G B') color of led (1 | 2), ex: led 1 255 0 255\n clr --- Clear oled display\ntext --- Print text on the OLED display: text x y color content\ndraw --- Draw an object on the OLED display: draw object x1 y1 [x2 y2], objects are:\n         - point x y color - draws one point at given coordinates\n         - line x1 y1 x2 y2 color - draws line between given coordinates\n         - rectangle left top width height color - draws line between given coordinates\n         - circle x y radius color - draws line between given coordinates\ncolor must be 'on', 'off' or 'inv'\n adc --- Print current adc value of all (if no arguments are given) or one specified channel, ex: adc 1\nvoltage --- Print current voltage [mV] of all (if no arguments are given) or one specified channel, ex: voltage 1\ncurrent --- Print current current [mA] being consumed by DUT\nlthor --- Get (no second argument) or set state of lthor control signals:\n         - lthor switch [usb|uart] - redirect DUT's USB wires to NanoPi's 'usb' or 'uart'\n         - lthor id [usb|uart] - switch DUT's USB to 'usb' or 'uart' mode\n         - lthor vbus [on|off] - switch DUT's VBUS 'on' or 'off'\n         - lthor combo [usb|uart] - make DUT and MuxPi USB work in 'usb' or 'uart' mode - no get function\n\n key --- Get current state of given key or both if no key number is given: key [1|2]\nuart --- Get current value of UART voltage or set if new value is given [in millivolts]\n</code></pre> <p>Images source: Wiki Tizen</p>"},{"location":"transparent-validation/pikvm/Changing-IP-Address/","title":"Changing PiKVM IP Address to static","text":"<ol> <li>Connect with PiKVM via serial connection. While using a <code>minicom</code></li> </ol> <p>there is a need to use the USB-UART converter.</p> <p>Open the serial connection by executing the following command:</p> <pre><code>```bash\nsudo minicom -D /dev/ttyUSB0 -b 115200\n```\n</code></pre> <ol> <li>Check the current IP address of the interface you want to modify:</li> </ol> <pre><code>ip a\n</code></pre> <p>Note the exact interface name for later use.</p> <ol> <li>Remount the filesystem in read-write mode:</li> </ol> <pre><code>sudo rw\n</code></pre> <ol> <li>Navigate to the network configuration files:</li> </ol> <pre><code>cd /etc/systemd/network\n</code></pre> <ol> <li>Open the file corresponding to desired network interface using nano or vim:</li> </ol> <pre><code>sudo nano wlan0.network\n</code></pre> <ol> <li>The file content should look as follows. Replace <code>wlan0</code> with the interface    name, <code>192.168.X.X</code> with desired IP address and set the proper gateway:</li> </ol> <pre><code>[Match]\nName=wlan0\n[Network]\nDHCP=no\nAddress=192.168.X.X/24\nGateway=192.168.X.X\n</code></pre> <p>Save the file and exit the editor.</p> <p>To return to a DHCP connection, remove the <code>Address</code> and <code>Gateway</code> variables, set the <code>DHCP</code> property to <code>yes</code>.</p> <ol> <li>Restart the systemd-networkd service:</li> </ol> <pre><code>sudo systemctl restart systemd-networkd\n</code></pre> <ol> <li>Remount the filesystem in read-only mode:</li> </ol> <pre><code>sudo ro\n</code></pre> <ol> <li>Reboot the system:</li> </ol> <pre><code>sudo reboot now\n</code></pre> <ol> <li>Verify the new IP address for your interface:</li> </ol> <pre><code>ip a\n</code></pre>"},{"location":"transparent-validation/pikvm/Changing-MAC-Address/","title":"Changing MAC Address on PiKVM","text":"<ol> <li>Connect with PiKVM via serial connection. While using a <code>minicom</code></li> </ol> <p>there is a need to use the USB-UART converter.</p> <p>Open the serial connection by executing the following command:</p> <pre><code>```bash\nsudo minicom -D /dev/ttyUSB0 -b 115200\n```\n</code></pre> <ol> <li>Check the current MAC address of the network interface:</li> </ol> <pre><code>ip a\n</code></pre> <p>Note the exact interface name for later use.</p> <ol> <li>Remount the filesystem in read-write mode:</li> </ol> <pre><code>sudo rw\n</code></pre> <ol> <li>Navigate to the network configuration files:</li> </ol> <pre><code>cd /etc/systemd/network\n</code></pre> <ol> <li>Open the file corresponding to desired network interface using nano or vim:</li> </ol> <pre><code>sudo nano wlan0.network\n</code></pre> <ol> <li>Add following lines to the file. Replace  <code>xx:xx:xx:xx:xx:xx</code> with desired    MAC address:</li> </ol> <pre><code>[Link]\nMACAddress=xx:xx:xx:xx:xx:xx\n</code></pre> <p>Save the file and exit the editor.</p> <ol> <li>Restart the systemd-networkd service:</li> </ol> <pre><code>sudo systemctl restart systemd-networkd\n</code></pre> <ol> <li>Remount the filesystem in read-only mode:</li> </ol> <pre><code>sudo ro\n</code></pre> <ol> <li>Reboot the system:</li> </ol> <pre><code>sudo reboot now\n</code></pre> <ol> <li>Verify the new MAC address for your interface:</li> </ol> <pre><code>ip a\n</code></pre>"},{"location":"transparent-validation/pikvm/assembly-and-validation/","title":"Presale device assembly and validation","text":""},{"location":"transparent-validation/pikvm/assembly-and-validation/#introduction","title":"Introduction","text":"<p>This document describes the assembly procedure of the PiKVM (device based on Raspberry Pi 4 or Raspberry Pi Zero 2W) with components specified in requirements.</p>"},{"location":"transparent-validation/pikvm/assembly-and-validation/#requirements","title":"Requirements","text":"<p>Note that the PiKVM build might be basing on two types of Raspberry Pi: RPi 4     or RPi Zero 2W.</p> <p>Hardware components necessary to build PiKVM on RPi Zero 2W:</p> <ul> <li>Raspberry Pi Zero 2W,</li> <li>microSD card 16 GB,</li> <li>USB-A 5 V 3.1 A charger (female socket),</li> <li>HDMI to CSI-2 bridge,</li> <li>Raspberry Pi Zero Camera Cable,</li> <li>HDMI-HDMI cable,</li> <li>USB A - micro USB cable (male, male),</li> <li>Y-splitter cable.</li> <li>(Optional) UART -&gt; USB converter</li> </ul> <p>Hardware components necessary to build PiKVM on RPi 4:</p> <ul> <li>Raspberry Pi 4,</li> <li>microSD card 16 GB,</li> <li>USB-A 5 V 3.1 A charger (female socket),</li> <li>HDMI to CSI-2 bridge,</li> <li>HDMI-HDMI cable,</li> <li>USB A - USB C cable,</li> <li>Y-splitter cable.</li> <li>(Optional) UART -&gt; USB converter</li> </ul>"},{"location":"transparent-validation/pikvm/assembly-and-validation/#device-assembly","title":"Device assembly","text":"<p>The following section of the documentation shows the assembly procedure for PiKVM including setting up a WiFi connection and methods for reading device IP.</p>"},{"location":"transparent-validation/pikvm/assembly-and-validation/#set-based-on-rpi-zero-2w-preparation","title":"Set based on RPi Zero 2W preparation","text":"<p>The section below describes the method of preparing PiKVM hardware based on RPI Zero 2W.</p> <ol> <li> <p>Connect SD card and HDMI to CSI-2 bridge with camera cable:</p> <p></p> </li> <li> <p>Block USB power from device under test by preparing USB cable:</p> <p></p> </li> <li> <p>Connect HDMI cable from the device under test to HDMI -&gt; CSI-2 bridge.</p> </li> <li>Connect the USB splitter to the Raspberry Pi micro USB port.</li> <li>Connect one side of the splitter to USB-A 5 V 3.1 A charger.</li> <li>Connect other side to device under test via USB cable with blocked power.</li> </ol> <p>NOTE: When setting up PiKVM for an MSI platform, remember to avoid the Flash BIOS USB port, as it can generate problems with the flashing procedure. Always refer to the mainboard's manual for the port's location, as in the example below.</p> <p></p>"},{"location":"transparent-validation/pikvm/assembly-and-validation/#set-based-on-rpi-4-preparation","title":"Set based on RPi 4 preparation","text":"<p>To build PiKVM on RPi 4, use the RPI 0 set documentation and replace the cable for connecting to the RPi and the cable for connecting with the CSI-2 bridge.</p>"},{"location":"transparent-validation/pikvm/assembly-and-validation/#os-image-building-and-flashing","title":"OS image building and flashing","text":"<ol> <li> <p>Prepare the OS in accordance with the PiKVM Handbook.</p> </li> <li> <p>Flash the SD card using <code>bmaptool</code> or <code>balenaEtcher</code>.</p> <ul> <li>to do this by <code>balenaEtcher</code> go to the producer site     and follow his procedure on how to download and flash an SD card.</li> <li> <p>to do this by <code>bmaptool</code> reproduce the following steps:</p> <ul> <li> <p>install <code>bmaptool</code> by opening the terminal and typing the following     command:</p> <pre><code>sudo apt install bmap-tools\n</code></pre> </li> <li> <p>create the bmap by typing the following command:</p> <pre><code>bmaptool create /path/to/your/image &gt; /path/where/you/want/bmap/file/saved/bmapfilename.bmap\n</code></pre> </li> <li> <p>flash image to the SD card by typing the following command:</p> <pre><code>sudo bmaptool copy --bmap ~/path/where/your/bmap/file/is/located /path/where/your/image/is/located /path/to/memory/device\n</code></pre> </li> </ul> </li> </ul> </li> <li> <p>Insert the flashed SD card into the SD card slot on the PiKVM.</p> </li> </ol>"},{"location":"transparent-validation/pikvm/assembly-and-validation/#set-up-wifi","title":"Set up WiFi","text":"<p>The section below describes the method of setting up a WiFi connection for the PiKVM. This section is dedicated especially to the PiKVMs based on RPi Zero 2W, which is not equipped with an Ethernet port.</p> <ol> <li> <p>Mount the first partition of the memory card.</p> </li> <li> <p>Edit or make the <code>pikvm.txt</code> file in the following convention:</p> <pre><code>FIRSTBOOT=1\nWIFI_ESSID=\"name\"\nWIFI_PASSWD=\"password\"\n</code></pre> <p>Note: Do not remove line <code>FIRSTBOOT=1</code> or <code>FIRST_BOOT-1</code> line. It may     occur with troubles with the device starts.</p> </li> <li> <p>Unmount the first partition of the memory card.</p> </li> </ol> <p>Note: In some countries, in which WiFi channel 13 is in use, the device     might not connect to the WiFi. To prevent this, the router should be     configured properly: channels 12-14 or Auto Scan mode should be disabled.</p>"},{"location":"transparent-validation/pikvm/assembly-and-validation/#read-ip-address","title":"Read IP address","text":"<p>The section below describes the known methods of reading PiKVM IP.</p> <ol> <li> <p>First option: from <code>os</code> repository run the following command:</p> <pre><code>make scan\n</code></pre> <p>Example output:</p> <pre><code>.\n.\n.\n===== Toolbox image is ready =====\n===== Searching for Pis in the local network =====\ndocker run \\\n        --rm \\\n        --tty \\\n        --net host \\\n    pi-builder-arm-toolbox arp-scan --localnet | grep -Pi \"\\s(b8:27:eb:|dc:a6:32:)\" || true\n192.168.4.13    dc:a6:32:aa:aa:aa   Raspberry Pi Trading Ltd\n</code></pre> </li> <li> <p>Second option: open the web interface of your router and find the list of     issued IP addresses. Localization of the mentioned list depends on the     router model.</p> </li> <li> <p>Third option:</p> <ul> <li> <p>solder pins for serial output as on images below:</p> <p> </p> </li> <li> <p>Check Raspberry Pi Zero2W IP by booting to system and reading     information via serial (eg.) UART -&gt; USB converter.</p> </li> </ul> </li> </ol>"},{"location":"transparent-validation/pikvm/assembly-and-validation/#device-validation","title":"Device validation","text":"<ol> <li>Connect the device to the mains.</li> <li>Login to RTE via <code>ssh</code> (by using earlier obtained IP address) or     <code>minicom</code> (by using USB-UART converter with 3 wire cables).</li> </ol>"},{"location":"transparent-validation/pikvm/assembly-and-validation/#fullhd-stream","title":"FullHD stream","text":"<p>In order to enable FullHD stream (1920x1080) instead of 1200x720. One of the reasons to enable FullHD is that certain proprietary BIOSes implement a GUI setup which scales well only for Full HD or higher resolutions (in extreme cases it can even crash if lower than FullHD resolution is used).</p> <p>To enable FullHD resolution, one has to replace the EDID on PiKVM. To do so:</p> <ol> <li>Remount the filesystem to RW if necessary using <code>rw</code> command.</li> <li> <p>Save the follow HEX to <code>/root/edid.hex</code>:</p> <pre><code>00FFFFFFFFFFFF005262888800888888\n1C150103800000780AEE91A3544C9926\n0F505425400001000100010001000100\n010001010101D32C80A070381A403020\n350040442100001E7E1D00A050001940\n3020370080001000001E000000FC0050\n492D4B564D20566964656F0A000000FD\n00323D0F2E0F000000000000000001C4\n02030400DE0D20A03058122030203400\nF0B400000018E01500A0400016303020\n3400000000000018B41400A050D01120\n3020350080D810000018AB22A0A05084\n1A3030203600B00E1100001800000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000045\n</code></pre> </li> <li> <p>Execute: <code>kvmd-edidconf --edid=/root/edid.hex --apply</code></p> </li> <li>Execute: <code>kvmd-edidconf --import=/root/edid.hex</code></li> <li>Switch the filesystem back to RO using <code>ro</code> command.</li> </ol> <p>When PiKVM is connected to the platform, the BIOS or OS should initialize the display with 1920x1080 resolution.</p>"},{"location":"transparent-validation/pikvm/assembly-and-validation/#where-to-buy","title":"Where to buy?","text":"<p>The PiKVM is available in our online shop.</p>"},{"location":"transparent-validation/rte/introduction/","title":"RTE Introduction","text":"<p>RTE is certified Open Source Hardware, so based on published schematics you can build and modify PCB yourself.</p> <p>RTE is a hat designed for Orange Pi Zero board which runs specially crafted Linux distribution using the Yocto Project. RTE boards are used for controlling Device Under Test fully remotely through the network interface. Most common applications are:</p> <ul> <li>debugging tasks,</li> <li>flashing firmware,</li> <li>controlling GPIOs</li> <li>power management for Device Under Test.</li> </ul> <p></p>"},{"location":"transparent-validation/rte/introduction/#where-to-buy","title":"Where to buy?","text":"<p>RTE can be also bought in our 3mdeb shop.</p> <p>Full Remote Testing Environment set includes:</p> Category Description Quantity shield Remote Testing Environment v1.1.0 1 control unit Orange Pi Zero 256MB RAM version 1 power supply MicroUSB 5V/2A 1 storage SanDisk 16GB microSD card (with preinstalled compatible system) 1 clip Pomona 8-pin SOIC clip for Device Under Test SPI interface 1 cables standard female-female connection wire 2.56mm raster 8 cables IDC 8-pin wires for Device Under Test SPI interface 1 cables DC Jack - DC Jack power cable for Device Under Test 1 cables RS232 D-Sub 9P/9P cable for serial communication 1 jumpers jumper for UART OUTPUT SELECT header 2 spacers Polyamide M3 spacers and bolts 4"},{"location":"transparent-validation/rte/introduction/#why-choose-3mdeb-rte","title":"Why choose 3mdeb RTE?","text":"<ul> <li> <p>high accessibility and flexibility</p> <p>test your device from any location.</p> </li> <li> <p>efficiency</p> <p>simplify validation: write one script and run it on unlimited platforms.   Don\u2019t repeat yourself!</p> </li> <li> <p>independent development</p> <p>open hardware license: modify, upgrade and set it as you like. All blueprints   are at your disposal.</p> </li> <li> <p>instant setup</p> <p>intuitive connection: you do not need to be a certified engineer.</p> </li> <li> <p>automation</p> <p>time is money: let the machine do all the work for you</p> </li> </ul>"},{"location":"transparent-validation/rte/revision-history/","title":"Revision history","text":""},{"location":"transparent-validation/rte/revision-history/#v111","title":"v1.1.1","text":"<ul> <li>Footprint of Q5 adapted to the recommended footprint of   Si9435bdy</li> <li>Refactored the USB data lines routes to have more equal length</li> <li>Changed board version to v1.1.1 on PCB and the schematics</li> </ul>"},{"location":"transparent-validation/rte/revision-history/#v110","title":"v1.1.0","text":"<ul> <li>added <code>Open hardware</code> logo</li> <li>added <code>SW1</code> reset button</li> <li>added <code>D5</code> relay state LED indicator</li> <li>added <code>J16</code> 2x3pin UART OUTPUT SELECT header</li> <li>added <code>J18</code> 1x2pin UART1 header</li> <li>added 1.8V stabilizer</li> <li>populated SPI <code>Vcc</code> pin</li> <li>modified capacitors near MAX3232 SOIC</li> <li>reduced OC buffers GPIO header (J11) from 12 to 9 pin</li> <li>eliminated issue with J6 USB port (unreliable detection of USB devices)</li> </ul>"},{"location":"transparent-validation/rte/revision-history/#v100","title":"v1.0.0","text":"<ul> <li>added RoHS logo</li> <li>added Crossed Wheelie Bin logo</li> <li>modified footprints of the pin headers</li> </ul>"},{"location":"transparent-validation/rte/revision-history/#v053","title":"v0.5.3","text":"<ul> <li>enlarged added holes</li> </ul>"},{"location":"transparent-validation/rte/revision-history/#v052","title":"v0.5.2","text":"<ul> <li>modified I2C GPIO expander outputs connections (now 4 of them are connected to   the dedicated header)</li> <li>modified version number on board</li> <li>removed SPI header for APU recovery with output pin role information labels</li> <li>removed 7 and 8 pin of SPI header with GPIO expander connection</li> </ul>"},{"location":"transparent-validation/rte/revision-history/#v051","title":"v0.5.1","text":"<ul> <li>added micro USB connector for power supply</li> <li>added 5 V power supply pins</li> <li>added SPI connector for APU SPI recovery</li> <li>added fiducials on the bottom layer</li> <li>added pins information labels</li> <li>modified relay control system elements placement</li> <li>modified SPI connector for APU paths placement</li> <li>modified project text descriptions</li> <li>removed 2 pin GPIO expander connector</li> </ul>"},{"location":"transparent-validation/rte/revision-history/#v05","title":"v0.5","text":"<ul> <li>added 5 V power supply signal diode (red) + limiting current resistor</li> <li>added 3.3 V power supply signal diode (orange) + limiting current resistor</li> <li>relay NO/NC connection switched to the previous configuration</li> <li>switched <code>SPI1_MISO</code>with <code>SPI1_MOSI</code> output</li> <li>mirrored <code>RS232</code> socket pads</li> <li>removed I2C pull-up resistors</li> </ul>"},{"location":"transparent-validation/rte/revision-history/#v036","title":"v0.3.6","text":"<ul> <li>relay NO/NC connection switched</li> </ul>"},{"location":"transparent-validation/rte/revision-history/#v035","title":"v0.3.5","text":"<ul> <li>enlarged the hole diameter by 0.1 mm</li> </ul>"},{"location":"transparent-validation/rte/revision-history/#v034","title":"v0.3.4","text":"<ul> <li>added 3mdeb logo and board name on PCB</li> <li>modified elements marks placing</li> </ul>"},{"location":"transparent-validation/rte/revision-history/#v033","title":"v0.3.3","text":"<ul> <li>added SPI output IO pins connection with GPIO</li> <li>added PCB mechanical schematic</li> <li>added I2C INT pins connection</li> <li>added mounting holes</li> <li>added fiducials</li> <li>modified MOSFET transistor pinout numeration</li> <li>modified USB footprint from horizontal to vertical</li> <li>modified I2C GPIO expander with OC buffers connection</li> </ul>"},{"location":"transparent-validation/rte/revision-history/#v032","title":"v0.3.2","text":"<ul> <li>added mounting holes</li> <li>modified relay pinout</li> <li>removed I2C to GND connection</li> </ul>"},{"location":"transparent-validation/rte/revision-history/#v031","title":"v0.3.1","text":"<ul> <li>modified power supply from 5V to 3V3 for I2C bus <code>MCP23017</code>, and <code>MAX3232</code></li> <li>removed capacitors connected to the I2C bus</li> </ul>"},{"location":"transparent-validation/rte/revision-history/#v03","title":"v0.3","text":"<ul> <li>added I2C bus with output header</li> <li>added <code>MCP23017</code> I2C GPIO expander</li> <li>added second <code>SN74LS06</code> OC buffer</li> <li>added relay with required neighboring items</li> <li>added <code>MAX3232</code> RS232 electrical level changer</li> <li>added RS232 socket</li> <li>added GPIO output header for pins unused to OC buffer control</li> <li>modified some of input pins connection</li> <li>removed ARK joint for the relay module</li> <li>removed header for relay module control</li> </ul>"},{"location":"transparent-validation/rte/v1.1.0/Change-IP-Address/","title":"Changing RTE IP Address to static","text":"<ol> <li>Connect with RTE via ssh or serial connection.</li> </ol> <p>While using a <code>minicom</code> there is a need to use the USB-UART converter.    The serial connection can be opened by executing the following command:</p> <pre><code>sudo minicom -D /dev/ttyUSB0 -b 115200\n</code></pre> <ol> <li>Check the current IP address of the target network interface:</li> </ol> <pre><code>ip a\n</code></pre> <p>Note the exact interface name for later use.</p> <ol> <li>Navigate to the network configuration files:</li> </ol> <pre><code>cd /etc/systemd/network\n</code></pre> <ol> <li>Open the file for the target interface using nano or vim.</li> </ol> <p>If the file does not exist, create one following this scheme: <code>10-eth0.network</code>, replacing <code>eth0</code> with the interface name</p> <pre><code>vim 10-eth0.network\n</code></pre> <ol> <li>The file content should look as follows. Replace <code>eth0</code> with the interface    name, <code>192.168.X.X</code> with desired IP address and set the proper gateway:</li> </ol> <pre><code>[Match]\nName=eth0\n\n[Network]\nDHCP=no\nAddress=192.168.X.X/24\nGateway=192.168.X.X\n</code></pre> <p>Save the file and exit the editor.</p> <p>To return to a DHCP connection, remove the <code>Address</code> and <code>Gateway</code> variables, set the <code>DHCP</code> property to <code>yes</code>. Alternatively, delete the entire configuration file.</p> <ol> <li>Restart the systemd-networkd service:</li> </ol> <pre><code>systemctl restart systemd-networkd\n</code></pre> <ol> <li>Verify the new IP address of the interface:</li> </ol> <pre><code>ip a\n</code></pre> <p>Note: If <code>DHCP</code> parameter is not set to <code>no</code> or the MAC address has a reserved IP, the changes may not be applied.</p>"},{"location":"transparent-validation/rte/v1.1.0/Change-MAC-Address/","title":"Changing MAC Address on RTE","text":"<ol> <li>Connect with RTE via serial connection. While using a <code>minicom</code></li> </ol> <p>there is a need to use the USB-UART converter.</p> <p>Open the serial connection by executing the following command:</p> <pre><code>```bash\nsudo minicom -D /dev/ttyUSB0 -b 115200\n```\n</code></pre> <ol> <li>Check the current MAC address of the target network interface:</li> </ol> <pre><code>ip a\n</code></pre> <p>Note the exact interface name for later use.</p> <ol> <li>Navigate to the network configuration files:</li> </ol> <pre><code>cd /etc/systemd/network\n</code></pre> <ol> <li>Open the file for the target interface using nano or vim.</li> </ol> <p>If the file does not exist, create one following this scheme: <code>10-eth0.network</code>, replacing <code>eth0</code> with the interface name</p> <pre><code>vim 10-eth0.network\n</code></pre> <ol> <li>The file content should look as follows. Replace <code>eth0</code> with    the interface name, <code>xx:xx:xx:xx:xx:xx</code> with desired IP address</li> </ol> <pre><code>[Match]\nName=eth0\n\n[Network]\nMACAddress=xx:xx:xx:xx:xx:xx\n</code></pre> <p>Save the file and exit the editor.</p> <ol> <li>Restart the systemd-networkd service:</li> </ol> <pre><code>systemctl restart systemd-networkd\n</code></pre> <ol> <li>Reboot the platform:</li> </ol> <pre><code>reboot now\n</code></pre> <ol> <li>After RTE boots, verify the MAC address:</li> </ol> <pre><code>ip link show eth0\n</code></pre>"},{"location":"transparent-validation/rte/v1.1.0/flashing-guide/","title":"Flashing guide","text":"<p>This document describes how to set up external flashing for the devices using RTE.</p>"},{"location":"transparent-validation/rte/v1.1.0/flashing-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Prepared RTE</li> </ul>"},{"location":"transparent-validation/rte/v1.1.0/flashing-guide/#connection-to-spi-header","title":"Connection to SPI header","text":"<p>To prepare the stand for flashing follow the steps described below:</p> <ol> <li> <p>Open the platform cover.</p> </li> <li> <p>Connect the 6-pin from the flashing device (WSON8, Pomona clip, jumper wires)    to the SPI header on RTE.</p> </li> </ol> <pre><code>    SPI header  6 pin header\n    Vcc     pin 1 (Vcc)\n    GND     pin 2 (GND)\n    CS  pin 4 (CS)\n    SCLK    pin 6 (CLK)\n    MISO    pin 5 (MISO)\n    MOSI    pin 3 (MOSI)\n</code></pre> <pre><code>            ______\n        &gt;  |      |\nVcc 3.3V  ----1  2----  GND\n            |      |\n    MOSI  ----3  4----  CS\n            |      |\n    MISO  ----5  6----  CLK\n            |______|\n</code></pre>"},{"location":"transparent-validation/rte/v1.1.0/flashing-guide/#platform-specific-steps","title":"Platform-specific steps","text":"<p>To find more specific information, regarding recovery of a given platform, navigate to a recovery section in the documentation for a specific platform:</p> <ol> <li>Supported hardware</li> <li>Choose a vendor. For example, <code>Protectli</code></li> <li>Navigate to the <code>Recovery</code> section</li> </ol> <p>For example:</p> <ul> <li>Protectli recovery   guide</li> <li>NovaCustom recovery   guide</li> </ul>"},{"location":"transparent-validation/rte/v1.1.0/flashing-guide/#remote-flashing","title":"Remote flashing","text":"<p>To remotely initiate flashing via RTE, use the <code>osfv_cli</code> tool.</p> <p>Example flashing command:</p> <p><code>osfv_cli rte --rte_ip=&lt;RTE_IP&gt; flash write --rom &lt;PATH_TO_ROM_FILE&gt;</code></p> <p>More information about <code>osfv_cli</code>:</p> <ul> <li> <p>osfv-scripts repository</p> </li> <li> <p>osfv_cli   documentation</p> </li> </ul>"},{"location":"transparent-validation/rte/v1.1.0/quick-start-guide/","title":"Quick start guide","text":"<p>The canonical example of RTE usage is hooking it to some hardware for SPI flashing, power control and serial logs gathering. This document describes the common preparation of RTE without listed functions.</p> <p></p>"},{"location":"transparent-validation/rte/v1.1.0/quick-start-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>RTE board     (this document is based on v1.1.0)</li> <li>Micro-USB 5V 2.5A power supply</li> <li>Orange Pi</li> <li>SD card</li> <li>Ethernet cable</li> <li>USB-UART converter with 3 wire cables</li> <li>Ubuntu (based on 22.04)</li> </ul>"},{"location":"transparent-validation/rte/v1.1.0/quick-start-guide/#preparation-of-rte","title":"Preparation of RTE","text":"<ol> <li>Download the latest version of the RTE image from the     meta-rte repository.</li> <li> <p>Flash the SD card using <code>bmaptool</code> or <code>balenaEtcher</code>.</p> <ol> <li>to do this by <code>balenaEtcher</code> go to the producer site     and follow his procedure on how to download and flash an SD card.</li> <li> <p>to do this by <code>bmaptool</code> reproduce the following steps:</p> <ol> <li> <p>install <code>bmaptool</code> by opening the terminal and typing the following     command:</p> <pre><code>sudo apt install bmap-tools\n</code></pre> </li> <li> <p>create the bmap by typing the following command:</p> <pre><code>bmaptool create /path/to/your/image &gt; /path/where/you/want/bmap/file/saved/bmapfilename.bmap\n</code></pre> </li> <li> <p>flash image to the SD card by typing the following command:</p> <pre><code>sudo bmaptool copy --bmap ~/path/where/your/bmap/file/is/located /path/where/your/image/is/located /path/to/memory/device\n</code></pre> </li> </ol> </li> </ol> </li> <li> <p>Insert Orange Pi into RTE.</p> </li> <li>Insert SD card into Orange Pi.</li> <li>Connect the ethernet cable to Orange Pi.</li> <li> <p>Plug the USB-UART converter into your computer and connect its pins with     RTE J2 Header.     (you may need a USB extension cable)</p> UART Converter RTE J2 Header GND GND TXD RX RXD TX </li> <li> <p>Open the serial connection with RTE from your PC using a previously connected     USB-UART converter by executing the following command:</p> <pre><code>sudo minicom -D /dev/ttyUSB&lt;x&gt; -b 115200\n</code></pre> <p>Substitute <code>&lt;x&gt;</code> with the device number corresponding to your USB-UART Converter for example <code>/dev/ttyUSB0</code>. The <code>dmesg</code> command allows to identify the latest connected devices.</p> </li> <li> <p>Plug the power supply into the RTE J17 Micro-USB slot.</p> </li> <li>Login into the device by using the default credentials:<ul> <li>Login: <code>root</code></li> <li>Password: <code>meta-rte</code></li> </ul> </li> </ol>"},{"location":"transparent-validation/rte/v1.1.0/reference-os/","title":"Dasharo RTE Reference OS","text":"<p>Our specially crafted operating system fully customized for Remote Testing Environment platform aspects. meta-rte is based on open-source project - Yocto Project used for building Linux-based systems regardless of the hardware architecture. meta-rte has most mandatory tools and dependencies required for everyday debugging task with various range of hardware. RTE running meta-rte is ready to use completely out of the box, without the need for additional laborious configuration.</p> <p>Moreover, open-source solutions such as the Yocto Project and meta-rte provides possibility to rebuild the whole system strictly for the end users requirements, making the whole set more universal with endless applications!</p> <p>More information can be found in meta-rte repository</p>"},{"location":"transparent-validation/rte/v1.1.0/serial-port-connection-guide/","title":"Serial port connection guide","text":"<p>This document describes how to set up a serial connection between RTE and another device.</p>"},{"location":"transparent-validation/rte/v1.1.0/serial-port-connection-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Prepared RTE</li> <li>Two jumpers</li> <li>Choose one of the following cables depending on the connectivity to your     platform:<ul> <li>RS232&lt;-&gt;RJ45 cable,</li> <li>RS232&lt;-&gt;RS232 cable,</li> <li>USB&lt;-&gt;RS232 cable,</li> <li>micro-USB&lt;-&gt;USB cable,</li> <li>3-wire cable.</li> </ul> </li> </ul>"},{"location":"transparent-validation/rte/v1.1.0/serial-port-connection-guide/#setting-serial-connection","title":"Setting serial connection","text":"<ol> <li> <p>Put the two jumpers on     RTE J16 Header:</p> <ol> <li>For the RS232 port, they join COM and RS232 rows both on RX and TX     columns.</li> <li>For the UART port (only during using a 3-wire cable), they join COM and     EXT rows both on RX and TX columns.</li> <li>For the micro-USB-USB cable, jumpers aren't required.</li> </ol> </li> <li> <p>Connect the RTE header (J14 or J18) with the device serial port. Use the     cable according to the DUT specification:</p> <ol> <li>DUT has a serial port -&gt; needs to use an RS232&lt;-&gt;RS232 cable.</li> <li>DUT has the debug port in the form of the RJ45 -&gt; needs to use an     RS232&lt;-&gt;RJ45 cable.</li> <li>DUT has the debug port in the form of the USB -&gt; needs to use an     RS232&lt;-&gt;USB cable.</li> <li>DUT has the debug port in the form of the micro-USB -&gt; needs to use a     micro-USB&lt;-&gt;USB cable.</li> <li>DUT doesn't have a port but has pins for serial connection on the board     -&gt; need to use a 3-wire cable.</li> </ol> </li> <li> <p>Connect with RTE via <code>ssh</code> or <code>minicom</code>. To connect via <code>ssh</code> is required to     know RTE IP and connection to the internet on both sides. While using a     <code>minicom</code> there is a need to use the USB-UART converter.</p> </li> <li> <p>There are two ways to open a serial connection:</p> <ol> <li> <p>Telnet - by executing the following command:</p> <pre><code>telnet 192.168.X.X 13541\n</code></pre> <p>To configure telnet connections, update the file <code>/etc/ser2net.conf</code> using <code>vim</code>. Then reboot the RTE to apply the changes. The <code>dmesg</code> command allows to identify the latest connected devices.</p> </li> <li> <p>Minicom - by executing the following command:</p> <pre><code>minicom -D /dev/ttyS1 -o -b 115200\n</code></pre> <p>Replace <code>ttyS1</code> with <code>ttyUSB0</code> while using micro-USB-USB cable.</p> </li> </ol> </li> </ol>"},{"location":"transparent-validation/rte/v1.1.0/specification/","title":"RTE elements","text":"<ul> <li>UART0 header - 1x3 Orange Pi Zero system debug output and console   (pins: <code>RX</code>, <code>TX</code>, <code>GND</code>).</li> <li>SPI header - 2x4 standard 2.5mm IDC compatible header with all necessary   signals to flash SPI chips.</li> <li>Orange Pi Zero GPIO - 1x3 GPIO pin header directly connected to Orange Pi   zero platform.</li> <li>I2C header - 1x4 populated pins: <code>3.3V</code>, <code>SCK</code>, <code>SDA</code>, <code>GND</code>.</li> <li>OC buffers output - 1x12 GPIO pin header connected to Open Collector buffers.</li> <li>DUT power control connectors - 2x DC jack 5.5/2.1mm female connectors for   a Device Under Test power supply controlled directly through the relay.</li> <li>Reset button - Simple switch to reset RTE</li> <li>RS232 - DB9 male connector for RS232 communication with a hardware flow control.</li> <li>UART output select header 2x3 UART OUTPUT SELECT header destined for   selecting serial output between UART1 header and DB9 RS232 connector.</li> <li>UART1 header - 1x3 UART header for 3V3 serial communication with DUT   (pins: <code>RX</code>, <code>TX</code>, <code>GND</code>).</li> <li>2x USB connectors - Connect additional storages, external flash   programmers, USB-RS232 or USB-UART converters.</li> <li>5V header - 1x2 5V output populated pins: <code>5V</code>, <code>GND</code>.</li> <li>expander GPIO - 1x4 GPIO pin header connected to GPIOs expander with no   OC buffers.</li> <li>Relay - Controls Device Under Tests power supply</li> <li>micro USB connector - Connector for powering up RTE and OrangePi Zero   setup.</li> </ul>"},{"location":"transparent-validation/rte/v1.1.0/specification/#product-features","title":"Product features","text":""},{"location":"transparent-validation/rte/v1.1.0/specification/#key-features","title":"Key features","text":"<ul> <li>Cheaper and more feature-rich in comparison to other products</li> <li>Ultra-fast SPI flashing (16MHz)</li> <li>In-Circuit Programming (program onboard SPI Flash)</li> <li>Pomona connector to work with Serial Flash soldered on board</li> <li>Two logic levels SPI (1.8V and 3.3V)</li> <li>Remote power control over the target device</li> <li>Open Hardware</li> <li>Open Source software attached</li> <li>Open Source REST API controller</li> <li>Cost-free future software improvements</li> </ul>"},{"location":"transparent-validation/rte/v1.1.0/specification/#rtectrl-web-interface","title":"RteCtrl: Web interface","text":"<p>RteCtrl is a REST API controller used for RTE board. It comes with meta-rte operating system and starts automatically on port <code>8000</code> without the necessity of additional configuration. REST API dashboard can be reached through the Internet browser and provides a possibility to:</p> <ul> <li>control Device Under Test power supply (coldboot and warmboot)</li> <li>reset Device Under Test platform</li> <li>flash Device Under Test firmware More information can be found at RteCtrl repository</li> </ul> <p>DISCLAIMER: Before starting the flashing procedure through REST API console,   make sure that appropriate SPI logic levels are set accordingly to   SPI section.</p>"},{"location":"transparent-validation/rte/v1.1.0/specification/#specification","title":"Specification","text":""},{"location":"transparent-validation/rte/v1.1.0/specification/#gpio-header-1","title":"GPIO header (1)","text":"<p>First GPIO header (<code>J1</code>) is a 1x3 pin header straight type 2.54mm pitch. It is derived directly from Orange Pi GPIOs for general use. By default, these GPIOs are set to <code>INPUT</code> mode.</p> <p>Maximum voltage for all data signals: 3.3 V.</p> <p> Description Pin # GPIO12 1 GPIO11 2 GPIO6 3 <p></p>"},{"location":"transparent-validation/rte/v1.1.0/specification/#gpio-header-2","title":"GPIO header (2)","text":"<p>Second GPIO header (<code>J10</code>) is a 1x4 pin header straight type 2.54mm pitch. It is derived from GPIO expander on RTE board. They are accessible for general use. By default, these GPIOs are set to <code>INPUT</code> mode. Some of them may have a fixed purpose by convention used in OSFV. It is recommended to keep the connections to DUT consistent with the purpose of the pins.</p> <p>Maximum voltage for all data signals: 3.3 V. Expander GPIO: 25 mA maximum output current.</p> <p> Description Pin # Usage GPIO400 1 Power LED GPIO401 2 Free GPIO402 3 Free GPIO403 4 Free <p></p>"},{"location":"transparent-validation/rte/v1.1.0/specification/#gpio-header-3","title":"GPIO header (3)","text":"<p>Third GPIO header (<code>J11</code>) is a 1x9 pin header straight type 2.54mm pitch. It is derived from GPIO expander on RTE board with an additional connection to OC (Open Collector) buffers. By default, these GPIOs are set to <code>OUTPUT</code> mode. Some of them have a fixed purpose by design (some of the pins are named on the schematics) and convention used in OSFV. It is recommended to keep the connections to DUT consistent with the purpose of the pins.</p> <p>Maximum voltage for all data signals: 3.3 V. OC buffers: 40 mA maximum output current.</p> <p> Description Pin # Usage GPIO407 1 Free GPIO415 2 Free GPIO414 3 Free GPIO408 4 Watchdog (PC Engines APU2 specific) GPIO409 5 Reset button GPIO410 6 Power button GPIO411 7 Mode switch (PC Engines APU2 specific) GPIO412 8 CMOS clear GPIO413 9 SPI Write Protect <p></p>"},{"location":"transparent-validation/rte/v1.1.0/specification/#i2c-header","title":"I2C header","text":"<p>I2C header (<code>J9</code>) is 1x4 pin header straight type 2.54mm pitch. It is used to rather low-speed applications such as reading sensors or accessing DACs and ADCs.</p> <p>Maximum voltage for all data signals: 3.3 V.</p> <p> Description Pin # 3V3 1 SCK 2 SDA 3 GND 4 <p></p>"},{"location":"transparent-validation/rte/v1.1.0/specification/#spi-header","title":"SPI header","text":"<p>SPI header (<code>J7</code>) is a 2x4 pin header straight type 2.54mm pitch. It is used to control the application SPI flash with a minimal set of connections.</p> <p>Maximum voltage for all data signals: 3.3 V.</p> <p> Description Pin # Pin # Description Vcc 1 2 GND CS 3 4 SCLK MISO (SO) 5 6 MOSI (SI) ISP 7 8 NC <p></p> <p>Revision v1.1.0 features new possibilities for SPI configuration:</p> <ul> <li>SPI <code>Vcc</code> pin has been populated - power is now supplied to the SPI <code>Vcc</code> connector and can be enabled/disabled on demand:</li> </ul> <p> GPIO406 (OC_OUT1) state SPI Vcc 0 - low disabled (by default) 1 - high enabled <p></p> <ul> <li>user can choose the voltage level for <code>Vcc</code> SPI - either 1.8V or 3.3 V:</li> </ul> <p> GPIO405 (OC_OUT2) state SPI Vcc voltage level 0 - low 1.8 V (by default) 1 - high 3.3 V <p></p> <ul> <li>user can enable/disable SPI lines (some platforms have problems when booting   with SPI wires connected):</li> </ul> <p> GPIO404 (OC_OUT3) state SPI lines (MOSI/MISO/CS/SCLK) 0 - low disabled (by default) 1 - high enabled <p></p>"},{"location":"transparent-validation/rte/v1.1.0/specification/#uart-output-select-header","title":"UART OUTPUT SELECT header","text":"<p>UART OUTPUT SELECT header (<code>J16</code>) is a 2x3 pin header straight type 2.54mm pitch. It is used for enabling serial communication output: RS232 DB9 port (<code>J14</code>) or UART1 header (<code>J18</code>). If jumpers are not attached, serial ports are disabled.</p> <p> Jumper position (TX) Jumper position (RX) Serial communication enabled RS232 + COM RS232 + COM RS232 DB9 port (J14) EXT + COM EXT + COM 3.3V UART1 header (J18) <p></p>"},{"location":"transparent-validation/rte/v1.1.0/specification/#rs232-connector","title":"RS232 connector","text":"<p>RS232 connector (<code>J14</code>) is a DB9 male 9 pin connector for serial communication between Remote Testing Environment and Device Under Test platform. It supports a hardware flow control. RS232 connector can be enabled/disabled according to UART OUTPUT SELECT section.</p> <p> Pin # Signal Description 1 DCD Data Carrier Detect 2 RXD Receive Data 3 TXD Transmit Data 4 DTR Data Terminal Ready 5 GND Signal Ground 6 DSR Data Set Ready 7 RTS Request to Send 8 CTS Clear to Send 9 RI Ring Indicator <p></p>"},{"location":"transparent-validation/rte/v1.1.0/specification/#uart0-header","title":"UART0 header","text":"<p>UART0 header (<code>J2</code>) is a 1x3 pin header straight type 2.54mm pitch. It is derived from Orange Pi Zero serial debug UART for debugging and serial communication purposes.</p> <p>Maximum voltage for all data signals: 3.3 V.</p> <p> Description Pin # GND 1 RX 2 TX 3 <p></p>"},{"location":"transparent-validation/rte/v1.1.0/specification/#uart1-header","title":"UART1 header","text":"<p>UART1 header (<code>J18</code>) is a 1x3 pin header straight type 2.54mm pitch. It is used for serial communication with DUT. UART1 header can be enabled/disabled according to UART OUTPUT SELECT section.</p> <p>Maximum voltage for all data signals: 3.3 V.</p> <p> Description Pin # GND 1 RX 2 TX 3 <p></p>"},{"location":"transparent-validation/rte/v1.1.0/specification/#power-output-header","title":"Power output header","text":"<p>Power output header (<code>J15</code>) is 1x2 pin header straight type 2.54mm pitch. It is used for additional 5V or ground pin connections with various devices.</p> <p> Description Pin # 5V 1 GND 2 <p></p>"},{"location":"transparent-validation/rte/v1.1.0/specification/#dc-jack","title":"DC jack","text":"<p>Two DC Jacks (<code>J12</code> and <code>J13</code>) are 5.5/2.1mm female plug connectors used for Device Under Test power supply. The output from DC Jacks is controlled through a relay. There is no matter whether <code>J12</code> or <code>J13</code> plug is input/output for power supply.</p>"},{"location":"transparent-validation/rte/v1.1.0/specification/#relay","title":"Relay","text":"<p>Relay (<code>K1</code>) is a mechanical switch for controlling Device Under Test power supply.</p> <p>Technical reference:</p> <ul> <li>1 Form C (1PDT) contact arrangement</li> <li>5 V coil nominal voltage</li> <li>70 Ohms nominal resistance</li> <li>72 mA nominal current</li> <li>24 VDC maximal input voltage</li> <li>10 A maximal input voltage</li> <li>Expected relay life: 100 000 operations</li> </ul> <p>Relay state is indicated by LED (<code>D5</code>) located near relay and can be controlled via meta-rte operating system through GPIO199:</p> <p> GPIO199 state Relay state D5 LED state 0 OFF OFF 1 ON ON <p></p>"},{"location":"transparent-validation/rte/v1.1.0/specification/#usb-connectors","title":"USB connectors","text":"<p>USB connectors (<code>J6</code>, <code>J8</code>) available on RTE are additional USB type A ports derived from Orange Pi Zero header. They can be used for storage extension, serial communication through various adapters or USB programmer extension.</p>"},{"location":"transparent-validation/rte/v1.1.0/specification/#microusb-connector","title":"microUSB connector","text":"<p>The micro USB connector (<code>J17</code>) is a USB B micro socket for powering up RTE and OrangePi Zero setup. It is required to use a 5V/2A power adapter. There is no difference whether the user plugs the power supply to the micro USB connector located on RTE board or use OrangePi Zero original socket.</p>"},{"location":"transparent-validation/rte/v1.1.0/specification/#reset-button","title":"Reset button","text":"<p>Reset button (<code>SW1</code>) located near relay is used for resetting the RTE itself.</p>"},{"location":"transparent-validation/rte/v1.1.0/specification/#how-to-set-gpio-states-to-flash-spi","title":"How to set GPIO states to flash SPI?","text":"<ol> <li> <p>Set proper SPI Vcc Voltage:</p> <p>Adequate Vcc voltage is necessary for a successful flash procedure. If it is too low the chip will not recognize any signals, if too high the chip will be damaged.</p> <pre><code>echo 0 &gt; /sys/class/gpio/gpio405/value\n</code></pre> <p>Or when flash chip operates on 3.3V:</p> <pre><code>echo 1 &gt; /sys/class/gpio/gpio405/value\n</code></pre> </li> <li> <p>Enable SPI Vcc:</p> <pre><code>echo 1 &gt; /sys/class/gpio/gpio406/value\n</code></pre> </li> <li> <p>Enable SPI signals:</p> <pre><code>echo 1 &gt; /sys/class/gpio/gpio404/value\n</code></pre> </li> <li> <p>Flash SPI chip:</p> <pre><code>flashrom -w /path/to/coreboot.rom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000\n</code></pre> </li> <li> <p>When done, change back all states:</p> <pre><code>echo 0 &gt; /sys/class/gpio/gpio405/value\n\necho 0 &gt; /sys/class/gpio/gpio406/value\n\necho 0 &gt; /sys/class/gpio/gpio404/value\n</code></pre> </li> </ol>"},{"location":"transparent-validation/sd-wire/faq/","title":"SDWire Frequently asked questions (FAQ)","text":""},{"location":"transparent-validation/sd-wire/faq/#how-can-i-ensure-that-sdwire-is-compatible-with-my-system","title":"How can I ensure that SDWire is compatible with my system?","text":"<p>The SDWire has been tested on the RTE (Remote Testing Environment) platform with Orange Pi Zero and GoodRam MicroSDHC 32 GB Class 10 UHS-I/U1. You can learn more about the RTE platform here.</p> <p>For usage documentation, please visit SDWire usage validation section. Please note that the \"First use\" has already been completed during the pre-sale validation of the SDWire.</p> <p>We haven't conducted specific compatibility tests on other platforms, so we cannot provide detailed information regarding its compatibility with other devices.</p>"},{"location":"transparent-validation/sd-wire/faq/#can-i-use-sdwire-to-download-photos-from-a-dslr-camera-remotely","title":"Can I use SDWire to download photos from a DSLR camera remotely?","text":"<p>Yes, the product is designed to facilitate remote access and data management for SD cards, which should work well for your purpose of retrieving photos from a remote DSLR camera.</p> <p>For additional details please refer to the official documentation:</p> <ul> <li>Dasharo Universe</li> <li>Tizen Wiki</li> </ul> <p>These resources will provide you with comprehensive guidance on how to make the most of the product for your specific needs.</p>"},{"location":"transparent-validation/sd-wire/faq/#what-is-the-maximum-sd-card-read-and-write-speed-limit","title":"What is the maximum SD card read and write speed limit?","text":"<p>We conducted a simple test involving multiple attempts to flash an SD card inserted into SD Wire. The data transfer rates for these successive attempts ranged between 12 MB/s and 21 MB/s.</p> <p>You can locate the hardware list used for testing by visiting the following link.</p>"},{"location":"transparent-validation/sd-wire/getting-started/","title":"SDWire is a small board with two features","text":"<ul> <li>SD card reader</li> <li>SD card MUX</li> </ul> <p>SDWire allows to flash SD card connected to the DUT (Device Under Test), without physical contact with the device. There is only one micro USB socket for connecting to host PC. Both USB mass storage and MUX control are served through the same USB connection.</p> <p>The PCB board is designed in such way that it fits into micro SD card slots. Thanks to this, there is no need for special cables with a micro SD adapter.</p> <p></p>"},{"location":"transparent-validation/sd-wire/specification/","title":"Hardware design","text":"<p>Design of this board is based on SD MUX . SDWire does not have power switch or USB switch but has built in USB SD card reader. SD card multiplexer itself is exactly the same in both devices.</p> <p>There are four LEDs on the board:</p> <pre><code>red - power presence from USB\nblue - USB reader activity\nblue - card connected to TS (Test Server)\ngreen - card connected to DUT (Device Under Test)\n</code></pre> <p>All LEDs are present on both sides of the board to make them visible no matter which side of the board will be facing you.</p> <p>LED positions are showed in the image below.</p> <p></p> <p>Source: wiki.tizen.org</p>"},{"location":"transparent-validation/sd-wire/specification/#pcb-elements-and-scheme","title":"PCB elements and scheme","text":"<p>Source: wiki.tizen.org</p>"},{"location":"transparent-validation/sd-wire/usage-validation/","title":"SDWire usage","text":""},{"location":"transparent-validation/sd-wire/usage-validation/#environment-preparation","title":"Environment preparation","text":"<p>SDWire has dedicated software which is a simple tool meant to control the hardware. Source code of the tool is published on our github. This is simple to use, command-line utility software written in C and based on open-source libFTDI library.</p> <p>To prepare the environment reproduce the following steps:</p> <ol> <li> <p>Clone the repository:</p> <pre><code>git clone https://github.com/3mdeb/sd-mux\n</code></pre> </li> <li> <p>Install all needed dependencies:</p> <p>Ubuntu/Debian:</p> <pre><code>sudo apt-get install libftdi1-dev libpopt-dev cmake\n</code></pre> <p>Fedora/Red Hat:</p> <pre><code>sudo dnf install libftdi-devel popt-devel cmake gcc gcc-c++\n</code></pre> </li> <li> <p>Enter into sd-mux project directory and reproduce the following steps to     build project:</p> <ul> <li>open directory in terminal</li> <li> <p>create 'build' directory by the following command:</p> <pre><code>mkdir build\n</code></pre> </li> <li> <p>enter into 'build' directory by the following command:</p> <pre><code>cd build\n</code></pre> </li> <li> <p>run the following commands one by one:</p> <pre><code>cmake ..\nmake\n</code></pre> </li> </ul> </li> <li> <p>In the above-described directory (<code>sd-mux/build</code>) run the following command to     build binary:</p> <pre><code>sudo make install\n</code></pre> <p>Note, that the above-described command installs binary into '/usr/local/bin'. If you want to install files in directory rather than the default one add an argument to cmake command:</p> <pre><code>cmake -DCMAKE_INSTALL_PREFIX=/usr ..\n</code></pre> <p>Then it is obligatory to run again the following commands:</p> <pre><code>make\nmake install\n</code></pre> </li> </ol>"},{"location":"transparent-validation/sd-wire/usage-validation/#first-use","title":"First use","text":"<p>The following procedure should be performed not only before the first use of the device, but also as the presale validation procedure!</p> <p>Hardware requirements:</p> <ul> <li>SDWire</li> <li>SD card</li> <li>DUT (Device Under Test) bootable from SD card (for example: RPI, Orange PI   etc.)</li> <li>DUT power supply</li> <li>Micro-USB --&gt; USB cable</li> <li>TS (Test Server) - in most cases personal computer with prepared environment.</li> </ul> <p>To perform first use (assuming Raspberry Pi platform as a DUT) procedure reproduce the following steps:</p> <ol> <li>Prepare environment in accordance with this    section.</li> <li>Insert SD card to the SDWire.</li> <li>Put SDWire into the DUT (Device Under Test).</li> <li>Prepare a micro USB --&gt; USB cable. It will be used to connect SDWire to TS     (Test Server).</li> <li> <p>Check whether SDWire is configured by reproducing the following steps:</p> <ul> <li> <p>run in TS terminal the following command:</p> <pre><code>dmesg -w\n</code></pre> </li> <li> <p>connect the SDWire to your machine using micro-USB --&gt; USB cable.</p> </li> <li> <p>after connecting your <code>dmesg</code> output should looks like this:</p> <pre><code>(...)\n[73278.307591] usb-storage 3-1.1:1.0: USB Mass Storage device detected\n[73278.307823] scsi host6: usb-storage 3-1.1:1.0\n[73278.384925] usb 3-1.2: new full-speed USB device number 45 using xhci_hcd\n[73278.492025] usb 3-1.2: New USB device found, idVendor=0403, idProduct=6015, bcdDevice=10.00\n[73278.492027] usb 3-1.2: New USB device strings: Mfr=1, Product=2, SerialNumber=3\n[73278.492028] usb 3-1.2: Product: FT200X USB I2C\n[73278.492029] usb 3-1.2: Manufacturer: FTDI\n[73278.492030] usb 3-1.2: SerialNumber: DB007V7V\n(...)\n</code></pre> </li> <li> <p>open new terminal window and run the following command:</p> <pre><code>sudo  sd-mux-ctrl --list\n</code></pre> <p>If output looks like below, it means that SDWire is configured and ready to use. Now, you can go to point 6 in this section.</p> <pre><code>Number of FTDI devices found: 1\nDev: 0, Manufacturer: SRPOL, Serial: sd-wire_11, Description: sd-wire\n</code></pre> <p>Otherwise, if output shows no devices (like in the example below):</p> <pre><code>Number of FTDI devices found: 0\n</code></pre> <p>you have to configure SDWire:</p> <pre><code>sudo sd-mux-ctrl --device-serial=DB007V7V --vendor=0x0403 --product=0x6015 --device-type=sd-wire --set-serial=sd-wire_11\n</code></pre> <p>where:</p> <pre><code>--device-serial=&lt;SerialNumber&gt; (from dmesg output)\n\n--vendor=0x&lt;idVendor&gt; (from dmesg output)\n\n--product=0x&lt;idProduct&gt; (from dmesg output)\n\n--set-serial=&lt;New serial device&gt;\n</code></pre> <p>After above-desribed procedure check again if SDWire is properly configured:</p> <pre><code>sudo  sd-mux-ctrl --list\n</code></pre> <p>Should output:</p> <pre><code>Number of FTDI devices found: 1\nDev: 0, Manufacturer: SRPOL, Serial: sd-wire_11, Description: sd-wire\n</code></pre> </li> </ul> </li> <li> <p>Connect SD card to the TS (Test Server):</p> <pre><code>sudo sd-mux-ctrl --device-serial=sd-wire_11 --ts\n</code></pre> </li> <li> <p>Flash the SD card using <code>bmaptool</code> or balenaEtcher.</p> <ul> <li>download the OS image for the target DUT - link for RPi image</li> <li>to do this by <code>balenaEtcher</code> go to the producer site and follow his procedure how to download and flash SD card</li> <li> <p>to do this by <code>bmaptool</code> reproduce the following steps:</p> <ul> <li> <p>install bmaptool by opening terminal and typing the following command:</p> <pre><code>sudo apt install bmap-tools\n</code></pre> </li> <li> <p>create the bmap by typing the following command:</p> <pre><code>bmaptool create /path/to/your/image &gt; /path/where/you/want/bmap/file/saved/bmapfilename.bmap\n</code></pre> </li> <li> <p>flash image to the SD card by typing the following command:</p> <pre><code>sudo bmaptool copy --bmap ~/path/where/your/bmap/file/is/located /path/where/your/image/is/located /path/to/memory/device\n</code></pre> </li> </ul> </li> </ul> </li> <li> <p>Connect SD card to the DUT using <code>sd-mux-ctrl</code>:</p> <pre><code>sudo sd-mux-ctrl --device-serial=sd-wire_11 --dut\n</code></pre> </li> <li> <p>Connect power supply to the DUT and check if it boots properly from newly    burned image.</p> </li> </ol>"},{"location":"transparent-validation/sd-wire/usage-validation/#everyday-use-scenario","title":"Everyday use scenario","text":"<ol> <li>Disconnect power supply from the DUT (Device Under Test).</li> <li>Disconnect micro SD card from the DUT.</li> <li>Connect micro SD card to the TS (Test Server) using card reader.</li> <li>Flash the SD card.</li> <li>Connect SD card to the DUT.</li> <li>Connect power supply to the DUT.</li> <li>Boot DUT from new image.</li> </ol> <p>Using SDWire there is no need to disconnect SD card from DUT.</p>"},{"location":"transparent-validation/sd-wire/usage-validation/#sdwire-with-rte-use-scenario","title":"SDWire with RTE use scenario","text":"<ol> <li>Insert SD card to the SDWire.</li> <li>Insert SDWire into the DUT and connect it to the TS with micro-USB --&gt; USB    cable.</li> <li>Connect RTE power control connectors to the DUT (RTE here is    optional but highly recommended for remote work, because it helps with    automated and remote power control of the connected device).</li> <li> <p>Check serial no. of SDWire:</p> <pre><code>sudo  sd-mux-ctrl --list\n</code></pre> <p>Output:</p> <pre><code>Number of FTDI devices found: 1\nDev: 0, Manufacturer: SRPOL, Serial: sd-wire_11, Description: sd-wire\n</code></pre> </li> <li> <p>Disconnect power supply using RTE.</p> </li> <li> <p>Connect SD card to the TS (using sd-mux-ctrl)</p> <pre><code>sudo sd-mux-ctrl --device-serial=sd-wire_11 --ts\n</code></pre> </li> <li> <p>Flash the SD card using <code>bmaptool</code> or <code>balenaEtcher</code> as described in the    First use section</p> </li> <li> <p>Connect SD card to the DUT (using sd-mux-ctrl)</p> <pre><code>sudo sd-mux-ctrl --device-serial=sd-wire_11 --dut\n</code></pre> </li> <li> <p>Connect power supply using RTE.</p> </li> <li> <p>DUT should boot from freshly burned SD card.</p> <p>Command <code>sudo sd-mux-ctrl --device-serial=sd-wire_11 --status</code> returns information if SDWire is connected to DUT or TS.</p> <pre><code>\u279c  ~ sudo sd-mux-ctrl --device-serial=sd-wire_11 --status\nSD connected to: TS\n</code></pre> <p>At the moment RTE does not support sd-mux-ctrl, so SDWire must be controlled from configured TS (Test Server).</p> </li> </ol> <p>References &amp; Projects:</p> <ul> <li>Tizen Wiki</li> <li>Ethernet camera module build \u2013 Automated flashing</li> <li>SD Wire &amp; 3d Printer Usage</li> <li>sd-mux-ctrl in Debian by Lisandro Dami\u00e1n Nicanor P\u00e9rez Meyer</li> </ul>"},{"location":"transparent-validation/sonoff/sonoff_preparation/","title":"Sonoff preparation","text":"<p>The following page is based on the EPSHome and Tasmota documentations.</p>"},{"location":"transparent-validation/sonoff/sonoff_preparation/#firmware-setup","title":"Firmware setup","text":""},{"location":"transparent-validation/sonoff/sonoff_preparation/#connecting-the-programmer","title":"Connecting the programmer","text":"<p>As for choosing the programming device, we have found that both ch341a in UART mode and a generic USB-UART adapter work seamlessly.</p> Sonoff S26 R2Sonoff S20 <p>Please attach the programmer wires as specified in this step of Tasmota documentation.</p> <ol> <li> <p>Open the Sonoff case.</p> </li> <li> <p>Check if the headers are soldered to the board. If not - 4 pin header     raster 2.54 mm should be soldered to the board in accordance with the below     images.</p> <p></p> <p></p> </li> <li> <p>Connect the USB-UART converter to the USB port.</p> <p></p> </li> </ol> <p>After connecting the wires, remember to plug in the programmer while holding down the Sonoff power button to get into flash mode:</p> <ul> <li>Disconnect the programmer from your PC</li> <li>Hold down the Sonoff power button</li> <li>Plug the programmer into the PC</li> <li>Release the power button</li> </ul>"},{"location":"transparent-validation/sonoff/sonoff_preparation/#installation-and-initial-configuration-of-the-firmware","title":"Installation and initial configuration of the firmware","text":"<p>We strongly advise using the more popular Tasmota, which has demonstrated higher stability in our office, over ESPhome. However, in case you have reasons to choose the latter, our guide provides instructions for both.</p> TasmotaESPhome <p>The most lightweight and versatile way to go about flashing Tasmota is using <code>esptool.py</code>. You can install it for your copy of Python by running</p> <pre><code>pip install esptool\n</code></pre> <ol> <li> <p>Figure out what is the device name of the programmer - run <code>dmesg | tail</code> and see what is the most recently attached <code>/dev/ttyUSB</code>, e.g. <code>/dev/ttyUSB0</code>.</p> </li> <li> <p>Backup the vendor firmware by running</p> <pre><code>esptool.py --port /dev/ttyUSB0 read_flash 0x00000 0x100000 backup.bin\n</code></pre> <p>Note: <code>/dev/ttyUSB0</code> is example device - check whether <code>USB0</code> is the correct one.</p> </li> <li> <p>Erase firmware</p> <pre><code>esptool.py --port /dev/ttyUSB0 erase_flash\n</code></pre> </li> <li> <p>Download a copy of tasmota.bin     and place it in your working directory</p> </li> <li> <p>Flash Sonoff with <code>tasmota.bin</code></p> <pre><code>esptool.py write_flash -fm dout 0x0 tasmota.bin\n</code></pre> </li> <li> <p>After the flashing has been completed, unplug the programmer from your PC and detach all wires from the Sonoff. Reassemble the Sonoff and plug it into a socket.</p> </li> <li> <p>Connect to Sonoff's temporary WiFi hotspot named after Tasmota, visit <code>http://192.168.4.1/in</code> and make a note of the MAC address to be able to assign an IP to the MAC address.</p> <p>Note: Use a normal browser so that when you log on to the new network, Sonoff shows which IP has been assigned. If you use the system pop-up with the Wi-Fi login page, it will close immediately after connecting to a new network and you will not see the new IP.</p> </li> <li> <p>Visit <code>http://192.168.4.1</code> and follow on-screen instructions to connect the Sonoff to your network of choice.</p> </li> <li> <p>The new IP address will be displayed and an attempt will be made to connect to it. Make a note of this IP and assign it to a MAC address.</p> </li> </ol> <ol> <li> <p>Create a Sonoff configuration file. The file extension should be <code>.yaml</code> and     it should contain the device configuration.</p> <p>Example configuration:</p> <pre><code>esphome:\nname: XXXXXX\nplatform: ESP8266\nboard: esp01_1m\n\nwifi:\nssid: \"XXXXXX\"\npassword: \"XXXXXX\"\n# manual_ip:\n#   # Set this to the IP of the ESP\n#   static_ip: 192.168.4.187\n#   # Set this to the IP address of the router. Often ends with .1\n#   gateway: 192.168.4.1\n#   # The subnet of the network. 255.255.255.0 works for most home networks.\n#   subnet: 255.255.255.0\npower_save_mode: none\n\n\n# # Enable fallback hotspot (captive portal) in case wifi connection fails\nap:\n    ssid: \"Sonoff1 Fallback Hotspot\"\n    password: \"123456789\"\n\n\ncaptive_portal:\n\n# Enable logging\nlogger:\n\n# Enable Home Assistant API\napi:\n\n\nota:\n\n\nbinary_sensor:\n- platform: gpio\npin:\n    number: GPIO0\n    mode: INPUT_PULLUP\n    inverted: True\nname: \"Sonoff S20 Button\"\non_press:\n    - switch.toggle: relay\n- platform: status\nname: \"Sonoff S20 Status\"\n\n\nswitch:\n- platform: gpio\nname: \"Sonoff S20 Relay\"\npin: GPIO12\nid: relay\n\noutput:\n- platform: esp8266_pwm\nid: s20_green_led\npin: GPIO13\ninverted: True\n\nlight:\n- platform: monochromatic\nname: \"Sonoff S20 Green LED\"\noutput: s20_green_led\n\nweb_server:\nport: 80\nreboot_timeout: 0s\n</code></pre> </li> <li> <p>Run the docker container in the folder containing created <code>.yaml</code>     configuration file:</p> <pre><code>docker run --rm -v \"${PWD}\":/config --device=/dev/ttyUSB0 -p 6052:6052 -it esphome/esphome\n</code></pre> </li> <li> <p>Open the browser and type into the web browser the following address:</p> <pre><code>http://localhost:6052/\n</code></pre> </li> <li> <p>Put the device in flash mode. Putting the device in this mode should be done     in accordance with the     documentation.</p> </li> <li> <p>Change the upload method from OTA to <code>/dev/ttyUSB0</code>. After this operation,     the new element with the name specified in <code>esphome:name</code> should be     displayed.</p> </li> <li> <p>Select the option <code>Upload</code>. After clicking, the program should generate     the image, compile it and upload it to the device.</p> </li> <li> <p>After successful upload replug the device to the USB (without the button     pressed) to get out of the flashing mode.</p> </li> <li> <p>Open connection to the device in the PC terminal by typing:</p> <pre><code>sudo minicom -D /dev/ttyUSB0 -o -b 115200.\n</code></pre> <p>Note: <code>/dev/ttyUSB0</code> is example device - check whether <code>USB0</code> is the correct one.</p> </li> <li> <p>Check if the device is responsible - whether network connectivity     information is generated.</p> <p>Note: The effective range for this device is only a few meters.</p> </li> <li> <p>Based on the minicom logs read the IP address assigned to the device.</p> </li> <li> <p>The device should have a statically assigned IP address based on its MAC     address - this will make it easy to find it on the network.</p> </li> </ol> <p>The device will host the website which can be used to switch the relay.</p> <p>Bear in mind that the antenna in this device is very poorly performing - effective range is only few meters</p>"},{"location":"transparent-validation/sonoff/sonoff_preparation/#controlling-the-relay-switch","title":"Controlling the relay switch","text":"<p>To switch the relay the following bash commands may be used:</p> <p><code>192.168.43.171</code> should be replaced with assigned IP. Note: You can only connect to Sonoff via an unsecured connection <code>http://</code></p> TasmotaESPhome <pre><code>curl -X POST http://192.168.43.171/cm?cmnd=Power%20TOGGLE\ncurl -X POST http://192.168.43.171/cm?cmnd=Power%20On\ncurl -X POST http://192.168.43.171/cm?cmnd=Power%20off\ncurl -X POST http://192.168.43.171/cm?cmnd=State/POWER\n</code></pre> <p>Full list of commands provided here</p> <pre><code>curl -X POST http://192.168.43.171/switch/sonoff_s20_relay/toggle\ncurl -X POST http://192.168.43.171/switch/sonoff_s20_relay/turn_off\ncurl -X POST http://192.168.43.171/switch/sonoff_s20_relay/turn_on\n</code></pre> <p>To check the state of the component use:</p> <pre><code># name @ name in /home/name/workspace/sonoff/docker [16:28:02] C:1\n$ curl  http://192.168.43.171/switch/sonoff_s20_relay\n{\"id\":\"switch-sonoff_s20_relay\",\"state\":\"OFF\",\"value\":false}\n</code></pre>"},{"location":"transparent-validation/supermicro_x11_lga1151_series/theory-of-operation/","title":"Supermicro X11 LGA1151 Series theory of operation","text":""},{"location":"transparent-validation/supermicro_x11_lga1151_series/theory-of-operation/#remote-power-control-using-ipmitool","title":"Remote power control using ipmitool","text":"<p>To remote control supermicro you can use ipmitool.</p> <pre><code>ipmitool -H [bmc_ip] -U [bmc_username] -P [bmc_password] chassis power off\nipmitool -H [bmc_ip] -U [bmc_username] -P [bmc_password] chassis power on\nipmitool -H [bmc_ip] -U [bmc_username] -P [bmc_password] chassis power cycle\nipmitool -H [bmc_ip] -U [bmc_username] -P [bmc_password] chassis power reset\n</code></pre>"},{"location":"transparent-validation/supermicro_x11_lga1151_series/theory-of-operation/#enabling-sol","title":"Enabling SOL","text":"<p>This procedure is based on this documentation.</p> <p>Follow the steps below to set up a serial connection via ssh:</p> <ol> <li> <p>Enable SOL/COM2 console in BIOS. To do that in BIOS go to the <code>Advanced</code>    section, then select <code>Serial Port Console Redirection</code> and set the    <code>SOL/COM2 Console Redirection</code> option to <code>Enabled</code> state.</p> </li> <li> <p>Edit the <code>/etc/default/grub</code> on your Linux-based OS file by adding:</p> <pre><code>linux /vmlinuz ro console=ttyS1,115200n8 earlyprintk=serial,ttyS1,115200n8\n</code></pre> <p>NOTE: If your Linux-based OS is QubesOS you should additionally remove the   <code>plymouth.ignore-serial-consoles</code> phase to enable password disk   authentication via SOL</p> </li> <li> <p>Add the following lines to the <code>~/.ssh/config</code> file on your machine:</p> <pre><code>Host &lt;IP&gt;\n    HostKeyAlgorithms = +ssh-rsa\n    PubkeyAcceptedAlgorithms = +ssh-rsa\n</code></pre> </li> <li> <p>Connect with BMC via ssh:</p> <pre><code>ssh ADMIN@&lt;IP&gt;\n</code></pre> </li> <li> <p>Then run the following command:</p> <pre><code>cd system1/sol1\n</code></pre> </li> <li> <p>And start the serial console:</p> <pre><code>start\n</code></pre> </li> </ol> <p>If you want to run the SOL console again, repeat points 4-6.</p>"},{"location":"transparent-validation/supermicro_x11_lga1151_series/theory-of-operation/#using-supermicro-update-manager-sum","title":"Using Supermicro Update Manager (SUM)","text":"<p>Supermicro Update Manager is a proprietary tool for interacting with Supermicro BMC. It can be used to change BIOS settings or mount virtual drive through CLI, among other things.</p> <p>Examples below assume that SUM was downloaded and extracted, and commands are executed from directory with <code>sum</code> executable.</p>"},{"location":"transparent-validation/supermicro_x11_lga1151_series/theory-of-operation/#mounting-floppy-image","title":"Mounting floppy image","text":"<pre><code>./sum -i [bmc_ip] -u [bmc_username] -p [bmc_password] -c MountFloppyImage --file path/to/file.img\n</code></pre>"},{"location":"transparent-validation/supermicro_x11_lga1151_series/theory-of-operation/#mounting-iso-image","title":"Mounting ISO image","text":"<p>Contrary to mounting floppy, for ISO you have to pass URL instead of path to local file. SUM supports SAMBA, HTTP and, in latest versions, HTTPS.</p> <pre><code>./sum -i [bmc_ip] -u [bmc_username] -p [bmc_password] -c MountIsoImage --image_url http://www.example.com/cd.iso\n</code></pre>"},{"location":"transparent-validation/supermicro_x11_lga1151_series/theory-of-operation/#reading-default-and-current-bios-configuration","title":"Reading default and current BIOS configuration","text":"<p>To read out default settings:</p> <pre><code>./sum -i [bmc_ip] -u [bmc_username] -p [bmc_password] -c GetDefaultBiosCfg --file bios.cfg\n</code></pre> <p>To get current settings instead, change <code>GetDefaultBiosCfg</code> to <code>GetCurrentBiosCfg</code>. In both cases, you can omit <code>--file bios.cfg</code> to print the settings to standard output.</p>"},{"location":"transparent-validation/supermicro_x11_lga1151_series/theory-of-operation/#writing-settings-to-bios","title":"Writing settings to BIOS","text":"<pre><code>./sum -i [bmc_ip] -u [bmc_username] -p [bmc_password] -c ChangeBiosCfg --file bios.cfg\n</code></pre> <p>There are additional switches to this command like <code>--reboot</code> and <code>--post_complete</code>, but they require cooperation from the running OS. These commands result in OS displaying power off (or log out) window, as if power button was pressed. After 5 minutes or so a hard reboot is initiated. This gives user a chance to save current work, but for test automation this may be unnecessary delay.</p> <p>File passed to this command can be a full configuration saved by one of the previous commands, or it can be simplified to contain just the settings that are to be changed, together with their section headers. Any option not listed in simplified file will not be changed.</p> <p>For example, to enable TXT you can use file with following content:</p> <pre><code>[Advanced|Trusted Computing]\nTXT Support=01\n</code></pre>"},{"location":"transparent-validation/twonkie/introduction/","title":"Twonkie Introduction","text":"<p>Twonkie is an open source USB Power Delivery protocol sniffer and debugging tool, created by Joachim \"dojoe\" Fenkes, based on Google's Twinkie. It can:</p> <ul> <li>Measure voltage and current on the Vbus and Vconn rails (version 2.0 can   handle EPR voltages up to 48V)</li> <li>Capture USB-PD packets for later analysis</li> <li>Pass through signals at full speed (20Gb/s lanes are verified to work)</li> <li>Send USB-PD packets</li> </ul> <p>Twonkie can be bought in 3mdeb shop.</p> <p>Links:</p> <ul> <li>Project page</li> <li>Original Twinkie   documentation</li> </ul>"},{"location":"transparent-validation/twonkie/introduction/#setup","title":"Setup","text":""},{"location":"transparent-validation/twonkie/introduction/#preparation","title":"Preparation","text":"<ul> <li>USB Micro-B cable</li> <li>Twonkie v2.0</li> <li>USB-PD power meter</li> </ul> <p>For flashing and using the Twonkie, you will need to install <code>dfu-util</code> and <code>minicom</code>. You can find them in your Linux distro's repositories:</p> Ubuntu / DebianFedoraArch <pre><code>sudo apt install dfu-util minicom\n</code></pre> <pre><code>sudo dnf install dfu-util minicom\n</code></pre> <pre><code>sudo pacman -S dfu-util minicom\n</code></pre>"},{"location":"transparent-validation/twonkie/introduction/#flashing","title":"Flashing","text":"<p>Steps to flash firmware to the Twonkie:</p> <ol> <li>Download the latest firmware from the project's release page    In our case, for Twonkie v2.0</li> <li>While holding the SW1 button on the Twonkie, connect it to your computer    using a USB micro-B cable</li> <li> <p>Verify in <code>lsusb</code> that the device has booted in DFU mode:</p> <pre><code>lsusb | grep 0483:df11\nBus 003 Device 083: ID 0483:df11 STMicroelectronics STM Device in DFU Mode\n</code></pre> <p>If not detected, the button was probably not pressed.</p> </li> <li> <p>Navigate to the location where you downloaded the firmware</p> </li> <li> <p>Flash the firmware:</p> <p>The command may take a long time to complete (~30 minutes). Do not be alarmed if progress appears to stop. The percentage counting should start after ~5 minutes.</p> <pre><code>sudo dfu-util -a 0 -s 0x08000000 -D ~/Downloads/twonkiev2-20230611.bin\n</code></pre> <p>If you see <code>DFU state(10) = dfuERROR, status(10) = Device's firmware is</code> <code>corrupt. It cannot return to run-time (non-DFU) operations</code> this is a status message from STM describing why DFU mode was entered. Flashing is probably working properly</p> </li> <li> <p>Disconnect and reconnect the newly flashed Twonkie to reboot it into the    firmware</p> </li> <li> <p>Verify in <code>lsusb</code> that the device has booted into firmware:</p> <pre><code>lsusb | grep 18d1:500a\nBus 003 Device 084: ID 18d1:500a Google Inc. Twinkie\n</code></pre> </li> </ol>"},{"location":"transparent-validation/twonkie/introduction/#testing","title":"Testing","text":""},{"location":"transparent-validation/twonkie/introduction/#sniffing-a-pd-negotiation","title":"Sniffing a PD negotiation","text":"<ol> <li> <p>Open minicom on Twonkie's console:</p> <pre><code>sudo minicom -D /dev/ttyUSB0\n</code></pre> </li> <li> <p>Type in <code>tw trace on</code> to start logging</p> </li> </ol> <p>LEDs stops lighting</p> <ol> <li>Connect a twonkie between a USB-PD power supply and a USB-PD power sink </li> <li>Verify that the device is charging and logs appear on the screen</li> </ol> <p>Example output:</p> <pre><code>&gt; tw trace on\n33.754913 SRC/0 [41a1]SRCCAP 5000mV/3000mA 9000mV/3000mA 15000mV/3000mA 20000mV/3250mA\n33.906189 SRC/0 [41a1]SRCCAP 5000mV/3000mA 9000mV/3000mA 15000mV/3000mA 20000mV/3250mA\n34.057128 SRC/0 [41a1]SRCCAP 5000mV/3000mA 9000mV/3000mA 15000mV/3000mA 20000mV/3250mA\n34.208091 SRC/0 [41a1]SRCCAP 5000mV/3000mA 9000mV/3000mA 15000mV/3000mA 20000mV/3250mA\n34.359253 SRC/0 [41a1]SRCCAP 5000mV/3000mA 9000mV/3000mA 15000mV/3000mA 20000mV/3250mA\n34.360608 SNK/0 [0041]GOODCRC\n34.364597 SNK/0 [1082]REQUEST{4} 43851545\n34.365421 SRC/0 [0121]GOODCRC\n34.367411 SRC/1 [03a3]ACCEPT\n34.368118 SNK/1 [0241]GOODCRC\n34.593451 SRC/2 [05a6]PSRDY\n34.594166 SNK/2 [0441]GOODCRC\n34.595642 SRC/3 [17af]VDM Vff00:DISCSVID,INI:ff00a002\n34.597310 SRC/3 [17af]VDM Vff00:DISCSVID,INI:ff00a002\n34.598213 SNK/3 [0641]GOODCRC\n34.602898 SNK/1 [328f]VDM Vff00:DISCSVID,ACK:ff00a042 8087ff01 00000000\n34.603946 SRC/1 [0321]GOODCRC\n</code></pre>"},{"location":"transparent-validation/twonkie/introduction/#measuring-voltage-and-current","title":"Measuring voltage and current","text":"<ol> <li> <p>Open minicom on Twonkie's console:</p> <pre><code>sudo minicom -D /dev/ttyUSB0\n</code></pre> </li> <li> <p>Connect a twonkie between a USB-PD power supply and a USB-PD power sink </p> </li> <li>Type in <code>tw vbus</code> to display the voltage and current measurement</li> </ol> <p>Example output:</p> <pre><code>&gt; tw vbus\nVBUS = 20112 mV ; -1274 mA\n</code></pre>"},{"location":"transparent-validation/twonkie/introduction/#power-sink","title":"Power sink","text":"<ol> <li> <p>Open minicom on Twonkie's console:</p> <pre><code>sudo minicom -D /dev/ttyUSB0\n</code></pre> </li> <li> <p>Connect a twonkie between a USB-PD power supply and a USB-PD power meter</p> </li> <li>Type in <code>tw sink</code> to enable sink mode - the firmware will reboot at this    point</li> <li>Type in <code>pd 0 dev 20</code> to set voltage limit to 20V</li> <li>Verify that the power meter turns on and displays 20V measured at the USB-C    plug</li> <li> <p>Verify that the RGB LED has changed its color to red</p> <ul> <li>For the 5V limit the LEDs are GREEN.</li> <li>For the 9V, 12V, 15V limit the LEDs are BLUE.</li> <li>For the 20V limit the LEDs are RED.</li> </ul> </li> </ol> <p>Example of a successful test:</p> <p></p>"},{"location":"unified/clevo/post-install/","title":"Post-installation setup","text":"<p>This document contains extra steps to perform after installing Dasharo in order to enable full functionality of your device.</p> <p>Select your operating system to view applicable instructions:</p> UbuntuFedoraQubes OSWindows 11"},{"location":"unified/clevo/post-install/#touchpad-hotkey-enablement","title":"Touchpad hotkey enablement","text":"<p>The touchpad hotkey may need extra setup to function correctly under Linux. If the key isn't working, execute the following command to apply a fix:</p> <pre><code>curl -sSf https://raw.githubusercontent.com/Dasharo/dasharo-tools/main/clevo/touchpad-fixup | sudo sh\n</code></pre> <p>After executing these steps, it should be possible to enable and disable the touchpad using the touchpad hotkey (Fn+F1) on the keyboard when using GNOME.</p>"},{"location":"unified/clevo/post-install/#touchpad-multi-touch-support","title":"Touchpad multi-touch support","text":"<p>On NS7x an additional fix is necessary to enable multi-touch on Linux. Create a file <code>/etc/modprobe.d/blacklist-psmouse.conf</code> with the following contents:</p> <pre><code>blacklist psmouse\n</code></pre> <p>and then run the following commands:</p> <pre><code>sudo depmod -a\nsudo update-initramfs -u\n</code></pre> <p>and reboot to use the new kernel.</p>"},{"location":"unified/clevo/post-install/#nvidia-drivers","title":"NVIDIA drivers","text":"<p>If your device comes with NVIDIA graphics, proprietary NVIDIA drivers are recommended for optimal performance and battery life.</p> <ol> <li> <p>Install drivers according to    instructions provided by Ubuntu</p> </li> <li> <p>Reboot the device to apply changes</p> </li> <li> <p>(Optional) If you're suffering from poor battery life caused by the GPU    not turning off, ensure On-Demand mode is enabled in NVIDIA Control    Panel:</p> </li> </ol> <p></p> <ol> <li> <p>(Optional) If the GPU is still not powering down, run the following    command, and then reboot the laptop:</p> <pre><code>echo options nvidia \"NVreg_DynamicPowerManagement=0x02\" | sudo tee /etc/modprobe.d/nvidia_rtd3.conf\n</code></pre> </li> </ol>"},{"location":"unified/clevo/post-install/#suspend-fix-for-sata-disks","title":"Suspend fix for SATA disks","text":"<p>Only affects laptops with M.2 SATA disks experiencing sleep issues (the power LED not blinking while the laptop is suspended)</p> <p>Windows and certain Linux distros such as Ubuntu do not enable the necessary power saving tweaks to enable sleep mode while a SATA disk is installed.</p> <p>Execute fixup script:</p> <pre><code>curl -sSf https://raw.githubusercontent.com/Dasharo/dasharo-tools/main/clevo/sata-suspend-fixup | sudo sh\n</code></pre>"},{"location":"unified/clevo/post-install/#enable-hibernation","title":"Enable hibernation","text":"<p>If you wish to use hibernation (S4) on your laptop, please follow this guide . Then, execute the following command:</p> <pre><code>echo 259:3 | sudo tee /sys/power/resume\n</code></pre> <p>It might also be necessary to create or increase your current swap partition/file - it should be slightly larger than the size of your RAM. In  such case, please refer to the instructions provided here. In case of creating a swap partition, the fstab file should look a little different.</p>"},{"location":"unified/clevo/post-install/#touchpad-hotkey-enablement_1","title":"Touchpad hotkey enablement","text":"<p>The touchpad hotkey may need extra setup to function correctly under Linux. If the key isn't working, execute the following command to apply a fix:</p> <pre><code>curl -sSf https://raw.githubusercontent.com/Dasharo/dasharo-tools/main/clevo/touchpad-fixup | sudo sh\n</code></pre> <p>After executing these steps, it should be possible to enable and disable the touchpad using the touchpad hotkey (Fn+F1) on the keyboard when using GNOME.</p>"},{"location":"unified/clevo/post-install/#touchpad-multi-touch-support_1","title":"Touchpad multi-touch support","text":"<p>On NS7x an additional fix is necessary to enable multi-touch on Linux. Create a file <code>/etc/modprobe.d/blacklist-psmouse.conf</code> with the following contents:</p> <pre><code>blacklist psmouse\n</code></pre> <p>and then run the following commands:</p> <pre><code>sudo depmod -a\nsudo update-initramfs -u\n</code></pre> <p>and reboot to use the new kernel.</p>"},{"location":"unified/clevo/post-install/#nvidia-drivers_1","title":"NVIDIA drivers","text":"<p>If your device comes with NVIDIA graphics, proprietary NVIDIA drivers are recommended for optimal performance and battery life.</p> <ol> <li> <p>Install drivers according to    instructions by RPM fusion</p> </li> <li> <p>Reboot the device to apply changes</p> </li> <li> <p>(Optional) If you're suffering from poor battery life caused by the GPU    not turning off, ensure On-Demand mode is enabled in NVIDIA Control    Panel:</p> </li> </ol> <p></p> <ol> <li> <p>(Optional) If the GPU is still not powering down, run the following    command, and then reboot the laptop:</p> <pre><code>echo options nvidia \"NVreg_DynamicPowerManagement=0x02\" | sudo tee /etc/modprobe.d/nvidia_rtd3.conf\n</code></pre> </li> </ol>"},{"location":"unified/clevo/post-install/#suspend-fix-for-sata-disks_1","title":"Suspend fix for SATA disks","text":"<p>Only affects laptops with M.2 SATA disks experiencing sleep issues (the power LED not blinking while the laptop is suspended)</p> <p>Windows and certain Linux distros such as Ubuntu do not enable the necessary power saving tweaks to enable sleep mode while a SATA disk is installed.</p> <p>Execute fixup script:</p> <pre><code>curl -sSf https://raw.githubusercontent.com/Dasharo/dasharo-tools/main/clevo/sata-suspend-fixup | sudo sh\n</code></pre>"},{"location":"unified/clevo/post-install/#enable-hibernation_1","title":"Enable hibernation","text":"<p>If you wish to use hibernation (S4) on your laptop, please follow this guide . It might also be necessary to create or increase your current swap partition/file - it should be slightly larger than the size of your RAM. In  such case, please refer to the instructions provided here. In case of creating a swap partition, the fstab file should look a little different.</p>"},{"location":"unified/clevo/post-install/#touchpad-hotkey-enablement_2","title":"Touchpad hotkey enablement","text":"<p>The touchpad hotkey may need extra setup to function correctly under Qubes. If the key isn't working, follow the steps below:</p> <ol> <li> <p>Open dom0 terminal window</p> </li> <li> <p>Open /etc/udev/hwdb.d/60-keyboard.hwdb in your preferred text editor,    e.g. nano:</p> <pre><code>sudo nano /etc/udev/hwdb.d/60-keyboard.hwdb\n</code></pre> </li> <li> <p>Type the following into the file:</p> <p>Note</p> <p>The following applies only to NV4x 12th Gen and V560TU, which are currently the only officially Qubes-certified models. If you use Qubes on any other model, you may need to adjust the SMBIOS product name in the section below.</p> <pre><code>evdev:atkbd:dmi:bvn*:bvr*:svnNotebook:pnNV4xPZ:*\nevdev:atkbd:dmi:bvn*:bvr*:svnNotebook:pnV54x_6x_TU:*\n KEYBOARD_KEY_f7=touchpad_toggle\n KEYBOARD_KEY_f8=touchpad_toggle\n KEYBOARD_KEY_81=micmute\n</code></pre> </li> <li> <p>Execute the following command:</p> <pre><code>sudo systemd-hwdb update\nsudo udevadm trigger\n</code></pre> </li> <li> <p>Reboot to apply changes</p> </li> </ol> <p>After executing these steps, the hotkey should generate the correct keycode. You may need to map it to the correct action in Xfce settings to ensure it disables the touchpad.</p>"},{"location":"unified/clevo/post-install/#updates-and-drivers-installation","title":"Updates and drivers installation","text":"<p>Several features on Windows 11 (i. e. suspending the device) may not work or work unexpectedly without installing all of the updates and drivers.</p> Info <p>On NUC BOX, to provide basic network connectivity, Intel ethernet driver must be installed. Download link: Intel\u00ae Network Adapter Driver for Microsoft Windows 11 After successful driver update on both ethernet ports, Windows Update should be able to install correct Wi-Fi diver.</p> <p>To install all of them, log into the system, connect the device to the mains and Internet, then follow the steps below:</p> <ol> <li>Press the <code>Windows</code> button on the keypad.</li> <li>Type <code>Windows Update Settings</code> in the search and press <code>Enter</code>.</li> <li>Select the <code>Check for updates</code> bar to start installing available updates and     drivers. During this process previously selected bar might be changed to     <code>Restart now</code> or <code>Retry</code>, so click them if something hasn't been installed     yet, something has gone wrong or a restart is just required. The entire     process may take up to 30 minutes.</li> <li>Select the <code>Advanced options</code> option in the <code>Windows Update Settings</code> window.</li> <li>Locate the <code>Optional updates</code> option and click on it.</li> <li>Select all displayed updates and drivers.</li> <li>Select the <code>Download &amp; Install</code> bar to start installing additional updates     and drivers. During this process previously selected bar might be changed     to <code>Restart now</code> or <code>Retry</code>, so click them if something hasn't been     installed yet, something has gone wrong or a restart is just required.     The entire process may take up to 30 minutes.</li> <li>Repeat all steps until all updates have been installed.</li> </ol>"},{"location":"unified/clevo/post-install/#suspend-fix-for-sata-disks_2","title":"Suspend fix for SATA disks","text":"<p>Only affects laptops with M.2 SATA disks experiencing sleep issues (the power LED not blinking while the laptop is suspended)</p> <p>Windows and certain Linux distros such as Ubuntu do not enable the necessary power saving tweaks to enable sleep mode while a SATA disk is installed.</p> <ol> <li>Download the script: link</li> <li>Double click on the script to install the tweak</li> </ol>"},{"location":"unified/clevo/post-install/#unrecognized-usb-controller-device-in-device-manager","title":"Unrecognized USB Controller device in device manager","text":"<p>Windows Update may sometimes fail to automatically install drivers for the Thunderbolt DMA controller device. The driver may be installed manually from the Windows Update Catalog:</p> <ol> <li>Download the update cabinet: Windows Update link</li> <li>Right-click on the cabinet and select <code>Install</code> to install the driver</li> </ol> <p>After the update, Thunderbolt Control Center will become available and the warning in device manager will disappear.</p>"},{"location":"unified/clevo/post-install/#enable-hibernation_2","title":"Enable hibernation","text":"<p>If you wish to use hibernation (S4) on your laptop, run these commands in PowerShell as an Administrator:</p> <pre><code>powercfg /h on\npowercfg /h /type full\n</code></pre> <p>Make sure that you have enough free space on the disk to fit the whole RAM. Otherwise Windows won't be able to create a swap file and hibernate.</p>"},{"location":"unified/msi/building-manual/","title":"Building manual","text":"Dasharo (UEFI)Dasharo (coreboot + Heads)"},{"location":"unified/msi/building-manual/#intro","title":"Intro","text":"<p>This documents describes the procedure for compiling Dasharo firmware compatible with MSI PRO Z690-A and MSI PRO Z790-P.</p>"},{"location":"unified/msi/building-manual/#requirements","title":"Requirements","text":"<ul> <li><code>Ubuntu 20.04/21.04/22.04</code> as a host OS was tested</li> <li>Internet connection</li> <li>Docker installed<ul> <li>follow Install Docker Engine on Ubuntu</li> <li>follow Post-installation steps for Linux</li> </ul> </li> <li>Git, wget, unzip installed</li> </ul> <pre><code>sudo apt install git unzip wget\n</code></pre> <ul> <li>UEFIExtract installed<ul> <li>this tool is used in the <code>build.sh</code> script to extract CPU microcode from   the original MSI firmware</li> </ul> </li> </ul> <pre><code>sudo apt install wget\nwget https://github.com/LongSoft/UEFITool/releases/download/A59/UEFIExtract_NE_A59_linux_x86_64.zip\nunzip UEFIExtract_NE_A59_linux_x86_64.zip\nsudo cp ./UEFIExtract /usr/local/bin\n</code></pre>"},{"location":"unified/msi/building-manual/#procedure","title":"Procedure","text":"<p>Obtain Dasharo source code:</p> PRO Z690-A (WIFI) DDR4PRO Z690-A (WIFI)PRO Z790-P (WIFI) DDR4PRO Z790-P (WIFI) <p>Replace the <code>REVISION</code> with one of the:</p> <ul> <li><code>msi_ms7d25_vVERSION</code> tag for the given release <code>VERSION</code>   (e.g. <code>msi_ms7d25_v1.1.3</code>), RECOMMENDED</li> <li><code>dasharo</code> branch for a development version with unreleased changes past   most recent release version</li> <li><code>msi_ms7d25/release</code> branch for the release versions up to v1.1.2</li> </ul> <p>Replace the <code>REVISION</code> with one of the:</p> <ul> <li><code>msi_ms7d25_vVERSION</code> tag for the given release <code>VERSION</code>   (e.g. <code>msi_ms7d25_v1.1.3</code>), RECOMMENDED</li> <li><code>dasharo</code> branch for a development version with unreleased changes past   most recent release version</li> <li><code>msi_ms7d25/release</code> branch for the release versions up to v1.1.2</li> </ul> <p>Replace the <code>REVISION</code> with one of the:</p> <ul> <li><code>msi_ms7e06_vVERSION</code> tag for the given release <code>VERSION</code>   (e.g. <code>msi_ms7e06_v0.9.1</code>), RECOMMENDED</li> <li><code>dasharo</code> branch for a development version with unreleased changes past   most recent release version</li> <li><code>msi_ms7d25/release</code> branch for the release versions up to v0.9.0</li> </ul> <p>Replace the <code>REVISION</code> with one of the:</p> <ul> <li><code>msi_ms7e06_vVERSION</code> tag for the given release <code>VERSION</code>   (e.g. <code>msi_ms7e06_v0.9.1</code>), RECOMMENDED</li> <li><code>dasharo</code> branch for a development version with unreleased changes past   most recent release version</li> <li><code>msi_ms7d25/release</code> branch for the release versions up to v0.9.0</li> </ul> <pre><code>git clone https://github.com/Dasharo/coreboot.git -b REVISION\ncd coreboot\n</code></pre> <p>Start the build process:</p> PRO Z690-A (WIFI) DDR4PRO Z690-A (WIFI)PRO Z790-P (WIFI) DDR4PRO Z790-P (WIFI) <p>For v1.1.1 and older:</p> <pre><code>./build.sh ddr4\n</code></pre> <p>For v1.1.2 and newer:</p> <pre><code>./build.sh z690a_ddr4\n</code></pre> <p>The resulting Dasharo firmware image will be placed at <code>$PWD/msi_ms7d25_VERSION_ddr4.rom</code>.</p> <p>For v1.1.1 and older:</p> <pre><code>./build.sh ddr5\n</code></pre> <p>For v1.1.2 and newer:</p> <pre><code>./build.sh z690a_ddr5\n</code></pre> <p>The resulting Dasharo firmware image will be placed at <code>$PWD/msi_ms7d25_VERSION_ddr5.rom</code>.</p> <pre><code>./build.sh z790p_ddr4\n</code></pre> <p>The resulting Dasharo firmware image will be placed at <code>$PWD/msi_ms7e06_VERSION_ddr4.rom</code>.</p> <pre><code>./build.sh z790p_ddr5\n</code></pre> <p>The resulting Dasharo firmware image will be placed at <code>$PWD/msi_ms7e06_VERSION_ddr4.rom</code>.</p>"},{"location":"unified/msi/building-manual/#intro_1","title":"Intro","text":"<p>This section presents the crucial steps required to build the Dasharo Heads firmware. For more information, you may also refer to the official Heads building documentation.</p>"},{"location":"unified/msi/building-manual/#requirements_1","title":"Requirements","text":"<p>This guide was verified on Ubuntu 22.04. In practice, any Linux distribution with Docker support should be enough to complete it.</p> <p>Make sure that you have following packages installed:</p> <ul> <li>Docker<ul> <li>follow Install Docker Engine on Ubuntu</li> <li>follow Post-installation steps for Linux</li> </ul> </li> <li> <p>Git</p> <pre><code>sudo apt -y install git\n</code></pre> </li> </ul>"},{"location":"unified/msi/building-manual/#building","title":"Building","text":"<ol> <li> <p>Clone Dasharo Heads repository</p> <pre><code> git clone https://github.com/Dasharo/heads.git\n</code></pre> </li> <li> <p>Navigate to the source code directory and checkout to the desired revision:</p> </li> </ol> PRO Z690-APRO Z790-P <pre><code>cd heads\ngit checkout msi_ms7d25_v0.9.0\n</code></pre> <pre><code>cd heads\ngit checkout msi_ms7e06_v0.9.0\n</code></pre> <ol> <li> <p>Start docker container:</p> <pre><code>docker run --rm -it -v $PWD:$PWD -w $PWD \\\n  3mdeb/heads-docker:3.0.0 /bin/bash\n</code></pre> </li> <li> <p>Inside of the container, start the build process:</p> </li> </ol> PRO Z690-A (WIFI) DDR4PRO Z690-A (WIFI)PRO Z790-P (WIFI) DDR4PRO Z790-P (WIFI) <pre><code>BOARD=msi_z690a_ddr4 make\n</code></pre> <p>This will produce a Dasharo binary placed in <code>build/x86/msi_z690a_ddr4/dasharo-msi_z690a_ddr4-*.rom</code>.</p> <pre><code>BOARD=msi_z690a_ddr5 make\n</code></pre> <p>This will produce a Dasharo binary placed in <code>build/x86/msi_z690a_ddr5/dasharo-msi_z690a_ddr5-*.rom</code>.</p> <pre><code>BOARD=msi_z790p_ddr4 make\n</code></pre> <p>This will produce a Dasharo binary placed in <code>build/x86/msi_z790p_ddr4/dasharo-msi_z790p_ddr4-*.rom</code>.</p> <pre><code>BOARD=msi_z790p_ddr5 make\n</code></pre> <p>This will produce a Dasharo binary placed in <code>build/x86/msi_z790p_ddr5/dasharo-msi_z790p_ddr5-*.rom</code>.</p>"},{"location":"unified/msi/development/","title":"Dasharo compatible with MSI PRO Z690-A and PRO Z790-P - development","text":""},{"location":"unified/msi/development/#intro","title":"Intro","text":"<p>This document gather various notes and documentation useful for development of Dasharo compatible with the MSI PRO Z690-A and PRO Z790-P platform.</p>"},{"location":"unified/msi/development/#hardware-connection","title":"Hardware connection","text":""},{"location":"unified/msi/development/#requirements","title":"Requirements","text":"<ul> <li>peripherals listed in the:<ul> <li>PRO Z690-A Hardware Configuration Matrix</li> <li>PRO Z790-P Hardware Configuration Matrix</li> </ul> </li> <li>RTE</li> <li>Sonoff S20 Smart Plug    with custom firmware</li> </ul>"},{"location":"unified/msi/development/#serial-debug","title":"Serial debug","text":"<ul> <li>Attach the jumpers in <code>J16</code> header to enable header <code>J18</code> according to the   table below:</li> </ul> Jumper position (TX) Jumper position (RX) EXT + COM EXT + COM <ul> <li>Connect signals from the <code>J18</code> header to serial receiver:</li> </ul> RTE Msi Z690 J18 pin 1 (GND) JBD1 pin 1 (pin closer to JBAT1) J18 pin 2 (RX) JBD1 pin 2 (pin further from JBAT1) <p>Pins on JBD1 are not described in the documentation. They have been discovered experimentally. Pay attention to the connections.</p> <p>Please also note that this is uni-directional communication. We can gether logs from booting, but we cannot provide input to the platform at the same time.</p> <p></p>"},{"location":"unified/msi/development/#spi","title":"SPI","text":"<ul> <li>For external flashing, connect <code>RTE</code> with motherboard according to the table   below:</li> </ul> RTE SPI header MSI Z690-A/Z790-P J7 pin 1 (Vcc) JTPM1 pin 1 (SPI Power) J7 pin 2 (GND) JTPM1 pin 7 (GND) J7 pin 3 (CS) JTPM1 pin 5 (RESERVED / BIOS SPI CS pin) J7 pin 4 (SCLK) JTPM1 pin 6 (SPI Clock) J7 pin 5 (MISO) JTPM1 pin 3 (MISO) J7 pin 6 (MOSI) JTPM1 pin 4 (MOSI) <p>JTPM1 is a 2mm pitch header, you will need 2mm to 2.54mm female-female dupont wires to connect to RTE.</p> <p>The JTPM1 pin5 is actually BIOS SPI CS pin (marked as reserved in the board manual).</p> <p></p> <ul> <li>Example connection:</li> </ul> <p></p> <p></p>"},{"location":"unified/msi/development/#power-control","title":"Power control","text":""},{"location":"unified/msi/development/#power-buttons-control","title":"Power buttons control","text":"<ul> <li> <p>Connect 12V/4A power supply to RTE J13 connector to power on RTE</p> </li> <li> <p>Connect power control pins from mainboard to RTE according to the table below:</p> </li> </ul> <p>JFP1 is located in the corner of the mainbaord, near SATA interface ports</p> RTE MSI Z690-A/Z790-P J11 pin 9 JFP1 pin 6 (PWR_ON) J11 pin 8 JFP1 pin 7 (RST) J15 pin 1 (GND) JFP1 pin 5 (GND)"},{"location":"unified/msi/development/#power-supply-control","title":"Power supply control","text":"<p>Connect <code>SeaSonic FOCUS Plus Platinum</code> power supply unit to the mains via <code>Sonoff S20 Smart Plug</code>. To power control via RTE, <code>Sonoff</code> smart plug</p>"},{"location":"unified/msi/faq/","title":"FAQ","text":""},{"location":"unified/msi/faq/#why-msi-z690-a-wifi-ddr4-was-chosen-for-dasharo","title":"Why MSI Z690-A (WIFI) (DDR4) was chosen for Dasharo ?","text":"<p>Please read this extensive analysis contributed to Intel Reddit.</p>"},{"location":"unified/msi/faq/#why-do-you-use-the-nomenclature-msi-z690-a-wifi-ddr4","title":"Why do you use the nomenclature <code>MSI Z690-A (WIFI) (DDR4)</code>?","text":"<p>This nomenclature is the result of the naming used by the producer. <code>MSI PRO Z690-A</code> is the nomenclature used for naming the platform with DDR5 memory slots. If the platform is also equipped with the WiFi module, its naming nomenclature will additionally include the phrase <code>WIFI</code>. If instead of DDR5 memory slots, the platform is equipped with DDR4 memory slots, and its naming nomenclature will additionally include the phrase <code>DDR4</code>.</p>"},{"location":"unified/msi/faq/#will-this-work-on-my-msi-pro-z690-a-model-with-ddr5-support","title":"Will this work on my <code>MSI PRO Z690-A</code> (model with DDR5 support)?","text":"<p>Yes, during test procedures the Dasharo firmware work has been confirmed for the DDR5 platform without WIFI.</p>"},{"location":"unified/msi/faq/#will-this-work-on-my-msi-pro-z690-a-ddr4","title":"Will this work on my <code>MSI PRO Z690-A DDR4</code>?","text":"<p>Yes, during test procedures the Dasharo firmware work has been confirmed for the DDR4 WIFI platform. In turn, Dasharo working correctness on <code>MSI PRO Z690-A DDR4</code> has been confirmed by the community.</p>"},{"location":"unified/msi/faq/#can-i-safely-test-this-on-my-board","title":"Can I safely test this on my board?","text":"<p>Thanks to the introduction of FlashBIOS, it's now safe to experiment with this on your board. If any issues arise, you can effortlessly revert to the stock firmware without requiring special equipment. However, if you're unfamiliar with recovery processes and feel apprehensive, please contact the Dasharo Matrix Community for assistance. We're continuously working to simplify the recovery process, and our recommendations may be updated accordingly.</p>"},{"location":"unified/msi/faq/#can-i-destroy-my-hardware-by-installing-this-firmware","title":"Can I destroy my hardware by installing this firmware?","text":"<p>We give no warranty, although it is highly unlikely, provided that you use the supported board model and follow the Initial Deployment. In the worst scenario, you might \"brick\" the board, rendering it unbootable. It can be fixed by following the recovery procedure. In case of concerns, we invite you to buy the equipment directly in our online store with a subscription service, under which we perform the Dasharo installation with the latest release, and offer full support through invite-only Matrix channel.</p>"},{"location":"unified/msi/faq/#how-can-i-know-if-the-board-is-bricked","title":"How can I know if the board is \"bricked\"?","text":"<p>In such a case, you would get stuck with a black screen on the display. There will be no beeping sounds from the buzzer as well. The only way to get some information on what's going on in that state is to use the Serial header to read out error information.</p>"},{"location":"unified/msi/faq/#what-can-be-the-reason-for-a-board-bricking","title":"What can be the reason for a board \"bricking\"?","text":"<p>The most common reason would be the fact that your DDR memory modules are not initialized properly.</p> <p>The other reason might be improper or interrupted installation. Please make sure to follow the Initial Deployment Manual correctly.</p>"},{"location":"unified/msi/faq/#how-can-i-unbrick-my-board","title":"How can I \"unbrick\" my board?","text":"<p>Please follow the recovery procedure.</p>"},{"location":"unified/msi/faq/#which-cpus-are-supported","title":"Which CPUs are supported?","text":"<p>We can say the \"supported\" one is the one that has been tested during Validation Procedure or have been tested by the community.</p> <p>The list of all supported CPUs is available in the CPU HCL documentation.</p> <p>In practice, any Alder Lake-S Processor should work.</p>"},{"location":"unified/msi/faq/#is-overclocking-possible","title":"Is overclocking possible?","text":"<p>With Dasharo, overclocking via BIOS setup is not possible. Overclocking capabilities are essentially limited to what Intel XTU can achieve on Windows. Additionally, RAM XMP may pose challenges, as FSP lacks the flexibility to properly tune the RAM training parameters.</p>"},{"location":"unified/msi/faq/#which-memory-modules-are-supported","title":"Which memory modules are supported?","text":"<p>We can say the \"supported\" one is the one that has been tested during Validation Procedure or have been tested by the community.</p> <p>The list of all supported memory modules is available in the Memory HCL documentation.</p>"},{"location":"unified/msi/faq/#what-is-the-memory-profile","title":"What is the memory profile?","text":"<p>Dasharo firmware currently picks the highest standard SPD Profile, with no support for XMP ones. This means that the Kingston modules, it is actually working at 2400 MHz, but it is expected to work all the way to 3200 MHz.</p>"},{"location":"unified/msi/faq/#why-my-gpu-doesnt-work-on-msi-pro-z690-a-ddr4-wifi","title":"Why my GPU doesn't work on <code>MSI PRO Z690-A (DDR4) (WIFI)</code>?","text":"<p>Due to the fact, that there's no possibility to insert all available GPU drivers into the firmware, the solution in the form of the <code>Option ROM</code> is in use. <code>Option ROMs</code> are the drivers flashed in the GPUs' non-volatile memory. These drivers can be divided into <code>Legacy Option ROMs</code> and <code>EFI Option ROMs</code>.</p> <p><code>Legacy Option ROMs</code> are only supported on legacy BIOS, such as SeaBIOS. Legacy BIOS checks the availability of <code>Option ROM</code> and if its signature matches, it executes its entry point. This option ROM initializes the graphics. The only way to support <code>Option ROM</code> in UEFI is through CSM, which we do not have implemented.</p> <p><code>EFI Option ROMs</code> are nothing more than EFI drivers which have the same form as the UEFI files (PE format). UEFI firmware scans the <code>Option ROM</code> space of the graphics card and if it finds a potential <code>EFI Option ROM</code> with a PE signature, it executes the file. This option ROM initializes the graphics.</p> <p>Considering the above, the firmware might have a problem with initializing older graphics cards - UEFI standard appeared about 15 years ago.</p> <p>The problem might also be caused by an enabled <code>Secure boot</code> - because there is no certainty that <code>EFI Option ROM</code> is signed correctly.</p>"},{"location":"unified/msi/faq/#which-gpus-are-supported","title":"Which GPUs are supported?","text":"<p>We can say the \"supported\" one is the one that has been tested during Validation Procedure or have been tested by the community.</p> <p>The list of all supported memory modules is available in the GPU HCL documentation.</p>"},{"location":"unified/msi/faq/#what-does-the-obligatory-dasharo-subscription-include","title":"What does the obligatory Dasharo Subscription include?","text":"<p>The Dasharo Subscription includes:</p> <ul> <li>The latest Dasharo Pro Package release installed by the Dasharo Team</li> <li>Dasharo Updates \u2013 The number of updates depends on the number of Dasharo   Subscriptions sold and the availability of other funding (e.g., NLNet,   corporate sponsors, community   donations)</li> <li>Priority support for Dasharo Subscribers through invite-only Matrix channel</li> <li>Influence on Dasharo features roadmap \u2013 you can have a real impact on   Dasharo development by direct access with the developers or premium voting   on GitHub. You will gain access to the dedicated channels on the matrix   communicator. If you wish to share your GitHub nickname with us, the votes   cast for the features that you would like to have implemented in the future   will be treated with priority, i.e. they will have a higher priority than   the votes of non-subscribers.</li> <li>By buying this product, you support open-source firmware and Dasharo   distribution.</li> </ul>"},{"location":"unified/msi/faq/#what-does-the-warranty-condition-no-signs-of-customer-interference-mean","title":"What does the warranty condition \"No signs of customer interference...\" mean?","text":"<p>Full question: \"In the Disclaimer, you wrote that one of the warranty conditions is: \"No signs of customer interference with the platform or firmware.\" How would a user modify firmware without losing the warranty? Being open source to be easy to modify, then saying \"don't touch this\" seems contradictory. How would you add an exception?\"</p> <p>Playing with firmware parameters can result in damaging the mainboard. Such action excludes the acceptance of the return.</p> <p>You can improve Dasharo by contributing, and when it passes the Dasharo Certification Program, can we release it in the next version.</p>"},{"location":"unified/msi/faq/#how-should-i-inspect-the-package-for-any-signs-of-potential-damage-upon-delivery","title":"How should I inspect the package for any signs of potential damage upon delivery?","text":"<p>Inspecting Your Shipment: Before the shipment we take pictures of both the hardware and packaging. After it leaves our office we do not have any control over it. It is the consignee\u2019s responsibility to inspect their shipment for damages before the Freight driver leaves the delivery location.</p> <p>Should the packaging display any signs of damage, open it immediately to check the contents, requesting the driver's presence to inspect together. If your shipment has been damaged, document the damages on the delivery receipt in detail and have it signed by the driver. If possible, please take pictures of the damages to the box and the damages to the item.</p> <p>Please notify us immediately so that we can initiate a damage claim with Freight. Failure to inspect for damages at the time of delivery could result in Freight voiding any subsequent damage claims.</p>"},{"location":"unified/msi/faq/#dasharo-corebootheads-variant-not-supported-by-dasharo","title":"Dasharo (coreboot+Heads) variant (not supported by Dasharo)","text":""},{"location":"unified/msi/faq/#the-tpm-module-is-required-to-install-heads-will-this-one-work","title":"The TPM module is required to install Heads. Will this one work?","text":"<p>We do not recommend to buy any cheap replacement TPM chips. We observed board malfunctions with such chips. We can only advise to buy original MSI TPM chips. Either TPM 2.0 (MS-4462) or TPM 2.0 (9672), both will work. Please pay attention to the interface used and pin count, it must be SPI interface and 12-1 pin. You can also find this product available in our shop.</p> <p>To be precise, TPM is required to run Dasharo (coreboot+Heads) properly. Installation will succeed, but you will observe errors once you boot to heads.</p>"},{"location":"unified/msi/faq/#is-it-better-to-install-qubes-os-before-switching-to-dasharo-corebootheads","title":"Is it better to install Qubes OS before switching to Dasharo (coreboot+Heads)?","text":"<p>If you ever want to transition back to Dasharo (coreboot+UEFI) and do not want to reinstall Qubes OS, then yes, it is best to install Qubes OS on UEFI firmware. In other cases reinstallation may be needed when switching between firmware flavours.</p>"},{"location":"unified/msi/faq/#will-it-work-successfully-once-i-get-tpm-or-is-there-some-other-issues","title":"Will it work successfully once I get TPM, or is there some other issues?","text":"<p>The Nitrokey tokens had a security vulnerability, which required the firmware on the token and heads to be both updated to fix this. Unfortunately, Dasharo heads firmware compatible with MSI desktops was not updated to fix this problem and it is not planned to have a new release. The community interest in heads on MSI desktops was too low to justify expenses, development and maintainership of this firmware flavour.</p> <p>That said, Dasharo + Heads firmware is no longer recommended to be installed/used with Nitrokeys on MSI desktops. For these particular reasons we no longer offer heads DPP subscriptions for MSI desktops anymore in our shop.</p>"},{"location":"unified/msi/firmware-transition/","title":"Firmware transition","text":""},{"location":"unified/msi/firmware-transition/#introduction","title":"Introduction","text":"<p>This document describes the process of transitioning from Dasharo UEFI to Heads and the other way around.</p>"},{"location":"unified/msi/firmware-transition/#transition-from-dasharo-uefi-to-heads-variant","title":"Transition from Dasharo UEFI to Heads variant","text":"<p>Recommended</p> <p>Please use Dasharo Tools Suite with Heads subscription credentials to transition to Heads.</p> <p>Manual</p> <p>Use FlashBIOS method (recommended) or flash with flashrom in OS. To use FlashBIOS we recommend to switch back to MSI UEFI firmware (if you don't have the desktop Dasharo Pro Package or not running Dasharo v1.1.3) and then use FlashBIOS with heads binary.</p> <p>To transition to heads firmware with flashrom, whole binary has to be flashed:</p> <pre><code>flashrom -p internal -w &lt;heads_fw_file&gt;\n</code></pre> <p>Warning</p> <p>ME has to be disabled and descriptor unlocked to flash full file. MSI firmware began to ship the platforms with ME and flash descriptor regions read-only. Unlocking the descriptor is possible using Firmware Update Mode on Dasharo v0.9.1.</p>"},{"location":"unified/msi/firmware-transition/#transition-from-dasharo-heads-back-to-uefi","title":"Transition from Dasharo Heads back to UEFI","text":"<p>At the moment, Dasharo Tools Suite does not support switching from Heads back to UEFI-based firmware. Use FlashBIOS to restore a saved backup, stock, or Dasharo UEFI firmware.</p> <p>Warning for Qubes OS users</p> <p>If you installed Qubes OS under Heads, it has been installed in legacy BIOS boot mode and will not be bootable under UEFI. You will likely need to install Qubes OS again.</p> <p>Users who installed Qubes OS before switching to Heads are not affected.</p>"},{"location":"unified/msi/firmware-update/","title":"Firmware update","text":"<p>The following documentation describes the process of Dasharo open-source firmware update. The update process may be different, depending on which firmware version is currently installed on your device. The currently installed firmware version can be checked with the following command in a Linux environment:</p> <pre><code>sudo dmidecode -t bios | grep Version\n</code></pre> <p>Alternatively, it can be checked in the <code>BIOS Setup Menu</code>.</p> Dasharo (UEFI)Dasharo (coreboot + Heads) <p>Build or download Dasharo Heads firmware, and proceed with the official Heads update documentation.</p>"},{"location":"unified/msi/firmware-update/#prerequisites","title":"Prerequisites","text":"<p>Depending on firmware version (1) there may be manual steps required to ensure that the firmware can be updated.</p> <ol> <li>v0.9.0 for Z790-P and v1.1.2 for Z690-A introduced support for Firmware    Update Mode</li> </ol>"},{"location":"unified/msi/firmware-update/#firmware-update-mode","title":"Firmware Update Mode","text":"<p>If the currently installed Dasharo version supports Firmware Update Mode, follow the steps outlined in generic Firmware Update documentation.</p>"},{"location":"unified/msi/firmware-update/#manual","title":"Manual","text":"<p>Ensure that the firmware protections are disabled in Dasharo Security Options. Both <code>BIOS boot medium lock</code> and <code>Enable SMM BIOS write protection</code> should be unchecked. UEFI Secure Boot must be disabled as well (uncheck <code>Attempt Secure Boot</code> if <code>Current Secure Boot State</code> does not say <code>Disabled</code>). To apply changes you will need to reboot.</p> <p>Please use one of the following environments to perform Dasharo update:</p> <ul> <li>Dasharo Tools Suite (DTS)</li> <li>Linux distribution of your choice</li> </ul> <p>We recommend using DTS for updating firmware.</p>"},{"location":"unified/msi/firmware-update/#dasharo-tools-suite","title":"Dasharo Tools Suite","text":"<p>The DTS allows performing automatic firmware update process, which is the recommended method. To update your firmware, follow below steps.</p> <ol> <li>Boot DTS using iPXE    on your platform.</li> <li>Follow firmware update    procedure described in DTS documentation.</li> </ol>"},{"location":"unified/msi/firmware-update/#linux-distribution-of-your-choice","title":"Linux distribution of your choice","text":"<p>Linux distributions may not yet have the support for the newest chipsets in flashrom installed via package manager so building the flashrom from source may be inevitable. You may check if your flashrom supports the Z690 and Z790 chipset by doing a dry run without firmware binary:</p> <pre><code>sudo flashrom -p internal\n</code></pre> <p>Example output of undetected chipset:</p> <pre><code>flashrom v1.2 on Linux 5.19.0-32-generic (x86_64)\nflashrom is free software, get the source code at https://flashrom.org\n\nUsing clock_gettime for delay loops (clk_id: 1, resolution: 1ns).\nCannot open file stream for /dev/mtd0\nNo DMI table found.\nWARNING: No chipset found. Flash detection will most likely fail.\n========================================================================\nYou may be running flashrom on an unknown laptop. We could not\ndetect this for sure because your vendor has not set up the SMBIOS\ntables correctly. Some internal buses have been disabled for\nsafety reasons. You can enforce using all buses by adding\n  -p internal:laptop=this_is_not_a_laptop\nto the command line, but please read the following warning if you\nare not sure.\n\nLaptops, notebooks and netbooks are difficult to support and we\nrecommend to use the vendor flashing utility. The embedded controller\n(EC) in these machines often interacts badly with flashing.\nSee the manpage and https://flashrom.org/Laptops for details.\n\nIf flash is shared with the EC, erase is guaranteed to brick your laptop\nand write may brick your laptop.\nRead and probe may irritate your EC and cause fan failure, backlight\nfailure and sudden poweroff.\nYou have been warned.\n========================================================================\nNo EEPROM/flash device found.\nNote: flashrom can never write if the flash chip isn't found automatically.\n</code></pre> <p>It means you cannot proceed with this flashrom version and you have to remove it using your package manager. Then follow the procedure for building the right flashrom is described in <code>Build flashrom</code> section in the Initial deployment documentation (note the procedure describes Ubuntu case only, your package manager and package names to install may be slightly different). We recommend to use Dasharo Tools Suite.</p> <p>Example of good output:</p> <pre><code>flashrom v1.2-1031-g6b2061b on Linux 5.19.0-32-generic (x86_64)\nflashrom is free software, get the source code at https://flashrom.org\n\nUsing clock_gettime for delay loops (clk_id: 1, resolution: 1ns).\nNo DMI table found.\nFound chipset \"Intel Z690\".\nEnabling flash write... SPI Configuration is locked down.\nFREG0: Flash Descriptor region (0x00000000-0x00000fff) is read-write.\nFREG1: BIOS region (0x01000000-0x01ffffff) is read-write.\nFREG2: Management Engine region (0x00001000-0x003d8fff) is read-write.\nEnabling hardware sequencing because some important opcode is locked.\nOK.\nFound Programmer flash chip \"Opaque flash chip\" (32768 kB, Programmer-specific) on internal.\nNo operations were specified.\n</code></pre> <p>That means you are good to go.</p>"},{"location":"unified/msi/firmware-update/#migrating-smbios-unique-data-optional","title":"Migrating SMBIOS unique data (optional)","text":"<p>Before flashing you may migrate your serial number and UUID as described in Initial deployment. Applicable to Dasharo v1.1.0 (PRO Z690-A) / v0.9.0 (PRO Z790-P) and later.</p>"},{"location":"unified/msi/firmware-update/#flashing-using-flashrom","title":"Flashing using flashrom","text":"PRO Z690-A boardsPRO Z790-P boards <p>There is only one version available for now. Please follow instructions described in Initial deployment to deploy the Dasharo.</p> <p>If updating firmware using custom builds without changing the flashmap, only the <code>RW_SECTION_A</code> and <code>RW_SECTION_B</code> partitions of the flash needs to be updated. Flash it using the following command:</p> <pre><code>flashrom -p internal -w [path] --fmap -i RW_SECTION_A -i RW_SECTION_B\n</code></pre>"},{"location":"unified/msi/firmware-update/#version-v110-or-newer","title":"Version v1.1.0 or newer","text":"<p>Version v1.1.0 and v1.1.2 had to change the flashmap layout and requires usage of the procedure below when migrating from v1.0.0 or older.</p> <p>Only the <code>RW_SECTION_A</code> and <code>RW_SECTION_B</code> partitions of the flash needs to be updated. Flash it using the following command:</p> <pre><code>flashrom -p internal -w [path] --fmap -i RW_SECTION_A -i RW_SECTION_B\n</code></pre> <p>To flash newer firmware the command described in the section below might be also used. But remember, in that case, all Dasharo UEFI settings will be lost. Also, the memory training procedure will have to be carried out again.</p>"},{"location":"unified/msi/firmware-update/#version-older-than-v110","title":"Version older than v1.1.0","text":"<p>In this case, the whole <code>bios</code> region must be updated.</p> <pre><code>flashrom -p internal -w [path] --ifd -i bios\n</code></pre>"},{"location":"unified/msi/firmware-update/#troubleshooting","title":"Troubleshooting","text":"<p>Possible errors are described in the Generic deployment problems with flashrom</p>"},{"location":"unified/msi/hcl/","title":"Hardware Compatibility Lists","text":"<p>Following compatibility list is compiled thanks to community contribution and Dasharo Team work. Please note there are other good sources of information about compatibility like:</p> <ul> <li>OpenBenchmarking.org</li> <li>linux-hardware.org</li> <li>bsd-hardwre.info</li> </ul> <p>Feel free to refer to above sources or contact community, if you can't find your hardware.</p> CPU HCL (18 Mar 2025)Memory HCL (12 Sep 2023)GPU HCL (manual)GPU HCL (Z690-A automatic) <p>CPU Hardware Compatibility List presents the CPUs tested and verified to work with Dasharo by community. The following list does not include CPU which is tested and verified in 3mdeb laboratory - this information might be found in MSI PRO Z690-A Hardware Matrix and MSI PRO Z790-P Hardware Matrix documentation.</p> <p>Legend:</p> <ul> <li>CPU Model: CPU Model name.</li> <li>Dasharo version: Dasharo version on which report was created.<ul> <li><code>-</code> if version was not reported</li> </ul> </li> <li>Source:<ul> <li>Link to report if it is public.</li> <li><code>Dasharo HCL report</code> if it was reported using DTS.</li> </ul> </li> </ul> <p> PRO Z690-A (WIFI) (DDR4)PRO Z790-P (WIFI) (DDR4) CPU Model Dasharo version Source 12th Gen Intel(R) Core(TM) i3-12100 v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i3-12100T v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12400 v1.0.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12400 v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12400F - Github PR 12th Gen Intel(R) Core(TM) i5-12400F v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12400F v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12400F v1.1.3 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12500T v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600 v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v1.0.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v1.1.1-rc4 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v1.1.2 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v1.1.3 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i7-12700K v1.0.0 Qubes HCL reports 12th Gen Intel(R) Core(TM) i7-12700K v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i7-12700K v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i7-12700K v1.1.2 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i7-12700K v1.1.3 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i7-12700KF v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i9-12900K v0.4.0 Qubes HCL reports 12th Gen Intel(R) Core(TM) i9-12900K v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i9-12900K v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i9-12900K v1.1.2 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i9-12900KF v1.1.1 Github PR 12th Gen Intel(R) Core(TM) i9-12900KS v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i9-12900T v1.1.0 Dasharo HCL Report 13th Gen Intel(R) Core(TM) i5-13600K v0.9.0 Dasharo HCL Report 13th Gen Intel(R) Core(TM) i5-13600K v1.1.2 Dasharo HCL Report 14th Gen Intel(R) Core(TM) i7-14700K v0.9.0 Dasharo HCL Report CPU Model Dasharo version Source 12th Gen Intel(R) Core(TM) i5-12500 v0.9.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12500 v0.9.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v0.9.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v0.9.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v0.9.2 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i7-12700K v0.9.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i7-12700K v0.9.1 Dasharo HCL Report 13th Gen Intel(R) Core(TM) i5-13600K v0.9.0 Dasharo HCL Report 13th Gen Intel(R) Core(TM) i7-13700K v0.9.1 Dasharo HCL Report 13th Gen Intel(R) Core(TM) i5-13600K v0.9.1 Dasharo HCL Report 13th Gen Intel(R) Core(TM) i5-13700K v0.9.1 Dasharo HCL Report 13th Gen Intel(R) Core(TM) i9-13900K v0.9.0 Dasharo HCL Report 14th Gen Intel(R) Core(TM) i9-14900K v0.9.0 Dasharo HCL Report 14th Gen Intel(R) Core(TM) i9-14900K v0.9.1 Dasharo HCL Report 14th Gen Intel(R) Core(TM) i9-14900K v0.9.2 Dasharo HCL Report 14th Gen Intel(R) Core(TM) i9-14900KF v0.9.0 Dasharo HCL Report 14th Gen Intel(R) Core(TM) i9-14900KS v0.9.1 Dasharo HCL Report <p></p> <p>Memory hardware Compatibility List presents the DIMM modules tested and verified to work with Dasharo in 3mdeb laboratory.</p> <p>Memory Modules are tested in 1, 2 and 4 modules configurations. These follow the DIMM population procedures as stated in the Board Manual: 1 module in DIMMA2 Slot (Single Channel), 2 by adding another module in DIMMB2 (Dual Channel), and 4 by populating all 4 slots. Testing is defined as passing firmware POST and booting an OS, since what is being tested is that the Intel FSP (Firmware Support Package) component is initializing the Memory Modules. We don't stress test them for stability. Each SPD Profile is tested, so each Memory Module can have from 1 to 4 entries. You may also check out Intel memory validation results page and see the results for DDR4 UDIMM testing. Maximum ratings for Alder Lake S CPUs is also available in the CPU datasheet.</p> <p>Legend:</p> <ul> <li>Configuration 1/2/4 - means given memory module was tested in 1, 2 and 4   DIMMs populated configuration, \u2714 means successfully tested, \u2716   means platform did not boot with Dasharo, e.g. \u2714/\u2714/\u2714   means all configurations work, <code>-</code> means not tested</li> <li>Size: DIMM capacity in MB</li> <li>SPD profile: can be one of JEDEC(Standard) / XMP Profile #1 / XMP Profile #2.   Profile data:<ul> <li>Type/speed: for example DDR4-2400 means DDR4 module clocked at max 2400MHz for given profile</li> <li>Timings: for example CL17-17-17 means CAS Latency 17, tRCD 17, tRP 17 (numbers expressed in clock cycles) for given memory profile</li> <li>Voltage: memory voltage in Volts for given memory profile</li> </ul> </li> </ul> <p>NOTE: some XMP profiles may have lower speeds than other ones, but also have smaller CAS latency. Also the memory frequency configured in the memory controller and reported by DMI/SMBIOS may be slightly lower than advertised in the module specifications. This can vary based on the board design, CPU and many other factors.</p> <p> PRO Z690-A (WIFI) DDR4PRO Z690-A (WIFI)PRO Z790-P (WIFI) DDR4PRO Z790-P (WIFI) Manufacturer Part Number Size Speed Configuration 1/2/4 Dasharo version Source Corsair CMH16GX4M2E3200C16 8192 MB 2133 MT/s (PC4-17000) -/-/\u2714 v1.1.1 Dasharo HCL report Corsair CMK16GX4M1D3000C16 16384 MB 2133 MT/s (PC4-17000) \u2714/-/- v1.1.1 Dasharo HCL report Corsair CMK16GX4M2B3200C16 8192 MB 2133 MT/s (PC4-17000) -/-/\u2714 v1.1.1 Dasharo HCL report Corsair CMK32GX4M2B3200C16 16384 MB 2133 MT/s (PC4-17000) \u2714/-/- v1.0.0 Dasharo HCL report Corsair CMK32GX4M2B3200C16 16384 MB 2133 MT/s (PC4-17000) \u2714/-/- v1.1.1 Dasharo HCL report Corsair CMK32GX4M2E3200C16 16384 MB 2133 MT/s (PC4-17000) -/-/\u2714 v1.1.0 Dasharo HCL report Corsair CMK32GX4M2E3200C16 16384 MB 2133 MT/s (PC4-17000) \u2714/-/- v1.1.1 Dasharo HCL report Corsair CMK64GX4M2E3200C16 32768 MB 2133 MT/s (PC4-17000) \u2714/-/- v1.1.1 Dasharo HCL report Crucial Technology BL16G32C16U4B.16FE 16384 MB 2666 MT/s (PC4-21300) \u2714/-/- v1.1.0 Dasharo HCL report Crucial Technology BL16G32C16U4B.16FE 16384 MB 2666 MT/s (PC4-21300) \u2714/-/- v1.1.1 Dasharo HCL report Crucial Technology BLS16G4D32AESB.M16FE 16384 MB 2400 MT/s (PC4-19200) \u2714/-/- v1.1.1 Dasharo HCL report Crucial Technology CT8G4DFS8266.C8FJ 8192 MB 2666 MT/s (PC4-21300) \u2714/-/- v1.1.0 Dasharo HCL report Essencore Limited (former ISD Technology Limited) KD4AGU880-36A180X 16384 MB 2666 MT/s (PC4-21300) -/-/\u2714 v1.1.1 Dasharo HCL report G Skill Intl F4-3600C18-32GVK 32768 MB 2666 MT/s (PC4-21300) \u2714/-/- v1.1.2 Dasharo HCL report Kingston KF3200C16D4/16GX 16384 MB 2400 MT/s (PC4-19200) \u2714/-/- v1.1.1 Dasharo HCL report Kingston KF3200C16D4/16GX 16384 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.1 Dasharo HCL report Kingston KF3200C16D4/32GX 32768 MB 2400 MT/s (PC4-19200) -/-/\u2714 v0.4.0 Dasharo HCL report Kingston KF3200C16D4/32GX 32768 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.0 Dasharo HCL report Kingston KF3200C16D4/32GX 32768 MB 2400 MT/s (PC4-19200) \u2714/-/- v1.1.1 Dasharo HCL report Kingston KF3200C16D4/32GX 32768 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.1 Dasharo HCL report Kingston KF3600C16D4/16GX 16384 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.1 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v0.9.0 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) \u2714/-/- v1.0.0 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.0.0 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.0 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.1 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.1-rc4 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.2 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.3 Dasharo HCL report Kingston KF3600C18D4/32GX 32768 MB 2400 MT/s (PC4-19200) \u2714/-/- v1.1.1 Dasharo HCL report Kingston KF3600C18D4/32GX 32768 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.2 Dasharo HCL report Kingston KF3600C18D4/32GX 32768 MB 2400 MT/s (PC4-19200) \u2714/-/- v1.1.3 Dasharo HCL report Patriot Memory 4400 C19 Series 8192 MB 2133 MT/s (PC4-17000) \u2714/-/- v1.0.0 Dasharo HCL report Samsung M378A2G43AB3-CWE 16384 MB 3200 MT/s (PC4-25600) \u2714/-/- v1.1.1 Dasharo HCL report Silicon Power Computer &amp; Communications 16384 MB 3200 MT/s (PC4-25600) -/-/\u2714 v1.1.1 Dasharo HCL report Team Group Inc. TEAMGROUP-UD4-3200 16384 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.2 Dasharo HCL report Thermaltake Technology Co Ltd RG26D408GX2-3600C18A 8192 MB 2666 MT/s (PC4-21300) \u2714/-/- v1.1.0 Dasharo HCL report DIMM vendor Part Number Size SPD profile Configuration 1/2/4 Kingston KF556C40BB/8 8GB 5600MT/s 40-40-40 1.25V \u2714/\u2714/\u2714 Crucial CT8G48C40U5.M4A1/8 8GB 4800MT/s 40-39-39 1.1V \u2714/\u2714/\u2714 ADATA AD5U48008G-S 8GB 4800MT/s 40-40-40 1.1V \u2714/\u2714/\u2714 DIMM vendor Part Number Size SPD profile Configuration 1/2/4 DIMM vendor Part Number Size SPD profile Configuration 1/2/4 <p></p> <p>NOTE: Since we cannot extend following list based on automatic Dasharo HCL reports parsing until this issue would be addressed we decided to not update GPU HCL ourselves. We will merge PRs to GPU HCL, if following criteria would be addressed:</p> <ul> <li>Card has to be installed on main metal 16x slot, and there shouldn't be   any other GPU except Intel integrated one if non-F CPU.</li> <li>Confirmation than Dasharo splash screen and Firmware menus were working.</li> <li>Actual GPU chip (PCI Vendor ID / Device ID).</li> <li>Video Card model (Subsystem Vendor ID / Device ID).</li> <li>Option ROM version.</li> <li>Secure Boot status (Enabled/Disabled, in case than there are Option ROM   signing issues. This also means than the VBIOS should NOT be modded, factory   original versions only)</li> </ul> <p>GPU Hardware Compatibility List presents the GPUs tested and verified to work with Dasharo by community. The following list does not include GPU which is tested and verified in 3mdeb laboratory - this information might be found in MSI PRO Z690-A Hardware Matrix and MSI PRO Z790-P Hardware Matrix documentation.</p> <p>Legend:</p> <ul> <li>GPU name: the full name of GPU including vendor and model name.</li> <li>Memory size: total amount of GPU memory declared by vendor.</li> <li>Memory type: GPU's type of memory.</li> <li>Bandwidth: GPU's memory bandwidth.</li> <li>PCI-E Architecture: declared by producer generation of PCI-E architecture.</li> <li>Multi-Graphics Technology: information about support for Multi-Graphics     Technology.</li> </ul> <p>Information about GPU might be read from GPU package or documentation.</p> GPU name Memory size Memory type Bandwidth PCI-E Gen Multi-Graphics Technology Results AMD Radeon RX 5700 XT 8 GB GDDR6 448GB/s Gen4 1 NVIDIA GeForce GTX 1060 3072 MB GDDR5 192GB/s Gen3 1 Qubes HCL reports MSI Radeon RX 6950 XT 16 GB GDDR6 576GB/s Gen4 1 EVGA NVIDIA RTX 2080 8 GB GDDR6 448GB/s Gen3 1 PNY NVIDIA RTX A5000 24 GB GDDR6 768GB/s Gen4 1 NVIDIA GeForce GTX 1080TI 11264 MB GDDR5X 484GB/s Gen3 1 Qubes HCL reports MSI Radeon RX 6500 XT MECH 2X 4G OC 4 GB GDDR6 180GB/s Gen4 1 Works only on Dasharo v1.1.0 or newer MSI GeForce RTX 3060 GAMING Z TRIO LHR 12 GB GDDR6 358GB/s Gen4 1 <p>Hardware Compatibility List generated based on <code>lspci</code> output from Dasharo HCL Reports:</p> <p>Legend:</p> <ul> <li>Vendor Name: vendor name as reported by <code>lspci</code>.</li> <li>GPU Code Name: GPU code name or equivalent.</li> <li>Model: GPU model.</li> <li>PCI VendorID:ModelID: PCI Vendor ID and Model ID reported by <code>lspci</code>.</li> <li>Multi-Graphics Config: If card was detected in multi-GPU configuration. Please note it doesn't mean heterogeous or homogeneous configuration, it just mean there were many VGA controllers detected in given report.</li> </ul> Vendor Name GPU Code Name Model PCI VendorID:ModelID Multi-Graphics Config Results Advanced Micro Devices, Inc. AMD/ATI Device 1002 1002:7480 No Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Ellesmere Radeon RX 470/480/570/570X/580/580X/590 1002:67df No Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Navi 10 Radeon RX 5600 OEM/5600 XT / 5700/5700 XT 1002:731f No Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Navi 10 Radeon RX 5600 OEM/5600 XT / 5700/5700 XT 1002:731f Yes (2) Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Navi 21 Radeon RX 6800/6800 XT / 6900 XT 1002:73bf No Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Navi 22 Radeon RX 6700/6700 XT/6750 XT / 6800M 1002:73df No Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Navi 22 Radeon RX 6700/6700 XT/6750 XT / 6800M/6850M XT 1002:73df No Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Navi 23 Radeon RX 6600/6600 XT/6600M 1002:73ff No Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Navi 23 Radeon RX 6650 XT 1002:73ef No Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Device 1002 1002:744c No Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Device 1002 1002:744c Yes (2) Dasharo HCL report Advanced Micro Devices, Inc. AMD/ATI Device 1002 1002:7480 No Dasharo HCL report NVIDIA Corporation GA106 Geforce RTX 3050 10de:2507 No Dasharo HCL report NVIDIA Corporation GA106 RTX A2000 10de:2531 No Dasharo HCL report NVIDIA Corporation GK104 GeForce GTX 660 Ti 10de:1183 No Dasharo HCL report NVIDIA Corporation GP106 GeForce GTX 1060 3GB 10de:1c02 No Dasharo HCL report NVIDIA Corporation GP106 GeForce GTX 1060 3GB 10de:1c02 Yes (2) Dasharo HCL report NVIDIA Corporation GP108 GeForce GT 1030 10de:1d01 No Dasharo HCL report NVIDIA Corporation TU104GL Quadro RTX 4000 10de:1eb1 Yes (2) Dasharo HCL report NVIDIA Corporation TU116 GeForce GTX 1650 SUPER 10de:2187 No Dasharo HCL report NVIDIA Corporation TU117GLM Quadro T1000 Mobile 10de:1fb0 No Dasharo HCL report <p>For details how to maintain this documentation please consult Dasharo HCL Maintainer documentation.</p>"},{"location":"unified/msi/hcl/#contributing","title":"Contributing","text":"PRO Z690-A (WIFI) DDR4PRO Z690-A (WIFI)PRO Z790-P (WIFI) DDR4PRO Z790-P (WIFI) <ul> <li>Use Dasharo Tools Suite HCL report   to upload report automatically.</li> <li>Create new issue in Dasharo issues repository.</li> <li> <p>Create PR directly to Dasharo documentation repository.</p> </li> <li> <p>CPU HCL email   your <code>/proc/cpuinfo</code> or relevant information using following template:</p> </li> </ul> <pre><code>CPU model:\nDasharo version:\n</code></pre> <ul> <li>Memory HCL email   as attachments outputs of following command:</li> </ul> <pre><code>decode-dimms &gt; decode-dimms.log 2&gt; decode-dimms.err.log\n</code></pre> <p>In email please include Dasharo version.</p> <pre><code>Dasharo version:\n</code></pre> <ul> <li>Use Dasharo Tools Suite HCL report   to upload report automatically.</li> <li>Create new issue in Dasharo issues repository.</li> <li> <p>Create PR directly to Dasharo documentation repository.</p> </li> <li> <p>CPU HCL email   your <code>/proc/cpuinfo</code> or relevant information using following template:</p> </li> </ul> <pre><code>CPU model:\nDasharo version:\n</code></pre> <ul> <li>Memory HCL email   as attachments outputs of following command:</li> </ul> <pre><code>decode-dimms &gt; decode-dimms.log 2&gt; decode-dimms.err.log\n</code></pre> <p>In email please include Dasharo version.</p> <pre><code>Dasharo version:\n</code></pre> <ul> <li>Use Dasharo Tools Suite HCL report   to upload report automatically.</li> <li>Create new issue in Dasharo issues repository.</li> <li> <p>Create PR directly to Dasharo documentation repository.</p> </li> <li> <p>CPU HCL email   your <code>/proc/cpuinfo</code> or relevant information using following template:</p> </li> </ul> <pre><code>CPU model:\nDasharo version:\n</code></pre> <ul> <li>Memory HCL email   as attachments outputs of following command:</li> </ul> <pre><code>decode-dimms &gt; decode-dimms.log 2&gt; decode-dimms.err.log\n</code></pre> <p>In email please include Dasharo version.</p> <pre><code>Dasharo version:\n</code></pre> <ul> <li>Use Dasharo Tools Suite HCL report   to upload report automatically.</li> <li>Create new issue in Dasharo issues repository.</li> <li> <p>Create PR directly to Dasharo documentation repository.</p> </li> <li> <p>CPU HCL email   your <code>/proc/cpuinfo</code> or relevant information using following template:</p> </li> </ul> <pre><code>CPU model:\nDasharo version:\n</code></pre> <ul> <li>Memory HCL email   as attachments outputs of following command:</li> </ul> <pre><code>decode-dimms &gt; decode-dimms.log 2&gt; decode-dimms.err.log\n</code></pre> <p>In email please include Dasharo version.</p> <pre><code>Dasharo version:\n</code></pre> <p>If you already have reported your results and you change some hardware configuration we would appreciate an update.</p>"},{"location":"unified/msi/initial-deployment/","title":"Initial Deployment","text":"<p>Initial deployment of Dasharo firmware on MSI PRO Z690-A and PRO Z790-P can be done:</p> <ul> <li>using DTS,</li> <li>manually.</li> </ul>"},{"location":"unified/msi/initial-deployment/#initial-deployment-using-dts","title":"Initial deployment using DTS","text":"<p>To ensure a smooth deployment process, it is recommended to use the latest version of DTS available from the releases page. Once you have obtained it, you can then proceed with following the Dasharo zero-touch initial deployment section procedure. This will help you set up Dasharo effectively and without manual intervention.</p>"},{"location":"unified/msi/initial-deployment/#initial-deployment-manually","title":"Initial deployment manually","text":"<p>Flashing coreboot can be done from Linux using flashrom with the internal programmer. This document describes the process of building, installing and running flashrom on Ubuntu 22.04.</p>"},{"location":"unified/msi/initial-deployment/#build-flashrom","title":"Build flashrom","text":"<p>Please follow generic guide for Dasharo flashrom fork.</p>"},{"location":"unified/msi/initial-deployment/#flashing","title":"Flashing","text":"<p>All flash operations require UEFI Secure Boot to be disabled. You may download the binary using <code>scp</code> (need to install openssh-server package) or <code>wget</code> command. The binaries can be found on the</p> <ul> <li>MSI PRO Z690-A release page</li> <li>MSI PRO Z790-P release page.</li> </ul>"},{"location":"unified/msi/initial-deployment/#reading-flash-contents","title":"Reading flash contents","text":"<p>Always prepare a backup of the current firmware image. To read the original firmware from the flash and save it to a file (<code>dump.rom</code>), execute the following command:</p> <pre><code>sudo flashrom -p internal -r dump.rom\n</code></pre> <p>IMPORTANT! You will need a second USB storage to keep the dumped firmware backup or alternatively upload it to some cloud or network drive (Ubuntu live has a Firefox browser installed). Ubuntu live image is volatile and has no persistent storage. All changes made in the live image will be lost after reboot.</p>"},{"location":"unified/msi/initial-deployment/#migrating-smbios-unique-data","title":"Migrating SMBIOS unique data","text":"<p>To migrate the SMBIOS system UUID and board serial number follow the Linux instructions below before attempting to flash the binary. The procedure is supported on Dasharo version v1.0.0 and later and requires cbfstool built from coreboot tree. Follow the Building Manual using the Z690-A v1.0.0/Z790-P v0.9.0 version or newer and then:</p> <pre><code>echo -n `sudo dmidecode -s system-uuid` &gt; system_uuid.txt\necho -n `sudo dmidecode -s baseboard-serial-number` &gt; serial_number.txt\n# assuming in coreboot root directory\n./build/cbfstool build/coreboot.rom expand -r FW_MAIN_A\n./build/cbfstool build/coreboot.rom expand -r FW_MAIN_B\n./build/cbfstool build/coreboot.rom add \\\n    -f serial_number.txt -n serial_number -t raw -r FW_MAIN_A\n./build/cbfstool build/coreboot.rom add \\\n    -f serial_number.txt -n serial_number -t raw -r FW_MAIN_B\n./build/cbfstool build/coreboot.rom add \\\n    -f serial_number.txt -n serial_number -t raw -r COREBOOT\n./build/cbfstool build/coreboot.rom add \\\n    -f system_uuid.txt -n system_uuid -t raw -r FW_MAIN_A\n./build/cbfstool build/coreboot.rom add \\\n    -f system_uuid.txt -n system_uuid -t raw -r FW_MAIN_B\n./build/cbfstool build/coreboot.rom add \\\n    -f system_uuid.txt -n system_uuid -t raw -r COREBOOT\n./build/cbfstool build/coreboot.rom truncate -r FW_MAIN_A\n./build/cbfstool build/coreboot.rom truncate -r FW_MAIN_B\n</code></pre> PRO Z690-A (WIFI) DDR4PRO Z690-A (WIFI)PRO Z790-P (WIFI) DDR4PRO Z790-P (WIFI) <p>One may use <code>msi_ms7d25_v1.1.1_ddr4.rom</code> (or newer) binary directly and simply build the cbfstool only from coreboot repository:</p> <pre><code>git clone https://github.com/Dasharo/coreboot -b msi_ms7d25/release\ncd coreboot\nmake -C util/cbfstool\necho -n `sudo dmidecode -s system-uuid` &gt; system_uuid.txt\necho -n `sudo dmidecode -s baseboard-serial-number` &gt; serial_number.txt\n# assuming in coreboot root directory\n./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr4.rom expand -r FW_MAIN_A\n./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr4.rom expand -r FW_MAIN_B\n./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr4.rom add \\\n    -f serial_number.txt -n serial_number -t raw -r FW_MAIN_A\n./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr4.rom add \\\n    -f serial_number.txt -n serial_number -t raw -r FW_MAIN_B\n./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr4.rom add \\\n    -f serial_number.txt -n serial_number -t raw -r COREBOOT\n./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr4.rom add \\\n    -f system_uuid.txt -n system_uuid -t raw -r FW_MAIN_A\n./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr4.rom add \\\n    -f system_uuid.txt -n system_uuid -t raw -r FW_MAIN_B\n./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr4.rom add \\\n    -f system_uuid.txt -n system_uuid -t raw -r COREBOOT\n./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr4.rom truncate -r FW_MAIN_A\n./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr4.rom truncate -r FW_MAIN_B\n</code></pre> <p>One may use <code>msi_ms7d25_v1.1.1_ddr5.rom</code> (or newer) binary directly and simply build the cbfstool only from coreboot repository:</p> <pre><code>git clone https://github.com/Dasharo/coreboot -b msi_ms7d25/release\ncd coreboot\nmake -C util/cbfstool\necho -n `sudo dmidecode -s system-uuid` &gt; system_uuid.txt\necho -n `sudo dmidecode -s baseboard-serial-number` &gt; serial_number.txt\n# assuming in coreboot root directory\n./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr5.rom expand -r FW_MAIN_A\n./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr5.rom expand -r FW_MAIN_B\n./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr5.rom add \\\n    -f serial_number.txt -n serial_number -t raw -r FW_MAIN_A\n./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr5.rom add \\\n    -f serial_number.txt -n serial_number -t raw -r FW_MAIN_B\n./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr5.rom add \\\n    -f serial_number.txt -n serial_number -t raw -r COREBOOT\n./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr5.rom add \\\n    -f system_uuid.txt -n system_uuid -t raw -r FW_MAIN_A\n./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr5.rom add \\\n    -f system_uuid.txt -n system_uuid -t raw -r FW_MAIN_B\n./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr5.rom add \\\n    -f system_uuid.txt -n system_uuid -t raw -r COREBOOT\n./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr5.rom truncate -r FW_MAIN_A\n./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr5.rom truncate -r FW_MAIN_B\n</code></pre> <p>One may use <code>msi_ms7e06_v0.9.0_ddr4.rom</code> (or newer) binary directly and simply build the cbfstool only from coreboot repository:</p> <pre><code>git clone https://github.com/Dasharo/coreboot -b msi_ms7d25/release\ncd coreboot\nmake -C util/cbfstool\necho -n `sudo dmidecode -s system-uuid` &gt; system_uuid.txt\necho -n `sudo dmidecode -s baseboard-serial-number` &gt; serial_number.txt\n# assuming in coreboot root directory\n./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr4.rom expand -r FW_MAIN_A\n./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr4.rom expand -r FW_MAIN_B\n./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr4.rom add \\\n    -f serial_number.txt -n serial_number -t raw -r FW_MAIN_A\n./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr4.rom add \\\n    -f serial_number.txt -n serial_number -t raw -r FW_MAIN_B\n./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr4.rom add \\\n    -f serial_number.txt -n serial_number -t raw -r COREBOOT\n./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr4.rom add \\\n    -f system_uuid.txt -n system_uuid -t raw -r FW_MAIN_A\n./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr4.rom add \\\n    -f system_uuid.txt -n system_uuid -t raw -r FW_MAIN_B\n./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr4.rom add \\\n    -f system_uuid.txt -n system_uuid -t raw -r COREBOOT\n./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr4.rom truncate -r FW_MAIN_A\n./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr4.rom truncate -r FW_MAIN_B\n</code></pre> <p>One may use <code>msi_ms7e06_v0.9.0_ddr5.rom</code> (or newer) binary directly and simply build the cbfstool only from coreboot repository:</p> <pre><code>git clone https://github.com/Dasharo/coreboot -b msi_ms7d25/release\ncd coreboot\nmake -C util/cbfstool\necho -n `sudo dmidecode -s system-uuid` &gt; system_uuid.txt\necho -n `sudo dmidecode -s baseboard-serial-number` &gt; serial_number.txt\n# assuming in coreboot root directory\n./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr5.rom expand -r FW_MAIN_A\n./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr5.rom expand -r FW_MAIN_B\n./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr5.rom add \\\n    -f serial_number.txt -n serial_number -t raw -r FW_MAIN_A\n./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr5.rom add \\\n    -f serial_number.txt -n serial_number -t raw -r FW_MAIN_B\n./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr5.rom add \\\n    -f serial_number.txt -n serial_number -t raw -r COREBOOT\n./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr5.rom add \\\n    -f system_uuid.txt -n system_uuid -t raw -r FW_MAIN_A\n./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr5.rom add \\\n    -f system_uuid.txt -n system_uuid -t raw -r FW_MAIN_B\n./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr5.rom add \\\n    -f system_uuid.txt -n system_uuid -t raw -r COREBOOT\n./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr5.rom truncate -r FW_MAIN_A\n./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr5.rom truncate -r FW_MAIN_B\n</code></pre> <p>Note you will need to resign the binary after adding the SMBIOS data. Please check Vboot documentation how to resign the data. It is the machine owner's responsibility to generate and use own keys during updates.</p>"},{"location":"unified/msi/initial-deployment/#flashing-dasharo","title":"Flashing Dasharo","text":"<p>WARNING: If you use an external/discrete GPU and migrate to Dasharo, be sure to unplug the dGPU first (when the machine is powered off before proceeding with flashing), as Dasharo firmware does not support all GPU cards properly yet (as of version v1.0.0). There is a high risk for the graphical output to break in the firmware when dGPU is connected. Effectively it leaves the only option to boot in blind into a previously installed OS (if the platform does not brick and if an OS is present on a disk). The first boot may take up to 2 minutes to fully train the memory, so be patient and wait for the Dasharo logo to appear, subsequent boots will take only seconds. MSI EZ debug leds are not supported by Dasharo and you may notice a red led to be lit. If the platform boots with an integrated GPU, you may try to plug the external GPU back and boot again.</p> <p>To flash Dasharo on the platform, execute the following command:</p> PRO Z690-A (WIFI) DDR4PRO Z690-A (WIFI)PRO Z790-P (WIFI) DDR4PRO Z790-P (WIFI) <p>Replace the <code>VERSION</code> in firmware file name with the version you want to flash. For example: <code>msi_ms7d25_v1.1.1_ddr4.rom</code>.</p> <pre><code>sudo flashrom -p internal -w msi_ms7d25_vVERSION_ddr4.rom --ifd -i bios\n</code></pre> <p>Replace the <code>VERSION</code> in firmware file name with the version you want to flash. For example: <code>msi_ms7d25_v1.1.1_ddr5.rom</code>.</p> <pre><code>sudo flashrom -p internal -w msi_ms7d25_vVERSION_ddr5.rom --ifd -i bios\n</code></pre> <p>Replace the <code>VERSION</code> in firmware file name with the version you want to flash. For example: <code>msi_ms7e06_v0.9.0_ddr4.rom</code>.</p> <pre><code>sudo flashrom -p internal -w msi_ms7e06_vVERSION_ddr4.rom --ifd -i bios\n</code></pre> <p>Replace the <code>VERSION</code> in firmware file name with the version you want to flash. For example: <code>msi_ms7e06_v0.9.0_ddr5.rom</code>.</p> <pre><code>sudo flashrom -p internal -w msi_ms7e06_vVERSION_ddr5.rom --ifd -i bios\n</code></pre> <p>IMPORTANT! After the command succeeds, invoke <code>sudo reboot</code> or click the reboot/restart in the GUI to reboot the board. Press <code>ENTER</code> when prompted on the screen to remove the installation media (if Ubuntu live is used). DO NOT POWEROFF THE BOARD as SMI handlers of original MSI firmware may overwrite flash contents and cause a brick.</p> <p>After migration from MSI firmware to Dasharo and reboot, the firmware will fail the memory training. After reboot wait approximately 30 seconds and then power the board off by holding the power button pushed for 5 seconds. Dasharo v1.1.0 or newer will signal the memory training failure with PC speaker beeps and blinking SATA LED. When it happens use the power button to power the board off (no need to wait 30 seconds in such case). Power on the board back. Now the memory training should not fail and after approximately 1 minute (can be nearly 2 minutes for DDR5 memory), you should get a Dasharo splash screen on the monitor. Subsequent boots will take only a few seconds.</p>"},{"location":"unified/msi/initial-deployment/#flashing-back-vendor-firmware","title":"Flashing back vendor firmware","text":"<pre><code>sudo flashrom -p internal -w dump.rom --ifd -i bios\n</code></pre> <p>NOTE: Dasharo version v0.1.0 will not have a network connection. Use a different USB storage or a USB to Ethernet/USB WiFi adapter to move the binary to the live system.</p>"},{"location":"unified/msi/initial-deployment/#coreboot-heads","title":"coreboot + Heads","text":"<p>The supported method is to follow initial deployment, and then the Transition from Dasharo UEFI to Heads variant.</p>"},{"location":"unified/msi/overview/","title":"Overview","text":"PRO Z690-A (WIFI) (DDR4)PRO Z790-P (WIFI) (DDR4) <ul> <li>Releases - groups information about    all releases compatible with MSI PRO Z690-A.</li> <li>Hardware configuration matrix     - describes the platform's hardware configuration used during the     Dasharo firmware validation procedure.</li> <li>Test matrix - describes the    validation scope used during the Dasharo firmware validation procedure.</li> </ul> <ul> <li>Releases - groups information about    all releases compatible with MSI PRO Z790-P.</li> <li>Hardware configuration matrix     - describes the platform's hardware configuration used during the     Dasharo firmware validation procedure.</li> <li>Test matrix - describes the    validation scope used during the Dasharo firmware validation procedure.</li> </ul> <ul> <li>Building manual - describes how to build Dasharo for     the MSI boards.</li> <li>Initial deployment - describes initial Dasharo     deployment methods (i. e. flashing new firmware) for the MSI PRO Z690-A.</li> <li>Firmware update - explains supported Dasharo     open-source firmware update methods.</li> <li>Recovery - gathers information on how to recover the platform     from potential failure.</li> <li>Development - describes information for Dasharo developers.</li> <li>Hardware Compatibility List - describes compatible memory modules,     processors and graphics cards tested by the community.     results performed by the community.</li> <li>FAQ - answers for frequently asked questions.</li> </ul>"},{"location":"unified/msi/overview/#useful-documents","title":"Useful documents","text":"PRO Z690-A (WIFI) (DDR4)PRO Z790-P (WIFI) (DDR4) <ul> <li>MSI Z690-A PRO DDR4 WIFI site</li> <li>MSI Z690-A PRO DDR4 Board manual</li> <li>MSI Z690-A PRO WIFI site</li> <li>MSI Z690-A PRO WIFI Board manual</li> </ul> <ul> <li>MSI Z790-P PRO DDR4 WIFI site</li> <li>MSI Z790-P PRO DDR4 Board manual</li> <li>MSI Z790-P PRO WIFI site</li> <li>MSI Z790-P PRO WIFI Board manual</li> </ul>"},{"location":"unified/msi/overview/#press-releases","title":"Press releases","text":"<ul> <li>PC Gamer</li> <li>Phoronix</li> <li>Tom's Hardware</li> <li>Root.cz</li> <li>GN24</li> <li>ITBusiness</li> </ul>"},{"location":"unified/msi/overview/#buy-the-msi-pro-z690-a-ddr4-with-dasharo-firmware","title":"Buy the MSI PRO Z690-A DDR4 with Dasharo firmware","text":"<p>The Full PC Build with MSI PRO Z690-A/Z790-P DDR4/DDR5 motherboard with Dasharo firmware is available at the official 3mdeb store.</p> <p>You can also buy the product by mailing us at: shopping@3mdeb.com.</p> <p>Device assembly and presale validation will be carried out in accordance with the following procedure.</p>"},{"location":"unified/msi/recovery/","title":"Recovery","text":""},{"location":"unified/msi/recovery/#intro","title":"Intro","text":"<p>This project is in early development phase. On certain hardware configurations, the Dasharo firmware may not boot correctly (i.e. we will have \"bricked\" the platform). In such a case, the recovery procedure can reinstall the original firmware from the board manufacturer.</p> <p>There are two documented recovery methods: using a CH341A programming kit or an RTE.</p> <p>Since Dasharo v1.1.2 (PRO Z690-A) / v0.9.0 (PRO Z790-P) release it is also possible to use MSI FlashBIOS button feature to recover using an image placed in the USB stick.</p>"},{"location":"unified/msi/recovery/#using-msi-flashbios-button","title":"Using MSI FlashBIOS button","text":"<ol> <li>Format an empty USB drive with FAT32 filesystem.</li> <li>Place Dasharo release binary or official MSI binary on the drive's root    directory and name it <code>MSI.ROM</code>.</li> <li>Put the drive in the rear USB 2.0 port marked as <code>FlashBIOS</code>.</li> <li>Be sure that your machine is powered off (ATX supply must be still    connected).</li> <li>Press the FlashBIOS button near the <code>FlashBIOS</code> port.</li> <li>After a few seconds the machine should power on the ATX supply and begin    flashing (the red diode will be blinking).</li> <li>Wait approximately 5 minutes for the process to finish. The board will    automatically restart and boot.</li> </ol> <p>Here is a video showing the process.</p>"},{"location":"unified/msi/recovery/#external-flashing-with-programmer","title":"External flashing with programmer","text":""},{"location":"unified/msi/recovery/#rte","title":"RTE","text":"<p>In this case, using external programmer is necessary. We are using RTE here.</p> <ul> <li> <p>Connect programmer to the flash chip as shown in the   Hardware connection / SPI section of   the <code>Development</code> documentation.</p> </li> <li> <p>Download official BIOS from vendor's website (this is the newest version, you   may choose an older one too or in the best case use your firmware backup):</p> </li> </ul> <pre><code>wget https://download.msi.com/bos_exe/mb/7D25v13.zip\nunzip 7D25v13.zip\n</code></pre> <ul> <li>Flash via external programmer:</li> </ul> <p>The MS7D25 is known to have one of two different flash chips: Winbond W25Q256JWEIQ (Markings: 25Q256JWEQ) and Macronix MX25U25673GZ4I40. The W25Q256JWEIQ is only supported since flashrom upstream v1.3 or the dasharo fork since v1.2. The Macronix chip has been supported for much longer, albeit under a different name.</p> <p>The command line will be different, depending on the programmer you use. See the flashrom documentation for more details.</p> <pre><code>flashrom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000 -w 7D25v13/E7D25IMS.130\n</code></pre> <ul> <li>First boot after the recovery process is significantly longer</li> </ul>"},{"location":"unified/msi/recovery/#ch341a","title":"CH341A","text":""},{"location":"unified/msi/recovery/#prerequisites","title":"Prerequisites","text":"<p>The full set is now available at our online shop.</p> <ol> <li> <p>CH341A kit with 1.8V level-shifter. Can be bought on e.g. Amazon</p> <p></p> </li> <li> <p>Female-female 2.54mm to 2mm dupont wires.</p> </li> <li> <p>USB2.0 Female-Male extension cord 0.5m or longer (optional)</p> <p></p> </li> <li> <p>Machine with Linux and flashrom.</p> </li> </ol>"},{"location":"unified/msi/recovery/#connection","title":"Connection","text":"<p>First start with assembling the CH341A and the 1.8V adapter. Pay attention to which holes you attach the adapter. You should use the holes marked as 25XX (closer to the USB plug):</p> <p></p> <p>Place the 1.8V adapter in the holes and lock it with the lever. Be sure that the arrow on the adapter is facing the black lever (opposite side of USB plug):</p> <p></p> <p>Now take the breakout board with pin headers:</p> <p></p> <p>and plug it into the other 1.8V adapter, be sure that numbers 1-4 on the breakout board match the numbers 1 and 4 on the adapter:</p> <p></p> <p>Numbers should be visible on the upper side after assembling:</p> <p></p> <p>Next, take the dupont wires and connect them to the brekaout board and mainboard's JTPM1 header. The JTPM1 pin5 is actually BIOS SPI CS pin (marked as reserved in the board manual).</p> <p></p> CH341a breakout board MSI Z690-A/Z790-P pin 1 (CS) JTPM1 pin 5 (RESERVED / BIOS SPI CS pin) pin 2 (MISO) JTPM1 pin 3 (MISO) pin 4 (GND) JTPM1 pin 7 (GND) pin 5 (MOSI) JTPM1 pin 4 (MOSI) pin 6 (SCLK) JTPM1 pin 6 (SPI Clock) pin 8 (Vcc) JTPM1 pin 1 (SPI Power) <p>Now the connection is ready. Time to probe for the flash chip with flashrom.</p>"},{"location":"unified/msi/recovery/#flashing","title":"Flashing","text":"<p>Now on the Linux machine check if the flash is detected using a sample command:</p> <pre><code>sudo flashrom -p ch341a_spi\n</code></pre> <p>You should see something like this:</p> <pre><code>flashrom v1.2-567-gf4eb405 on Linux 5.19.9-200.fc36.x86_64 (x86_64)\nflashrom is free software, get the source code at https://flashrom.org\n\nUsing clock_gettime for delay loops (clk_id: 1, resolution: 1ns).\nFound Winbond flash chip \"W25Q256.W\" (32768 kB, SPI) on ch341a_spi.\nNo operations were specified.\n</code></pre> <p>If the flash is detected as above invoke the real flashing command (e.g. if your original/working firmware backup is saved as <code>firmware_backup.bin</code>):</p> <pre><code>sudo flashrom -p ch341a_spi -w firmware_backup.bin\n</code></pre> <p>Note that USB programmers are pretty slow, the whole operation make take several minutes (can be 10-15 minutes in worst case). At the end of operation you should see:</p> <pre><code>flashrom v1.2-567-gf4eb405 on Linux 5.19.9-200.fc36.x86_64 (x86_64)\nflashrom is free software, get the source code at https://flashrom.org\n\nUsing clock_gettime for delay loops (clk_id: 1, resolution: 1ns).\nFound Winbond flash chip \"W25Q256.W\" (32768 kB, SPI) on ch341a_spi.\nReading old flash chip contents... done.\nErasing and writing flash chip... Erase/write done.\nVerifying flash... VERIFIED.\n</code></pre>"},{"location":"unified/msi/recovery/#smbios-unique-data-recovery","title":"SMBIOS unique data recovery","text":""},{"location":"unified/msi/recovery/#serial-number-format-and-recovery","title":"Serial number format and recovery","text":"<p>SMBIOS specification sections 7.2 and 7.3 defines two spaces for serial number: the system serial number and baseboard serial number. The original MSI PRO Z690-A firmware provides only the baseboard serial number.</p> <p>In case you have lost your serial number in the process of flashing Dasharo or newer MSI firmware, there is a way to retrieve it. The board has a QR code printed on the mainboard between the chipset heatsink and dPGU PCIe slot:</p> <p></p> <p>If you read the QR code with your smartphone you will get the full serial number. The serial number has the format <code>07D25xx_LyzEaaaaaa</code> where:</p> <ul> <li><code>07D25</code> - is the board model, i.e. MS-7D25 for this particular board</li> <li><code>xx</code> is the mainboard revision which should match the revision imprinted   between the M2_1 slot and dGPU slot. E.g. <code>xx=11</code> means VER:1.1</li> <li><code>yz</code> is the manufacturing date in hex, i.e. <code>y</code> is the month, <code>z</code> is the   year, for example <code>A1</code> means October 2021, <code>12</code> means January   2022</li> <li><code>aaaaaa</code> is the unique 6-digit number which is imprinted under the serial   number QR code</li> </ul>"},{"location":"unified/msi/recovery/#system-uuid-format-and-recovery","title":"System UUID format and recovery","text":"<p>SMBIOS specification section 7.2 defines a field for unique system identification with a special number called UUID (Universally Unique IDentifier). UUID is specified by RFC 4122. MSI firmware provides the system UUID in the SMBIOS system information structure.</p> <p>The problem with UUID is that it cannot be recovered if the backup binary or SMBIOS logs are lost. You can backup the SMBIOS information with our Dasharo Tools Suite bootablestick. The <code>dmidecode.log</code> will have all the necessary information. Things we know about MSI system UUID:</p> <ul> <li>UUID format is as follows: <code>33221100-5544-7766-8899-AABBCCDDEEFF</code>, the hex   numbers represent the order of bytes in memory for the little-endian format   as required by SMBIOS</li> <li>MSI UUIDs do not conform to any of the RFC 4122 UUID variants/versions (the   bits responsible for UUID version and variant identification are not constant   across multiple boards)</li> <li>the last octet group <code>AABBCCDDEEFF</code> is equal to the MAC address of the   on-board Intel i225 Ethernet, so be sure to NOT share the UUID with   anybody as it contains system sensitive information</li> <li>the first four groups are either random numbers or some cryptographically   acquired value from e.g. combination of some board data, unfortunately it is   not known by us</li> </ul> <p>The MAC address is printed on a sticker placed on the 2x2 SATA connector:</p> <p></p>"},{"location":"unified/msi/recovery/#smbios-data-migration","title":"SMBIOS data migration","text":"<p>For Dasharo simply follow the Initial Deployment how to migrate the data.</p> <p>For MSI firmware you will probably need an AMI DMI/SMBIOS editor to save those values back if you do not have a backup binary.</p>"},{"location":"unified/novacustom/building-manual/","title":"Dasharo firmware building guide","text":"Dasharo (UEFI)Dasharo (coreboot + Heads)"},{"location":"unified/novacustom/building-manual/#intro","title":"Intro","text":"<p>This guide shows how to build Dasharo firmware for NovaCustom devices.</p>"},{"location":"unified/novacustom/building-manual/#requirements","title":"Requirements","text":"<p>This guide was verified on Ubuntu 22.04. In practice, any Linux distribution with Docker support should be enough to complete it.</p> <p>Make sure that you have following packages installed:</p> <ul> <li>Docker<ul> <li>follow Install Docker Engine for Linux</li> <li>follow Post-installation steps for Linux</li> </ul> </li> <li> <p>Git</p> APT package managerDNF package manager <pre><code>sudo apt -y install git\n</code></pre> <pre><code>sudo dnf -y install git\n</code></pre> </li> </ul> LaptopsNUC BOX <p>Laptops consist of two firmware components:</p> <ul> <li>EC firmware</li> <li>BIOS firmware</li> </ul>"},{"location":"unified/novacustom/building-manual/#build-dasharo-ec-firmware","title":"Build Dasharo EC firmware","text":"<ol> <li> <p>Clone the Dasharo ec repository:</p> <pre><code>git clone https://github.com/Dasharo/ec.git\n</code></pre> </li> <li> <p>Navigate to the source code directory and checkout to the desired revision:</p> <pre><code>cd ec\n</code></pre> <p>Replace <code>X.Y.Z</code> with a valid version</p> V540TUV560TUNS5x/7x 12th GenNV4x 12th GenNX5x/7x 11th GenNV4x 11th Gen <pre><code>git checkout novacustom_v540tu_vX.Y.Z\n</code></pre> <pre><code>git checkout novacustom_v560tu_vX.Y.Z\n</code></pre> <pre><code>git checkout novacustom_ns5x_adl_vX.Y.Z\n</code></pre> <pre><code>git checkout novacustom_nv4x_adl_vX.Y.Z\n</code></pre> <pre><code>git checkout novacustom_ns5x_tgl_vX.Y.Z\n</code></pre> <pre><code>git checkout novacustom_nv4x_tgl_vX.Y.Z\n</code></pre> </li> <li> <p>Checkout submodules:</p> <pre><code>git submodule update --init --recursive --checkout\n</code></pre> </li> <li> <p>Build the EC firmware:</p> V540TUV560TUNS5x/7x 12th GenNV4x 12th GenNX5x/7x 11th GenNV4x 11th Gen <pre><code>EC_BOARD_VENDOR=novacustom EC_BOARD_MODEL=v540tu ./build.sh\n</code></pre> <p>The resulting image will be placed in: <code>novacustom_v540tu_ec.rom</code>.</p> <pre><code>EC_BOARD_VENDOR=novacustom EC_BOARD_MODEL=v560tu ./build.sh\n</code></pre> <p>The resulting image will be placed in: <code>novacustom_v560tu_ec.rom</code>.</p> <pre><code>EC_BOARD_VENDOR=novacustom EC_BOARD_MODEL=ns5x_adl ./build.sh\n</code></pre> <p>The resulting image will be placed in: <code>novacustom_ns5x_adl_ec.rom</code>.</p> <pre><code>EC_BOARD_VENDOR=novacustom EC_BOARD_MODEL=nv4x_adl ./build.sh\n</code></pre> <p>The resulting image will be placed in: <code>novacustom_nv4x_adl_ec.rom</code>.</p> <pre><code>EC_BOARD_VENDOR=novacustom EC_BOARD_MODEL=ns5x_tgl ./build.sh\n</code></pre> <p>The resulting image will be placed in: <code>novacustom_ns5x_tgl_ec.rom</code>.</p> <pre><code>EC_BOARD_VENDOR=novacustom EC_BOARD_MODEL=nv4x_tgl ./build.sh\n</code></pre> <p>The resulting image will be placed in: <code>novacustom_nv4x_tgl_ec.rom</code>.</p> </li> </ol>"},{"location":"unified/novacustom/building-manual/#build-dasharo-bios-firmware","title":"Build Dasharo BIOS firmware","text":"<ol> <li> <p>Clone the Dasharo coreboot repository:</p> <pre><code>cd ..\ngit clone https://github.com/Dasharo/coreboot.git\n</code></pre> </li> <li> <p>Navigate to the source code directory and checkout to the desired revision:</p> <pre><code>cd coreboot\n</code></pre> <p>Replace <code>X.Y.Z</code> with a valid version</p> V540TUV560TUNS5x/7x 12th GenNV4x 12th GenNX5x/7x 11th GenNV4x 11th Gen <pre><code>git checkout novacustom_v540tu_vX.Y.Z\n</code></pre> <pre><code>git checkout novacustom_v560tu_vX.Y.Z\n</code></pre> <pre><code>git checkout novacustom_ns5x_adl_vX.Y.Z\n</code></pre> <pre><code>git checkout novacustom_nv4x_adl_vX.Y.Z\n</code></pre> <pre><code>git checkout novacustom_ns5x_tgl_vX.Y.Z\n</code></pre> <pre><code>git checkout novacustom_nv4x_tgl_vX.Y.Z\n</code></pre> </li> <li> <p>Copy the previously built EC firmware to the coreboot folder:</p> V540TUV560TUNS5x/7x 12th GenNV4x 12th GenNX5x/7x 11th GenNV4x 11th Gen <pre><code>cp ../ec/novacustom_v540tu_ec.rom ec.rom\n</code></pre> <pre><code>cp ../ec/novacustom_v560tu_ec.rom ec.rom\n</code></pre> <pre><code>cp ../ec/novacustom_ns5x_adl_ec.rom ec.rom\n</code></pre> <pre><code>cp ../ec/novacustom_nv4x_adl_ec.rom ec.rom\n</code></pre> <pre><code>cp ../ec/novacustom_ns5x_tgl_ec.rom ec.rom\n</code></pre> <pre><code>cp ../ec/novacustom_nv4x_tgl_ec.rom ec.rom\n</code></pre> </li> <li> <p>Checkout submodules:</p> <pre><code>git submodule update --init --recursive --checkout\n</code></pre> </li> <li> <p>Start docker container:</p> <pre><code>docker run --rm -it -u $UID \\\n   -v $PWD:/home/coreboot/coreboot \\\n   -w /home/coreboot/coreboot \\\n   coreboot/coreboot-sdk:2023-11-24_2731fa619b /bin/bash\n</code></pre> <ul> <li>If the build commands ahead fail, try using an older container     <pre><code>docker run --rm -it -u $UID \\\n    -v $PWD:/home/coreboot/coreboot \\\n    -w /home/coreboot/coreboot \\\n    coreboot/coreboot-sdk:2021-09-23_b0d87f753c /bin/bash\n</code></pre></li> </ul> </li> <li> <p>Inside of the container, configure the build process:</p> V540TUV560TUNS5x/7x 12th GenNV4x 12th GenNX5x/7x 11th GenNV4x 11th Gen <pre><code>make distclean &amp;&amp; cp configs/config.novacustom_v540tu .config\n</code></pre> <pre><code>make distclean &amp;&amp; cp configs/config.novacustom_v560tu .config\n</code></pre> <pre><code>make distclean &amp;&amp; cp configs/config.novacustom_ns5x_adl .config\n</code></pre> <pre><code>make distclean &amp;&amp; cp configs/config.novacustom_nv4x_adl .config\n</code></pre> <pre><code>make distclean &amp;&amp; cp configs/config.novacustom_ns5x_tgl .config\n</code></pre> <pre><code>make distclean &amp;&amp; cp configs/config.novacustom_nv4x_tgl .config\n</code></pre> </li> <li> <p>Start the build process:</p> <pre><code>make olddefconfig &amp;&amp; make\n</code></pre> </li> </ol> <p>This will produce a Dasharo binary placed in <code>build/coreboot.rom</code>.</p> <p>The binary will not contain a boot splash logo. Refer to logo customization for including one.</p>"},{"location":"unified/novacustom/building-manual/#build-instructions","title":"Build Instructions","text":"<ol> <li> <p>Clone the Dasharo coreboot repository:</p> <pre><code>git clone https://github.com/Dasharo/coreboot.git\ncd coreboot\n</code></pre> </li> <li> <p>Checkout to a specific version (optional):</p> <pre><code>git checkout novacustom_nuc_box_v0.9.0\n</code></pre> </li> <li> <p>Checkout submodules:</p> <pre><code>git submodule update --init --checkout\n</code></pre> </li> <li> <p>Build the firmware:</p> <pre><code>./build.sh nuc_box\n</code></pre> </li> </ol> <p>The resulting coreboot image will be: <code>novacustom_nuc_box_v0.9.0.rom</code></p>"},{"location":"unified/novacustom/building-manual/#intro_1","title":"Intro","text":"<p>This section presents the crucial steps required to build the Dasharo Heads firmware. For more information, you may also refer to the official Heads building documentation.</p>"},{"location":"unified/novacustom/building-manual/#requirements_1","title":"Requirements","text":"<p>This guide was verified on Ubuntu 22.04. In practice, any Linux distribution with Docker support should be enough to complete it.</p> <p>Make sure that you have following packages installed:</p> <ul> <li>Docker<ul> <li>follow Install Docker Engine on Linux</li> <li>follow Post-installation steps for Linux</li> </ul> </li> <li> <p>Git</p> <pre><code>sudo apt -y install git\n</code></pre> </li> </ul>"},{"location":"unified/novacustom/building-manual/#building","title":"Building","text":"<ol> <li> <p>Clone and navigate to the Dasharo Heads repository:</p> <pre><code>git clone https://github.com/Dasharo/heads.git\ncd heads\n</code></pre> </li> <li> <p>Checkout to the desired revision:</p> V540TU 14th GenV560TU 14th GenNV4x 12th Gen <pre><code>git checkout novacustom_v54x_mtl_v0.9.0\n</code></pre> <pre><code>git checkout novacustom_v56x_mtl_v0.9.0\n</code></pre> <pre><code>git checkout novacustom_nv4x_adl_v0.9.2\n</code></pre> </li> <li> <p>Start the build inside the docker container:</p> V540TU 14th GenV560TU 14th GenNV4x 12th Gen <pre><code>/docker_repro.sh make BOARD=novacustom-v540tu\n</code></pre> <p>This will produce a Dasharo binary placed in <code>build/x86/novacustom-v540tu/dasharo-novacustom-v540tu-*.rom</code>.</p> <pre><code>./docker_repro.sh make BOARD=novacustom-v560tu\n</code></pre> <p>This will produce a Dasharo binary placed in <code>build/x86/novacustom-v560tu/dasharo-novacustom-v560tu-*.rom</code>.</p> <pre><code>./docker_repro.sh make BOARD=novacustom-nv4x_adl\n</code></pre> <p>This will produce a Dasharo binary placed in <code>build/x86/novacustom-nv4x_adl/dasharo-novacustom-nv4x_adl-novacustom_nv4x_adl_v0.9.2.rom</code>.</p> </li> </ol>"},{"location":"unified/novacustom/building-manual/#install-dasharo-firmware","title":"Install Dasharo firmware","text":"<p>The Dasharo firmware can be flashed in following ways, depending on your situation:</p> <ul> <li>To flash Dasharo for the first time, refer to the       initial deployment guide.</li> <li>To update Dasharo, refer to the firmware update guide.</li> </ul>"},{"location":"unified/novacustom/features/","title":"Special features","text":"<p>This document describes special firmware features specific to NovaCustom laptops.</p> LaptopsNUC BOX"},{"location":"unified/novacustom/features/#battery-charge-management","title":"Battery charge management","text":"<p>NovaCustom laptops equipped with Dasharo firmware provide several battery management mechanisms to optimize the user experience and prolong the battery's lifespan.</p>"},{"location":"unified/novacustom/features/#low-battery-boot-prevention","title":"Low battery boot prevention","text":"<p>To prevent corruption of the bootloader, which may occur due to a sudden power loss during the OS boot process, booting the OS is blocked when the battery level is below 5%. When trying to boot the OS with the battery level below the defined threshold, the following message will be shown on the screen:</p> <p></p>"},{"location":"unified/novacustom/features/#disconnected-battery-warning","title":"Disconnected battery warning","text":"<p>When the firmware encounters problems with detecting the battery, the following message will appear suggesting checking the physical connection between the battery and mainboard:</p> <p></p>"},{"location":"unified/novacustom/features/#power-information-error","title":"Power information error","text":"<p>When the firmware encounters problems with retrieving information about AC and battery state, the following error message will be displayed:</p> <p></p>"},{"location":"unified/novacustom/features/#charge-thresholds","title":"Charge thresholds","text":"<p>Dasharo firmware implements battery charge thresholds, which aim to extend the lifespan of the battery:</p> <ul> <li> <p>charging will only start when the battery level is below the lower threshold (default: 95%)</p> </li> <li> <p>charging will stop once the battery level reaches the upper threshold (default: 98%)</p> </li> </ul> <p>Custom charge thresholds can be configured using the Dasharo setup menu.</p>"},{"location":"unified/novacustom/features/#battery-bypass-mode","title":"Battery bypass mode","text":"<p>The device can be powered in three modes:</p> <ul> <li>Battery Mode - the device is powered using the battery only. This mode is active only if the device is not connected to a power adapter.</li> <li>Charging Mode - when the device is connected to a proper power adapter it is powered directly from the adapter and the battery is not used. Only if the current charge level is below the lower charge threshold will the battery start being charged. When the upper threshold is achieved, the battery stops charging and again no current is flowing through it, preventing excessive wear.<ul> <li>If you are using the device like a desktop computer, having it constantly connected to the power adapter, consider lowering the charge thresholds to about 70-80%. By keeping the battery at a lower charge level the battery wear overtime can be reduced.</li> </ul> </li> <li>Hybrid Power Boost mode - the device is powered from the battery and the power adapter at the same time. This mode activates only when the power adapter can't provide enough power to the system. The battery will start charging only if the current charge falls below the lower charge threshold and stop once the upper threshold is achieved.</li> </ul>"},{"location":"unified/novacustom/features/#rgb-keyboard","title":"RGB keyboard","text":"<p>Some models feature an RGB backlit keyboard. Dasharo implements driverless backlight control using only the hotkeys on the keyboard.</p>"},{"location":"unified/novacustom/features/#usage","title":"Usage","text":"<p>The backlight can be controlled using the hotkeys on the numeric keypad:</p> <ul> <li><code>Fn</code> + <code>/</code> - Next color</li> <li><code>Fn</code> + <code>*</code> - Toggle On / Off</li> <li><code>Fn</code> + <code>-</code> - Brightness down</li> <li><code>Fn</code> + <code>+</code> - Brightness up</li> </ul> <p>The backlight has the following color modes:</p> <ul> <li>White (default)</li> <li>Red</li> <li>Green</li> <li>Blue</li> <li>Yellow</li> <li>Magenta</li> <li>Cyan</li> </ul>"},{"location":"unified/novacustom/features/#fn-lock-hotkey","title":"Fn Lock hotkey","text":"<p>By default, the <code>Function Keys</code> (F1 - F12) must be used with a combination of Fn key to change display brightness, keyboard illumination, etc. The <code>Fn lock</code> capability provides a way of using these actions without the necessity of using the Fn key.</p>"},{"location":"unified/novacustom/features/#enabling","title":"Enabling","text":"<p>Press the Fn+Caps Lock keys combination.</p>"},{"location":"unified/novacustom/features/#disabling","title":"Disabling","text":"<p>Press the Fn+Caps Lock keys combination again.</p>"},{"location":"unified/novacustom/features/#power-switch-watchdog","title":"Power switch watchdog","text":"<p>In the rare events where the Embedded Controller experiences a crash or gets stuck, the EC can be forcefully reset by simply holding the power button for more than 10 seconds.</p>"},{"location":"unified/novacustom/features/#acpi-driver","title":"ACPI driver","text":"<p>The ACPI Driver is a Linux kernel module that utilizes the hwmon interface to monitor the hardware. This interface is based on the sysfs file system, enabling reading of the real-time data about the hardware status.</p> <p>The driver provides support for sensors that report values of temperature, fan speeds and fan PWM for CPU and GPU (if supported by the platform).</p> <p>To install this feature follow: Dasharo ACPI README.</p>"},{"location":"unified/novacustom/features/#graphics-card-modes","title":"Graphics Card Modes","text":"<p>V5xxTNX models offer multiple graphics modes, accessible via Hybrid Graphics, allowing users to optimize for performance, battery life, or a balance of both.</p>"},{"location":"unified/novacustom/features/#nvidia-optimus-igpu-dgpu","title":"NVIDIA Optimus (iGPU &amp; dGPU)","text":"<p>A hybrid mode that dynamically switches between the iGPU and dGPU for a balance of performance and efficiency. Best for general use with external display support.</p> <ul> <li>Automatic switching optimizes power and performance.</li> <li>Full external display support.</li> <li>Shorter battery life than iGPU Only.</li> <li>Possible performance inconsistencies and Linux compatibility issues.</li> </ul>"},{"location":"unified/novacustom/features/#igpu-only","title":"iGPU Only","text":"<p>Designed for maximum battery life, this mode uses only the integrated GPU. It significantly reduces power consumption but comes with limitations.</p> <ul> <li>Maximizes battery life (up to 100% longer than dGPU mode).</li> <li>No access to HDMI or second USB-C DisplayPort.</li> </ul>"},{"location":"unified/novacustom/features/#dgpu-only","title":"dGPU Only","text":"<p>Ideal for gaming and high-performance tasks, this mode connects the internal display directly to the dedicated GPU, ensuring consistent maximum performance.</p> <ul> <li>Delivers the highest performance.</li> <li>Increased power consumption.</li> </ul>"},{"location":"unified/novacustom/features/#dasharo-trustroot","title":"Dasharo TrustRoot","text":"<p>Users willing to achieve highest level of security hardening can take advantage of Dasharo TrustRoot. It's available on MeteorLake (MTL) devices since v1.0.0 release.  This is done by choosing a fused version of binaries via DTS.  Capsule updates never enable this feature.</p> <p>Warning</p> <p>This feature cannot be disabled after being enabled on a given hardware. Switching it on constrains all future firmware updates.  See Dasharo TrustRoot for more details.</p>"},{"location":"unified/novacustom/features/#cpu-throttling-threshold","title":"CPU throttling threshold","text":"<p>The user can set a custom temperature (in \u00b0C), above which the CPU will start throttling itself. By default, the threshold is set to 80\u00b0C.</p> <p>The available values range from TjMax - 63 to TjMax, where TjMax is the maximum allowed temperature for a particular CPU. That is, for instance, 100\u00b0C for TGL and ADL, and 110\u00b0C for MTL.</p> <p>The option can be set in EDK2, under <code>Dasharo System Features &gt; Power Management Options &gt; CPU Throttling Threshold</code>.</p>"},{"location":"unified/novacustom/features/#fan-profiles","title":"Fan profiles","text":"<p>There are two fan profiles implemented. The profiles can be selected via the Power Management Options menu in the Setup Menu.</p> <p>Fan profiles are defined as follows:</p> SilentPerformance <p>Releases newer than v1.4.0 11th Gen and v1.6.0 12th Gen</p> Temperature [\u00b0C] Fan speed [%] 0 20 65 25 75 35 85 100 <p>Releases v1.4.0 11th Gen and v1.6.0 12th Gen or older</p> Temperature [\u00b0C] Fan speed [%] 0 25 65 30 75 35 100 100 <p>Releases newer than v1.4.0 11th Gen and v1.6.0 12th Gen</p> Temperature [\u00b0C] Fan speed [%] 0 25 55 35 75 60 85 100 <p>Releases v1.4.0 11th Gen and v1.6.0 12th Gen or older</p> Temperature [\u00b0C] Fan speed [%] 0 25 55 35 75 60 100 100 <p>Values in-between curve points are interpolated linearly.</p>"},{"location":"unified/novacustom/firmware-transition/","title":"Firmware transition","text":""},{"location":"unified/novacustom/firmware-transition/#introduction","title":"Introduction","text":"<p>This document describes the process of transitioning from Dasharo UEFI to Heads and the other way around.</p> NUC BOXLaptops <p>The transition is currently only supported on laptops. The NUC BOX is currently not supported by Heads.</p>"},{"location":"unified/novacustom/firmware-transition/#switching-from-dasharo-uefi-to-heads","title":"Switching from Dasharo UEFI to Heads","text":"<p>To change firmware branches from UEFI to Heads, because of how different the two firmware types are, it's required to disable some security measures before flashing. Follow the steps below to install Heads from an existing Dasharo UEFI firmware installation:</p> <ul> <li>Hold down the F2 key and press the Power button to enter the UEFI   Setup Menu</li> <li>Enter the <code>Device Manager</code> submenu and disable <code>Secure Boot</code></li> <li>Enter the <code>Dasharo System Features</code> submenu</li> <li>In the <code>Dasharo Security Options</code> submenu, disable:<ul> <li>SMM BIOS Write Protection</li> <li>BIOS boot medium lock</li> </ul> </li> <li>In the <code>Intel Management Engine Options</code> submenu disable the Management Engine</li> </ul> <p>Tip</p> <p>For a more detailed guide on the UEFI Setup Menu options, check out the Dasharo menu documentation.</p> <ul> <li>Boot into Dasharo Tools   Suite</li> <li>Enter your DPP subscription credentials</li> <li>Select <code>Update Dasharo firmware</code> to check for updates</li> <li>When asked to switch to Heads firmware, press <code>Y</code></li> <li>Proceed with DTS firmware   update   as usual</li> </ul> <p>When the update is finished, your laptop will shut down automatically. Power it back on to boot into your new Heads installation!</p> <p>TOTP secrets warning</p> <p>On the first boot, you will be shown a warning about TOTP secrets. This is normal and expected on the first boot. Run <code>OEM Factory Reset / Re-Ownership</code> to finish deploying Heads.</p> <p>Check out Heads documentation for a detailed factory reset guide.</p> <p>Note for Qubes OS users</p> <p>After installing Qubes while Heads is installed, you will need to select <code>Reset TPM</code> in the Heads menu to finish the installation.</p> <p>From the main menu, enter <code>Options</code> -&gt; <code>TPM/TOTP/HOTP Options</code> and select <code>Reset the TPM</code>.</p> <p>Users upgrading to Heads while Qubes is already installed are not affected.</p>"},{"location":"unified/novacustom/firmware-transition/#switching-from-dasharo-heads-back-to-uefi","title":"Switching from Dasharo Heads back to UEFI","text":"<p>To revert back to UEFI, you will need to use Heads' built-in firmware update tool:</p> <ul> <li> <p>Prepare USB stick with UEFI firmware binary</p> <p>Supported filesystems</p> <p>FAT, exFAT or ext4 filesystem is recommended</p> </li> <li> <p>Insert the USB stick into the laptop</p> </li> <li>Enter Heads main menu -&gt; Options -&gt; Flash/Update the BIOS</li> <li>Select Flash the firmware with a new ROM, erase settings</li> <li>Confirm that you have inserted the USB stick</li> <li>Select your downloaded firmware binary on the USB stick</li> <li>(Optional) Compare sha256 checksum with the official, signed digests available   on the <code>Releases</code> page for your device on docs.dasharo.com</li> <li>Select Yes to begin flashing</li> <li>When the update is done, press Enter to reboot your device.</li> </ul> <p>Your device should reboot into UEFI firmware.</p> <p>When reverting to UEFI, it's not possible to restore EFI boot manager entries that were added before installing Heads. Therefore, you may need to re-create your boot entries manually, or find your boot loader using <code>Boot From File</code> option in the UEFI setup menu.</p>"},{"location":"unified/novacustom/firmware-update/","title":"Firmware update","text":"<p>The following documentation describes the process of Dasharo open-source firmware update. The update process may be different, depending on which firmware version is currently installed on your device.</p> <p>Boot time after update</p> <p>The first boot after updating firmware may take a longer time than usual, due to memory being re-trained. Generally, first boot time increases according to the amount of installed RAM in the system. A system with 96 GB of RAM may take over 2 minutes to boot.</p> <p>After first boot, memory training settings are cached, and subsequent boot times should be much lower.</p> Dasharo (UEFI)Dasharo (coreboot + Heads) LaptopsNUC BOX <p>Ensure that the firmware protections are disabled (1) in Dasharo Security Options. Both <code>BIOS boot medium lock</code> and <code>Enable SMM BIOS write protection</code> should be unchecked. UEFI Secure Boot must be disabled as well (uncheck <code>Attempt Secure Boot</code> if <code>Current Secure Boot State</code> does not say <code>Disabled</code>). To apply changes, you will need to reboot.</p> <ol> <li>These options were introduced in v1.5.0 for TGL models and v1.7.0 for ADL    models. You can skip these steps if you are using an older firmware version.</li> </ol> <p>Follow the local firmware update procedure described in the DTS firmware update documentation.</p> <p>Please note that network boot must be enabled if you want to boot to the Dasharo Tools Suite over a network connection.</p>"},{"location":"unified/novacustom/firmware-update/#prerequisites","title":"Prerequisites","text":"<p>Your firmware version can be checked by entering the Dasharo Setup Menu using the F2 key while booting.</p> <p>Advanced users can also build and/or flash the binaries themselves by following the steps under the Manual update section.</p>"},{"location":"unified/novacustom/firmware-update/#capsule-update-via-fwupd","title":"Capsule Update via fwupd","text":"<p>fwupd and Capsule Update are available starting with the following versions:</p> Generation Version 11th 1.6.0 12th 1.8.0 14th 1.0.0 <p>Note</p> <p>Capsule updates are only available when Intel ME is HAP-Disabled and the AC adapter is connected to the laptop</p> <p>See this Knowledge Base article for information about disabling the ME, or Issue #1302 for more context.</p> <p>To update your firmware, run the following commands:</p> <pre><code>$ sudo fwupdtool refresh\n$ sudo fwupdtool update\n</code></pre> <p>or use any other fwupd front-end of your choice, like GNOME Firmware Update. Then, reboot your machine to apply the update.</p> <p>Warning</p> <p>Powering off instead of rebooting as instructed by fwupd will result in aborting the update.</p>"},{"location":"unified/novacustom/firmware-update/#firmware-update-mode","title":"Firmware Update Mode","text":"<p>Firmware Update Mode is available starting with the following versions:</p> Generation Version 11th 1.5.0 12th 1.7.0 14th Any <p>To update using Firmware Update Mode, follow the generic Firmware Update documentation.</p> <p>Check out our YouTube video for a demonstration of Firmware Update Mode.</p>"},{"location":"unified/novacustom/firmware-update/#updating-older-versions","title":"Updating older versions","text":"<ol> <li> <p>First, ensure that UEFI Secure Boot    has been disabled.</p> </li> <li> <p>Boot to the Dasharo Tools Suite.    We recommend the network boot option.</p> </li> <li> <p>In the main menu of Dasharo Tools Suite, select option <code>5</code> to proceed with    the installation of the firmware update.</p> </li> <li> <p>In case you want to know more about the firmware update option in Dasharo    Tools Suite, please check out the    features section    of the dedicated Dasharo Tools Suite documentation page.</p> </li> </ol>"},{"location":"unified/novacustom/firmware-update/#manual-update","title":"Manual update","text":"<p>This update method is for advanced users only and is not recommended for regular end users.</p> <p>Please make sure you that you update the BIOS firmware and the EC firmware respectively, as the laptop will power off after the EC firmware flash.</p>"},{"location":"unified/novacustom/firmware-update/#manual-update_1","title":"Manual update","text":"<p>Currently, the NUC BOX only supports updating the firmware manually via DTS.</p>"},{"location":"unified/novacustom/firmware-update/#firmware-update_1","title":"Firmware update","text":"<p>Build or download Dasharo Heads firmware, and proceed with the official Heads update documentation.</p>"},{"location":"unified/novacustom/hcl/","title":"Hardware Compatibility Lists","text":"<p>The following compatibility list contains devices and accessories that have been tested to work with Dasharo firmware.</p> <p>Feel free to perform different tests and report your results via email or submit a Pull Request to Dasharo documentation repository or by using Dasharo issues repository.</p> <p>Devices listed with <code>Official support</code> are tested for each firmware release and are guaranteed to be compatible. Reports noted as <code>Internal testing</code> come from internal employee testing carried out by us, but aren't guaranteed to work. Reports from the community should link to the appropriate GitHub PR and / or issue from which the report is sourced.</p> USB-C HCL (11 Dec 2023) <p>This section is for USB Type-C accessories: docks, hubs, power supplies and other types of peripherals.</p> NS5x/7x 12th GenNV4x 12th GenNS5x/7x 11th GenNV4x 11th GenNV4x 12th Gen (Heads)V54 / V56 14th Gen <ol> <li>Rev.C1 and Rev.E</li> <li>DP Alt mode: Synaptics VMM5310 DP MST hub, two upstream DP 1.4 lanes,    DSC 1.2 decompression, up to 2x 4K60 + 1x 4K30 depending on source.</li> <li>Rev.A1</li> <li>Up to 2x 5K60 supported. OS driver required.</li> </ol>"},{"location":"unified/novacustom/hcl/#docks","title":"Docks","text":"Manufacturer Model Dasharo version Notes Source Wavlink UMD05 Pro (1) v1.7.2 No issues (2) Official support Wavlink UG69PD2 (3) v1.7.2 DisplayLink (4) Official support"},{"location":"unified/novacustom/hcl/#hubs","title":"Hubs","text":"Manufacturer Model Dasharo version Notes Source Levin 7-in-1 Type-C Hub Pro v1.7.2 No issues Official support Generic 8-in-1 Type-C Hub v1.7.2 One video output usable at a time Official support"},{"location":"unified/novacustom/hcl/#docks_1","title":"Docks","text":"Manufacturer Model Dasharo version Notes Source Wavlink UMD05 Pro (1) v1.7.2 No issues (2) Official support Wavlink UG69PD2 (3) v1.7.2 DisplayLink (4) Official support Lenovo USB-C Dock Gen2 v0.9.0 <ul><li>Can overdraw power from the dock, fixed in v1.7.2</li><li>Power button not supported</li> Internal testing Lenovo Universal USB-C Dock v0.9.0 <ul><li> Need 130W power supply option to not overdraw, fixed in v1.7.2</li><li>Power button not supported</li> Internal testing Belkin USB-C 11-in-1 Multiport Dock v0.9.0 No issues Internal testing <ol> <li>Rev.C1 and Rev.E</li> <li>DP Alt mode: Synaptics VMM5310 DP MST hub, two upstream DP 1.4 lanes,    DSC 1.2 decompression, up to 2x 4K60 + 1x 4K30 depending on source.</li> <li>Rev.A1</li> <li>Up to 2x 5K60 supported. OS driver required.</li> </ol>"},{"location":"unified/novacustom/hcl/#hubs_1","title":"Hubs","text":"Manufacturer Model Dasharo version Notes Source Levin 7-in-1 Type-C Hub Pro v1.7.2 No issues Official support Generic 8-in-1 Type-C Hub v1.7.2 One video output usable at a time Official support CableMatters Triple Display Travel Hub (201431-BLK) v0.9.0 No issues Internal testing <ol> <li>Rev.A1</li> <li>Up to 2x 5K60 supported. OS driver required.</li> </ol> <ol> <li>Rev.A1</li> <li>Up to 2x 5K60 supported. OS driver required.</li> </ol> <ol> <li>Rev.C1 and Rev.E</li> <li>DP Alt mode: Synaptics VMM5310 DP MST hub, two upstream DP 1.4 lanes,    DSC 1.2 decompression, up to 2x 4K60 + 1x 4K30 depending on source.</li> </ol> <ol> <li>Rev.C1 and Rev.E</li> <li>DP Alt mode: Synaptics VMM5310 DP MST hub, two upstream DP 1.4 lanes,    DSC 1.2 decompression, up to 2x 4K60 + 1x 4K30 depending on source.</li> <li>Processor performance reduction,    Intermittent USB 3.0 device dropouts</li> </ol> <p>Note on DisplayLink compatibility: DisplayLink requires a driver to function correctly. On Windows, the driver should install automatically if network is connected and Windows Update is enabled. On Linux, consult your distribution's documentation on DisplayLink compatibility. Preboot video output is not supported.</p>"},{"location":"unified/novacustom/hcl/#docks_2","title":"Docks","text":"Manufacturer Model Dasharo version Notes Source Wavlink UG69PD2 (1) v1.5.2 DisplayLink (2) Official support"},{"location":"unified/novacustom/hcl/#hubs_2","title":"Hubs","text":"Manufacturer Model Dasharo version Notes Source Levin 7-in-1 Type-C Hub Pro v1.5.2 No issues Official support Generic 8-in-1 Type-C Hub v1.5.2 One video output usable at a time Official support"},{"location":"unified/novacustom/hcl/#docks_3","title":"Docks","text":"Manufacturer Model Dasharo version Notes Source Wavlink UG69PD2 (1) v1.5.2 DisplayLink (2) Official support"},{"location":"unified/novacustom/hcl/#hubs_3","title":"Hubs","text":"Manufacturer Model Dasharo version Notes Source Levin 7-in-1 Type-C Hub Pro v1.5.2 No issues Official support Generic 8-in-1 Type-C Hub v1.5.2 One video output usable at a time Official support Belkin USB-C 11-in-1 Multiport Dock v0.9.0 No issues Internal testing"},{"location":"unified/novacustom/hcl/#docks_4","title":"Docks","text":"Manufacturer Model Dasharo version Notes Source Wavlink UMD05 Pro (1) v1.7.2 No issues (2) Official support"},{"location":"unified/novacustom/hcl/#docks_5","title":"Docks","text":"Manufacturer Model Dasharo version Notes Source Wavlink UMD05 Pro (1) v0.9.0 No issues (2) Official support Sonnet Echo 11 Thunderbolt 4 ECHO-DK11-T4 v0.9.0 Some issues (3) Official support"},{"location":"unified/novacustom/initial-deployment/","title":"Initial Deployment","text":""},{"location":"unified/novacustom/initial-deployment/#intro","title":"Intro","text":"<p>This document is a guide for the initial installation of Dasharo on a supported device. It assumes some knowledge about external flashing and is primarily aimed at technicians performing the initial installation and not for end users of the devices.</p>"},{"location":"unified/novacustom/initial-deployment/#installing-dasharo","title":"Installing Dasharo","text":""},{"location":"unified/novacustom/initial-deployment/#preparation","title":"Preparation","text":"<p>On your host computer, install flashrom from sources:</p> <p>Note</p> <p>Building from source is required, because the latest flashrom release as of the time of writing does not have support for the flash chip model present in these devices.</p> <ol> <li>Install build dependencies</li> </ol> APT package managerDNF package manager <pre><code>apt update\napt upgrade\napt install git build-essential debhelper pkg-config libpci-dev libusb-1.0-0-dev libftdi1-dev meson\n</code></pre> <pre><code>dnf group install c-development development-tools\ndnf install git debhelper pkgconf-pkg-config pciutils-devel libusb-compat-0.1-devel libftdi-devel meson\n</code></pre> <ol> <li> <p>Clone the flashrom repository:</p> <pre><code>git clone https://review.coreboot.org/flashrom.git\n</code></pre> </li> <li> <p>Build and install flashrom:</p> <pre><code>cd flashrom\nmeson build\nninja -C build\nsudo ninja -C build install\n</code></pre> </li> </ol>"},{"location":"unified/novacustom/initial-deployment/#initial-installation","title":"Initial Installation","text":"LaptopsNUC BOX 14th Gen (Meteor Lake)12th Gen (Alder Lake)11th Gen (Tiger Lake) <p>Due to flash protection and Intel ME configuration present in vendor firmware, initial deployment must be performed externally (using a chip programmer like CH341a).</p> <p>During the initial installation of Dasharo, you should deploy the supported Intel ME version (and configuration) on the device. Since vendor firmware has enabled Intel Boot Guard and BIOS Guard, it is not possible to do this from within the operating system and external flashing of the whole flash chip using a programmer like the CH341a is required.</p> <p>Initial flashing of Dasharo firmware can be done from Linux using flashrom with the internal programmer.</p> <p>This document describes the process of building, installing and running flashrom on Ubuntu 24.04.</p>"},{"location":"unified/novacustom/initial-deployment/#ec-installation","title":"EC installation","text":"<p>Steps for installing Dasharo Embedded Controller Firmware:</p> <ol> <li> <p>On the target laptop,    boot into Dasharo Tools Suite from a USB stick</p> </li> <li> <p>Ensure power adapter is plugged into the laptop</p> </li> <li> <p>Press <code>S</code> to drop to shell</p> </li> <li> <p>Download the EC firmware from the Releases page for your device with    <code>wget</code></p> </li> <li> <p>Install the EC firmware:</p> <pre><code>flashrom -p ite_ec:boardmismatch=force,romsize=128K -w path/to/ec.rom\n</code></pre> </li> </ol>"},{"location":"unified/novacustom/initial-deployment/#bios-installation","title":"BIOS installation","text":"<p>Steps for installing Dasharo BIOS:</p> <ol> <li>Remove the bottom cover of the laptop.</li> <li>Disconnect the primary battery.</li> <li> <p>Disconnect the CMOS battery.</p> <p>Warning</p> <p>Disconnecting the CMOS battery will result in the internal date being reset.</p> </li> <li> <p>Attach a WSON-8 probe to the SPI flash chip.</p> </li> <li> <p>Backup the current firmware, in case you want to be able to restore it     at some point:</p> <pre><code>flashrom -p ch341a_spi -r bios_backup.rom\n</code></pre> </li> <li> <p>Install Dasharo BIOS, replacing <code>[path]</code> with the path to the firmware     image you want to flash, e.g. <code>novacustom_v540tu_v0.9.0.rom</code>:</p> <ul> <li> <p>Step 1: Flash descriptor:</p> <pre><code>flashrom -p ch341a_spi -w [path] --ifd -i fd\n</code></pre> </li> <li> <p>Step 2: BIOS and CSME:</p> <pre><code>flashrom -p ch341a_spi -w [path] --ifd -i me -i bios\n</code></pre> </li> </ul> </li> <li> <p>Detach the WSON-8 probe.</p> </li> <li>Connect the primary battery and reconnect the CMOS battery.</li> <li>Power on the laptop. The laptop may shut down once after training the memory.</li> </ol>"},{"location":"unified/novacustom/initial-deployment/#bios-installation_1","title":"BIOS installation","text":"<p>Steps for installing Dasharo BIOS:</p> <ol> <li> <p>Remove the bottom cover of the laptop.</p> NS5x / NS7xNV4x <p></p> <p></p> </li> <li> <p>Disconnect the primary battery. (1)</p> </li> <li> <p>Disconnect the CMOS battery. (2)</p> <p>Warning</p> <p>Disconnecting the CMOS battery will result in the internal date being reset.</p> </li> <li> <p>Attach a WSON-8 probe to the SPI flash chip. (3)</p> <p>For TGL devices use SOIC clip instead of WSON</p> </li> <li> <p>Backup the current firmware, in case you want to be able to restore it     at some point:</p> <pre><code>flashrom -p ch341a_spi -r bios_backup.rom\n</code></pre> </li> <li> <p>Install Dasharo BIOS, replacing <code>[path]</code> with the path to the firmware     image you want to flash, e.g. <code>novacustom_ns5x_adl_full_v1.4.0.rom</code></p> <pre><code>flashrom -p ch341a_spi -w [path]\n</code></pre> </li> <li> <p>Detach the WSON-8 probe.</p> </li> <li>Connect the primary battery and reconnect the CMOS battery.</li> <li>Power on the laptop. The laptop may shut down once after training the memory.</li> </ol>"},{"location":"unified/novacustom/initial-deployment/#ec-firmware-installation","title":"EC firmware installation","text":"<p>Currently, the latest flashrom release lacks support for flashing ITE embedded controllers such as the ones present in NovaCustom laptops. Because of this, we need to build flashrom from source. Run the following commands on the target laptop:</p> <ol> <li> <p>Install build dependencies:</p> APT package managerDNF package manager <pre><code>apt update\napt upgrade\napt install git build-essential debhelper pkg-config libpci-dev libusb-1.0-0-dev libftdi1-dev meson\n</code></pre> <pre><code>dnf group install c-development development-tools\ndnf install git debhelper pkgconf-pkg-config pciutils-devel libusb-compat-0.1-devel libftdi-devel meson\n</code></pre> </li> <li> <p>Obtain source code:</p> <pre><code>git clone https://github.com/dasharo/flashrom.git\ncd flashrom\n</code></pre> </li> <li> <p>Build flashrom:</p> <pre><code>make\nsudo make install\n</code></pre> </li> <li> <p>Make a backup of the EC firmware:</p> <p>Remember to store the backup on the separate device in case flashing fails.</p> <pre><code>flashrom -p ite_ec -r ec_backup.rom\n</code></pre> </li> <li> <p>Install the EC firmware:</p> <p>Warning: After running this command, the internal keyboard and power button will stop responding until the device is power cycled (all power must be removed, including the internal battery). Be prepared to disconnect the battery after updating the EC.</p> <p>Alternatively, you can boot up the laptop without the battery connected and power it from an AC adapter. Then, once the EC update is complete, disconnect the AC adapter to power off the laptop.</p> <p>Run the following command, replacing <code>[path]</code> with the path to the EC firmware you want to flash, e.g. <code>novacustom_ns5x_adl_ec_v1.4.0.rom</code></p> <pre><code>flashrom -p ite_ec -w [path]\n</code></pre> </li> </ol> <p>Successful installation of Dasharo EC finishes the initial deployment process.</p>"},{"location":"unified/novacustom/initial-deployment/#initial-deployment_1","title":"Initial deployment","text":"<p>To ensure a smooth deployment process, it is recommended to use the latest version of DTS available from the releases page. Once you have obtained it, you can then proceed with following the Dasharo zero-touch initial deployment section procedure. This will help you set up Dasharo effectively and without manual intervention.</p> <p>If something went wrong or EC installation was not done, the firmware will print an error string during boot:</p> <p></p> <p>OR</p> <p></p> <p>In such case please follow the EC firmware update instructions for a specific board variant.</p>"},{"location":"unified/novacustom/initial-deployment/#flashing-dasharo","title":"Flashing Dasharo","text":"<p>To flash Dasharo on the platform, execute the following command - replace <code>[path]</code> with the path to the Dasharo image you want to flash, e.g. <code>novacustom_nuc_box_v0.9.0.rom</code>.</p> <pre><code>sudo flashrom -p internal -w [path]\n</code></pre> <p>After successful operation, power off the platform, unplug power from the platform, plug it back in and power the platform back on.</p>"},{"location":"unified/novacustom/initial-deployment/#coreboot-heads","title":"coreboot + Heads","text":"<p>The supported method for initial deployment of the coreboot + Heads variant is to follow installing Dasharo, and then transition from Dasharo UEFI to Heads variant.</p>"},{"location":"unified/novacustom/overview/","title":"Overview","text":"<p>Select your Dasharo firmware flavor:</p> Dasharo (coreboot + UEFI)Dasharo (coreboot + Heads) <p>NovaCustom laptops come with this firmware variant out of the box.</p> <p>Heads-based firmware is offered as a Dasharo Pro Package option.</p> <p>Note</p> <p>This section applies to users of the Heads-based firmware version. If you are unsure which firmware version you're using, select <code>coreboot + UEFI</code> instead.</p>"},{"location":"unified/novacustom/overview/#models","title":"Models","text":"NUC BOXV54 SeriesV56 SeriesNS5x/7x 12th GenNV4x 12th GenNS5x/7x 11th GenNV4x 11th Gen <p>NovaCustom NUC BOX is a compact, high-performance small form factor  PC based on Intel\u00ae Core\u2122 Ultra (Meteor Lake-H) processors.</p> <p></p> <ul> <li>NUC BOX 155H</li> </ul> <p>NovaCustom V54 is a series of 14 inch laptops based on 14th Generation Intel Core Ultra processors (Meteor Lake):</p> <p></p> <ul> <li>V54 Series</li> </ul> <p>NovaCustom V56 is a series of 16 inch laptops based on 14th Generation Intel Core Ultra processors (Meteor Lake):</p> <p></p> <ul> <li>V56 Series</li> </ul> <p>NovaCustom NS5x/7x 12th Gen are 15 and 17 inch laptops based on 12th generation Intel Core processor (Alder Lake):</p> <p></p> <ul> <li>NS51 Series</li> <li>NS70 Series</li> </ul> <p>NovaCustom NV4x 12th Gen is a 14 inch laptop based on 12th generation Intel Core processor (Alder Lake):</p> <p></p> <ul> <li>NV41 Series</li> </ul> <p>NovaCustom NS5x/7x 11th Gen are 15 and 17 inch laptops based on 11th generation Intel Core processor (Tiger Lake):</p> <p></p> <ul> <li>NS51 Series</li> <li>NS70 Series</li> </ul> <p>NovaCustom NV4x 11th Gen is a 14 inch laptop based on 11th generation Intel Core processor (Tiger Lake):</p> <p></p> <ul> <li>NV40 Series</li> </ul> <p>For more information on the hardware, please refer to the links above.</p>"},{"location":"unified/novacustom/overview/#firmware","title":"Firmware","text":"<p>A complete Dasharo firmware release consists of the BIOS firmware, and in the case of laptops, also the EC (Embedded Controller) firmware.</p> <p>They both interact with each other tightly, so keeping their compatible versions in sync is important. Information on compatibility should always be explained on the release pages:</p> <ul> <li>NUC BOX</li> <li>V54 Series<ul> <li>V540TU (1)</li> <li>V540TNx (2)</li> </ul> </li> <li>V56 Series<ul> <li>V560TU (3)</li> <li>V560TNx (4)</li> </ul> </li> <li>NV4x 12th Gen</li> <li>NV4x 11th Gen</li> <li>NS5x/7x 12th Gen</li> <li>NS5x/7x 11th Gen</li> </ul> <ol> <li>14 inch, Integrated graphics</li> <li>14 inch, Discrete NVIDIA graphics</li> <li>16 inch, Integrated graphics</li> <li>16 inch, Discrete NVIDIA graphics</li> </ol>"},{"location":"unified/novacustom/overview/#models_1","title":"Models","text":"V54 SeriesV56 SeriesNV4x 12th Gen <p>NovaCustom V54 series are 14 inch laptops based on 14th Generation Intel Core Ultra processors (Meteor Lake):</p> <p></p> <ul> <li>V54 Series</li> </ul> <p>NovaCustom V56 serues are 16 inch laptops based on 14th Generation Intel Core Ultra processors (Meteor Lake):</p> <p></p> <ul> <li>V56 Series</li> </ul> <p>NovaCustom NV4x 12th Gen is a 14 inch laptop based on 12th generation Intel Core processor (Alder Lake):</p> <p></p> <ul> <li>NV41 Series</li> </ul> <p>For more information on the hardware, please refer to the references in above links.</p>"},{"location":"unified/novacustom/overview/#firmware_1","title":"Firmware","text":"<p>Each firmware release contains the BIOS firmware. Laptop releases additionally contain the EC (Embedded Controller) firmware.</p> <p>They both interact with each other tightly, so keeping their compatible versions in sync is important. Information on compatibility should always be explained on the release pages:</p> <ul> <li>V56 Series<ul> <li>V560TU (1)</li> </ul> </li> <li>V54 Series<ul> <li>V540TU</li> </ul> </li> <li>NV4x 12th Gen</li> </ul> <ol> <li>16 inch, Integrated graphics</li> </ol>"},{"location":"unified/novacustom/recovery/","title":"Recovery","text":""},{"location":"unified/novacustom/recovery/#introduction","title":"Introduction","text":"<p>The following documentation describes the process of recovering NovaCustom platforms from the brick state. This procedure can be used to restore both Dasharo and previous Insyde/AMI firmware. This procedure can be used to restore both Dasharo and previous Insyde/AMI firmware.</p> LaptopsNUC BOX <p>The NovaCustom NUC BOX-155H platform utilizes a socket-mounted WSON8 flash memory device to store its system firmware. Owing to the package's lack of exposed signal pins, conventional in-circuit programming tools such as Pomona clips are inapplicable. Instead, firmware provisioning must occur via physical extraction and external reprogramming of the WSON8 module.</p> <p>\u26a0\ufe0f Caution: The mechanical tolerances of the socket and the fragility   of the chip necessitate careful handling. Excessive insertions and   removals may result in socket fatigue or irreversible damage to the   flash device. This procedure is inherently manual and is ill-suited for   deployment in automated or continuous integration workflows.</p>"},{"location":"unified/novacustom/recovery/#prerequisites","title":"Prerequisites","text":"<p>Warning</p> <p>To proceed with the recovery procedure, the backup with the vendor firmware or vendor EC firmware will be necessary eg. <code>bios_backup.rom</code>, <code>ec_backup.rom</code>.</p> <p>The backup file should be generated before making any changes to the device flash chip according to the following documentation sections:</p> <ul> <li>Firmware backup</li> <li>EC firmware backup</li> </ul> <p>Restoring vendor BIOS requires restoring a compatible version of EC firmware.   There is currently no way to do this internally.</p>"},{"location":"unified/novacustom/recovery/#necessary-components","title":"Necessary components","text":"BIOSEC 11th Gen models12th Gen models14th Gen models <p>You will need:</p> <ul> <li>a CH341a programmer with 3.3V support</li> <li>a SOIC-8 (Pomona) clip</li> </ul> <p>You will need:</p> <ul> <li>a CH341a programmer with 3.3V support</li> <li>a WSON-8 probe</li> </ul> <p>You will need:</p> <ul> <li>a CH341a programmer with 1.8V support</li> <li>a WSON-8 probe</li> </ul> <p>A complete set containing everything you need is available from our shop.</p> <p>Follow the Initial deployment section to perform the external flash. When running the flashrom commands, use a backup file you've prepared previously, like <code>bios_backup.rom</code>.</p> NS5x / NS7xNV4xV540V560 <p>You will need:</p> <ul> <li>an Arduino Mega 2560</li> <li>a 24-pin FFC cable with a 1.0mm pitch, same-sided (connectors on the same side     on both ends of the cable)</li> <li>a 24-pin FFC breakout board with a 1.0mm pitch FFC connector and a 2.54mm      pitch pin header</li> <li>USB-A to USB-B cable to connect the Arduino to the host</li> <li>USB-C cable for grounding with power blocker</li> </ul> <p>You will need:</p> <ul> <li>an Arduino Mega 2560</li> <li>a 24-pin FFC cable with a 0.5mm pitch, same-sided (connectors on the same side   on both ends of the cable)</li> <li>a 24-pin FFC breakout board with a 0.5mm pitch FFC connector and a 2.54mm   pitch pin header</li> <li>USB-A to USB-B cable to connect the Arduino to the host</li> <li>USB-C cable for grounding with power blocker</li> </ul> <p>You will need:</p> <ul> <li>an Arduino Mega 2560</li> <li>a 24-pin FFC cable with a 0.5mm pitch, same-sided (connectors on the same side   on both ends of the cable)</li> <li>a 24-pin FFC breakout board with a 0.5mm pitch FFC connector and a 2.54mm   pitch pin header</li> <li>USB-A to USB-B cable to connect the Arduino to the host</li> <li>USB-C cable for grounding with power blocker</li> </ul> <p>You will need:</p> <ul> <li>an Arduino Mega 2560</li> <li>a 24-pin FFC cable with a 1.0mm pitch, same-sided (connectors on the same side   on both ends of the cable)</li> <li>a 24-pin FFC breakout board with a 1.0mm pitch FFC connector and a 2.54mm   pitch pin header</li> <li>USB-A to USB-B cable to connect the Arduino to the host</li> <li>USB-C cable for grounding with power blocker</li> </ul> <p>The full set for EC firmware recovery is available at our online shop.</p>"},{"location":"unified/novacustom/recovery/#ec-firmware-recovery","title":"EC firmware recovery","text":"<p>The procedure will be slightly different depending on the model of your laptop.</p> <p>Danger</p> <p>Ensure you choose the correct FFC cable, as they can be easily damaged. Needed components</p> <p>Important</p> <p>Make sure your battery is connected for this process.</p>"},{"location":"unified/novacustom/recovery/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Clone the EC repository:</li> </ul> <pre><code>git clone https://github.com/Dasharo/ec.git\ncd ec\ngit submodule update --init --checkout\n</code></pre> <ul> <li>Install dependencies:</li> </ul> <pre><code>./scripts/deps.sh\n</code></pre> <ul> <li>If <code>rustup</code> was installed as part of the previous step, run:</li> </ul> <pre><code>source $HOME/.cargo/env\n</code></pre> <ul> <li> <p>Connect the Arduino to the computer using a USB-A to USB-B cable</p> </li> <li> <p>Build and flash firmware for the Arduino, which will serve as the flasher:</p> </li> </ul> <pre><code>make BOARD=arduino/mega2560\nmake BOARD=arduino/mega2560 flash\n</code></pre>"},{"location":"unified/novacustom/recovery/#recovery-steps","title":"Recovery steps","text":""},{"location":"unified/novacustom/recovery/#removing-screws","title":"Removing Screws","text":"V560Other models <ol> <li> <p>For the V560 laptops you will need to remove two stretch-release pull tabs that are holding keyboard in place.</p> <p></p> </li> <li> <p>Second pull tab is located under the heat sink.</p> <p></p> </li> </ol> <p></p> <ol> <li> <p>Remove the two screws holding the keyboard in place. They are indicated on the bottom cover with a keyboard symbol:</p> <p></p> </li> </ol>"},{"location":"unified/novacustom/recovery/#connecting","title":"Connecting","text":"<ol> <li> <p>Pry the keyboard away from the laptop. Use a plastic spudger to release the    tabs holding it in place, starting from the top.</p> <p></p> <p>Warning</p> <p>Be extra careful when removing the keyboard to avoid damaging the fragile keyboard cable!</p> </li> <li> <p>Unplug the keyboard connector by lifting up the tab holding it in place:</p> <p></p> </li> <li> <p>Connect the FFC cable to the FFC breakout board</p> <p></p> <p>Warning</p> <p>In the example above, the FFC connector on the breakout has the pins on the bottom side of the connector and is located on the same side as the pins connecting to the Arduino. If your breakout is different, you may need an FFC cable with connectors on the opposite sides.</p> </li> <li> <p>Insert the breakout into Arduino's digital pin header, pins 22-45, with the    FFC connector facing outwards</p> <p></p> </li> <li> <p>Connect the other end of the FFC cable to the keyboard connector on the    laptop, taking care to align pin 1 of the FFC cable to pin 1 (leftmost) pin    of the connector</p> <p> FFC cable with a 1mm pitch</p> <p> FFC cable with a 0.5mm pitch</p> </li> <li> <p>Connect the Arduino to the host using the USB-A to USB-B cable</p> </li> <li> <p>Connect the USB-C cable together with power blocker from your host    computer to the laptop.</p> <p></p> <p></p> <p>Warning</p> <p>This extra cable is for grounding. It's required, because there is no ground signal on the keyboard connector. If you are not using using Power Blocker Ensure the power pin on the cable is taped over to prevent the Embedded Controller chip from getting powered.</p> </li> </ol>"},{"location":"unified/novacustom/recovery/#flashing","title":"Flashing","text":"<ol> <li> <p>Build the flashing utility:</p> <pre><code>cargo build --manifest-path ecflash/Cargo.toml --example isp --release\n</code></pre> </li> <li> <p>Flash the firmware:</p> <pre><code>sudo ecflash/target/release/examples/isp [path to EC binary]\n</code></pre> <p>The output will contain:</p> <pre><code>Buffer size: 128\nID: 5570 VER: 2\n</code></pre> <p>If it contains other ID value or the connection times out, check all connections, using the photos above for reference.</p> </li> <li> <p>Reassemble the laptop: disconnect the Arduino from the laptop, disconnect the    USB-C grounding cable, reinstall the keyboard, reinstall keyboard screws.</p> </li> </ol> EC Recovery troubleshooting tips <p>Flashing the EC firmware is highly unstable and many small and hard to pinpoint factors might influence it causing the process to fail. Here is a list of known tips and tricks, that are not a part of the official recovery steps, but under some circumstances might help if the flashing fails.</p>"},{"location":"unified/novacustom/recovery/#repeat","title":"Repeat","text":"<p>Sometimes just repeating the flashing might help and no other steps would be necessary. To make it easier you can use a bash loop like this one:</p> <pre><code>while ! sudo ecflash/target/release/examples/isp ec.rom; do sleep 1; done\n</code></pre> <p>Don't overdo it. If flashing did not succeed after a couple minutes, waiting any longer likely won't help.</p>"},{"location":"unified/novacustom/recovery/#connections","title":"Connections","text":"<p>Make sure that everything is connected correctly. Try unplugging and plugging back every cable while running the flashing loop in background.</p>"},{"location":"unified/novacustom/recovery/#repeat-all-the-steps-from-the-beginning","title":"Repeat all the steps from the beginning","text":"<p>It's easy to skip some essential step like building and flashing the Arduino firmware, or forgetting to use a power blocker or to connect the grounding cable altogether. Before trying any optional tips, please verify that all the baseline instructions were performed with care.</p>"},{"location":"unified/novacustom/recovery/#grounding","title":"Grounding","text":"<p>Turns out, that sometimes blocking the <code>5V</code> line on a USB cable is not enough to keep the laptop not powered. The data lines (D+, D-) can carry a little bit of current and make the flashing fail.</p> <p></p> <p>If blocking them is not feasible, try to only slightly lean the connector against the USB-C port on the laptop. Just so that the outer metal part of the connector touches the outer metal part of the charging port. This way the data lines will stay unconnected while a ground connection will be possible to maintain using the metal housing.</p> <p></p>"},{"location":"unified/novacustom/recovery/#connecting-power","title":"Connecting power","text":"<p>These methods can be risky, so leave this option as a last resort when nothing works.</p> <p>It was found out experimentally, that in some scenarios, when nothing else helps, connecting the internal battery or an AC charger can make the flashing to succeed. Try to flash the EC with the battery connected, and then with an AC charger connected.</p> <p>A related trick you can try at this point is to connect the AC charger before running the flashing utility, and disconnecting it during the execution. Try to do that a couple times at different moments.</p>"},{"location":"unified/novacustom/recovery/#bios-flashing","title":"BIOS Flashing","text":"<p>Components Necessary to perform BIOS Recovery: Needed components</p>"},{"location":"unified/novacustom/recovery/#prerequisites_2","title":"Prerequisites","text":"<ul> <li>Flashrom installed on a Linux host</li> <li>BIOS image file to flash</li> </ul>"},{"location":"unified/novacustom/recovery/#flashing_1","title":"Flashing","text":"11th Gen12th Gen14th Gen <ol> <li> <p>Attach the SOIC-8 Pomona clip to the programmer. Take care to align CS pin    with pin 1 on the programmer:</p> <p></p> <p>Danger</p> <p>If your CH341a programmer has a voltage switch, make sure it's at 3.3V. Improper voltage selection may result in hardware damage.</p> <p> </p> </li> <li> <p>Plug the programmer into your host computer.</p> </li> <li> <p>Remove bottom cover from the laptop.</p> NS5x/7x 11th GenNV4x 11th Gen <p></p> <p></p> </li> <li> <p>Unplug the battery (1)</p> <p>Warning</p> <p>Disconnecting the CMOS battery will result in the internal date being reset.</p> </li> <li> <p>Place the SOIC-8 Pomona clip on the BIOS chip, taking care to align the CS pin with the    white dot on the BIOS chip:</p> NS5x/7x 11th GenNV4x 11th Gen <p> </p> <p> </p> </li> <li> <p>Attach the SOIC-8 Pomona clip firmly in place and execute the following command    on your host computer:</p> <pre><code>sudo flashrom -p ch341a_spi -w path/to/firmware.bin\n</code></pre> </li> <li> <p>Power on the laptop to verify the recovery passed. First boot may take a    while, so be patient.</p> </li> </ol> <ol> <li> <p>Attach the WSON probe to the programmer. Take care to align pin 1 indicated    on the probe's breakout board with pin 1 on the programmer:</p> <p></p> <p>Danger</p> <p>If your CH341a programmer has a voltage switch, make sure it's at 3.3V. Improper voltage selection may result in hardware damage.</p> <p> </p> </li> <li> <p>Plug the programmer into your host computer.</p> </li> <li> <p>Remove bottom cover from the laptop.</p> NS5x/7x 12th GenNV4x 12th Gen <p></p> <p></p> </li> <li> <p>Unplug the battery (1)</p> <p>Warning</p> <p>Disconnecting the CMOS battery will result in the internal date being reset.</p> </li> <li> <p>Place the WSON probe on the BIOS chip, taking care to align the dot on the    WSON probe with the white dot on the BIOS chip:</p> NS5x/7x 12th GenNV4x 12th Gen <p> </p> <p> </p> </li> <li> <p>Hold down the WSON probe firmly in place and execute the following command    on your host computer:</p> <pre><code>sudo flashrom -p ch341a_spi -w path/to/firmware.bin\n</code></pre> </li> <li> <p>Power on the laptop to verify the recovery passed. First boot may take a    while, so be patient.</p> </li> </ol> <ol> <li> <p>Attach the WSON probe to the programmer. Take care to align pin 1 indicated    on the probe's breakout board with pin 1 on the programmer:</p> <p></p> <p>Danger</p> <p>If your CH341a programmer has a voltage switch, make sure it's at 1.8V. Improper voltage selection may result in hardware damage.</p> <p> </p> </li> <li> <p>Plug the programmer into your host computer.</p> </li> <li> <p>Remove bottom cover from the laptop.</p> V540TND 14th GenV540TU 14th GenV560TND 14th GenV560TU 14th GenV560TNE 14th Gen <p></p> <p></p> <p></p> <p></p> <p></p> </li> <li> <p>Unplug the battery (1)</p> <p>Warning</p> <p>Disconnecting the CMOS battery will result in the internal date being reset.</p> </li> <li> <p>Place the WSON probe on the BIOS chip, taking care to align the dot on the    WSON probe with the white dot on the BIOS chip:</p> V540TND 14th GenV540TU 14th GenV560TND 14th GenV560TU 14th GenV560TNE 14th Gen <p> </p> <p> </p> <p> </p> <p> </p> <p> </p> </li> <li> <p>Hold down the WSON probe firmly in place and execute the following command     on your host computer:</p> <pre><code>sudo flashrom -p ch341a_spi --ifd -i fd -i me -i bios -w [backup.bin]\n</code></pre> </li> <li> <p>Power on the laptop to verify the recovery passed. First boot may take a     while, so be patient.</p> </li> </ol>"},{"location":"unified/novacustom/recovery/#required-equipment-and-software-dependencies","title":"Required Equipment and Software Dependencies","text":"Component Functionality Description CH341A USB SPI Programmer Facilitates external SPI flash interfacing and programming WSON8-to-SOIC8 Adapter Converts the WSON8 package to a pin-compatible SOIC8 form factor for programmer compatibility Validated Firmware Binary Target image to be written to the flash device <code>flashrom</code> Utility Cross-platform, command-line tool for direct SPI flash manipulation"},{"location":"unified/novacustom/recovery/#firmware-restoration-protocol","title":"Firmware Restoration Protocol","text":"<ol> <li> <p>Ensure the NUC BOX-155H is fully powered down and disconnected from all electrical sources.</p> </li> <li> <p>Employ ESD-safe tools to carefully extract the WSON8 flash chip from its socketed interface.</p> </li> <li> <p>Insert the chip into the WSON8-to-SOIC8 adapter, ensuring correct pin-1 orientation based on device markings.</p> </li> <li> <p>Mount the adapter into the CH341A programmer and connect it to the host workstation via USB.</p> </li> <li> <p>Execute the flashing sequence using the following command:</p> </li> </ol> <pre><code>flashrom -p ch341a_spi -w /path/to/firmware.bin\n</code></pre> <ol> <li> <p>Upon successful write verification, detach the chip from the programming assembly and reinstall it into the motherboard socket, verifying alignment and insertion depth.</p> </li> <li> <p>Reconnect the power supply and other system interfaces, and initiate a power-on cycle.</p> </li> <li> <p>Be advised that initial boot time may be extended as the platform performs low-level firmware initialization routines.</p> </li> </ol> <p>Following this procedure, the system should transition into normal operational state.</p>"},{"location":"unified/protectli/building-manual/","title":"Building manual","text":""},{"location":"unified/protectli/building-manual/#intro","title":"Intro","text":"<p>This document describes the procedure for building coreboot for all Protectli devices.</p>"},{"location":"unified/protectli/building-manual/#requirements","title":"Requirements","text":"<ul> <li>Docker<ul> <li>follow Install Docker Engine on Ubuntu</li> <li>follow Post-installation steps for Linux</li> </ul> </li> <li>Git<ul> <li><code>sudo apt-get install git</code></li> </ul> </li> </ul> <p>Alternatively Fedora can be used instead of Ubuntu by following the same steps except: Install Docker Engine on Fedora</p>"},{"location":"unified/protectli/building-manual/#building","title":"Building","text":"<p>To build Dasharo firmware image, first clone the coreboot repository:     <pre><code>git clone https://github.com/Dasharo/coreboot.git\n</code></pre> then follow the steps below:</p> FW6V1000-seriesVP4630/VP4650/VP4670VP6630/VP6650/VP6670VP2410VP2420VP2430VP3210/VP3230VP2440 <ol> <li>Checkout to the device's branch:     <pre><code>cd coreboot\ngit checkout protectli_vault_kbl/release\n</code></pre></li> </ol> <p>To build a specific version replace <code>protectli_vault_kbl/release</code> to <code>protectli_vault_kbl_v1.0.x</code> where <code>x</code> is the version number.</p> <ol> <li> <p>Start build process (note it requires certain blobs to proceed):</p> <pre><code>cd coreboot\ngit submodule update --init --checkout\n# you will need to obtain the ZIP with blobs at this point\nunzip protectli_blobs.zip -d 3rdparty/blobs/mainboard\n./build.sh fw6\n</code></pre> </li> </ol> <ol> <li> <p>Checkout the desired version, e.g. <code>v0.9.3</code>:</p> <pre><code>cd coreboot\ngit checkout protectli_vault_jsl_v0.9.3\n</code></pre> </li> <li> <p>Checkout submodules:</p> <pre><code>git submodule update --init --checkout\n</code></pre> </li> <li> <p>Obtain the Protectli blobs package (only for versions v0.9.0 and v0.9.1):</p> <p>Replace <code>&lt;PROTECTLI_BLOBS_REPO&gt;</code> with a a proper path to the repository in a form of: <code>git@repo-path.git</code>. You should checkout to the same tag as in case of the coreboot repository.</p> <pre><code>cd 3rdparty/blobs/mainboard/\ngit init\ngit remote add origin &lt;PROTECTLI_BLOBS_REPO&gt;\ngit fetch origin &amp;&amp; git checkout protectli_vault_jsl_v0.9.0\ncd -\n</code></pre> </li> <li> <p>Build the firmware:</p> <ul> <li> <p>for V1210</p> <pre><code>./build.sh V1210\n</code></pre> </li> <li> <p>for V1211</p> <pre><code>./build.sh V1211\n</code></pre> </li> <li> <p>for V1410</p> <pre><code>./build.sh V1410\n</code></pre> </li> <li> <p>for V1610</p> <pre><code>./build.sh V1610\n</code></pre> </li> </ul> </li> </ol> <p>The resulting coreboot image will be placed in the coreboot directory as <code>protectli_V1210.rom</code>, <code>protectli_V1410.rom</code> or <code>protectli_V1610.rom</code> respectvely.</p> <p>Since version v1.0.18 VP4630 and VP4650 use different configuration file than VP4670. Versions v1.0.17 and older do not support VP4650 and VP4670 at all.</p> <p>Versions v1.1.1 and newer support all variants with a single binary.</p> <ol> <li> <p>Checkout the desired version, e.g. <code>v1.1.0</code>:</p> <pre><code>cd coreboot\ngit checkout protectli_vault_cml_v1.1.0\n</code></pre> </li> <li> <p>Checkout submodules:</p> <pre><code>git submodule update --init --checkout\n</code></pre> </li> <li> <p>Obtain the Protectli blobs package (only for version v1.1.0 and older):</p> <p>Replace <code>&lt;PROTECTLI_BLOBS_REPO&gt;</code> with a a proper path to the repository in a form of: <code>git@repo-path.git</code>. You should checkout to the same tag as in case of the coreboot repository.</p> <pre><code>cd 3rdparty/blobs/mainboard/\ngit init\ngit remote add origin &lt;PROTECTLI_BLOBS_REPO&gt;\ngit fetch origin &amp;&amp; git checkout protectli_vault_cml_v1.1.0\ncd -\n</code></pre> </li> <li> <p>Build the firmware:</p> v1.1.1 or newerV1.1.0 or older <pre><code>./build.sh vp46xx\n</code></pre> <p>The resulting coreboot image will be placed in the coreboot directory as <code>protectli_vault_cml_&lt;version&gt;_vp46xx.rom</code>.</p> VP4630 and VP4650VP4670 <pre><code>./build.sh vp4630_vp4650\n</code></pre> <p>The resulting coreboot image will be placed in the coreboot directory as <code>protectli_vault_cml_&lt;version&gt;_vp4630_vp4650.rom</code>.</p> <pre><code>./build.sh vp4670\n</code></pre> <p>The resulting coreboot image will be placed in the coreboot directory as <code>protectli_vault_cml_&lt;version&gt;_vp4670.rom</code>.</p> </li> </ol> <ol> <li> <p>Checkout the desired version, e.g. <code>v0.9.0</code>:</p> <pre><code>cd coreboot\ngit checkout protectli_vault_adl_v0.9.0\n</code></pre> </li> <li> <p>Checkout submodules:</p> <pre><code>git submodule update --init --checkout\n</code></pre> </li> <li> <p>Build the firmware:</p> <pre><code>./build.sh vp66xx\n</code></pre> </li> </ol> <p>The resulting coreboot image will be placed in the coreboot directory as <code>protectli_vp66xx.rom</code>.</p> <ol> <li> <p>Checkout the desired version, e.g. <code>v1.0.15</code>:</p> <pre><code>cd coreboot\ngit checkout protectli_vault_glk_v1.0.15\n</code></pre> </li> <li> <p>Checkout submodules:</p> <pre><code>git submodule update --init --checkout\n</code></pre> </li> <li> <p>Obtain the Protectli blobs package (only for v1.0.15 or older):</p> <p>Replace <code>&lt;PROTECTLI_BLOBS_REPO&gt;</code> with a a proper path to the repository in a form of: <code>git@repo-path.git</code>. You should checkout to the same tag as in case of the coreboot repository.</p> <pre><code>cd 3rdparty/blobs/mainboard/\ngit init\ngit remote add origin &lt;PROTECTLI_BLOBS_REPO&gt;\ngit fetch origin &amp;&amp; git checkout protectli_vault_glk_v1.0.15\ncd -\nln -s ../blobs/mainboard/protectli/vault_glk/GeminilakeFspBinPkg/ 3rdparty/fsp/GeminilakeFspBinPkg\n</code></pre> </li> <li> <p>Build the firmware:</p> <pre><code>./build.sh vp2410\n</code></pre> </li> </ol> <p>The resulting coreboot image will be placed in the coreboot directory as <code>protectli_vp2410_&lt;version&gt;.rom</code>.</p> <ol> <li> <p>Checkout the desired version, e.g. <code>v1.1.0</code>:</p> <pre><code>cd coreboot\ngit checkout protectli_vault_ehl_v1.1.0\n</code></pre> </li> <li> <p>Checkout submodules:</p> <pre><code>git submodule update --init --checkout\n</code></pre> </li> <li> <p>Obtain the Protectli blobs package (only v1.1.0 or older):</p> <p>Replace <code>&lt;PROTECTLI_BLOBS_REPO&gt;</code> with a a proper path to the repository in a form of: <code>git@repo-path.git</code>. You should checkout to the same tag as in case of the coreboot repository.</p> <pre><code>cd 3rdparty/blobs/mainboard/\ngit init\ngit remote add origin &lt;PROTECTLI_BLOBS_REPO&gt;\ngit fetch origin &amp;&amp; git checkout protectli_vault_ehl_v1.1.0\ncd -\n</code></pre> </li> <li> <p>Build the firmware:</p> <pre><code>./build.sh vp2420\n</code></pre> </li> </ol> <p>The resulting coreboot image will be placed in the coreboot directory as <code>protectli_vp2420_&lt;version&gt;.rom</code>.</p> <ol> <li> <p>Checkout the desired version, e.g. <code>v0.9.0</code>:</p> <pre><code>cd coreboot\ngit checkout protectli_vp2430_v0.9.0\n</code></pre> </li> <li> <p>Checkout submodules:</p> <pre><code>git submodule update --init --checkout\n</code></pre> </li> <li> <p>Build the firmware:</p> <pre><code>./build.sh vp2430\n</code></pre> </li> </ol> <p>The resulting coreboot image will be placed in the coreboot directory as <code>protectli_vp2430_&lt;version&gt;.rom</code>.</p> <ol> <li> <p>Checkout the desired version, e.g. <code>v0.9.0</code>:</p> <pre><code>cd coreboot\ngit checkout protectli_vault_adln_v0.9.0\n</code></pre> </li> <li> <p>Checkout submodules:</p> <pre><code>git submodule update --init --checkout\n</code></pre> </li> <li> <p>Build the firmware:</p> <pre><code>./build.sh vp32xx\n</code></pre> </li> </ol> <p>The resulting coreboot image will be placed in the coreboot directory as <code>protectli_vp32xx_&lt;version&gt;.rom</code>.</p> <ol> <li> <p>Checkout the desired version, e.g. <code>v0.9.0</code>:</p> <pre><code>cd coreboot\ngit checkout protectli_vp2440_v0.9.0\n</code></pre> </li> <li> <p>Checkout submodules:</p> <pre><code>git submodule update --init --checkout\n</code></pre> </li> <li> <p>Build the firmware:</p> <pre><code>./build.sh vp2440\n</code></pre> </li> </ol> <p>The resulting coreboot image will be placed in the coreboot directory as <code>protectli_vp2440_&lt;version&gt;.rom</code>.</p>"},{"location":"unified/protectli/firmware-update/","title":"Firmware update","text":"<p>The following documentation describes the process of Dasharo open-source firmware update. If your device is currently flashed with the proprietary firmware please refer to the Initial deployment documentation.</p> <p>The update process may be different, depending on the currently installed Dasharo firmware version.</p> <p>For simplicity of the process we recommend using Dasharo Tools Suite.</p> <p>Before starting the update procedure be sure to disable Dasharo BIOS Boot medium lock and Secure Boot:</p> <ol> <li>Power on the device.</li> <li>While the device is booting, hold the <code>DELETE</code> key to enter the UEFI Setup     Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu using the arrow keys and Enter.</li> <li>Enter the Dasharo Security Options     submenu.</li> <li>Verify the state of the <code>Lock the BIOS boot medium</code> option - if the option     is chosen, press <code>Space</code> and then <code>F10</code> to save the changes.</li> <li>Go back to the main menu using the <code>ESC</code> key.</li> <li>Enter the <code>Device Manager</code> menu.</li> <li>Enter the Secure Boot Configuration     submenu.</li> <li>Verify that the <code>Current Secure Boot State</code> field says Disabled - if not,     unselect the <code>Attempt Secure Boot</code> option below then press <code>F10</code> to save     the changes.</li> <li>Reboot the device to properly apply the changes.</li> </ol> <p>The settings of all the above options can be restored after a firmware update.</p> V1000-seriesVP4630/VP4650/VP4670VP6630/VP6650/VP6670VP2410VP2420VP2430VP3210/VP3230"},{"location":"unified/protectli/firmware-update/#updating-dasharo","title":"Updating Dasharo","text":"<pre><code>flashrom -p internal -w protectli_&lt;variant&gt;_v&lt;version&gt;.rom --fmap -i COREBOOT\n</code></pre>"},{"location":"unified/protectli/firmware-update/#updating-to-dasharo-v120","title":"Updating to Dasharo v1.2.0","text":"<p>Due to the major changes, such as ME update, and firmware layout adjustments (to store the boot logo), flashing of the whole firmware is required:</p> <pre><code>flashrom -p internal -w protectli_vp46xx_v1.2.0.rom\n</code></pre>"},{"location":"unified/protectli/firmware-update/#updating-to-dasharo-v1018-or-v1019-or-v110","title":"Updating to Dasharo v1.0.18 or v1.0.19 or v1.1.0","text":"<p>From v1.0.18 Dasharo firmware is rebased on the more up-to-date revision of coreboot.</p> <p>If the current version of the firmware on the device is older than v1.0.18 or you are migrating from proprietary firmware the whole flash chip should be flashed as described in Initial Deployment.</p> <p>If the current version of the firmware on the device is v1.0.18 and it should be updated to v1.0.19 or v1.1.0, only the <code>WP_RO</code> and <code>RW_SECTION_A</code> should be flashed. To do this the following command should be used:</p> <pre><code>flashrom -p internal -w protectli_vault_cml_v1.0.19.rom --fmap -i WP_RO -i RW_SECTION_A\n</code></pre>"},{"location":"unified/protectli/firmware-update/#updating-on-dasharo-v1016-or-v1017","title":"Updating on Dasharo v1.0.16 or v1.0.17","text":"<p>Only the <code>RW_SECTION_A</code> partition of the flash needs to be updated. Flash it using the following command:</p> <pre><code>flashrom -p internal -w protectli_vault_cml_v1.0.16.rom --fmap -i RW_SECTION_A\n</code></pre> <p>This command also preserves Dasharo UEFI settings and the boot order.</p>"},{"location":"unified/protectli/firmware-update/#updating-on-older-dasharo-versions","title":"Updating on older Dasharo versions","text":"<p>In this case, the whole <code>bios</code> region must be updated.</p> <pre><code>flashrom -p internal -w protectli_vault_cml_v1.0.13.rom --ifd -i bios\n</code></pre>"},{"location":"unified/protectli/firmware-update/#updating-dasharo_1","title":"Updating Dasharo","text":"<pre><code>flashrom -p internal -w protectli_vp66xx_v&lt;version&gt;.rom --fmap -i RW_SECTION_A\n</code></pre>"},{"location":"unified/protectli/firmware-update/#updating-minor-versions-v1xy-eg-from-v10x-to-v110","title":"Updating minor versions v1.x.y (e.g. from v1.0.x to v1.1.0)","text":"<p>Full binary should be flashed:</p> <pre><code>flashrom -p internal -w [path]\n</code></pre>"},{"location":"unified/protectli/firmware-update/#updating-patch-version-v10xv11x","title":"Updating patch version v1.0.x/v1.1.x","text":"<p>Only the <code>COREBOOT</code> and <code>IFWI</code> partition of the flash needs to be updated. Flash it using the following command:</p> <pre><code>flashrom -p internal -w [path] --fmap -i COREBOOT -i IFWI\n</code></pre> <p>This command also preserves Dasharo UEFI settings and the boot order.</p>"},{"location":"unified/protectli/firmware-update/#updating-minor-versions-v1xy","title":"Updating minor versions v1.x.y","text":"<p>Both <code>WP_RO</code> and <code>RW_SECTION_A</code> partitions of the flash needs to be updated. Flash it using the following command:</p> <pre><code>flashrom -p internal -w [path] --fmap -i RW_SECTION_A -i WP_RO\n</code></pre> <p>This command also preserves current Dasharo UEFI settings and the boot order.</p>"},{"location":"unified/protectli/firmware-update/#updating-patch-version-v10x","title":"Updating patch version v1.0.x","text":"<p>Only the <code>RW_SECTION_A</code> partition of the flash needs to be updated. Flash it using the following command:</p> <pre><code>flashrom -p internal -w [path] --fmap -i RW_SECTION_A\n</code></pre> <p>This command also preserves Dasharo UEFI settings and the boot order.</p>"},{"location":"unified/protectli/firmware-update/#updating-minor-versions-v1xy_1","title":"Updating minor versions v1.x.y","text":"<p>Both <code>WP_RO</code> and <code>RW_SECTION_A</code> partitions of the flash needs to be updated. Flash it using the following command:</p> <pre><code>flashrom -p internal -w [path] --fmap -i RW_SECTION_A -i WP_RO\n</code></pre> <p>This command also preserves current Dasharo UEFI settings and the boot order.</p>"},{"location":"unified/protectli/firmware-update/#updating-patch-version-v10x_1","title":"Updating patch version v1.0.x","text":"<p>Only the <code>RW_SECTION_A</code> partition of the flash needs to be updated. Flash it using the following command:</p> <pre><code>flashrom -p internal -w [path] --fmap -i RW_SECTION_A\n</code></pre> <p>This command also preserves Dasharo UEFI settings and the boot order.</p>"},{"location":"unified/protectli/firmware-update/#updating-dasharo_2","title":"Updating Dasharo","text":"<pre><code>flashrom -p internal -w protectli_vp32xx_v&lt;version&gt;.rom --fmap -i RW_SECTION_A\n</code></pre> <p>This command also preserves Dasharo UEFI settings and the boot order.</p>"},{"location":"unified/protectli/initial-deployment/","title":"Initial deployment","text":"<p>Initial flashing of Dasharo firmware can be done from Linux using flashrom with the internal programmer. This document describes the process of building, installing and running flashrom on Ubuntu 22.04.</p>"},{"location":"unified/protectli/initial-deployment/#build-flashrom","title":"Build flashrom","text":"<p>Please follow generic guide for Dasharo flashrom fork.</p>"},{"location":"unified/protectli/initial-deployment/#reading-flash-contents","title":"Reading flash contents","text":"<p>Always prepare a backup of the current firmware image. To read from the flash and save it to a file (<code>dump.rom</code>), execute the following command:</p> <pre><code>flashrom -p internal -r dump.rom\n</code></pre>"},{"location":"unified/protectli/initial-deployment/#flashing-dasharo","title":"Flashing Dasharo","text":"<p>To flash Dasharo on the platform, execute the following command - replace <code>[path]</code> with the path to the Dasharo image you want to flash:</p> <pre><code>sudo flashrom -p internal -w [path]\n</code></pre> <p>This will flash the full image, including the Intel ME. The operation requires a hard reset of the platform. To perform a hard reset:</p> <pre><code>1. Power off the platform. Note, it may not power off completely due to\n    flashed ME.\n2. Disconnect power supply from the board when OS finishes all tasks after\n    power off (the screen goes dark or black).\n3. Disconnect the RTC/CMOS battery, connect it back after a couple seconds.\n4. Connect the power supply back.\n5. The platform should power on normally now.\n</code></pre>"},{"location":"unified/protectli/os-installation-opnsense/","title":"OPNsense 25.1 installation guide for Protectli Vault series","text":""},{"location":"unified/protectli/os-installation-opnsense/#introduction-installer-pre-seed","title":"Introduction &amp; installer pre-seed","text":"<p>This document describes preparation and usage of OPNsense Serial Installer in Dasharo testing environment. For start, an USB stick with OPNsense serial installer is required. All OSFV test IDs and names are referring to the following test suite:</p> <pre><code>dasharo-compatibility/os-opnsense.robot\n</code></pre>"},{"location":"unified/protectli/os-installation-opnsense/#installation-media-preparation","title":"Installation media preparation","text":"<p>Such an item may be prepared using <code>dd</code> program. Example:</p> <pre><code>sudo dd if=~/Downloads/OPNsense-25.1-serial-amd64.img of=/dev/sdX bs=1M status=progress\n</code></pre> <p>After <code>dd</code> command finished, execute:</p> <pre><code>sync\n</code></pre> <p>And after that, use <code>fatlabel</code> program, to rename ESP partition of USB stick.</p> <pre><code>sudo fatlabel /dev/sdX1 OPNEFI\n</code></pre> <p>Label \"OPNEFI\" is required by test cases OPN001.503.</p>"},{"location":"unified/protectli/os-installation-opnsense/#semi-manual-bsdinstall-modification","title":"Semi-manual bsdinstall modification","text":"<p>Further preparation of OPNsense installation media requires an access to bootable FreeBSD-compatible operating system, running on hardware with usable USB port.</p> <p>Following script: preseed_opnsense.sh must be transferred to this system, and installation media must be connected to USB port.</p> <p>Open the script in text editor and adjust the value of variable INSTALLER_ROOT_PARTITION, so it points correctly on installer's root partition.</p> Tip <p>FreeBSD-specific command <code>gpart show</code> may help with partition identification.</p> <p></p> <p>Save eventual changes and execute the script. Verify device name and confirm it with <code>yes</code> and <code>ENTER</code>.</p> <p></p> <p>From now, any modified <code>bsdinstall</code> part would be listed and differences would be shown. Accept any change with <code>yes</code> and <code>ENTER</code>.</p> <p></p> <p></p> Notice <p>DIFFs on the screenshots are empty, example execution has been done on already modified bsdinstall.</p> <p>Script should exit without any errors:</p> <p></p> Success <p>Installation media is now ready for further operation.</p>"},{"location":"unified/protectli/os-installation-opnsense/#installation-procedure","title":"Installation procedure","text":"<p>With installation media connected to DUT via USB and target drive connected to DUT via SATA, run following test case:</p> <pre><code>OPN001.503 Install operating system on disk (OPNsense)\n</code></pre> <p>and wait for following dialog message: </p> <p>Confirm with <code>OK</code>, wait for test suite to finish, and connect to DUT via serial.</p> <p>If nothing is displayed, try arrow keys, do not press <code>ENTER</code> at this point.</p> <p>You should be asked for installer credentials. Log in with:</p> <pre><code>login: installer\nPassword: opnsense\n</code></pre> <p></p> <p>Now select keymap, or navigate to <code>Select</code> and confirm default with <code>ENTER</code>.</p> <p></p> <p>To begin installation, select <code>Install (ZFS)</code>, navigate to <code>OK</code> and press <code>ENTER</code>.</p> <p></p> <p>Now, the ZFS pool name question may appear:</p> <p></p> <p>Confirm with <code>ENTER</code>.</p> <p>Choose <code>stripe</code>, navigate to <code>OK</code> and press <code>ENTER</code>.</p> <p></p> <p>Mark <code>ada0</code> drive (this is first SATA drive) using <code>SPACE</code>, navigate to <code>OK</code> using <code>TAB</code> and press <code>ENTER</code>:</p> <p></p> Warning <p>Select installation target drive carefully. You will be asked for confirmation once again, right now.</p> <p></p> <p>Installation now begins.</p> <p></p> <p>After installation finished, navigate to <code>Complete Install</code> and press <code>ENTER</code>.</p> <p></p> <p>On next screen, select <code>Halt now</code> and press <code>ENTER</code>.</p> <p></p> Success <p>OPNsense installation is now finished. Testing environment will be able to boot this by OS searching for <code>OPNBOOT</code> ESP partition.</p>"},{"location":"unified/protectli/os-installation-opnsense/#testing","title":"Testing","text":"<p>To verify testing readiness of finished installation, OS boot test may be executed. Run:</p> <pre><code>OPN002.503 Boot operating system from disk (OPNsense)\n</code></pre> <p></p>"},{"location":"unified/protectli/os-installation-pfsense/","title":"pfSense 2.7.2 installation guide for Protectli Vault series","text":""},{"location":"unified/protectli/os-installation-pfsense/#introduction-installer-pre-seed","title":"Introduction &amp; installer pre-seed","text":"<p>This document describes preparation and usage of pfSense Serial Installer in Dasharo testing environment. For start, an USB stick with pfSense serial installer is required. All OSFV test IDs and names are referring to the following test suite:</p> <pre><code>dasharo-compatibility/os-pfsense.robot\n</code></pre>"},{"location":"unified/protectli/os-installation-pfsense/#installation-media-preparation","title":"Installation media preparation","text":"<p>Such an item may be prepared using <code>dd</code> program. Example:</p> <pre><code>sudo dd if=~/Downloads/pfSense-CE-memstick-serial-2.7.2-RELEASE-amd64.img of=/dev/sdX bs=1M status=progress\n</code></pre> <p>After <code>dd</code> command finished, execute:</p> <pre><code>sync\n</code></pre> <p>And after that, use <code>fatlabel</code> program, to rename ESP partition of USB stick.</p> <pre><code>sudo fatlabel /dev/sdX1 PFEFI\n</code></pre> <p>Label \"PFEFI\" is required by test cases PFS001.502, PFS006.502 &amp; PFS007.502.</p>"},{"location":"unified/protectli/os-installation-pfsense/#automated-bsdinstall-modification","title":"Automated bsdinstall modification","text":"<p>Please run test case: <code>PFS006.502</code></p> <p>Follow the dialogs, confirm steps with <code>PASS</code>:</p> <p></p> <p>If already renamed the ESP, now move USB stick to DUT USB port:</p> <p></p> <p>Confirm with <code>PASS</code> and wait for test to finish positively: </p> Success <p>Installation media is now ready for further operation.</p>"},{"location":"unified/protectli/os-installation-pfsense/#installation-procedure","title":"Installation procedure","text":"<p>With installation media connected to DUT via USB and target drive connected to DUT via SATA, run following test case:</p> <pre><code>PFS001.502 Install operating system on disk (pfSense)\n</code></pre> <p>and wait for following dialog message: </p> <p>Confirm with <code>OK</code>, wait for test suite to finish, and connect to DUT via serial.</p> <p>If nothing is displayed, try arrow keys, do not press <code>ENTER</code> at this point.</p> <p>You will be asked for terminal type, confirm VT100 with <code>ENTER</code>: </p> <p>Then accept legal notice with <code>ENTER</code>: </p> <p>Then, in main menu select <code>Install pfSense</code>, navigate to <code>OK</code> and press <code>ENTER</code>. </p> <p>Now, the ZFS pool name question may appear: </p> <p>Confirm with <code>ENTER</code>.</p> <p>Now select 'Pool Type/Disks' and press <code>ENTER</code>: </p> <p>Select stripe, navigate to <code>OK</code> with <code>TAB</code> and press <code>ENTER</code>: </p> <p>Mark <code>ada0</code> drive (this is first SATA drive) using <code>SPACE</code>, navigate to <code>OK</code> using <code>TAB</code> and press <code>ENTER</code>:</p> <p></p> Warning <p>Select installation target drive carefully. You will be asked for confirmation once again, before actual installation start.</p> <p>On previous screen, select <code>Proceed with Installation</code> using arrow keys, navigate to <code>Select</code> using <code>TAB</code> and press <code>ENTER</code>:</p> <p></p> <p>Asked for data destruction and <code>ada0</code>, select <code>YES</code> and press <code>ENTER</code>: </p> <p>Installation now begins.</p> <p></p> <p>After installation finished, navigate to <code>Reboot</code> and press <code>ENTER</code>: </p> Tip <p>Do not disconnect serial terminal connection yet!</p>"},{"location":"unified/protectli/os-installation-pfsense/#first-boot","title":"First boot","text":"Tip <p>To boot into installed OS, use Dasharo <code>Boot From File</code> functionality and navigate to ESP partition labeled <code>PFBOOT</code>.</p> <p>After first reboot, you have to configure WAN network interface name manually. Type in the name of network interface which is connected to lab network, usually first on the list in the brackets, and press <code>ENTER</code>. Do not enter LAN interface name, press <code>ENTER</code> again. Confirm interfaces assignment with <code>y</code> and press <code>ENTER</code>.</p> <p></p> <p>Wait until pfSense main menu appears, choose to either halt or reboot, confirm with <code>Y</code>: </p> Success <p>pfSense installation &amp; configuration is now finished. The testing environment will be able to boot this OS by searching for <code>PFBOOT</code> ESP partition.</p>"},{"location":"unified/protectli/os-installation-pfsense/#testing","title":"Testing","text":"<p>To verify testing readiness of finished installation, OS boot test may be executed. Run:</p> <pre><code>PFS002.502 Boot operating system from disk (pfSense)\n</code></pre> <p>and check test output, expecting PASS: </p>"},{"location":"unified/protectli/os-installation/","title":"OS installation","text":"<p>The following document contains information about supported operating systems installation process on Protectli hardware. This includes official resources from the OS vendor and some tips that we found during testing.</p>"},{"location":"unified/protectli/os-installation/#freebsd","title":"FreeBSD","text":""},{"location":"unified/protectli/os-installation/#installation-documentation","title":"Installation documentation","text":"<p>Official documentation can be found here.</p>"},{"location":"unified/protectli/os-installation/#installation-images","title":"Installation images","text":"<p>Installer images can be downloaded from the official website.</p>"},{"location":"unified/protectli/os-installation/#debian","title":"Debian","text":""},{"location":"unified/protectli/os-installation/#installation-documentation_1","title":"Installation documentation","text":"<p>Official documentation can be found here.</p>"},{"location":"unified/protectli/os-installation/#installation-images_1","title":"Installation images","text":"<p>Installer images can be downloaded from the official website</p>"},{"location":"unified/protectli/os-installation/#pfsense","title":"pfSense","text":""},{"location":"unified/protectli/os-installation/#installation-documentation_2","title":"Installation documentation","text":"<p>Official documentation can be found here.</p> <p>Dasharo pfSense 2.7.2 installation guide</p>"},{"location":"unified/protectli/os-installation/#installation-images_2","title":"Installation images","text":"<p>Installer images can be downloaded from the official website.</p> <p>Installation using only serial port</p> <p>If you want to install pfSense using only a serial connection you have to download <code>pfSense-CE-memstick-serial-*</code> image. Please also note that pfSense only uses serial 0 during the installation.</p>"},{"location":"unified/protectli/os-installation/#ubuntu-server","title":"Ubuntu Server","text":""},{"location":"unified/protectli/os-installation/#installation-documentation_3","title":"Installation documentation","text":"<p>Official documentation can be found here.</p>"},{"location":"unified/protectli/os-installation/#installation-images_3","title":"Installation images","text":"<p>Installer images can be downloaded from the official website.</p>"},{"location":"unified/protectli/os-installation/#proxmox-virtual-environment","title":"Proxmox Virtual Environment","text":""},{"location":"unified/protectli/os-installation/#installation-documentation_4","title":"Installation documentation","text":"<p>Official documentation can be found here.</p>"},{"location":"unified/protectli/os-installation/#installation-images_4","title":"Installation images","text":"<p>Installer images can be downloaded from the official website.</p>"},{"location":"unified/protectli/os-installation/#opnsense","title":"OPNsense","text":""},{"location":"unified/protectli/os-installation/#installation-documentation_5","title":"Installation documentation","text":"<p>Official documentation can be found here.</p> <p>Dasharo OPNsense 25.1 installation guide</p>"},{"location":"unified/protectli/os-installation/#installation-images_5","title":"Installation images","text":"<p>Installer images can be downloaded from the official website.</p>"},{"location":"unified/protectli/os-installation/#xcp-ng","title":"XCP-NG","text":""},{"location":"unified/protectli/os-installation/#installation-documentation_6","title":"Installation documentation","text":"<p>Official documentation can be found here.</p>"},{"location":"unified/protectli/os-installation/#installation-images_6","title":"Installation images","text":"<p>Installer images can be downloaded from the official website.</p>"},{"location":"unified/protectli/os-installation/#esxi","title":"ESXI","text":""},{"location":"unified/protectli/os-installation/#installation-documentation-80u3e","title":"Installation documentation (8.0U3e)","text":"<p>Follow the steps described here and install the free 8.0U3e version.</p> <p>It is important to know that the ESXi installer won't offer an option to partition a drive, or install alongside an existing OS. To avoid wiping away other OSes, it is best to plug in an additional drive.</p> <p>Installation using only serial port</p> <p>Current versions of ESXI (8.0U3e) do not support installing using only serial console.</p>"},{"location":"unified/protectli/os-installation/#installation-images_7","title":"Installation images","text":"<p>The official installer image can be found on Brodacom's website.</p>"},{"location":"unified/protectli/os-installation/#setting-up-ssh","title":"Setting up SSH","text":"<p>To enable easy headless access, enable SSH server setup on startup, following this guide.. The instructions are the same, save for minor cosmetic UI differences in the screenshots. To sum it up:</p> <ul> <li>Log in to the Web UI hosted on your platform's IP</li> <li>Click on the gear icon to the left, dubbed as <code>Manage</code></li> <li>Click on services</li> <li>Search for SSH</li> <li>Right click on the status and set the policy to <code>Start and stop with the   host</code></li> </ul>"},{"location":"unified/protectli/overview/","title":"Overview","text":""},{"location":"unified/protectli/overview/#unified-documentation","title":"Unified documentation","text":"<ul> <li>Building manual - how to build Dasharo for Protectli     platforms</li> <li>Initial deployment - initial Dasharo deployment     methods (i. e. flashing new firmware) for Protectli platforms</li> <li>Firmware update - explains supported Dasharo firmware     update methods</li> <li>Recovery - how to recover a platform from a potential     failure (brick)</li> <li>Post-installation setup</li> <li>Test matrix - validation scope for Protectli platforms</li> </ul>"},{"location":"unified/protectli/overview/#available-models","title":"Available models","text":"FW6V1000-seriesVP4630/VP4650/VP4670VP2410VP2420VP2430VP6630/VP6650/VP6670VP3210/VP3230VP2440 <ul> <li>Releases - list of all releases</li> <li>Hardware configuration matrix     - definition of hardware configuration used during validation</li> </ul> <p>The Vault is a small form network appliance built for use as a firewall / router, virtualization platform, a daily-driven personal computer, and more. The V1000 series feature an Intel Jasper Lake CPU, soldered down LPDDR4X memory, Intel i225-V/i226-V 2.5G Ethernet ports, 4x USB-A 3.x ports, eMMC, PCIe NVMe storage, M.2 WIFI and WWAN slots, serial console over USB-C and a firmware TPM.</p> <ul> <li>V1210 - Intel\u00ae Celeron\u00ae N5105, 2x i225/i226, 4GB LPDDR4X</li> <li>V1211 - Intel\u00ae Celeron\u00ae N5105, 2x i225/i226, 8GB LPDDR4X</li> <li>V1410 - Intel\u00ae Celeron\u00ae N5105, 4x i225/i226, 8GB LPDDR4X</li> <li>V1610 - Intel\u00ae Pentium\u00ae Silver N6005, 6x i225/i226, 16GB LPDDR4X</li> </ul> <p>The Vault is a small form network appliance built for use as a firewall / router, virtualization platform, a daily-driven personal computer, and more. The VP46XX is the second platform of the Vault Pro series with higher performance and newer technology than the original FW6 series.</p> <p></p> <p>The VP46XX features an Intel 10th Generation CPU, 2x DDR4 DIMM modules, 6x Intel i225-V 2.5G Ethernet ports, PCIe x4/SATA NVMe storage, LPC TPM, M.2 WIFI and WWAN slots.</p> <ul> <li>VP4630 - Intel Core i3-10110U</li> <li>VP4650 - Intel Core i5-10210U</li> <li>VP4670 - Intel Core i7-10810U (both v1 and v2 versions, see the Intel FSP repo for details)</li> </ul> <p>Starting with Dasharo v1.0.19 Intel ME (Management Engine) is soft-disabled.</p> <p>For more information please refer to the references below.</p> <p>The Vault Pro is a small form network appliance built for use as a firewall / router, virtualization platform, a daily-driven personal computer, and more. The VP2410 is based on a 4 network port design that leverages a low power, but versatile Intel Celeron J4125 CPU.</p> <p></p> <p>The VP2410 can accommodate up to 16GB DDR4 RAM and 2TB m.2 SATA SSD storage drive. The built-in 8GB eMMC module can be used for booting a light-weight OS for example, or for use as optional storage.</p> <p>VP2410 specification:</p> <ul> <li>Intel Celeron\u00ae J4125 Quad Core at 2 GHz (Burst up to 2.7 GHz)</li> <li>4 Intel\u00ae Gigabit Ethernet NIC ports</li> <li>8GB eMMC module on board</li> <li>Intel\u00ae AES-NI support</li> <li>Fanless and Silent</li> <li>Included 12v Power Supply, VESA mount kit, Serial Console Cable,   SATA data and power cables for internal SSD, Quick Start Guide</li> </ul> <p>On VP2410 Intel ME (Management Engine) is not supported by coreboot causing Intel ME to enter recovery mode giving similar results to disabled ME.</p> <p>For more information please refer to the references below.</p> <p>The Vault Pro is a small form network appliance built for use as a firewall / router, virtualization platform, a daily-driven personal computer, and more. The VP2420 is based on a 4 x 2.5 G network port design that leverages a low power, but versatile Intel Celeron J6412 CPU.</p> <p></p> <p>The VP2420 can accommodate up to 32 GB DDR4 RAM and 2 TB M.2 SATA SSD storage drive (Note: The VP2420 supports M.2 SATA drives, not NVMe drives). The built-in 8 GB eMMC module can be used for booting a light-weight OS for example, or for use as optional storage.</p> <p>VP2420 specification:</p> <ul> <li>Intel Celeron\u00ae J6412 Quad Core at 2 GHz (Burst up to 2.6 GHz)</li> <li>4 Intel\u00ae 2.5 Gigabit Ethernet NIC ports</li> <li>M.2 SATA SSD Slot (Note: This device does not support NVMe drives)</li> <li>8 GB eMMC module on board</li> <li>Intel\u00ae AES-NI support</li> <li>Fanless and Silent</li> <li>Included 12v Power Supply, VESA mount kit, Serial Console Cable,   SATA data and power cables for internal SSD, Quick Start Guide</li> </ul> <p>Starting with Dasharo v1.2.0, Intel ME (Management Engine) is soft-disabled by default.</p> <p>For more information please refer to the references below.`</p> <p>The VP2430 is a small form network appliance built for use as a firewall / router, virtualization platform, a daily-driven personal computer, and more. A major difference setting it apart from its predecessors is the CPU. While the 2410 and 2420 models both utilize a J-series Intel Celeron, the VP2430 comes equipped with a more recent Alder Lake N-series CPU. This means a significant improvement in performance, at a comparable power consumption level. It also features 4 x 2.5G i226 ethernet ports.</p> <p></p> <p>The VP2430 can accommodate up to 16 GB DDR5 RAM and and a M.2 NVMe SSD storage drive. The built-in 32 GB eMMC module can be used for booting a light-weight OS for example, or for use as optional storage.</p> <p>VP2430 specification:</p> <ul> <li>Intel\u00ae Processor N150 Quad Core, 6M Cache, up to 3.4 GHz</li> <li>4 Intel\u00ae 2.5 Gigabit Ethernet NIC ports</li> <li>M.2 NVMe SSD Slot</li> <li>32 GB eMMC module on board</li> <li>Fanless and Silent</li> <li> <p>Included 12v Power Supply, VESA mount kit, Serial Console Cable,   SATA data and power cables for internal SSD, Quick Start Guide</p> </li> <li> <p>Protectli knowledge base</p> </li> <li>Buy VP2430 in Protectli shop</li> </ul> <p>The Vault is a small form network appliance built for use as a firewall / router, virtualization platform, a daily-driven personal computer, and more. The VP6630/VP6650/VP6670 feature an Intel Alder Lake-P CPU, 2x DDR5 SODIMM memory, Intel i225-V/i226-V 2.5G Ethernet ports, 2x SFP Intel X710, 4x USB-A ports (1x 3.1, 3x 2.0), one internal USB-A 3.1, 1x USB-C with PD, PCIe NVMe storage, M.2 WIFI and WWAN slots, 2x serial console over USB-C and RJ45, SPI TPM, 2 CPU fans.</p> <ul> <li>VP6630 - Intel\u00ae Core\u2122 i3 -1215U</li> <li>VP6650 - Intel\u00ae Core\u2122 i5 -1235U</li> <li>VP6670 - Intel\u00ae Core\u2122 i7 -1255U</li> </ul> <p>On VP66XX Intel ME (Management Engine) is disabled by using the HAP bit.</p> <p>The Vault Pro is a small form network appliance built for use as a firewall / router, virtualization platform, a daily-driven personal computer, and more. The VP3210/VP3230 is based on a 2 x 2.5 G network port design that leverages a low power, but versatile Alder Lake-N SoCs.</p> <p></p> <p>The VP3210/VP3230 can accommodate up to 48 GB DDR5 RAM and 4 TB M.2 NVMe SSD storage drive. The built-in 32 GB eMMC module can be used for booting a light-weight OS for example, or for use as optional storage.</p> <p>VP3210/VP3230 specification:</p> <ul> <li>VP3210: Intel\u00ae N100 4 Core / 4 Thread (up to 3.4Ghz)</li> <li>VP3230: Intel\u00ae i3-N305 8 Core / 8 Thread (up to 3.8Ghz)</li> <li>2 Intel\u00ae 2.5 Gigabit Ethernet NIC ports</li> <li>2x M.2 NVMe SSD Slot (one with x4 link and second with x1 link)</li> <li>32 GB eMMC module on board</li> <li>Intel\u00ae AES-NI support</li> <li>Fanless and Silent</li> <li>4x 2.5\u2033 SSD connectors and mounts</li> <li>Included 12V/90W (VP3230) or 12V/60W (VP3210) Power Supply, Serial   Console Cable, USB-C Cable, SATA data and power cables for internal SSDs,   Quick Start Guide</li> </ul> <p>Intel ME (Management Engine) is soft-disabled by default.</p> <p>For more information please refer to the references below.</p> <p>VP2440 specification:</p> <ul> <li>Intel\u00ae Processor N150 Quad Core, 6M Cache, up to 3.4 GHz</li> <li>2 Intel\u00ae 2.5 Gigabit Ethernet NIC ports</li> <li>2 Intel\u00ae Ethernet X710 10GbE SFP+ ports</li> <li>M.2 NVMe SSD Slot</li> <li>32 GB eMMC module on board</li> <li>Fanless and Silent</li> <li>Included 12v Power Supply, VESA mount kit, Serial Console Cable,   SATA data and power cables for internal SSD, Quick Start Guide</li> </ul> <p></p>"},{"location":"unified/protectli/overview/#documentation-sections","title":"Documentation sections","text":"<ul> <li>Releases</li> <li>groups information about all releases.</li> <li>Hardware configuration matrix<ul> <li>describes the platform's hardware configuration used during the Dasharo firmware validation procedure.</li> </ul> </li> </ul>"},{"location":"unified/protectli/overview/#references","title":"References","text":"<ul> <li>Buy VP4630 in Protectli shop</li> </ul>"},{"location":"unified/protectli/overview/#documentation-sections_1","title":"Documentation sections","text":"<ul> <li>Releases - groups     information about all releases.</li> <li>Hardware configuration matrix -     describes the     platform's hardware configuration used during the Dasharo firmware     validation procedure.</li> </ul>"},{"location":"unified/protectli/overview/#references_1","title":"References","text":"<ul> <li>Protectli knowledge base</li> <li>Buy VP2410 in Protectli shop</li> </ul>"},{"location":"unified/protectli/overview/#documentation-sections_2","title":"Documentation sections","text":"<ul> <li>Releases - groups     information about all releases.</li> <li>Hardware configuration matrix -     describes the platform's hardware configuration used during the Dasharo     firmware validation procedure.</li> </ul>"},{"location":"unified/protectli/overview/#references_2","title":"References","text":"<ul> <li>Protectli knowledge base</li> <li>Buy VP2420 in Protectli shop</li> </ul>"},{"location":"unified/protectli/overview/#documentation-sections_3","title":"Documentation sections","text":"<ul> <li>Releases - groups     information about all releases.</li> <li>Hardware configuration matrix -     describes the platform's hardware configuration used during the Dasharo     firmware validation procedure.</li> </ul>"},{"location":"unified/protectli/overview/#documentation-sections_4","title":"Documentation sections","text":"<ul> <li>Releases - groups     information about all releases.</li> <li>Building manual -     describes how to build Dasharo for Protectli 2430.</li> <li>Initial deployment -     describes initial Dasharo deployment methods (i. e. flashing new     firmware) for Protectli VP2430.</li> <li>Recovery - gathers     information on how to recover the platform from potential failure.</li> <li>Hardware configuration matrix -     describes the platform's hardware configuration used during the Dasharo     firmware validation procedure.</li> <li>Test matrix - describes     validation scope used during Dasharo firmware validation procedure.</li> </ul>"},{"location":"unified/protectli/overview/#documentation-sections_5","title":"Documentation sections","text":"<ul> <li>Releases - groups     information about all releases.</li> <li>Hardware configuration matrix -     describes the platform's hardware configuration used during the Dasharo     firmwarevalidation procedure.</li> </ul>"},{"location":"unified/protectli/overview/#references_3","title":"References","text":"<ul> <li>Protectli knowledge base</li> <li>Buy VP3210 in Protectli shop</li> <li>Buy VP3230 in Protectli shop</li> </ul>"},{"location":"unified/protectli/overview/#documentation-sections_6","title":"Documentation sections","text":"<ul> <li>Releases - groups     information about all releases.</li> <li>Building manual -     describes how to build Dasharo for Protecli VP3210/VP3230.</li> <li>Initial deployment -     describes initial Dasharo deployment methods (i. e. flashing new     firmware) for Protectli VP3210/VP3230.</li> <li>Recovery - gathers     information on how to recover the platform from potential failure.</li> <li>Hardware configuration matrix -     describes the platform's hardware configuration used during the Dasharo     firmware validation procedure.</li> <li>Test matrix - describes     validation scope used during Dasharo firmware validation procedure.</li> </ul>"},{"location":"unified/protectli/overview/#documentation-sections_7","title":"Documentation sections","text":"<ul> <li>Releases - groups     information about all releases.</li> <li>Building manual -     describes how to build Dasharo for Protectli 2440.</li> <li>Initial deployment -     describes initial Dasharo deployment methods (i. e. flashing new     firmware) for Protectli VP2440.</li> <li>Recovery - gathers     information on how to recover the platform from potential failure.</li> <li>Hardware configuration matrix -     describes the platform's hardware configuration used during the Dasharo     firmware validation procedure.</li> <li>Test matrix - describes     validation scope used during Dasharo firmware validation procedure.</li> </ul>"},{"location":"unified/protectli/post-install/","title":"Post-installation setup","text":"<p>This document contains extra steps to perform after installing Dasharo in order to enable full functionality.</p>"},{"location":"unified/protectli/post-install/#windows","title":"Windows","text":"<p>This section covers Windows post-install steps tested on Windows 11.</p>"},{"location":"unified/protectli/post-install/#qualcomm-atheros-cards-may-be-missing-driver","title":"Qualcomm Atheros cards may be missing driver","text":"<p>If you experience Windows to fail to recognize Qualcomm Atheros WiFi cards, you may need to install the necessary driver manually.</p> <p>Download the Windows driver from ath-drivers.eu Using <code>Device Manager</code>, select <code>Update Driver</code> for <code>Network Device</code> located in <code>Other devices</code> and choose to install the downloaded driver.</p>"},{"location":"unified/protectli/post-install/#linux","title":"Linux","text":"<p>This section covers Linux post-install steps tested on Ubuntu 22.04. It is likely that similar procedures would work for others Linux distributions as well.</p>"},{"location":"unified/protectli/post-install/#cards-using-ath10k_pci-driver-report-a-firmware-failure-at-module-load","title":"Cards using ath10k_pci driver report a firmware failure at module load","text":"<p>If you experience ath10k_pci failing to load with error in dmesg similar to:</p> <pre><code>[   11.098547] ath10k_pci 0000:07:00.0: wmi unified ready event not received\n[   11.148567] ath10k_pci 0000:07:00.0: device has crashed during init\n[   11.176535] ath10k_pci 0000:07:00.0: device has crashed during init\n[   11.176539] ath10k_pci 0000:07:00.0: failed to wait for target init: -70\n[   11.177684] ath10k_pci 0000:07:00.0: could not init core (-110)\n[   11.177711] ath10k_pci 0000:07:00.0: could not probe fw (-110)\n</code></pre> <p>follow the Protectli guide (Section \"Fix for M.2/mPCIe WiFi Card not Being Recognized\") to fix the problem.</p>"},{"location":"unified/protectli/post-install/#vp66xx-v092-fans-stuck-at-a-constant-speed","title":"VP66XX v0.9.2 - fans stuck at a constant speed","text":"<p>The v0.9.2 release shipped with an issue that caused the SuperIO CPU temperature reads to be stuck at a constant value, which in turn made the fans spin at constant speed. While this will no longer be the case in more recent releases, the issue can be mitigated on v0.9.2 by applying the <code>reboot=pci</code> kernel parameter in Ubuntu:</p> <ul> <li>Run <code>sudo nano /etc/default/grub</code></li> <li>Modify the <code>GRUB_CMDLINE_LINUX_DEFAULT</code> line to contain <code>reboot=pci</code>, e.g.:</li> </ul> <pre><code>-GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash\"\n+GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash reboot=pci\"\n</code></pre> <ul> <li>Run <code>sudo update-grub</code></li> <li>Reboot</li> </ul>"},{"location":"unified/protectli/recovery/","title":"Recovery","text":""},{"location":"unified/protectli/recovery/#intro","title":"Intro","text":"<p>The following documentation describes the process of recovering hardware from the brick state using an RTE and Dasharo open-source firmware.</p> V1000-seriesVP4630/VP4650/VP4670VP6630/VP6650/VP6670VP2410VP2420VP2430VP3210/VP3230VP2440"},{"location":"unified/protectli/recovery/#prerequisites","title":"Prerequisites","text":"<ul> <li>Prepared RTE</li> <li>6x female-female wire cables</li> </ul>"},{"location":"unified/protectli/recovery/#connections","title":"Connections","text":"<p>To prepare the stand for flashing follow the steps described below:</p> <ol> <li>Open the platform cover.</li> <li> <p>Connect the 6-pin flash header to the SPI header on RTE.</p> SPI header 6 pin header Vcc pin 1 (Vcc) GND pin 2 (GND) CS pin 4 (CS) SCLK pin 6 (CLK) MISO pin 5 (MISO) MOSI pin 3 (MOSI) <pre><code>            ______\n        &gt;  |      |\nVcc 3.3V  ----1  2----  GND\n            |      |\n    MOSI  ----3  4----  CS\n            |      |\n    MISO  ----5  6----  CLK\n            |______|\n</code></pre> </li> </ol>"},{"location":"unified/protectli/recovery/#firmware-flashing","title":"Firmware flashing","text":"<p>To flash firmware follow the steps described below:</p> <ol> <li>Login to RTE via <code>ssh</code> or <code>minicom</code>.</li> <li>Turn on the platform by connecting the power supply.</li> <li>Wait at least 5 seconds.</li> <li>Turn off the platform by using the power button.</li> <li>Wait at least 3 seconds.</li> <li> <p>Set the proper state of the SPI by using the following commands on RTE:</p> <pre><code># set SPI Vcc to 3.3V\necho 1 &gt; /sys/class/gpio/gpio405/value\n# SPI Vcc on\necho 1 &gt; /sys/class/gpio/gpio406/value\n# SPI lines ON\necho 1 &gt; /sys/class/gpio/gpio404/value\n</code></pre> </li> <li> <p>Wait at least 2 seconds.</p> </li> <li>Disconnect the power supply from the platform.</li> <li>Wait at least 2 seconds.</li> <li> <p>Flash the platform by using the following command:</p> <pre><code>flashrom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000 -w [path_to_binary]\n</code></pre> <p>Flashing with flashrom takes about 1 minute.</p> </li> <li> <p>Change back the state of the SPI by using the following commands:</p> <pre><code>echo 0 &gt; /sys/class/gpio/gpio404/value\necho 0 &gt; /sys/class/gpio/gpio406/value\n</code></pre> </li> <li> <p>Turn on the platform by connecting the power supply.</p> </li> </ol> <p>The first boot of the platform after proceeding with the above procedure can take much longer than standard.</p>"},{"location":"unified/protectli/recovery/#connections_1","title":"Connections","text":"<p>Set up the connections required for external flashing as described in Generic Testing Stand Setup. Protectli VP46XX are flashed using the Pomona clip connection variant. Use the pictures below to easily locate essential components on the mainboard.</p>"},{"location":"unified/protectli/recovery/#spi-flash-chip-location","title":"SPI flash chip location","text":""},{"location":"unified/protectli/recovery/#cmos-header-location","title":"CMOS header location","text":""},{"location":"unified/protectli/recovery/#firmware-flashing_1","title":"Firmware flashing","text":"<p>To flash firmware, follow the steps described in Generic Testing Stand Setup , noting that: * The chip voltage for this platform is 3.3V * The proper flashrom parameters for this platform are:</p> <pre><code>```bash\nflashrom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000 -c \"MX25L12835F/MX25L12845E/MX25L12865E\" -w [path_to_binary]\n```\n</code></pre>"},{"location":"unified/protectli/recovery/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Prepared RTE</li> <li>6x female-female wire cables</li> </ul>"},{"location":"unified/protectli/recovery/#connections_2","title":"Connections","text":"<p>To prepare the stand for flashing follow the steps described below:</p> <ol> <li>Open the platform cover.</li> <li> <p>Connect the J1 and J2 flash headers to the SPI header on RTE.</p> SPI header VP66XX J2 Vcc pin 1 (Vcc) SCLK pin 3 (CLK) MOSI pin 4 (MOSI) SPI header VP66XX J1 GND pin 4 (GND) CS pin 1 (CS) MISO pin 2 (MISO) </li> </ol>"},{"location":"unified/protectli/recovery/#firmware-flashing_2","title":"Firmware flashing","text":"<p>To flash firmware follow the steps described below:</p> <ol> <li>Login to RTE via <code>ssh</code> or <code>minicom</code>.</li> <li>Turn on the platform by connecting the power supply.</li> <li>Wait at least 5 seconds.</li> <li>Turn off the platform by using the power button.</li> <li>Wait at least 3 seconds.</li> <li> <p>Set the proper state of the SPI by using the following commands on RTE:</p> <pre><code># set SPI Vcc to 3.3V\necho 1 &gt; /sys/class/gpio/gpio405/value\n# SPI Vcc on\necho 1 &gt; /sys/class/gpio/gpio406/value\n# SPI lines ON\necho 1 &gt; /sys/class/gpio/gpio404/value\n</code></pre> </li> <li> <p>Wait at least 2 seconds.</p> </li> <li>Disconnect the power supply from the platform.</li> <li>Wait at least 2 seconds.</li> <li> <p>Flash the platform by using the following command:</p> <pre><code>flashrom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000 -w [path_to_binary]\n</code></pre> <p>Flashing with flashrom takes about 1 minute.</p> </li> <li> <p>Change back the state of the SPI by using the following commands:</p> <pre><code>echo 0 &gt; /sys/class/gpio/gpio404/value\necho 0 &gt; /sys/class/gpio/gpio406/value\n</code></pre> </li> <li> <p>Reset the CMOS battery (short JCMOS1 header for a couple of seconds).</p> </li> <li>Turn on the platform by connecting the power supply.</li> </ol> <p>The first boot of the platform after proceeding with the above procedure can take much longer than standard.</p>"},{"location":"unified/protectli/recovery/#connections_3","title":"Connections","text":"<p>Set up the connections required for external flashing as described in Generic Testing Stand Setup Protectli VP2410 are flashed using the Pomona clip connection variant. Use the pictures below to easily locate essential components on the mainboard.</p>"},{"location":"unified/protectli/recovery/#spi-flash-chip-location_1","title":"SPI flash chip location","text":"<p>Completely remove the motherboard from the platform cover.</p> <p> </p> <p>If there is little thermal paste on the CPU, apply it before reassembling the motherboard to the platform cover.</p>"},{"location":"unified/protectli/recovery/#cmos-header-location_1","title":"CMOS header location","text":""},{"location":"unified/protectli/recovery/#firmware-flashing_3","title":"Firmware flashing","text":"<p>To flash firmware, follow the steps described in Generic Testing Stand Setup , noting that: * The chip voltage for this platform is 1.8V * The proper flashrom parameters for this platform are:</p> <pre><code>```bash\nflashrom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000 -c \"MX25U6435E/F\" -w [path_to_binary]\n```\n</code></pre>"},{"location":"unified/protectli/recovery/#prerequisites_2","title":"Prerequisites","text":"<ul> <li>Prepared RTE</li> <li>SOIC-8 Pomona clip</li> <li>6x female-female wire cables</li> </ul>"},{"location":"unified/protectli/recovery/#connections_4","title":"Connections","text":"<p>Set up the connections required for external flashing as described in Generic Testing Stand Setup. Protectli VP2420 are flashed using the Pomona clip connection variant. Use the pictures below to easily locate essential components on the mainboard.</p>"},{"location":"unified/protectli/recovery/#spi-flash-chip","title":"SPI flash chip","text":""},{"location":"unified/protectli/recovery/#cmos-header","title":"CMOS header","text":""},{"location":"unified/protectli/recovery/#firmware-flashing_4","title":"Firmware flashing","text":"<p>To flash firmware, follow the steps described in Generic Testing Stand Setup , noting that: * The chip voltage for this platform is 3.3V * The proper flashrom parameters for this platform are:</p> <pre><code>```bash\nflashrom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000 -c \"MX25L12835F/MX25L12845E/MX25L12865E\" -w [path_to_binary]\n```\n</code></pre>"},{"location":"unified/protectli/recovery/#prerequisites_3","title":"Prerequisites","text":"<ul> <li>Prepared RTE</li> <li>6x female-female wire cables</li> </ul>"},{"location":"unified/protectli/recovery/#connections_5","title":"Connections","text":"<p>To prepare the stand for flashing follow the steps described below:</p> <ol> <li>Open the platform cover.</li> <li> <p>Connect the J1 and J2 flash headers to the SPI header on RTE.</p> SPI header VP2430 J2 Vcc pin 1 (Vcc) SCLK pin 3 (CLK) MOSI pin 4 (MOSI) SPI header VP2430 J1 GND pin 4 (GND) CS pin 1 (CS) MISO pin 2 (MISO) </li> </ol>"},{"location":"unified/protectli/recovery/#firmware-flashing_5","title":"Firmware flashing","text":"<p>To flash firmware follow the steps described below:</p> <ol> <li>Login to RTE via <code>ssh</code> or <code>minicom</code>.</li> <li>Turn on the platform by connecting the power supply.</li> <li>Wait at least 5 seconds.</li> <li>Turn off the platform by using the power button.</li> <li>Wait at least 3 seconds.</li> <li> <p>Set the proper state of the SPI by using the following commands on RTE:</p> <pre><code># set SPI Vcc to 3.3V\necho 1 &gt; /sys/class/gpio/gpio405/value\n# SPI Vcc on\necho 1 &gt; /sys/class/gpio/gpio406/value\n# SPI lines ON\necho 1 &gt; /sys/class/gpio/gpio404/value\n</code></pre> </li> <li> <p>Wait at least 2 seconds.</p> </li> <li>Disconnect the power supply from the platform.</li> <li>Wait at least 2 seconds.</li> <li> <p>Flash the platform by using the following command:</p> <pre><code>flashrom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000 \\\n    -c \"MX25L12833F/MX25L12835F/MX25L12845E/MX25L12865E/MX25L12873F\" \\\n    -w [path_to_binary]\n</code></pre> <p>Flashing with flashrom takes about 1 minute.</p> </li> <li> <p>Change back the state of the SPI by using the following commands:</p> <pre><code>echo 0 &gt; /sys/class/gpio/gpio404/value\necho 0 &gt; /sys/class/gpio/gpio406/value\n</code></pre> </li> <li> <p>Turn on the platform by connecting the power supply.</p> </li> </ol> <p>The first boot of the platform after proceeding with the above procedure can take much longer than standard.</p>"},{"location":"unified/protectli/recovery/#prerequisites_4","title":"Prerequisites","text":"<ul> <li>Prepared RTE</li> <li>6x female-female wire cables</li> </ul>"},{"location":"unified/protectli/recovery/#connections_6","title":"Connections","text":"<p>To prepare the stand for flashing follow the steps described below:</p> <ol> <li>Open the platform cover.</li> <li> <p>Connect the J1 and J2 flash headers to the SPI header on RTE.</p> SPI header VP32XX J1 Vcc pin 1 (Vcc) SCLK pin 3 (CLK) MOSI pin 4 (MOSI) SPI header VP32XX J2 GND pin 4 (GND) CS pin 1 (CS) MISO pin 2 (MISO) </li> </ol>"},{"location":"unified/protectli/recovery/#firmware-flashing_6","title":"Firmware flashing","text":"<p>To flash firmware follow the steps described below:</p> <ol> <li>Login to RTE via <code>ssh</code> or <code>minicom</code>.</li> <li>Turn on the platform by connecting the power supply.</li> <li>Wait at least 5 seconds.</li> <li>Turn off the platform by using the power button.</li> <li>Wait at least 3 seconds.</li> <li> <p>Set the proper state of the SPI by using the following commands on RTE:</p> <pre><code># set SPI Vcc to 3.3V\necho 1 &gt; /sys/class/gpio/gpio405/value\n# SPI Vcc on\necho 1 &gt; /sys/class/gpio/gpio406/value\n# SPI lines ON\necho 1 &gt; /sys/class/gpio/gpio404/value\n</code></pre> </li> <li> <p>Wait at least 2 seconds.</p> </li> <li>Disconnect the power supply from the platform.</li> <li>Wait at least 2 seconds.</li> <li> <p>Flash the platform by using the following command:</p> <pre><code>flashrom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000 -w [path_to_binary]\n</code></pre> <p>Flashing with flashrom takes about 1 minute.</p> </li> <li> <p>Change back the state of the SPI by using the following commands:</p> <pre><code>echo 0 &gt; /sys/class/gpio/gpio404/value\necho 0 &gt; /sys/class/gpio/gpio406/value\n</code></pre> </li> <li> <p>Reset the CMOS battery (short JCMOS header for a couple of seconds).</p> </li> <li>Turn on the platform by connecting the power supply.</li> </ol> <p>The first boot of the platform after proceeding with the above procedure can take much longer than standard.</p>"},{"location":"unified/protectli/recovery/#prerequisites_5","title":"Prerequisites","text":"<ul> <li>Prepared RTE</li> <li>6x female-female wire cables</li> </ul>"},{"location":"unified/protectli/recovery/#connections_7","title":"Connections","text":"<p>To prepare the stand for flashing follow the steps described below:</p> <ol> <li>Open the platform cover.</li> <li> <p>Connect the J1 and J2 flash headers to the SPI header on RTE.</p> SPI header VP2440 J2 Vcc pin 1 (Vcc) SCLK pin 3 (CLK) MOSI pin 4 (MOSI) SPI header VP2440 J1 GND pin 4 (GND) CS pin 1 (CS) MISO pin 2 (MISO) </li> </ol>"},{"location":"unified/protectli/recovery/#firmware-flashing_7","title":"Firmware flashing","text":"<p>To flash firmware follow the steps described below:</p> <ol> <li>Login to RTE via <code>ssh</code> or <code>minicom</code>.</li> <li>Turn on the platform by connecting the power supply.</li> <li>Wait at least 5 seconds.</li> <li>Turn off the platform by using the power button.</li> <li>Wait at least 3 seconds.</li> <li> <p>Set the proper state of the SPI by using the following commands on RTE:</p> <pre><code># set SPI Vcc to 3.3V\necho 1 &gt; /sys/class/gpio/gpio405/value\n# SPI Vcc on\necho 1 &gt; /sys/class/gpio/gpio406/value\n# SPI lines ON\necho 1 &gt; /sys/class/gpio/gpio404/value\n</code></pre> </li> <li> <p>Wait at least 2 seconds.</p> </li> <li>Disconnect the power supply from the platform.</li> <li>Wait at least 2 seconds.</li> <li> <p>Flash the platform by using the following command:</p> <pre><code>flashrom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000 \\\n    -c \"MX25L12833F/MX25L12835F/MX25L12845E/MX25L12865E/MX25L12873F\" \\\n    -w [path_to_binary]\n</code></pre> <p>Flashing with flashrom takes about 1 minute.</p> </li> <li> <p>Change back the state of the SPI by using the following commands:</p> <pre><code>echo 0 &gt; /sys/class/gpio/gpio404/value\necho 0 &gt; /sys/class/gpio/gpio406/value\n</code></pre> </li> <li> <p>Turn on the platform by connecting the power supply.</p> </li> </ol> <p>The first boot of the platform after proceeding with the above procedure can take much longer than standard.</p>"},{"location":"unified/protectli/test-matrix/","title":"Test matrix","text":""},{"location":"unified/protectli/test-matrix/#about","title":"About","text":"<p>The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.</p> FW6V1000-seriesVP4630/VP4650/VP4670VP6630/VP6650/VP6670VP2410VP2420VP2430VP3210/VP3230VP2440"},{"location":"unified/protectli/test-matrix/#module-dasharo-compatibility","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. Display ports and LCD support DSP DSP002.201, DSP002.003 3. USB HID and MSC Support USB USB001.001, USB001.002, USB002.001, USB002.002 4. SMBIOS DMI DMI002.201, DMI003.201, DMI004.201, DMI005.001, DMI006.001 5. Custom boot logo CLG DMI002.201, DMI003.201, DMI004.201, DMI005.001, DMI006.001 6. M.2 WiFi/Bluetooth WLE WLE001.001, WLE002.001, WLE003.001 7. Network boot PXE PXE007.001 8. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 9. Custom boot menu key CBK All 10. FreeBSD support BSD All 11. miniPCIe LTE/WiFi/Bluetooth MWL MWL004.201 12. Custom network boot entries CNB CNB001.201"},{"location":"unified/protectli/test-matrix/#module-dasharo-performance","title":"Module: Dasharo performance","text":"No. Supported test suite Test suite ID Supported test cases 1. CPU temperature CPT All"},{"location":"unified/protectli/test-matrix/#module-dasharo-compatibility_1","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. UEFI compatible interface EFI All 2. Display ports DSP DSP002.201, DSP002.301, DSP002.003 3. Network boot utilities NBT All 4. NVMe support NVM All 5. Custom logo CLG All 6. Custom Boot Keys CBK All 7. USB HID and MSC Support USB USB001.xxx and USB002.xxx 8. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 9. miniPCIe LTE/WiFi/Bluetooth MWL MWL004.201 10. M.2 WiFi/Bluetooth WLE All 11. eMMC support MMC All 12. SMBIOS DMI DMI002.201, DMI003.201, DMI004.201, DMI005.001, DMI006.001 13. Custom network boot entries CNB CNB001.201 14. Audio subsystem AUD AUD007.xxx, AUD008.xxx 15. UEFI Shell USH All 16. USB detection UDT All 17. USB booting UBT All 18. Windows booting WBT WBT001.001"},{"location":"unified/protectli/test-matrix/#module-dasharo-security","title":"Module: Dasharo security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM TPM001.201, TPM001.301, TPM002.201, TPM002.301, TPM003.201, TPM003.301 2. Secure Boot support SBO All"},{"location":"unified/protectli/test-matrix/#module-dasharo-performance_1","title":"Module: Dasharo performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF Without CPU003.XXX and CPU005.XXX 4. Platform stability STB All"},{"location":"unified/protectli/test-matrix/#module-dasharo-compatibility_2","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports DSP DSP002.201, DSP002.301, DSP002.003, DSP003.201, DSP003.301, DSP003.003 4. Network boot utilities NBT All 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot menu key CBK All 8. USB HID and MSC Support USB USB001.XXX and USB002.XXX 9. FreeBSD support BSD All 10. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 11. USB-C support UTC UTC004.001, UTC004.002 12. M.2 WiFi/Bluetooth WLE ALL 13. eMMC support MMC MMC001.001 14. SMBIOS DMI DMI002.201, DMI003.201, DMI004.201, DMI005.001, DMI006.001 15. Custom network boot entries CNB CNB001.201 16. M.2 automatic SATA/NVMe switching support MSS MSS001.001 17. Windows booting WBT WBT001.001 18. Audio subsystem AUD AUD001.201, AUD001.301, AUD002.201, AUD002.301, AUD003.201, AUD003.301, AUD004.201, AUD004.301, AUD005.201, AUD005.301, AUD006.201, AUD006.301 19. UEFI Shell USH All 20. USB detection UDT All 21. USB booting UBT All 22. pfSense support PFS All 23. OPNsense support OPN All 24. Proxmox support PVE All 25. Ubuntu Server support USS All"},{"location":"unified/protectli/test-matrix/#module-dasharo-security_1","title":"Module: Dasharo security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001,TPM002.001 and TPM003.001 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO All 5. ME disable/neuter support MNE MNE006.201 6. BIOS lock support BLS All 7. USB stack enable/disable USS All 8. SMM BIOS write protection SMM All <p>Note: in Dasharo compatible with Protectli VP46xx ME is soft-disabled by default - no additional option for ME disabling is available in the Setup Menu.</p>"},{"location":"unified/protectli/test-matrix/#module-dasharo-performance_2","title":"Module: Dasharo performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF Without CPU003.XXX and CPU005.XXX 4. Platform stability STB All 5. Ubuntu booting performance test BUB All 6. Debian booting performance test BDE All 7. FreeBSD booting performance test BFB All 8. Proxmox booting performance test BPM All 9. Ubuntu Server booting performance test BUS All 10. OPNsense (serial output) booting performance test BOS All 11. OPNsense (VGA output) booting performance test BOV All 12. pfSense (serial output) booting performance test BPS All 13. pfSense (VGA output) booting performance test BPV All"},{"location":"unified/protectli/test-matrix/#module-dasharo-compatibility_3","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports DSP DSP002.201, DSP002.301, DSP002.003, DSP003.201, DSP003.301, DSP003.003 4. Network boot utilities NBT All 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot menu key CBK All 8. USB HID and MSC Support USB USB001.XXX and USB002.XXX 9. FreeBSD support BSD All 10. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 11. USB-C support UTC UTC004.001, UTC004.002 12. M.2 WiFi/Bluetooth WLE ALL 14. SMBIOS DMI DMI002.201, DMI003.201, DMI004.201, DMI005.001, DMI006.001 15. Custom network boot entries CNB CNB001.201 17. Windows booting WBT WBT001.001 18. Audio subsystem AUD AUD001.201, AUD001.301, AUD002.201, AUD002.301, AUD003.201, AUD003.301, AUD004.201, AUD004.301, AUD005.201, AUD005.301, AUD006.201, AUD006.301 19. UEFI Shell USH All 20. USB detection UDT All 21. USB booting UBT All 22. pfSense support PFS All 23. OPNsense support OPN All 24. Proxmox support PVE All 25. Ubuntu Server support USS All"},{"location":"unified/protectli/test-matrix/#module-dasharo-security_2","title":"Module: Dasharo security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001,TPM002.001 and TPM003.001 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO All 5. ME disable/neuter support MNE MNE006.201 6. BIOS lock support BLS All 7. USB stack enable/disable USS All 8. SMM BIOS write protection SMM All <p>Note: in Dasharo for Protectli VP66XX ME is HAP disabled by default - no additional option for ME disabling is available in the Setup Menu.</p>"},{"location":"unified/protectli/test-matrix/#module-dasharo-performance_3","title":"Module: Dasharo performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF Without CPU003.XXX and CPU005.XXX 4. Platform stability STB All 5. Ubuntu booting performance test BUB All 6. Debian booting performance test BDE All 7. FreeBSD booting performance test BFB All 8. Proxmox booting performance test BPM All 9. Ubuntu Server booting performance test BUS All 10. OPNsense (serial output) booting performance test BOS All 11. OPNsense (VGA output) booting performance test BOV All 12. pfSense (serial output) booting performance test BPS All 13. pfSense (VGA output) booting performance test BPV All"},{"location":"unified/protectli/test-matrix/#module-dasharo-compatibility_4","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports DSP DSP002.201, DSP002.301, DSP002.003, DSP003.201, DSP003.301, DSP003.003 4. Network boot utilities NBT All 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot menu key CBK All 8. USB HID and MSC Support USB All 9. FreeBSD support BSD All 10. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 11. USB-C support UTC UTC004.001, UTC004.001 12. M.2 WiFi/Bluetooth WLE ALL 13. eMMC support MMC MMC001.001 14. SMBIOS DMI DMI002.201, DMI003.201, DMI004.201, DMI005.001, DMI006.001 15. Custom network boot entries CNB CNB001.201 16. M.2 automatic SATA/NVMe switching support MSS MSS001.001 17. Windows booting WBT WBT001.001 18. Audio subsystem AUD AUD001.201, AUD001.301, AUD002.201, AUD002.301, AUD003.201, AUD003.301, AUD004.201, AUD004.301, AUD005.201, AUD005.301, AUD006.201, AUD006.301 19. UEFI Shell USH All 20. USB detection UDT All 21. USB booting UBT All"},{"location":"unified/protectli/test-matrix/#module-dasharo-security_3","title":"Module: Dasharo security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO VBO006.002, VBO007.002, VBO008.001 3. Measured Boot support MBO All 4. Secure Boot support SBO All 5. BIOS lock support BLS All"},{"location":"unified/protectli/test-matrix/#module-dasharo-performance_4","title":"Module: Dasharo performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF All 4. Platform stability STB All"},{"location":"unified/protectli/test-matrix/#module-dasharo-compatibility_5","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports DSP DSP002.201, DSP002.301, DSP002.003, DSP003.201, DSP003.301, DSP003.003 4. Network boot utilities NBT All 6. Custom logo CLG All 7. Custom boot menu key CBK All 8. USB HID and MSC Support USB USB001.XXX and USB002.XXX 9. FreeBSD support BSD All 10. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 11. USB-C support UTC UTC004.001, UTC004.002 12. M.2 WiFi/Bluetooth WLE ALL 13. eMMC support MMC MMC001.001 14. SMBIOS DMI DMI002.201, DMI003.201, DMI004.201, DMI005.001, DMI006.001 15. Custom network boot entries CNB CNB001.201 17. Windows booting WBT WBT001.001 18. UEFI Shell USH All 19. USB detection UDT All 20. USB booting UBT All 21. pfSense support PFS All 22. OPNsense support OPN All 23. Proxmox support PVE All 24. Ubuntu Server support USS All"},{"location":"unified/protectli/test-matrix/#module-dasharo-security_4","title":"Module: Dasharo security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM TPM001.201 and TPM001.301 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO All 5. BIOS lock support BLS All 6. USB stack enable/disable USS All 7. SMM BIOS write protection SMM All"},{"location":"unified/protectli/test-matrix/#module-dasharo-performance_5","title":"Module: Dasharo performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF Without CPU003.XXX and CPU005.XXX 4. Platform stability STB All 5. Ubuntu booting performance test BUB All 6. Debian booting performance test BDE All 7. FreeBSD booting performance test BFB All 8. Proxmox booting performance test BPM All 9. Ubuntu Server booting performance test BUS All 10. OPNsense (serial output) booting performance test BOS All 11. OPNsense (VGA output) booting performance test BOV All 12. pfSense (serial output) booting performance test BPS All 13. pfSense (VGA output) booting performance test BPV All"},{"location":"unified/protectli/test-matrix/#module-dasharo-compatibility_6","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports DSP DSP002.001, DSP002.002, DSP002.003, DSP003.001, DSP003.002, DSP003.003 4. Network boot utilities NBT All 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot menu key CBK All 8. USB HID and MSC Support USB USB001.XXX and USB002.XXX 9. FreeBSD support BSD All 10. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 11. USB-C support UTC UTC004.001, UTC004.002 12. M.2 WiFi/Bluetooth WLE ALL 14. SMBIOS DMI DMI002.001, DMI003.001, DMI004.001, DMI005.001, DMI006.001 15. Custom network boot entries CNB CNB001.002 17. Windows booting WBT WBT001.001 18. Audio subsystem AUD AUD001.001, AUD001.002, AUD002.001, AUD002.002, AUD003.001, AUD003.002, AUD004.001, AUD004.002, AUD005.001, AUD005.002, AUD006.001, AUD006.002 20. USB detection UDT All 21. USB booting UBT All 22. pfSense support PFS All 23. OPNsense support OPN All 24. Proxmox support PVE All 25. Ubuntu Server support USS All 26. Auto boot time-out BMM All 27. CPU status CPU CPU001.001, CPU002.001, CPU003.001, CPU004.001 28. ESP scanning ESP All 29. Reset to defaults RTD RTD001.001, RTD002.001, RTD003.001, RTD004.001, RTD006.001 30. Ethernet interface NET All 31. Dasharo Configuration Utility DCU DCU001.001, DCU002.001, DCU003.001 33. Sleep mode SUSP SUSP001.001, SUSP002.001, SUSP003.001, SUSP005.001"},{"location":"unified/protectli/test-matrix/#module-dasharo-security_5","title":"Module: Dasharo security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001,TPM002.001 and TPM003.001 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO All 5. ME disable/neuter support MNE MNE004.001 6. BIOS lock support BLS All 7. USB stack enable/disable USS All 8. SMM BIOS write protection SMM All 9. UEFI Setup password PSW All 10. TPM2 Commands TPMCMD All"},{"location":"unified/protectli/test-matrix/#module-dasharo-performance_6","title":"Module: Dasharo performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF Without CPU003.XXX and CPU005.XXX 4. Platform stability STB All 5. Ubuntu booting performance test BUB All 6. Debian booting performance test BDE All 7. FreeBSD booting performance test BFB All 8. Proxmox booting performance test BPM All 9. Ubuntu Server booting performance test BUS All 10. OPNsense (serial output) booting performance test BOS All 11. OPNsense (VGA output) booting performance test BOV All 12. pfSense (serial output) booting performance test BPS All 13. pfSense (VGA output) booting performance test BPV All"},{"location":"unified/protectli/test-matrix/#module-dasharo-compatibility_7","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports DSP DSP002.001, DSP002.002, DSP002.003, DSP003.001,SP003.002, DSP003.003 4. Network boot utilities NBT All 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot menu key CBK All 8. USB HID and MSC Support USB USB001.XXX and USB002.XXX 9. FreeBSD support BSD All 10. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 11. USB-C support UTC UTC004.001, UTC004.002 12. M.2 WiFi/Bluetooth WLE ALL 14. SMBIOS DMI DMI002.001, DMI003.001, DMI004.001, DMI005.001, MI006.001 15. Custom network boot entries CNB CNB001.002 17. Windows booting WBT WBT001.001 18. Audio subsystem AUD AUD001.001, AUD001.002, AUD002.001, AUD002.002, UD003.001, AUD003.002, AUD004.001, AUD004.002, AUD005.001, AUD005.002, AUD006.001, AUD006.002 19. UEFI Shell USH All 20. USB detection UDT All 21. USB booting UBT All 22. pfSense support PFS All 23. OPNsense support OPN All 24. Proxmox support PVE All 25. Ubuntu Server support USS All"},{"location":"unified/protectli/test-matrix/#module-dasharo-security_6","title":"Module: Dasharo security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001,TPM002.001 and TPM003.001 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO All 5. ME disable/neuter support MNE MNE004.001 6. BIOS lock support BLS All 7. USB stack enable/disable USS All 8. SMM BIOS write protection SMM All <p>Note: in Dasharo for Protectli VP66XX ME is HAP disabled by default - no additional option for ME disabling is available in the Setup Menu.</p>"},{"location":"unified/protectli/test-matrix/#module-dasharo-performance_7","title":"Module: Dasharo performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF Without CPU003.XXX and CPU005.XXX 4. Platform stability STB All 5. Ubuntu booting performance test BUB All 6. Debian booting performance test BDE All 7. FreeBSD booting performance test BFB All 8. Proxmox booting performance test BPM All 9. Ubuntu Server booting performance test BUS All 10. OPNsense (serial output) booting performance test BOS All 11. OPNsense (VGA output) booting performance test BOV All 12. pfSense (serial output) booting performance test BPS All 13. pfSense (VGA output) booting performance test BPV All"},{"location":"unified/protectli/test-matrix/#module-dasharo-compatibility_8","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports DSP DSP002.001, DSP002.002, DSP002.003, DSP003.001, DSP003.002, DSP003.003 4. Network boot utilities NBT All 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot menu key CBK All 8. USB HID and MSC Support USB USB001.XXX and USB002.XXX 9. FreeBSD support BSD All 10. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 11. USB-C support UTC UTC004.001, UTC004.002 12. M.2 WiFi/Bluetooth WLE ALL 14. SMBIOS DMI DMI002.001, DMI003.001, DMI004.001, DMI005.001, DMI006.001 15. Custom network boot entries CNB CNB001.002 17. Windows booting WBT WBT001.001 18. Audio subsystem AUD AUD001.001, AUD001.002, AUD002.001, AUD002.002, AUD003.001, AUD003.002, AUD004.001, AUD004.002, AUD005.001, AUD005.002, AUD006.001, AUD006.002 20. USB detection UDT All 21. USB booting UBT All 22. pfSense support PFS All 23. OPNsense support OPN All 24. Proxmox support PVE All 25. Ubuntu Server support USS All 26. Auto boot time-out BMM All 27. CPU status CPU CPU001.001, CPU002.001, CPU003.001, CPU004.001 28. ESP scanning ESP All 29. Reset to defaults RTD RTD001.001, RTD002.001, RTD003.001, RTD004.001, RTD006.001 30. Ethernet interface NET All 31. Dasharo Configuration Utility DCU DCU001.001, DCU002.001, DCU003.001 33. Sleep mode SUSP SUSP001.001, SUSP002.001, SUSP003.001, SUSP005.001"},{"location":"unified/protectli/test-matrix/#module-dasharo-security_7","title":"Module: Dasharo security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001,TPM002.001 and TPM003.001 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO All 5. ME disable/neuter support MNE MNE004.001 6. BIOS lock support BLS All 7. USB stack enable/disable USS All 8. SMM BIOS write protection SMM All 9. UEFI Setup password PSW All 10. TPM2 Commands TPMCMD All"},{"location":"unified/protectli/test-matrix/#module-dasharo-performance_8","title":"Module: Dasharo performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF Without CPU003.XXX and CPU005.XXX 4. Platform stability STB All 5. Ubuntu booting performance test BUB All 6. Debian booting performance test BDE All 7. FreeBSD booting performance test BFB All 8. Proxmox booting performance test BPM All 9. Ubuntu Server booting performance test BUS All 10. OPNsense (serial output) booting performance test BOS All 11. OPNsense (VGA output) booting performance test BOV All 12. pfSense (serial output) booting performance test BPS All 13. pfSense (VGA output) booting performance test BPV All"},{"location":"unified-test-documentation/generic-test-setup/","title":"Dasharo Compatibility: Generic test setup","text":""},{"location":"unified-test-documentation/generic-test-setup/#test-setup","title":"Test setup","text":"<p>Test setup is a set of procedures to be executed before the test execution. Typically, the same setup can be reused by multiple test cases, so there is no need to execute the setup actions before each independent case.</p>"},{"location":"unified-test-documentation/generic-test-setup/#generic-test-setup","title":"Generic test setup","text":""},{"location":"unified-test-documentation/generic-test-setup/#firmware","title":"Firmware","text":"<ol> <li>Obtain <code>FIRMWARE</code> binary:<ol> <li>you can download it from <code>Releases</code> page dedicated for your platform</li> <li>or you can build one yourself as shown in the <code>Building manual</code> page     dedicated for platform which is used by you.</li> </ol> </li> <li>Flash <code>FIRMWARE</code> binary to the DUT according to the instructions in docs.dasharo for your device.<ol> <li>If the device already has Dasharo, see the <code>Firmware update</code> page</li> <li>If the device has a different firmware installed, see the <code>Firmware transition</code> page</li> <li>If the device is bricked, see the <code>Recovery</code> page.</li> </ol> </li> </ol>"},{"location":"unified-test-documentation/generic-test-setup/#os-installation","title":"OS installation","text":"<p>Install all the supported operating systems.</p> <ul> <li>Use the ready-to-use disk images by running the automated disk flashing utility test suite in case every one, or some of the required <code>OPERATING_SYSTEM</code>s are available among the ready-to-use disk images. For more details refer to the instructions in the disk flashing utility test suite.</li> <li>Otherwise, in case the <code>OPERATING_SYSTEM</code> is supported by Dasharo Preseeds use the instructions from there.</li> <li>Otherwise continue with the steps below:</li> </ul>"},{"location":"unified-test-documentation/generic-test-setup/#os-installer","title":"OS installer","text":"<ol> <li>Download an <code>OPERATING_SYSTEM</code> installer image</li> <li>Attach USB stick to the PC.</li> <li>Flash <code>OPERATING_SYSTEM</code> image to the USB stick.</li> <li>Attach the USB stick to the <code>DUT</code>.</li> </ol>"},{"location":"unified-test-documentation/generic-test-setup/#installing-the-os","title":"Installing the OS","text":"<ol> <li>Power on the DUT</li> <li>Enter the boot menu using the <code>BIOS_SETUP_KEY</code>.</li> <li>Select the <code>Boot Menu</code> and press <code>Enter</code>.</li> <li>Select the USB stick and press <code>Enter</code>.<ol> <li>In case of the <code>Ubuntu 22.04</code>, select the <code>Ubuntu (safe graphics)</code> in the    GRUB menu.</li> </ol> </li> <li>Wait for the <code>OPERATING_SYSTEM</code> installer to start.</li> <li>Install <code>OPERATING_SYSTEM</code> on the disk.</li> <li>Power off the DUT.</li> <li>Remove the installation media (USB stick with installer).</li> </ol>"},{"location":"unified-test-documentation/generic-test-setup/#os-preparation","title":"OS Preparation","text":""},{"location":"unified-test-documentation/generic-test-setup/#logging-in","title":"Logging in","text":"<p>If the OS was installed using the Dasharo Preseeds the hostname, username and password will be the same as in the OSFV repository. Make sure that the hostname, username and password are the same as in the OSFV repository in order for the automatic tests to run properly if the device already had the OS installed.</p> WindowsUbuntuFedora <ol> <li>Run PowerShell as an Administrator.</li> <li> <p>Install the OpenSSH Client</p> <pre><code>Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0\n</code></pre> </li> <li> <p>Install the OpenSSH Server</p> <pre><code>Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0\n</code></pre> </li> <li> <p>Start the sshd service</p> <pre><code>Start-Service sshd\n</code></pre> </li> <li> <p>Make the sshd service start automatically on startup:</p> <pre><code>Set-Service -Name sshd -StartupType 'Automatic'\n</code></pre> </li> <li> <p>Confirm the Firewall rule is configured. It should be created automatically by setup. Run the following to verify</p> <pre><code>if (!(Get-NetFirewallRule -Name \"OpenSSH-Server-In-TCP\" -ErrorAction SilentlyContinue | Select-Object Name, Enabled)) {\n    Write-Output \"Firewall Rule 'OpenSSH-Server-In-TCP' does not exist, creating it...\"\n    New-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22\n} else {\n    Write-Output \"Firewall rule 'OpenSSH-Server-In-TCP' has been created and exists.\"\n}\n</code></pre> </li> <li> <p>If during connection via SSH you want to run <code>PowerShell.exe</code> instead of <code>cmd.exe</code> use below command:</p> <pre><code>New-ItemProperty -Path \"HKLM:\\SOFTWARE\\OpenSSH\" -Name DefaultShell \\\n    -Value \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" \\\n    -PropertyType String -Force\n</code></pre> </li> <li> <p>Sets the PowerShell execution policies for Windows computers.</p> <pre><code>Set-ExecutionPolicy RemoteSigned\n</code></pre> </li> <li> <p>Use powercfg.exe to control power plans to prevent sleep.</p> <pre><code>Powercfg /Change standby-timeout-ac 0\nPowercfg /Change standby-timeout-dc 0\n</code></pre> </li> </ol> <ol> <li>Open the terminal.</li> <li> <p>Disable the shutdown confirmation dialogues</p> <pre><code>sudo gsettings set org.gnome.SessionManager logout-prompt false\n</code></pre> </li> <li> <p>Set up a serial terminal:</p> <pre><code>sudo nano /etc/default/grub\n</code></pre> </li> <li> <p>Edit the file <code>/etc/default/grub</code> by adding <code>console=tty0 console=ttyS0,115200 console=ttyUSB0,115200n8</code> in variable <code>GRUB_CMDLINE_LINUX_DEFAULT</code>.</p> </li> <li> <p>Update grub</p> <pre><code>sudo update-grub\n</code></pre> </li> <li> <p>Configure SSH:</p> <pre><code>sudo apt install openssh-server\nsystemctl start sshd\n</code></pre> </li> </ol> <ol> <li>Open the terminal.</li> <li> <p>Disable the shutdown confirmation dialogues</p> <pre><code>sudo gsettings set org.gnome.SessionManager logout-prompt false\n</code></pre> </li> <li> <p>Set up a serial terminal:</p> <pre><code>sudo nano /etc/default/grub\n</code></pre> </li> <li> <p>Add the following at the end of<code>/etc/default/grub</code>:</p> <pre><code>GRUB_CMDLINE_LINUX='rhgb quiet console=tty0 console=ttyS0,115200 console=ttyUSB0,115200'\nGRUB_TERMINAL='serial gfxterm'\nGRUB_SERIAL_COMMAND='serial --speed=115200 --unit=0 --word=8 --parity=no --stop=1'\n</code></pre> </li> <li> <p>Update grub</p> <pre><code>sudo grub2-mkconfig -o /boot/grub2/grub.cfg\n</code></pre> </li> <li> <p>Configure SSH:</p> <pre><code>sudo dnf install openssh-server\nsystemctl enable --now sshd\n</code></pre> </li> <li> <p>Additionally for Using serial via FTDI USB converter</p> <pre><code>sudo systemctl enable serial-getty@ttyUSB0.service\nsudo systemctl start serial-getty@ttyUSB0.service\nsudo setenforce 0\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/generic-test-setup/#nvidia-drivers-ubuntu","title":"NVIDIA drivers - Ubuntu","text":"<p>Only necessary if the device has an Nvidia GPU</p> <ol> <li>Power on the DUT.</li> <li>Wait until the <code>OPERATING_SYSTEM</code> boots from disk.</li> <li>Login into the <code>OPERATING_SYSTEM</code>.</li> <li>Open a terminal window.</li> <li>Search for the newest driver version</li> </ol> <pre><code>sudo apt update\nsudo apt search nvidia-driver --names-only\n</code></pre> <ol> <li>Install the newest driver (you might find a version higher than 560)</li> </ol> <pre><code>sudo apt install nvidia-driver-560\n</code></pre> <ol> <li>A password prompt for secure boot configuration will appear. Choose a    password (you can use your system password) and press <code>Enter</code>.</li> <li>Reboot the DUT.</li> <li>Upon entry into MOKUtil, select <code>Enroll MOK</code> and enter the password you    chose during driver installation.</li> <li>Select the option <code>Continue boot</code>.</li> <li>Wait until the <code>OPERATING_SYSTEM</code> boots from disk.</li> <li>Login into the <code>OPERATING_SYSTEM</code>.</li> <li>Open the <code>NVIDIA X Server Settings</code> application.</li> <li>Open the <code>PRIME Profiles</code> section.</li> <li>Select <code>NVIDIA On-demand</code> and apply.</li> <li>Enter the <code>OPERATING_SYSTEM</code> password when prompted.</li> </ol> <p></p>"},{"location":"unified-test-documentation/generic-test-setup/#post-installation","title":"Post installation","text":"<ol> <li>Look for an optional <code>Post-Installation Setup</code> document in the device's documentation at the Supported Hardware documentation and perform the instructions in it.</li> </ol>"},{"location":"unified-test-documentation/generic-test-setup/#special-cases","title":"Special cases","text":"<p>Special cases are documented in Open Source Firmware Validation repo docs</p>"},{"location":"unified-test-documentation/generic-testing-stand-setup/","title":"Generic testing stand preparation","text":""},{"location":"unified-test-documentation/generic-testing-stand-setup/#introduction","title":"Introduction","text":"<p>This document aims to provide a comprehensive, generic guide to setting up a Remote Testing Environment for Dasharo platforms. As you follow along, please cross-examine with the motherboard's datasheets and our platform-specific recovery documentation, for example:</p> <ul> <li>Novacustom laptops recovery</li> <li>Dell OptiPlex recovery</li> <li>Asus KGPE-D16 recovery</li> <li>Raptor CS Talos II recovery</li> <li>Protectli platforms recovery</li> <li>MSI desktops recovery</li> <li>Supermicro X11 recovery</li> <li>PC engines platforms recovery</li> </ul> <p>Note</p> <p>This list is subject to change and extension. You can find all of our supported platforms and their respective sections on the Supported hardware page.</p>"},{"location":"unified-test-documentation/generic-testing-stand-setup/#detailed-description-of-the-process","title":"Detailed description of the process","text":"<p>If you are dealing with a new platform, you might want to first dump logs from it for future reference. We suggest using the dedicated functionality of DTS.</p>"},{"location":"unified-test-documentation/generic-testing-stand-setup/#compiling-a-list-of-peripherals","title":"Compiling a list of peripherals","text":"<p>Before starting to set up the platform in the rack, make sure you plan it carefully. It is worth first determining what connections should be made on the stand, and then what equipment we need to be able to do it. When we put the device in a rack, we want to have remote access to it. Mainly used devices, depending on the functionalities needed:</p> <p>Note</p> <p>This documentation is based on RTE v1.1, which introduced significant changes over previous revisions. Using an earlier revision is not recommended, and may be problematic if not impossible with some platforms (e.g, if their flash chip requires 1.8V VCC!)</p> <ul> <li>Prepared RTE -   if we need low voltage control, switching on or off the platform, serial   connection and external flashing.<ul> <li>SOIC-8 Pomona clip (if applicable, i.e. if there are no SPI flashing   headers)</li> <li>6x female-female wire cables</li> </ul> </li> <li>Sonoff - if we need line voltage control.</li> <li>PiKVM - if it is not possible to read the device via serial or it is limited,   it is possible to simulate the keyboard and read the image from HDMI.</li> </ul> <p>Once we've collected everything, we can move on to setting up the equipment.</p> <p>Remember</p> <p>Two important rules while making connections and placing stand in the rack:</p> <ul> <li>Use ESD Strap: When assembling and connecting equipment in the lab,   it is essential to use ESD straps. These straps help to prevent   electrostatic discharge and protect sensitive electronic components from   damage. Make sure you wear a strap every time you make a connection, and   if someone is helping you, they have to also wear an ESD strap.</li> <li>Cut off the power supply: Before making any connections and ensure   that the platform, RTE and any other components are disconnected from   power. This precautionary measure reduces the risk of electrical   accidents and protects both the equipment and you.</li> </ul>"},{"location":"unified-test-documentation/generic-testing-stand-setup/#rte-setup","title":"RTE setup","text":"<p>You need to examine the platform's motherboard and its manual to determine whether it has dedicated SPI headers, or will you have to use a Pomona clip to connect to the flash chip. If headers are present, they are preferred over Pomona connection for stability reasons.</p> <p>For exact chip/header locations, see the platform-specific recovery guides in the corresponding Supported Hardware subsections, as mentioned in the introduction above.</p> <p>This guide should cover for most of available platforms, however there are unique exceptions - for example MSI boards where we use the JTPM headers and a FlashBIOS button. Here, we will use Protectli VP46XX as a general example.</p> <p>Before you proceed, make sure your RTE is prepared in accordance with this guide.</p>"},{"location":"unified-test-documentation/generic-testing-stand-setup/#connections","title":"Connections","text":"<p>If your motherboard does not have SPI headers available, follow this guide for setting up a Pomona clip connection:</p>"},{"location":"unified-test-documentation/generic-testing-stand-setup/#pomona","title":"Pomona","text":"<ol> <li> <p>Connect the wire cables to the Pomona clip.</p> <p> </p> </li> <li> <p>Connect the Pomona clip to the SPI header    on RTE.</p> SPI header Pomona clip Vcc pin 5 (Vcc) GND pin 4 (GND) CS pin 1 (CS) SCLK pin 7 (CLK) MISO pin 2 (MISO) MOSI pin 8 (MOSI) <p></p> </li> </ol> <p>Note</p> <p>In earlier RTE revisions, the VCC pin of the SPI header was not connected. In such case, you need to use a different 3.3V pin on the RTE instead.</p> <ol> <li> <p>Open the platform cover and locate the SPI flash chip.</p> <p></p> </li> <li> <p>Match pin 1(CS) on the Pomona clip with the first pin of the flash chip,    marked with a small dot engraved on the chip.</p> <p> </p> </li> </ol>"},{"location":"unified-test-documentation/generic-testing-stand-setup/#spi-headers","title":"SPI headers","text":"<p>If your platform has dedicated SPI flash headers like the Protectli VP66XX, consider yourself lucky and simply connect corresponding pins with Dupont wires:</p> <p></p> SPI header RTE Vcc Vcc GND GND CS CS SCLK CLK MISO MISO MOSI MOSI <p>Note</p> <p>In earlier RTE revisions, the VCC pin of the SPI header was not connected. In such case, you need to use a different 3.3V pin on the RTE instead.</p>"},{"location":"unified-test-documentation/generic-testing-stand-setup/#remaining-pins","title":"Remaining pins","text":"<ol> <li> <p>Locate CMOS headers and wire them to GPIO pins on the RTE according to    the    specification.    You usually need to reset the CMOS after flashing for a successful firmware    update.</p> <p></p> RTE DUT J11 pin 8 CLR_CMOS Any GND GND </li> <li> <p>Locate the power and reset button pins. A motherboard will usually have a    dedicated set of headers where the power and reset button wires are    connected. Connect them to proper pins on the RTE according to    specification.</p> RTE DUT J11 pin 6 PWR_BTN# J11 pin 5 RST# J15 pin 1 GND <p>Reference schematic: RTE v1.1.0 PDF</p> <p>Note</p> <p>In RTE v1.0.0 or older, pins 8 and 9 are used for RST and PWR respectively. Reference schematic: RTE v1.0.0 PDF In extreme cases you might need to use clips to grab pins of soldered-in power and reset buttons.</p> </li> <li> <p>Locate Power LED pin. A motherboard will usually have a dedicated set of    headers where the power LED is connected, typically on the same header as    power button  and reset button wires are located. Connect the power LED to    proper pin on the RTE according to    specification.</p> RTE DUT J10 pin 1 PWR_LED <p>On the schematics there might be no PWR_LED (or alike) signal. It is sufficient to connect <code>+V3.3S</code> signal in that case (if available). Do not connect <code>+V5S</code> as it may damage the RTE. Not all mainboards expose PWR_LED or <code>+V3.3S</code>, in such cases the connection must be omitted.</p> </li> </ol>"},{"location":"unified-test-documentation/generic-testing-stand-setup/#dc-voltage-supply-control","title":"DC voltage supply control","text":"<p>If your device runs on DC voltage up to 24V, power management should be executed via RTE. Otherwise, skip to Sonoff setup.</p> <p>Connect 12-24V power supply to RTE J13 connector, then RTE J12 connector to DC connector. Do not use any DC jack adapters as these seem to introduce power losses and noises, making the power connection unstable.</p> <p>Picture of the improper cable:</p> <p></p> <p>Picture of the proper cable:</p> <p></p> <p>You have to solder the good cable with the half of bad cable to form a full cable. Cut the bad cable in half and strip the isolation. Take the red wire and solder it to the proper cables' white striped wire, this is the hot wire with positive voltage. Isolate the connection with a tape. Take the second black wire from the improper cable and solder it to the unstriped wire of the proper cable. Use tape to isolate and strengthen the whole connection. The cable is ready. Be sure to use plugs in the following way:</p> <p></p>"},{"location":"unified-test-documentation/generic-testing-stand-setup/#sonoff-setup","title":"Sonoff setup","text":"<p>If you require line voltage control, follow our guide for Sonoff preparation.</p>"},{"location":"unified-test-documentation/generic-testing-stand-setup/#pikvm-setup","title":"PiKVM setup","text":"<p>If serial connection to the DUT is known to be problematic, follow our guide for PiKVM preparation.</p>"},{"location":"unified-test-documentation/generic-testing-stand-setup/#access-to-the-dut","title":"Access to the DUT","text":"<p>Access to the DUT should be realized by connecting the serial port on the DUT to the serial port on RTE. The location of the serial port should be determined based on the platform's documentation. Documentation describing this process and including connections with various cables can be found here.</p> <p>Follow the steps below to configure <code>ser2net</code> on RTE, which will allow you to access the DUT via serial using the telnet console. In this example scenario, a micro USB-USB converter is used to connect the DUT with RTE.</p> <ol> <li>Connect to RTE via ssh.</li> <li>Run the <code>dmesg -w</code> command.</li> <li>Disconnect and connect a micro USB-USB converter.</li> <li> <p>On the <code>dmesg -w</code> command output look for the attached converter, in this    case:</p> <pre><code>[  164.136255] usb 8-1: f81232 converter now attached to ttyUSB0\n</code></pre> </li> <li> <p>Then use vim to modify settings in <code>/etc/ser2net.yaml</code> according to the port    received from the <code>dmesg -w</code> command, in this case(<code>ttyUSB0</code>):</p> <pre><code>connection: &amp;con1\n    accepter: telnet, tcp, 13541\n    connector: serialdev, /dev/ttyUSB0, 115200n81, local\n</code></pre> <pre><code>connection: &amp;con2\n    accepter: telnet, tcp, 13542\n    connector: serialdev, /dev/debug_uart_converter, 115200n81, local\n</code></pre> </li> <li> <p>Check access to the DUT using the <code>telnet &lt;IP&gt; &lt;port&gt;</code> command.</p> </li> </ol> <p>In case you have multiple ttyUSB devices, you may want to assign persistent names to them. In that case you need to define udev rules that will create the device nodes. Create them in <code>/etc/udev/rules.d/51-usb-converters.rules</code>:</p> <pre><code>SUBSYSTEM==\"tty\" ACTION==\"add\", ATTRS{idVendor}==&lt;vid&gt;, ATTRS{idProduct}==&lt;pid&gt;, SYMLINK+=\"debug_uart_converter_&lt;name&gt;\"\n</code></pre> <p>Replace <code>&lt;vid&gt;</code> and <code>&lt;pid&gt;</code> with the converter's vendor ID and product ID.</p> <p>Then, specify the name in <code>ser2net</code> config:</p> <pre><code>connection: &amp;con3\n  accepter: telnet, tcp, &lt;port&gt;\n  connector: serialdev, /dev/debug_uart_converter_&lt;name&gt;, 115200n81, local\n</code></pre> <p>You may need to change <code>&amp;con3</code> to another number, if 3 is already taken.</p> <p>After making the changes you should reload udev rules and restart the <code>ser2net</code> service:</p> <pre><code>udevadm control --reload-rules &amp;&amp; udevadm trigger &amp;&amp; systemctl restart ser2net\n</code></pre> <p>In case it is not possible to read the device via serial, set up PiKVM and properly connect to the platform. PiKVM setup documentation can be found here.</p>"},{"location":"unified-test-documentation/generic-testing-stand-setup/#platform-external-flashing","title":"Platform external flashing","text":"<p>Platform external flashing is needed for two reasons:</p> <ul> <li>it enables quick changes to the firmware,</li> <li>it enables the process of unbricking the platform.</li> </ul> <p>The flashing operation usually consists of several commands, involving crucial power management, so it is advisable to use our osfv-cli tool , providing support for most of Dasharo platforms.</p> <p>Example use:</p> <pre><code>\u03bb osfv_cli rte --rte_ip 192.168.10.244 flash probe\nDUT model retrieved from snipeit: VP4630\nProbing flash...\nExecuting command: flashrom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000 -c MX25L12835F/MX25L12845E/MX25L12865E\nflashrom v1.2 on Linux 5.4.69 (armv7l)\nflashrom is free software, get the source code at https://flashrom.org\n\nUsing clock_gettime for delay loops (clk_id: 1, resolution: 1ns).\nFound Macronix flash chip \"MX25L12835F/MX25L12845E/MX25L12865E\" (16384 kB, SPI) on linux_spi.\n\nNo operations were specified.\n</code></pre> <pre><code>\u03bb osfv_cli rte --rte_ip 192.168.10.244 flash read --rom vp4630-read.rom\nDUT model retrieved from snipeit: VP4630\nReading from flash...\nExecuting command: flashrom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000 -c MX25L12835F/MX25L12845E/MX25L12865E -r /tmp/read.rom\nflashrom v1.2 on Linux 5.4.69 (armv7l)\nflashrom is free software, get the source code at https://flashrom.org\n\nUsing clock_gettime for delay loops (clk_id: 1, resolution: 1ns).\n\nFound Macronix flash chip \"MX25L12835F/MX25L12845E/MX25L12865E\" (16384 kB, SPI) on linux_spi.\n\nReading flash...\ndone.\n\nRead flash content saved to vp4630-read.rom\n</code></pre> <p>Flashing with flashrom takes about 1 minute.</p> <p>Note that the first boot of the platform after proceeding with above procedure can take much longer than usual.</p>"},{"location":"unified-test-documentation/generic-testing-stand-setup/#stand-setup","title":"Stand Setup","text":"<p>Before placing the stand in the lab, it is recommended to set it up first at your desk to verify its functionality. After compiling the stand, the connections that we have made should be checked. The necessary thing to do the check is the IP address of RTE which we can get by connecting to RTE via serial using minicom and using the <code>ip a</code> command.</p> <p>After this, we have an IP to connect via ssh. This process should suit every position:</p> <ol> <li>Connect to RTE via ssh.</li> <li>Check access to the DUT using the <code>telnet &lt;IP&gt; &lt;port&gt;</code> command from RTE or    log in to PiKVM by entering its IP address in your browser.</li> <li> <p>Check that the commands responsible for the power control are working    properly:</p> <pre><code>osfv_cli rte --rte_ip 192.168.10.244 rel tgl\n</code></pre> <pre><code>osfv_cli rte --rte_ip 192.168.10.244 pwr on\n</code></pre> <pre><code>osfv_cli rte --rte_ip 192.168.10.244 pwr off\n</code></pre> <pre><code>osfv_cli rte --rte_ip 192.168.10.244 pwr reset\n</code></pre> </li> <li> <p>Check the flashing connections using a prepared flashing script.</p> </li> <li>Check for additional connections.</li> </ol>"},{"location":"unified-test-documentation/generic-testing-stand-setup/#placement-in-the-lab","title":"Placement in the Lab","text":"<p>After testing the functionalities of the stand, follow these guidelines to place it in the lab:</p> <ol> <li>Select an appropriate location in the rack cabinet for the stand. Consider    safety, accessibility, and proper fastening of the station elements.</li> <li>Ensure that the cables are routed through trays and securely tied to prevent    them from sticking out or becoming tangled.</li> <li>Label the cables and elements of the stand with their IP addresses for easy    identification.</li> <li>Once the stand is in place, recheck the connections, ensuring that all cables    are properly connected and secured.</li> <li>Complete the setup by checking remote access to the stand via SSH and ensure    that all functions are working correctly.</li> </ol>"},{"location":"unified-test-documentation/generic-testing-stand-setup/#additional-steps","title":"Additional steps","text":"<p>You might want to assign a static IP address for the RTE to avoid connection problems in the future. It can also prove useful to make a documentation of your entire test setup and enlist it in an IT asset management system, such as SnipeIT - providing such information in an issue report might turn out to be crucial.</p>"},{"location":"unified-test-documentation/overview/","title":"Dasharo Test Specifiaction - overview","text":"<p>The release procedure is always preceded by validation procedure. It is done on the basis of the test documentation, which can be found in this submenu. To properly use the documentation, it is advisable to read the following brief description of its components.</p>"},{"location":"unified-test-documentation/overview/#test-matrix","title":"Test Matrix","text":"<p>Test Matrix is the document which shows platform-dedicated test suites and test cases. Based on it, the customer may scope the checks performed by the validation team each time before firmware release.</p>"},{"location":"unified-test-documentation/overview/#generic-test-setup","title":"Generic test setup","text":"<p>Generic test setup is the document which describes all the steps that are performed before testing the various functionalities.</p>"},{"location":"unified-test-documentation/overview/#dasharo-modules","title":"Dasharo modules","text":"<p>Tests performed during validation procedure can be divided into test modules, test suites and test cases.</p> <p>Test cases are the smallest component of validation procedure. Their task is to check, that the given functionality works properly under a certain conditions.</p> <p>Test suites group test cases related to the given functionality, while test modules groups test cases related to the similar functionalities (i. e. test suites which task is to check if differently OS boot properly on the platform).</p> <p>Currently in Dasharo test specification the following test modules can be distinguished:</p> <ul> <li><code>Dasharo Compatibility</code> which contains test suites related to the basic     functionailited of the device.</li> <li><code>Dasharo Security</code> which contains test suites related to the platform     security and supporting security modules.</li> <li><code>Dasharo Performance</code> which contains test suites related to the platform     booting performance.</li> </ul>"},{"location":"unified-test-documentation/overview/#supported-operating-systems","title":"Supported Operating Systems*","text":"<ul> <li>Windows 11</li> <li>Ubuntu 22.04</li> <li>Ubuntu Server 22.04 LTS</li> <li>Debian 11.0</li> <li>Fedora 41</li> <li>FreeBSD 13.2</li> <li>Proxmox VE 7.4</li> <li>OPNsense 23.01</li> <li>pfSense CE 2.6.0</li> </ul> <p><code>* Unless specified otherwise in the test</code> (as of 17 June 2024)</p>"},{"location":"unified-test-documentation/dasharo-compatibility/100-coreboot-base-port/","title":"Dasharo: coreboot base port","text":""},{"location":"unified-test-documentation/dasharo-compatibility/100-coreboot-base-port/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> <li>Connect to the UART debug interface and open a serial console.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/100-coreboot-base-port/#cbp001001-boot-into-coreboot-stage-bootblock","title":"CBP001.001 Boot into coreboot stage bootblock","text":"<p>Test description</p> <p>This test aims to verify that DUT during booting procedure reaches stage bootblock. The bootblock is the first stage executed after CPU reset, its main task is to set up everything for a C-environment.</p> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power ON the DUT.</li> <li>By using the serial console read the booting procedure stage.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Read the booting procedure stage.</li> </ol> <p>Expected result</p> <ol> <li> <p>The console output should contain string with the phrase:</p> <pre><code>bootblock starting\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/100-coreboot-base-port/#cbp002001-boot-into-coreboot-stage-romstage","title":"CBP002.001 Boot into coreboot stage romstage","text":"<p>Test description</p> <p>This test aims to verify that DUT during booting procedure reaches stage romstage. The romstage initializes the DRAM and prepares everything for device init.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power ON the DUT.</li> <li>By using the serial console read the booting procedure stage.</li> </ol> <p>Expected result</p> <ol> <li> <p>The console output should contain string with the phrase:</p> <pre><code>romstage starting\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/100-coreboot-base-port/#cbp003001-boot-into-coreboot-stage-postcar","title":"CBP003.001 Boot into coreboot stage postcar","text":"<p>Test description</p> <p>This test aims to verify that DUT during booting procedure reaches stage postcar. The postcar tears down CAR and loads the ramstage.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power ON the DUT.</li> <li>By using the serial console read the booting procedure stage.</li> </ol> <p>Expected result</p> <ol> <li> <p>The console output should contain string with the phrase:</p> <pre><code>postcar starting\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/100-coreboot-base-port/#cbp004001-boot-into-coreboot-stage-ramstage","title":"CBP004.001 Boot into coreboot stage ramstage","text":"<p>Test description</p> <p>This test aims to verify that DUT during booting procedure reaches stage ramstage. The ramstage does the main device init.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power ON the DUT.</li> <li>By using the serial console read the booting procedure stage.</li> </ol> <p>Expected result</p> <ol> <li> <p>The console output should contain string the with phrase:</p> <pre><code>ramstage starting\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/100-coreboot-base-port/#cbp005001-resource-allocator-v4-gathering-requirements","title":"CBP005.001 Resource allocator v4 - gathering requirements","text":"<p>Test description</p> <p>This test aims to verify that DUT reaches the <code>gathering requirements</code> stage for Resource Allocator v4 during booting procedure.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power ON the DUT.</li> <li>By using the serial console read the booting procedure stage.</li> </ol> <p>Expected result</p> <ol> <li> <p>The console output should contain a string with the phrase:</p> <pre><code>Pass 1 (gathering requirements)\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/100-coreboot-base-port/#cbp006001-resource-allocator-v4-allocating-resources","title":"CBP006.001 Resource allocator v4 - allocating resources","text":"<p>Test description</p> <p>This test aims to verify that DUT reaches the <code>allocating resources</code> stage for Resource Allocator v4 during booting procedure.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power ON the DUT.</li> <li>By using the serial console read the booting procedure stage.</li> </ol> <p>Expected result</p> <ol> <li> <p>The console output should contain a string with the phrase:</p> <pre><code>Pass 2 (allocating resources)\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/301-memory-hcl/","title":"Dasharo compatibility: Memory HCL","text":""},{"location":"unified-test-documentation/dasharo-compatibility/301-memory-hcl/#hcl001001-memory-hcl-boot-into-os-ubuntu","title":"HCL001.001 Memory HCL - boot into OS (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the DUT can boot with the memory module combinations specified in the HCL.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Prepare the memory modules specified in the HCL.</li> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol> <p>Test steps</p> <ol> <li>Insert the memory module into the DUT's memory port, starting with the first     position from the HCL.</li> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Power off the DUT.</li> <li>Repeat the <code>test steps</code> for all positions in the HCL.</li> </ol> <p>Expected result</p> <ol> <li>The expected result is that the OS boots successfully with all memory    combinations specified in the HCL</li> <li>If the <code>OPERATING_SYSTEM</code> boots, note the success and power the DUT OFF</li> <li>If the <code>OPERATING_SYSTEM</code> doesn't boot, check the logs (optional - if     connected over serial console) for the     <code>FSP Memory Init has returned an error</code> and note the failure</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/303-custom-boot-menu-key/","title":"Dasharo compatibility: Custom Boot Keys","text":""},{"location":"unified-test-documentation/dasharo-compatibility/303-custom-boot-menu-key/#cbk001001-custom-boot-menu-key","title":"CBK001.001 Custom Boot Menu Key","text":"<p>Test description</p> <p>This test aims to verify that the DUT is configured to use custom Boot Menu hotkey (if it exists).</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the Boot Menu.</li> </ol> <p>Expected result</p> <p>The DUT boots into the Boot Menu after using the specified hotkey.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/303-custom-boot-menu-key/#cbk002001-custom-bios-menu-key","title":"CBK002.001 Custom BIOS Menu Key","text":"<p>Test description</p> <p>This test aims to verify that the DUT is configured to use custom BIOS Menu hotkey.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the <code>BIOS_MENU_KEY</code> to enter the BIOS menu.</li> </ol> <p>Expected result</p> <p>The DUT boots into the BIOS menu after using the specified hotkey.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/304-custom-logo/","title":"Dasharo compatibility: Custom Logo","text":""},{"location":"unified-test-documentation/dasharo-compatibility/304-custom-logo/#clg001001-custom-boot-logo","title":"CLG001.001 Custom boot logo","text":"<p>Test description</p> <p>This test aims to verify that the DUT is configured to display the specified (customized) logo at boot.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the boot logo to appear.</li> </ol> <p>Expected result</p> <p>The displayed logo should depend on the Dasharo variant:</p> <ul> <li>if the Dasharo variant is NovaCustom - the NovaCustom logo should be displayed,</li> <li>if the Dasharo variant is Protectli - the Protectli logo should be displayed,</li> <li>if the Dasharo variant is Tuxedo - the Tuxedo logo should be displayed,</li> <li>for all other variants Dasharo custom logo should be displayed.</li> </ul> <p>Keep in mind that the end-user's customized boot logo might also be displayed - if before the custom logo checking procedure described in the Logo customization documentation has been performed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/","title":"Dasharo compatibility: USB HID and MSC Support","text":""},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/#usb001001-usb-devices-detection-firmware","title":"USB001.001 USB devices detection (firmware)","text":"<p>Test description</p> <p>This test aims to verify that the external USB devices are detected correctly by the firmware and all basic keys work according to their labels.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> <li>Proceed with the     Generic test setup: OS installer.</li> <li>Connect the flash drive using the USB port.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Enter the boot menu using the <code>BIOS_SETUP_KEY</code>.</li> <li>Select the <code>Boot Menu</code>, press <code>Enter</code> and note the result.</li> </ol> <p>Expected result</p> <ol> <li>Flash drive entry is listed in the boot menu.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/#usb001201-usb-devices-detection-in-os-ubuntu","title":"USB001.201 USB devices detection in OS (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/#usb001301-usb-devices-detection-in-os-windows","title":"USB001.301 USB devices detection in OS (Windows)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/#usb002201-usb-keyboard-detection-firmware","title":"USB002.201 USB keyboard detection (firmware)","text":"<p>Test description</p> <p>This test aims to verify that the external USB keyboard is detected correctly by the firmware and all basic keys work according to their labels.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> <li>Connect the external USB keyboard using the USB port.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT</li> <li>Enter the boot menu using the <code>BIOS_SETUP_KEY</code>.</li> <li>Use the arrow keys, Esc key and the Enter key to navigate the menus.</li> </ol> <p>Expected result</p> <ol> <li>All menus can be entered using the external USB keyboard.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/#usb002002-usb-keyboard-detection-ubuntu","title":"USB002.002 USB keyboard detection (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/#usb002301-usb-keyboard-detection-windows","title":"USB002.301 USB keyboard detection (Windows)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/#usb003201-upload-1gb-file-on-usb-storage-ubuntu","title":"USB003.201 Upload 1GB file on USB storage (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/#usb003002-upload-1gb-file-on-usb-storage-windows","title":"USB003.002 Upload 1GB file on USB storage (Windows)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/307-freebsd-support/","title":"Dasharo Compatibility: FreeBSD support","text":""},{"location":"unified-test-documentation/dasharo-compatibility/307-freebsd-support/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/307-freebsd-support/#bsd001001-freebsd-installation-and-boot","title":"BSD001.001 FreeBSD installation and boot","text":"<p>Test description</p> <p>This test verifies that FreeBSD distribution could be installed on the DUT and works properly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = FreeBSD 13</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/","title":"Dasharo Compatibility: Debian Stable and Ubuntu LTS support","text":""},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/#lbt001001-debian-stable-installation-on-usb-storage","title":"LBT001.001 Debian Stable installation on USB storage","text":"<p>Test description</p> <p>This test aims to verify that Debian Stable distribution could be installed on USB storage attached to the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Debian</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>According to the Documentation     perform the OS installation process. As disk choose the USB stick.</li> </ol> <p>Expected result</p> <p>The information about successful installation should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/#lbt001002-boot-debian-from-usb","title":"LBT001.002 Boot Debian from USB","text":"<p>Test description</p> <p>This test aims to verify that Debian Stable distribution could be booted from USB storage attached to the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Debian</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the <code>USB_STORAGE</code> on which the system was     previously installed.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/#lbt002001-ubuntu-lts-installation-on-usb-storage","title":"LBT002.001 Ubuntu LTS installation on USB storage","text":"<p>Test description</p> <p>This test aims to verify that Ubuntu LTS modern distribution could be installed on USB storage attached to the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>According to the Documentation     perform the OS installation process. As disk choose the USB stick.</li> </ol> <p>Expected result</p> <p>The information about successful installation should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/#lbt002002-boot-ubuntu-from-usb","title":"LBT002.002 Boot Ubuntu from USB","text":"<p>Test description</p> <p>This test aims to verify that Ubuntu LTS modern distribution could be booted from USB storage attached to the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the <code>USB_STORAGE</code> on which the system was     previously installed.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/#lbt003001-debian-stable-installation-on-hard-disk","title":"LBT003.001 Debian Stable installation on Hard Disk","text":"<p>Test description</p> <p>This test aims to verify that Debian Stable distribution could be installed on the hard disk on the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Debian</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>According to the Documentation     perform the OS installation process. As disk choose the mounted in the     DUT Hard Disk.</li> </ol> <p>Expected result</p> <p>The information about successful installation should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/#lbt003002-boot-debian-from-hard-disk","title":"LBT003.002 Boot Debian from Hard Disk","text":"<p>Test description</p> <p>This test aims to verify that Debian Stable distribution could be booted from the hard disk on the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Debian</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the hard disk on which the system was previously     installed.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/#lbt004001-ubuntu-lts-installation-on-hard-disk","title":"LBT004.001 Ubuntu LTS installation on Hard Disk","text":"<p>Test description</p> <p>This test aims to verify that Ubuntu LTS modern distribution could be installed on the hard disk on the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>According to the Documentation     perform the OS installation process. As disk choose the mounted in the     DUT Hard Disk.</li> </ol> <p>Expected result</p> <p>The information about successful installation should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/#lbt004002-boot-ubuntu-from-hard-disk","title":"LBT004.002 Boot Ubuntu From Hard Disk","text":"<p>Test description</p> <p>This test aims to verify that Ubuntu LTS modern distribution could be booted from the hard disk on the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the hard disk on which the system was previously     installed.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/309-qubesos-support/","title":"Dasharo Compatibility: QubesOS support","text":""},{"location":"unified-test-documentation/dasharo-compatibility/309-qubesos-support/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/309-qubesos-support/#qbs001001-qubesos-installation","title":"QBS001.001 QubesOS installation","text":"<p>Test description</p> <p>This test aims to verify that QubesOS Stable distribution could be installed.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = QubesOS 4.1.1</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>According to the Documentation     perform the OS installation process.</li> </ol> <p>Expected result</p> <p>The information about successful installation should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/309-qubesos-support/#qbs001002-boot-qubesos","title":"QBS001.002 Boot QubesOS","text":"<p>Test description</p> <p>This test aims to verify that QubesOS Stable distribution could be booted.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = QubesOS 4.1.1</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the <code>DISK</code> on which the system was     previously installed.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/30A-custom-network-boot-entries/","title":"Dasharo Compatibility: Custom Network Boot entries","text":"<p>The test suite is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/30L-memtest-payload-support/","title":"Dasharo Compatibility: Memtest payload support","text":""},{"location":"unified-test-documentation/dasharo-compatibility/30L-memtest-payload-support/#mem001001-memtest-availability","title":"MEM001.001 Memtest availability","text":"<p>Test description</p> <p>This test aims to verify that the Memtest entry is available in DUT boot     menu.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait until <code>BOOT_MENU_STRING</code> appears.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Check if <code>Payload [memtest]</code> is available in the boot menu.</li> </ol> <p>Expected result</p> <p>The <code>Payload [memtest]</code> option should be visible as the one of boot menu options.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/30L-memtest-payload-support/#mem002001-enter-memtest","title":"MEM002.001 Enter Memtest","text":"<p>Test description</p> <p>This test aims to verify that the DUT enters the Memtestboot option.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for boot until <code>BOOT_MENU_STRING</code> appears.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the key with a proper number for <code>Payload [memtest]</code>.</li> <li>Check if <code>Memtest86+</code> is available.</li> </ol> <p>Expected result</p> <p>The <code>Memtest86+</code> is visible at the top of the output.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/30L-memtest-payload-support/#mem003001-memtest-stability","title":"MEM003.001 Memtest stability","text":"<p>Test description</p> <p>This test aims to verify that the Memtest starts does not hang under DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for boot until <code>BOOT_MENU_STRING</code> appears.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the key with a proper number for <code>Payload [memtest]</code>.</li> <li>Check if <code>State: - Running...</code> is available.</li> </ol> <p>Expected result</p> <p>The <code>State: - Running...</code> is visible after a few seconds and confirms that the the test is in progress.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/30L-memtest-payload-support/#mem004001-memtest-refreshing-by-l-key","title":"MEM004.001 Memtest refreshing by 'L' key","text":"<p>Test description</p> <p>This test aims to verify that DUT refreshes Memtest properly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for boot until <code>BOOT_MENU_STRING</code> appears.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the key with a proper number for <code>BOOT_MENU_ENTRY</code>.</li> <li>Press the <code>L</code> key.</li> <li>Check if <code>L</code> refreshes output.</li> </ol> <p>Expected result</p> <p>The <code>Memtest86+</code> is visible before and after pressing <code>L</code>.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/30L-memtest-payload-support/#mem005001-memtest-refreshing-by-l-key","title":"MEM005.001 Memtest refreshing by 'l' key","text":"<p>Test description</p> <p>This test aims to verify that DUT refreshes Memtest properly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for boot until <code>BOOT_MENU_STRING</code> appears.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the key with a proper number for <code>BOOT_MENU_ENTRY</code>.</li> <li>Press the <code>l</code> key.</li> <li>Check if <code>l</code> refreshes output.</li> </ol> <p>Expected result</p> <p>The <code>Memtest86+</code> is visible before and after pressing <code>l</code>.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/30L-memtest-payload-support/#mem006001-memtest-completing","title":"MEM006.001 Memtest completing","text":"<p>Test description</p> <p>This test aims to verify that DUT completes Memtest.</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for boot until <code>BOOT_MENU_STRING</code> appears.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the key with a proper number for <code>Payload [memtest]</code>.</li> <li>Make sure that <code>State: - Running...</code> is available.</li> <li>Wait until <code>** Pass complete, no errors, press Esc to exit **</code> appears.</li> </ol> <p>Expected result</p> <p>After the test completes without any errors <code>** Pass complete, no errors, press Esc to exit **</code> message is visible on the bottom of the screen.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/30M-uefi-compatible-interface/","title":"Dasharo Compatibility: UEFI compatible interface","text":"<p>The test suite is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/30P-uefi-shell/","title":"Dasharo Compatibility: UEFI Shell","text":"<p>The test suite is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/310-fedora-support/","title":"Dasharo Compatibility: Fedora support","text":""},{"location":"unified-test-documentation/dasharo-compatibility/310-fedora-support/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/310-fedora-support/#fed001001-fedora-installation","title":"FED001.001 Fedora installation","text":"<p>Test description</p> <p>This test aims to verify that Fedora Stable distribution could be installed.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Fedora</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>According to the Documentation     perform the OS installation process.</li> </ol> <p>Expected result</p> <p>The information about successful installation should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/310-fedora-support/#fed001002-boot-fedora","title":"FED001.002 Boot Fedora","text":"<p>Test description</p> <p>This test aims to verify that Fedora Stable distribution could be booted.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Fedora</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the <code>DISK</code> on which the system was     previously installed.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/312-nvme-support/","title":"Dasharo Compatibility: NVMe support","text":""},{"location":"unified-test-documentation/dasharo-compatibility/312-nvme-support/#nvm001001-nvme-support-firmware","title":"NVM001.001 NVMe support (firmware)","text":"<p>Test description</p> <p>This test aims to verify that firmware is able to correctly detect NVMe disk in the M.2 slot.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Insert a NVMe disk into the M.2 slot on the DUT.</li> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BOOT_MENU_KEY</code> to enter     the UEFI Boot Menu and note the result.</li> </ol> <p>Expected result</p> <ol> <li>The NVMe disk should be listed on the bootable devices list.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/312-nvme-support/#nvm001201-nvme-support-ubuntu","title":"NVM001.201 NVMe support (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/312-nvme-support/#nvm001301-nvme-support-in-os-windows","title":"NVM001.301 NVMe support in OS (Windows)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/315-network-boot/","title":"Dasharo Compatibility: Network Boot","text":""},{"location":"unified-test-documentation/dasharo-compatibility/315-network-boot/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> <li>The DUT should be connected to the Internet by using an Ethernet cable.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/315-network-boot/#pxe001001-dasharo-network-boot-is-bootable","title":"PXE001.001 Dasharo Network Boot is bootable","text":"<p>Test description</p> <p>This test aims to verify, that the <code>iPXE Network boot</code> is bootable in the boot menu and whether, after selecting this boot option, <code>Dasharo Network Boot Menu</code> is displayed.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the <code>iPXE Network boot</code> option using the arrow keys and press    Enter.</li> </ol> <p>Expected result</p> <ol> <li>After selecting the <code>iPXE Network boot</code>, the <code>Dasharo Network Boot Menu</code>     should be displayed.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/315-network-boot/#pxe002001-dasharo-network-boot-menu-boot-options-order-is-correct","title":"PXE002.001 Dasharo network boot menu boot options order is correct","text":"<p>Test description</p> <p>This test aims to verify that <code>Dasharo Network Boot Menu</code> contains all of the needed options which are in the correct order.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the <code>iPXE Network boot</code> option using the arrow keys and press    Enter.</li> </ol> <p>Expected result</p> <ol> <li><code>Dasharo Network Boot Menu</code> contains all of the needed options.</li> <li><code>Dasharo Network Boot Menu</code> options are in order as follows:</li> </ol> <pre><code>Autoboot\nDasharo Tools Suite\nOS installation\niPXE Shell\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/315-network-boot/#pxe003001-autoboot-option-is-available-and-works-correctly","title":"PXE003.001 Autoboot option is available and works correctly","text":"<p>Test description</p> <p>This test aims to verify that the <code>Autoboot</code> option in <code>Dasharo Network Boot Menu</code> works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the <code>iPXE Network boot</code> option using the arrow keys and press    Enter.</li> <li>Select the <code>Autoboot</code> option using the arrow keys, then press Enter.</li> </ol> <p>Expected result</p> <p>If the server assigned to the <code>Autoboot</code> option is available in the local network, the boot menu should appear.</p> <p>If the server assigned to the <code>Autoboot</code> option isn't available in the local network, selecting this option will result in configuring the network interfaces and return to the <code>Setup Menu</code>.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/315-network-boot/#pxe004001-dts-option-is-available-and-works-correctly","title":"PXE004.001 DTS option is available and works correctly","text":"<p>Test description</p> <p>This test aims to verify that the <code>Dasharo Tools Suite</code> option in <code>Dasharo Network Boot Menu</code> allows booting into DTS over HTTPS.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = coreboot</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Proceed with the Requirements for     DTS.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the <code>iPXE Network boot</code> option using the arrow keys and press    Enter.</li> <li>Select the <code>Dasharo Tools Suite</code> option using the arrow keys, then press     Enter.</li> <li>Take note of the output from iPXE while DTS is loading.</li> </ol> <p>Expected result</p> <ol> <li>After configuring the network interfaces, connecting to the server and    booting, <code>Dasharo Tools Suite</code> menu should appear.</li> <li>While downloading DTS, the URL pointing to <code>dts.ipxe</code> printed to the console    should begin with HTTPS.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/315-network-boot/#pxe005001-os-installation-option-is-available-and-works-correctly","title":"PXE005.001 OS installation option is available and works correctly","text":"<p>Test description</p> <p>This test aims to verify that the <code>OS installation</code> option in <code>Dasharo Network Boot Menu</code> allows booting into netboot.xyz server.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = coreboot</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the <code>iPXE Network boot</code> option using the arrow keys and press    Enter.</li> <li>Select the <code>OS installation</code> option using the arrow keys and press Enter.</li> </ol> <p>Expected result</p> <p>After configuring the network interfaces, connecting to the server and booting, <code>netboot.xyz</code> menu should appear.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/315-network-boot/#pxe006001-ipxe-shell-option-is-available-and-works-correctly","title":"PXE006.001 iPXE shell option is available and works correctly","text":"<p>Test description</p> <p>This test aims to verify that the <code>iPXE Shell</code> option in <code>Dasharo Network Boot Menu</code> works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the <code>iPXE Network boot</code> option using the arrow keys and press    Enter.</li> <li>Select the <code>iPXE Shell</code> option using the arrow keys and press Enter.</li> <li> <p>Obtain an IP address by executing the following command:</p> <pre><code>dhcp\n</code></pre> </li> <li> <p>Load <code>netboot.xyz</code> server menu by executing the following command:</p> <pre><code>chain --autofree http://boot.netboot.xyz/\n</code></pre> </li> </ol> <p>Expected result</p> <p>After configuring the network interfaces, connecting to the server and booting, <code>netboot.xyz</code> menu should appear.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/315-network-boot/#pxe007001-ipxe-network-boot","title":"PXE007.001 iPXE network boot","text":"<p>Test description</p> <p>This test aims to verify that the DUT is capable of network booting from a PXE server.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the <code>iPXE Network boot</code> option using the arrow keys and press    Enter.</li> <li>Press Ctrl+B when prompted to stop iPXE from booting automatically.</li> <li>Type in <code>dhcp</code> to obtain an IP address.</li> <li>Type in <code>chain --autofree http://boot.netboot.xyz/</code> to load a boot menu</li> <li>Enter the \"Live CDs\" submenu using the arrow keys and Enter.</li> <li>Select <code>Debian</code> -&gt; <code>Debian Live 11 (bullseye)</code> -&gt; <code>Debian 11 Gnome</code> and     press Enter.</li> </ol> <p>Expected result</p> <ol> <li>The iPXE application boots successfully.</li> <li>iPXE obtains an IP address.</li> <li>iPXE boots an <code>Debian 11</code> from netboot.xyz.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/315-network-boot/#pxe008001-firmware-update-mode","title":"PXE008.001 Firmware Update Mode","text":"<p>Test description</p> <p>This test aims to verify that the DUT is capable of network booting Dasharo Tools Suite over the network using Firmware Update Mode.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Ensure network cable is connected to the DUT.</li> <li>Hold the <code>SETUP_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the <code>Dasharo System Features</code> option using the arrow keys and press    Enter.</li> <li>Select the <code>Dasharo Security Options</code> option using the arrow keys and press    Enter.</li> <li>Select the <code>Firmware Update Mode</code> option using the arrow keys and press    Enter.</li> <li>Press Enter when prompted. The DUT will reboot at this point.</li> <li>Press the requested number on the keyboard when prompted.</li> </ol> <p>Expected result</p> <ol> <li>DTS is booted automatically when Firmware Update Mode is entered.</li> <li>DTS automatically begins to check for a firmware update.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/315b-netboot-utilities/","title":"Dasharo Compatibility: Network boot utilities","text":"<p>Note</p> <p>This test suite is supported on Protectli releases with a custom network boot menu. It is incompatible with the PXE test suite. For most other releases the PXE test suite should be used instead.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/315b-netboot-utilities/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/315b-netboot-utilities/#nbt001001-netboot-is-available","title":"NBT001.001 Netboot is available","text":"<p>Test description</p> <p>This test aims to verify that the <code>Network Boot and Utilities</code> menu is available and its content is right.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the <code>Network Boot and Utilities</code> option using the arrow keys and     press <code>Enter</code>.</li> </ol> <p>Expected result</p> <ol> <li><code>Network Boot and Utilities</code> option should be present in the UEFI Boot Menu.</li> <li> <p>After selecting the <code>Network Boot and Utilities</code> option the following     menu should appear:</p> <pre><code>   ------------------------ Network Boot and Utilities ----------------------\n   ------------------------ Please Select an Option -------------------------\n   OS Selection &amp; Utilities\n   iPXE Boot\n   iPXE Shell\n   Advanced\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/315b-netboot-utilities/#nbt002001-os-selection-utilities-is-available","title":"NBT002.001 OS Selection &amp; Utilities is available","text":"<p>Test description</p> <p>This test aims to verify that the <code>OS Selection &amp; Utilities</code> menu is available and its content is right.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the <code>Network Boot and Utilities</code> option using the arrow keys and press     <code>Enter</code>.</li> <li>Select the <code>OS Selection &amp; Utilities</code> option using the arrow keys and press     <code>Enter</code>.</li> </ol> <p>Expected result</p> <ol> <li><code>OS Selection &amp; Utilities</code> option should be present in the     <code>Network Boot and Utilities</code> menu.</li> <li>After selecting the <code>OS Selection &amp; Utilities</code> option iPXE menu should be    displayed.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/315b-netboot-utilities/#nbt003001-ipxe-boot-is-available","title":"NBT003.001 iPXE boot is available","text":"<p>Test description</p> <p>This test aims to verify that the <code>iPXE Boot</code> menu is available and it content is right.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the <code>Network Boot and Utilities</code> option using the arrow keys and     press <code>Enter</code>.</li> <li>Select the <code>iPXE Boot</code> option using the arrow keys and press <code>Enter</code>.</li> </ol> <p>Expected result</p> <ol> <li><code>iPXE Boot</code> option should be present in the <code>Network Boot and Utilities</code>     menu.</li> <li>After selecting the <code>iPXE Boot</code> option the autoboot procedure should be     started.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/315b-netboot-utilities/#nbt004001-ipxe-shell-is-available","title":"NBT004.001 iPXE shell is available","text":"<p>Test description</p> <p>This test aims to verify that the <code>iPXE Shell</code> menu is available and it content is right.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the <code>Network Boot and Utilities</code> option using the arrow keys and press <code>Enter</code>.</li> <li>Select the <code>iPXE Shell</code> option using the arrow keys and press <code>Enter</code>.</li> </ol> <p>Expected result</p> <ol> <li><code>iPXE Shell</code> option should be present in the <code>Network Boot and Utilities</code>     menu.</li> <li> <p>After selecting the <code>iPXE Shell</code> option the following menu should appear:</p> <pre><code>You are now in iPXE shell. Type \"exit\" to go back to the main menu.\niPXE&gt;\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/315b-netboot-utilities/#nbt005001-ipxe-shell-works-correctly","title":"NBT005.001 iPXE shell works correctly","text":"<p>Test description</p> <p>This test aims to verify that the iPXE shell works correctly by configuring network interface and booting from selected address.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the <code>Network Boot and Utilities</code> option using the arrow keys and press     <code>Enter</code>.</li> <li>Select the <code>iPXE Shell</code> option using the arrow keys and press <code>Enter</code>.</li> <li> <p>Configure communication interface by using the following command:</p> <pre><code>dhcp net0\n</code></pre> </li> <li> <p>Connect to the DTS ipxe menu by using the following command:</p> <pre><code>chain http://boot.3mdeb.com/dts.ipxe\n</code></pre> </li> </ol> <p>Expected result</p> <ol> <li>Communication interface configuration procedure should be successful.</li> <li>DTS boot menu should appear.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/315b-netboot-utilities/#nbt006001-advanced-option-is-available","title":"NBT006.001 Advanced option is available","text":"<p>Test description</p> <p>This test aims to verify that the <code>Advanced</code> menu is available and its content is right.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the <code>Network Boot and Utilities</code> option using the arrow keys and press     <code>Enter</code>.</li> <li>Select the <code>Advanced</code> option using the arrow keys and press <code>Enter</code>.</li> </ol> <p>Expected result</p> <ol> <li><code>Advanced</code> option should be present in the <code>Network Boot and Utilities</code>     menu.</li> <li> <p>After selecting the <code>Advanced</code> option the following menu should appear:</p> <pre><code>   ------------------------ Network Boot and Utilities ----------------------\n   ------------------------ Please Select an Option -------------------------\n   Change Netboot iPXE Payload URL\n   Exit\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/315b-netboot-utilities/#nbt007001-change-netboot-url-works-correctly","title":"NBT007.001 Change netboot URL works correctly","text":"<p>Test description</p> <p>This test aims to verify that it's possible to change the netboot URL and boot from it.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the <code>Network Boot and Utilities</code> option using the arrow keys and press     <code>Enter</code>.</li> <li>Select the <code>Advanced</code> option using the arrow keys and press <code>Enter</code>.</li> <li>Select the <code>Change Netboot iPXE Payload URL</code> option using the arrow keys and     press <code>Enter</code>.</li> <li>Select the <code>Change Netboot iPXE Payload URL</code> option again using the arrow     keys and press <code>Enter</code>.</li> <li>Replace the existing address with another iPXE payload URL address, for     example: <code>http://boot.3mdeb.com/dts.ipxe</code>.</li> <li>Apply changes by selecting option <code>Apply and Exit</code> and pressing <code>Enter</code>.</li> <li>Select the <code>OS Selection &amp; Utilities</code> option using the arrow keys and press     <code>Enter</code>.</li> </ol> <p>Expected result</p> <ol> <li>Proper boot menu should appear.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/316-sdcard-reader/","title":"Dasharo Compatibility: SD Card Reader","text":"<p>The test suite is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/317-usb-camera/","title":"Dasharo Compatibility: USB Camera","text":"<p>The test suite is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/318-m2-wifi-bluetooth/","title":"Dasharo Compatibility: M.2 WiFi/Bluetooth","text":"<p>The test suite is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/319-nvidia-graphics/","title":"Dasharo Compatibility: NVIDIA Graphics support","text":""},{"location":"unified-test-documentation/dasharo-compatibility/319-nvidia-graphics/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/319-nvidia-graphics/#nvi001201-nvidia-graphics-detect-ubuntu","title":"NVI001.201 NVIDIA Graphics detect (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/319-nvidia-graphics/#nvi001301-nvidia-graphics-detect-windows","title":"NVI001.301 NVIDIA Graphics detect (Windows)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/319-nvidia-graphics/#nvi002201-nvidia-graphics-power-management-ubuntu","title":"NVI002.201 NVIDIA Graphics power management (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/319-nvidia-graphics/#nvi002301-nvidia-graphics-power-management-windows","title":"NVI002.301 NVIDIA Graphics power management (Windows)","text":"<p>Test description</p> <p>This test aims to verify that the NVIDIA graphics power management is functional and the card powers on only while it's used.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Install the driver for the graphics card (GTX 1650) from     the official page.</li> <li>Download and extract <code>gputest</code> from Geeks3D.</li> </ol> <p>Test steps</p> <ol> <li>Open the NVIDIA Control Panel window.</li> <li>In the menu bar, open the Desktop menu.</li> <li>Enable the <code>Display GPU Activity Icon in Notification Area</code> option.</li> <li>Open the system tray located in the bottom right corner of the screen    and locate the GPU activity icon:</li> </ol> <p></p> <ol> <li>Open the previously extracted gputest directory and open the <code>GPUTest_GUI</code>    application.</li> <li>Click on the <code>Run stress test</code> button to start the test application.</li> <li>Locate the GPU activity icon and check that it indicates that the GPU has    powered on.</li> <li>Close the test application.</li> <li>Locate the GPU activity icon and check that it indicates that the GPU has    powered off again.</li> </ol> <p>Expected result</p> <ol> <li>The GPU activity icon should indicate that the GPU is OFF when no application    is using the GPU.</li> <li>The GPU activity icon should indicate that the GPU is ON when an application    is using the GPU.</li> <li>The GPU activity icon should indicate that the GPU is OFF again after the    test application is closed.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31A-windows-booting/","title":"Dasharo Compatibility: Windows booting","text":""},{"location":"unified-test-documentation/dasharo-compatibility/31A-windows-booting/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31A-windows-booting/#wbt001001-windows-11-installation-and-boot","title":"WBT001.001 Windows 11 installation and boot","text":"<p>Test description</p> <p>This test aims to verify that Windows 11 OS could be installed on the DUT and works properly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows 11</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The Windows 11 login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31A-windows-booting/#wbt002001-windows-10-installation-and-boot","title":"WBT002.001 Windows 10 installation and boot","text":"<p>Test description</p> <p>This test aims to verify that Windows 10 OS could be installed on the DUT and works properly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows 10</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The Windows 10 login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/","title":"Dasharo Compatibility: Display ports and LCD support","text":""},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp001001-internal-lcd-in-firmware","title":"DSP001.001 Internal LCD in firmware","text":"<p>Test description</p> <p>This test aims to verify initialization of the laptop's embedded LCD screen during firmware execution phase.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Observe the internal LCD during firmware execution phase.</li> <li>Power off the DUT.</li> </ol> <p>Expected result</p> <ol> <li>Logo appears on the screen during firmware execution phase.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp001201-internal-lcd-in-os-ubuntu","title":"DSP001.201 Internal LCD in OS (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp001301-internal-lcd-in-os-windows","title":"DSP001.301 Internal LCD in OS (Windows)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp002201-external-hdmi-display-in-os-ubuntu","title":"DSP002.201 External HDMI display in OS (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp002301-external-hdmi-display-in-os-windows","title":"DSP002.301 External HDMI display in OS (Windows)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp002003-external-hdmi-display-in-firmware","title":"DSP002.003 External HDMI display in firmware","text":"<p>This test aims to verify initialization of the external HDMI display during firmware execution phase.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> <li>Connect an HDMI cable to the DUT and a display.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Observe the external HDMI display during firmware execution phase.</li> <li>Power off the DUT.</li> </ol> <p>Expected result</p> <ol> <li>Logo appears on the screen during firmware execution phase.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp003201-external-dp-display-in-os-ubuntu","title":"DSP003.201 External DP display in OS (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp003301-external-dp-display-in-os-windows","title":"DSP003.301 External DP display in OS (Windows)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp003003-external-dp-display-in-firmware","title":"DSP003.003 External DP display in firmware","text":"<p>This test aims to verify initialization of the external Display Port connected display during firmware execution phase.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> <li>Connect a Display Port cable to the DUT and a display.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Observe the external Display Port connected display during firmware    execution phase.</li> <li>Power off the DUT.</li> </ol> <p>Expected result</p> <ol> <li>Logo appears on the screen during firmware execution phase.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp004201-external-vga-display-in-os-ubuntu","title":"DSP004.201 External VGA display in OS (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify initialization of the external VGA in the OS.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Connect a video input connector to the VGA and a display.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log the  by using the proper login and password.</li> <li>If using more than one display, switch the display mode between <code>Mirror</code> and     <code>Join Displays</code>.</li> </ol> <p>Expected result</p> <ol> <li>The image should be displayed on the external VGA connected display in     <code>Mirror</code> and <code>Join Displays</code> modes.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp004301-external-vga-display-in-os-windows","title":"DSP004.301 External VGA display in OS (Windows)","text":"<p>Test description</p> <p>This test aims to verify initialization of the external VGA in the OS.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Connect a video input connector to the VGA and a display.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log the  by using the proper login and password.</li> <li>If using more than one display, switch the display mode between <code>Duplicate</code>     and <code>Extend</code>.</li> </ol> <p>Expected result</p> <ol> <li>The image should be displayed on the external Display Port connected display     in <code>Duplicate</code> and <code>Extend</code> modes.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp004003-external-vga-display-in-firmware","title":"DSP004.003 External VGA display in firmware","text":"<p>This test aims to verify initialization of the external VGA during firmware execution phase.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Connect a video input connector to the VGA and a display.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>During boot, press <code>BOOT MENU KEY</code>.</li> <li>Observe the external VGA connected display during firmware execution phase.</li> <li>Power off the DUT.</li> </ol> <p>Expected result</p> <ol> <li>Boot menu appears on the screen during firmware execution phase.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/","title":"Dasharo Compatibility: Audio subsystem","text":""},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> <li>For the audio tests you need to connect monitor with speakers via HDMI.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud001201-audio-subsystem-detection-ubuntu","title":"AUD001.201 Audio subsystem detection (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the audio subsystem is initialized correctly and can be detected from the operating system.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and execute the following command:</p> <pre><code>cat /sys/class/sound/card0/hwC0D*/chip_name\n</code></pre> </li> </ol> <p>Expected result</p> <p>The output of the command should return a list of detected audio devices. Depending on mounted devices, the output might be different.</p> <p>Example output:</p> <pre><code>ALC293\nTigerlake HDMI\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud001301-audio-subsystem-detection-windows","title":"AUD001.301 Audio subsystem detection (Windows)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud002201-audio-playback-ubuntu","title":"AUD002.201 Audio playback (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the audio subsystem is able to playback audio recordings.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Install the <code>alsa-utils</code> package:     <code>sudo apt install alsa-utils</code>.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and execute the following command:</p> <pre><code>pactl set-sink-mute alsa_output.pci-0000_00_1f.3.analog-stereo  0\npactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo 65535\nspeaker-test\n</code></pre> </li> </ol> <p>Expected result</p> <p>Sound should be played from the integrated speakers.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud002301-audio-playback-windows","title":"AUD002.301 Audio playback (Windows)","text":"<p>Test description</p> <p>This test aims to verify that the audio subsystem is able to playback audio recordings.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Find the <code>Speakers</code> icon in the bottom right part of the screen and click     it using the left mouse button to open the volume menu.</li> <li>In the volume menu, click the rightmost part of it and note the result.</li> </ol> <p>Expected result</p> <p>Sound should be played from the integrated speakers.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud003201-audio-capture-ubuntu","title":"AUD003.201 Audio capture (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the audio subsystem is able to capture audio.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Install the <code>alsa-utils</code> package:     <code>sudo apt install alsa-utils</code>.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and execute the following command:</p> <pre><code>arecord -f S16_LE -d 10 -r 16000 /tmp/test-mic.wav\n</code></pre> </li> <li> <p>Make some noise around DUT. For example, say something.</p> </li> <li> <p>Execute the following command:</p> <pre><code>aplay /tmp/test-mic.wav\n</code></pre> </li> </ol> <p>Expected result</p> <p>The recorded audio clip is recorded correctly and played back.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud003301-audio-capture-windows","title":"AUD003.301 Audio capture (Windows)","text":"<p>Test description</p> <p>This test aims to verify that the audio subsystem is able to capture audio.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Find the <code>Speakers</code> icon in the bottom right part of the screen and click     it using the right mouse button then using the left mouse button     click <code>Sound Settings</code>.</li> <li>Locate the <code>All sound devices</code> bar and click on it.</li> <li>Select the <code>Microphone</code> position in the <code>Input devices</code> section.</li> <li>Click on the <code>Start Test</code> bar in the <code>Input settings</code> section.</li> <li>Create some noise for the DUT to capture and note the result.     For example, say something.</li> <li>Click on the <code>Stop Test</code> bar.</li> </ol> <p>Expected result</p> <ol> <li>The <code>Input volume</code> bar located in the <code>Input settings</code> section should raise when     some noise is being created.</li> <li>The result of the test after clicking the <code>Stop Test</code> bar should be more than     0% of the total volume.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud004201-external-headset-recognition-ubuntu","title":"AUD004.201 External headset recognition (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud004301-external-headset-recognition-windows","title":"AUD004.301 External headset recognition (Windows)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud005201-external-headset-audio-playback-ubuntu","title":"AUD005.201 External headset audio playback (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the audio subsystem is able to playback audio recordings by using the external headset speakers.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Install the <code>alsa-utils</code> package:     <code>sudo apt install alsa-utils</code>.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Plug a headset jack into a micro jack slot located on the right side of the     laptop.</li> <li> <p>Open a terminal window and execute the following command:</p> <pre><code>pactl set-sink-mute alsa_output.pci-0000_00_1f.3.analog-stereo  0\npactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo 65535\nspeaker-test\n</code></pre> </li> </ol> <p>Expected result</p> <p>Sound should be played from external speakers.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud005301-external-headset-audio-playback-windows","title":"AUD005.301 External headset audio playback (Windows)","text":"<p>Test description</p> <p>This test aims to verify that the audio subsystem is able to playback audio recordings by using the external headset speakers.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Plug a headset jack into a micro jack slot located on the right side of the     laptop.</li> <li>Find the <code>Speakers</code> icon in the bottom right part of the screen and click    it using the left mouse button to open the volume menu.</li> <li>In the volume menu, click the rightmost part of it and note the result.</li> </ol> <p>Expected result</p> <p>Sound should be played from external speakers.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud006201-external-headset-audio-capture-ubuntu","title":"AUD006.201 External headset audio capture (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the audio subsystem is able to capture audio from an external headset.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Install the <code>alsa-utils</code> package:     <code>sudo apt install alsa-utils</code>.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Plug a headset jack into a micro jack slot located on the right side of the     laptop.</li> <li> <p>Open a terminal window and execute the following command:</p> <pre><code>arecord -f S16_LE -d 10 -r 16000 /tmp/test-mic.wav\n</code></pre> </li> <li> <p>Make some noise for the headset. For example, say something.</p> </li> <li> <p>Execute the following command:</p> <pre><code>aplay /tmp/test-mic.wav\n</code></pre> </li> <li> <p>Execute the following command:</p> <pre><code>arecord -f S16_LE -d 10 -r 16000 /tmp/test-mic-1.wav\n</code></pre> </li> <li> <p>Make some noise for the DUT. For example, tap a few times in the laptop     casing.</p> </li> <li> <p>Execute the following command:</p> <pre><code>aplay /tmp/test-mic.wav\n</code></pre> </li> </ol> <p>Expected result</p> <ol> <li>During playback of the first recording, all noise that was made for the     headset should be clearly heard.</li> <li>During playback of the second recording, all noise that was made for DUT     should be quiet or not heard.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud006301-external-headset-audio-capture-windows","title":"AUD006.301 External headset audio capture (Windows)","text":"<p>Test description</p> <p>This test aims to verify that the audio subsystem is able to capture audio from an external headset.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Plug a headset jack into a micro jack slot located on the right side of the     laptop.</li> <li>Find the <code>Speakers</code> icon in the bottom right part of the screen and click     it using the right mouse button then using the left mouse button click     <code>Sound Settings</code>.</li> <li>Locate the <code>All sound devices</code> bar and click on it.</li> <li>Select the <code>Microphone</code> position in the <code>Input devices</code> section.</li> <li>Click on the <code>Start Test</code> bar in the <code>Input settings</code> section.</li> <li>Create some noise for the headset to capture and note the result.     For example, say something.</li> <li>Create some noise for the DUT. For example, tap a few times in the laptop     casing.</li> <li>Click on the <code>Stop Test</code> bar.</li> </ol> <p>Expected result</p> <ol> <li>The <code>Input volume</code> bar located in the <code>Input settings</code> section should raise     when some noise has been created for the headset.</li> <li>The <code>Input volume</code> bar located in the <code>Input settings</code> section should not     raise when some noise has been created for the DUT.</li> <li>The result of the test after clicking the <code>Stop Test</code> bar should be more than     0% of the total volume.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud007201-hdmi-audio-recognition-ubuntu","title":"AUD007.201 HDMI Audio recognition (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud007301-hdmi-audio-recognition-windows","title":"AUD007.301 HDMI Audio recognition (Windows)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p> <p>Test description</p> <p>This test aims to verify that the output audio is properly assigned after connecting the external display using the HDMI cable.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Find the <code>Speakers</code> icon in the bottom right part of the screen and click it     using the right mouse button then using the left mouse button click     <code>Sound Settings</code>.</li> <li>Locate the <code>All sound devices</code> bar and click on it.</li> <li>Locate the <code>Output devices</code> and <code>Input devices</code> section.</li> <li>Connect the external display to the HDMI slot.</li> </ol> <p>Expected result</p> <p>The connected display should appear in the <code>Output devices</code> section.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud008201-hdmi-audio-playback-ubuntu","title":"AUD008.201 HDMI audio playback (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the audio subsystem is able to playback audio recordings by using the external display connected to the HDMI slot.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Install the <code>alsa-utils</code> package:     <code>sudo apt install alsa-utils</code>.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Connect the external display to the HDMI slot.</p> </li> <li> <p>Open a terminal window and execute the following commands:</p> <pre><code>pacmd set-card-profile 0 output:hdmi-stereo\npactl set-sink-mute alsa_output.pci-0000_00_1f.3.analog-stereo  0\npactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo 65535\nspeaker-test\n</code></pre> </li> </ol> <p>Expected result</p> <p>Sound should be played from the external display.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud008301-hdmi-audio-playback-windows","title":"AUD008.301 HDMI audio playback (Windows)","text":"<p>Test description</p> <p>This test aims to verify that the audio subsystem is able to playback audio recordings by using the external display connected to the HDMI slot.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Connect the external display to the HDMI slot.</li> <li>Find the <code>Speakers</code> icon in the bottom right part of the screen and click it     using the right mouse button then using the left mouse button click     <code>Sound Settings</code>.</li> <li>Locate the <code>All sound devices</code> bar and click on it.</li> <li>Select the external display position in the <code>Output devices</code> section.</li> <li>Click on the <code>Test</code> bar in the <code>Output settings</code> section.</li> </ol> <p>Expected result</p> <p>Sound should be played from the external display.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/","title":"Dasharo Compatibility: Embedded Controller and Super I/O initialization","text":""},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr001201-battery-monitoring-charge-level-in-os-ubuntu","title":"ECR001.201 Battery monitoring - charge level in OS (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr001301-battery-monitoring-charge-level-in-os-windows","title":"ECR001.301 Battery monitoring - charge level in OS (Windows)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr002003-battery-start-charge-threshold","title":"ECR002.003 Battery start charge threshold","text":"<p>Test description</p> <p>The setup menu allows you to set your own threshold for the start of battery charging, which defines the level above which the battery will not start to charge. The aim of this test is to check that functionality.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Enter Dasharo Setup Menu</li> <li>Enter Dasharo System Features</li> <li>Enter Power Management Options</li> <li>Set Battery Start Charge Threshold to e.g. 60%</li> <li>Discharge the battery below the previously set level</li> <li>Charge battery above the previously set level</li> <li>Reconnect charging cable</li> </ol> <p>Expected result</p> <p>After reconnecting the charging cable, the battery should not start charging.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr001004-battery-stop-charge-threshold","title":"ECR001.004 Battery stop charge threshold","text":"<p>Test description</p> <p>The setup menu allows you to set your own threshold for the stop of battery charging, which defines the level above which the battery will stop charging. The aim of this test is to check that functionality.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Enter Dasharo Setup Menu</li> <li>Enter Dasharo System Features</li> <li>Enter Power Management Options</li> <li>Set Battery Stop Charge Threshold to desired value</li> <li>Wait until the battery is charged to the stop threshold.</li> </ol> <p>Expected result</p> <p>The battery should stop charging at stop threshold.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr002201-battery-monitoring-charging-state-in-os-ubuntu","title":"ECR002.201 Battery monitoring - charging state in OS (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr002301-battery-monitoring-charging-state-in-os-windows","title":"ECR002.301 Battery monitoring - charging state in OS (Windows)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr003201-touchpad-in-os-ubuntu","title":"ECR003.201 Touchpad in OS - (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr003301-touchpad-in-os-windows","title":"ECR003.301 Touchpad in OS - (Windows)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr004001-keyboard-standard-keypad-in-firmware","title":"ECR004.001 Keyboard (standard keypad) in firmware","text":"<p>Test description</p> <p>This test verifies that the keyboard is detected correctly by the firmware and all basic keys work according to their labels.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT and press the <code>BIOS_SETUP_KEY</code> to enter the setup menu.</li> <li>Use the arrow keys and the Enter key to navigate the menus.</li> </ol> <p>Expected result</p> <ol> <li>All menus can be entered using the internal keyboard.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr004201-keyboard-standard-keypad-in-os-ubuntu","title":"ECR004.201 Keyboard (standard keypad) in OS (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that the keyboard is detected correctly by the operating system and all basic keys work according to their labels.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Install <code>libinput-tools</code> on the DUT.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Run <code>sudo libinput debug-events --show-keycodes</code> in the terminal.</li> <li>Press each keyboard key and check the generated keycode.</li> </ol> <p>Expected result</p> <ol> <li>All standard keyboard keys generate the correct keycodes and events as per     their labels.</li> <li>Key combinations are detected correctly.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr004301-keyboard-standard-keypad-in-os-windows","title":"ECR004.301 Keyboard (standard keypad) in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the keyboard is detected correctly by the operating system and all basic keys work according to their labels.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Open <code>notepad</code><ol> <li>Test the alphanumeric keys and note the generated characters</li> <li>Test non-alphanumeric keys and verify that they generate the signs</li> <li>Test key combinations with the <code>Shift</code>, and <code>Alt</code> modifier keys</li> </ol> </li> <li>Open <code>On-Screen Keyboard</code> and press <code>Ctrl</code> key on the hardware keyboard.    Check if <code>On-Screen Keyboard</code> correctly highlights it.</li> <li>Open <code>Start menu</code> and press <code>Esc</code>. Check if <code>Start menu</code> is properly closed.</li> </ol> <p>Expected result</p> <ol> <li>All standard keyboard keys generate correct characters    or actions when pressed.</li> <li>Key combinations are detected correctly.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr005201-keyboard-function-key-playpause-in-os-ubuntu","title":"ECR005.201 Keyboard (function key: play/pause) in OS (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that the play/pause hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Install <code>libinput-tools</code> on the DUT.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Run <code>sudo libinput debug-events --show-keycodes</code> in the terminal.</li> <li>Verify that pressing the play/pause key generates a <code>KEY_PLAYPAUSE</code> event.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the play/pause hotkey generates a <code>KEY_PLAYPAUSE</code> event.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr005301-keyboard-function-key-playpause-in-os-windows","title":"ECR005.301 Keyboard (function key: play/pause) in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the play/pause hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Start <code>Groove Music</code></li> <li>Verify that when pressing the <code>play/pause</code> button, player menu appears     in the upper left part of the screen for a few seconds.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the play/pause hotkey is properly detected by the OS</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr006201-keyboard-function-key-cooling-mode-in-os-ubuntu","title":"ECR006.201 Keyboard (function key: cooling mode) in OS (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that the cooling mode hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the cooling mode hotkey (Fn + 1) once and note the effect.</li> <li>Press the cooling mode hotkey once again and note the effect.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the hotkey once should activate the cooling mode (fans should    spin up to their maximum speed).</li> <li>Pressing the hotkey again should deactivate the cooling mode (fans should    return to normal).</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr006301-keyboard-function-key-cooling-mode-in-os-windows","title":"ECR006.301 Keyboard (function key: cooling mode) in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the cooling mode hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the cooling mode hotkey (Fn + 1) once and note the effect.</li> <li>Press the cooling mode hotkey once again and note the effect.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the hotkey once should activate the cooling mode (fans should    spin up to their maximum speed).</li> <li>Pressing the hotkey again should deactivate the cooling mode (fans should    return to normal).</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr007201-keyboard-function-key-touchpad-onoff-in-os-ubuntu","title":"ECR007.201 Keyboard (function key: touchpad on/off) in OS (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that the touchpad on/off hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Proceed with the     Test cases common documentation section.</li> <li> <p>Create a file <code>/etc/udev/hwdb.d/60-keyboard.hwdb</code> with the following contents:</p> <pre><code>evdev:atkbd:dmi:bvn*:bvr*:svnNotebook:pnNV4XMB,ME,MZ:*\n         KEYBOARD_KEY_f7=191\n         KEYBOARD_KEY_f8=191\n</code></pre> </li> <li> <p>Execute the following commands:</p> </li> </ol> <pre><code>sudo systemd-hwdb update\nsudo udevadm trigger\n</code></pre> <p>Test steps</p> <ol> <li>Press the touchpad on/off key and try to use the touchpad.</li> <li>Press the touchpad on/off key once again and try to use the touchpad again.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the hotkey once should deactivate the touchpad (touchpad should be    completely inoperable).</li> <li>Pressing the hotkey again should reactivate the touchpad.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr007301-keyboard-function-key-touchpad-onoff-in-os-windows","title":"ECR007.301 Keyboard (function key: touchpad on/off) in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the touchpad on/off hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the touchpad on/off key and try to use the touchpad.</li> <li>Press the touchpad on/off key once again and try to use the touchpad again.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the hotkey once should deactivate the touchpad (touchpad should be    completely inoperable).</li> <li>Pressing the hotkey again should reactivate the touchpad.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr008201-keyboard-function-key-display-onoff-in-os-ubuntu","title":"ECR008.201 Keyboard (function key: display on/off) in OS (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that the display on/off hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the display on/off hotkey once and note the effect.</li> <li>Press any key on the keyboard and note the effect.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the hotkey once should turn the internal LCD panel off.</li> <li>Pressing any key on the keyboard should power the internal LCD panel back on.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr008301-keyboard-function-key-display-onoff-in-os-windows","title":"ECR008.301 Keyboard (function key: display on/off) in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the display on/off hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the display on/off hotkey once and note the effect.</li> <li>Press any key on the keyboard and note the effect.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the hotkey once should turn the internal LCD panel off.</li> <li>Pressing any key on the keyboard should power the internal LCD panel     back on.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr009201-keyboard-function-key-mute-in-os-ubuntu","title":"ECR009.201 Keyboard (function key: mute) in OS (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that the volume mute hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the volume mute hotkey twice and note the effect each keypress has.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the hotkey should mute or unmute the currently enabled audio output.</li> <li>Each keypress should cause a mute/unmute notification to appear in the middle    of the screen.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr009301-keyboard-function-key-mute-in-os-windows","title":"ECR009.301 Keyboard (function key: mute) in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the mute hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the mute hotkey once and check the volume indicator in the bottom right    part of the screen.</li> <li>Press the mute hotkey once and check the volume indicator again.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the hotkey once should mute the device</li> <li>Pressing the hotkey again should re-enable the sound</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr010201-keyboard-function-key-keyboard-backlight-in-os-ubuntu","title":"ECR010.201 Keyboard (function key: keyboard backlight) in OS (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that the keyboard backlight hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the keyboard backlight hotkey 6 times and note the effect on the    keyboard backlight after each keypress.</li> </ol> <p>Expected result</p> <ol> <li>The keyboard has 6 backlight settings from 0% to 100% Each keypress should    set the keyboard to the next mode, with the last mode wrapping back around    to the first.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr010301-keyboard-function-key-keyboard-backlight-in-os-windows","title":"ECR010.301 Keyboard (function key: keyboard backlight) in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the keyboard backlight hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the keyboard backlight hotkey 6 times and note the effect on the    keyboard backlight after each keypress.</li> </ol> <p>Expected result</p> <ol> <li>The keyboard has 6 backlight settings from 0% to 100% Each keypress should    set the keyboard to the next mode, with the last mode wrapping back around    to the first.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr011201-keyboard-function-key-volume-down-in-os-ubuntu","title":"ECR011.201 Keyboard (function key: volume down) in OS (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that the volume down hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the volume down hotkey once and note the effects.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the hotkey should decrease the volume of the currently enabled audio    output.</li> <li>Each key press should cause a volume down notification to appear in the    middle of the screen.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr011301-keyboard-function-key-volume-down-in-os-windows","title":"ECR011.301 Keyboard (function key: volume down) in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the volume down hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the volume down hotkey once and note the effects.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the hotkey should decrease the volume of the currently enabled audio    output.</li> <li>Each key press should cause a volume down notification to appear in the upper    left part of the screen.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr012201-keyboard-function-key-volume-up-in-os-ubuntu","title":"ECR012.201 Keyboard (function key: volume up) in OS (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that the volume up hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the volume up hotkey once and note the effects.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the hotkey should increase the volume of the currently enabled audio    output.</li> <li>Each key press should cause a volume up notification to appear in the middle    of the screen.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr012301-keyboard-function-key-volume-up-in-os-windows","title":"ECR012.301 Keyboard (function key: volume up) in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the volume up hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the volume down hotkey once and note the effects.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the hotkey should increase the volume of the currently enabled audio    output.</li> <li>Each key press should cause a volume up notification to appear in the upper    left part of the screen.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr013201-keyboard-function-key-display-switch-in-os-ubuntu","title":"ECR013.201 Keyboard (function key: display switch) in OS (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that the display switch hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Install <code>libinput-tools</code> on the DUT.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Run <code>sudo libinput debug-events --show-keycodes</code> in the terminal.</li> <li>Press the display switch hotkey once and note the effect.</li> </ol> <p>Expected result</p> <ol> <li> <p>Pressing the hotkey should yield the following output in the terminal:</p> <pre><code>-event3   KEYBOARD_KEY     +0.000s  KEY_LEFTMETA (125) pressed\n event3   KEYBOARD_KEY     +0.004s  KEY_P (25) pressed\n event3   KEYBOARD_KEY     +0.010s  KEY_P (25) released\n event3   KEYBOARD_KEY     +0.015s  KEY_LEFTMETA (125) released\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr013301-keyboard-function-key-display-switch-in-os-windows","title":"ECR013.301 Keyboard (function key: display switch) in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the display switch hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the display switch hotkey once and note the effect.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the hotkey should cause the display settings bar to appear     on the right part of the screen.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr014201-keyboard-function-key-brightness-down-in-os-ubuntu","title":"ECR014.201 Keyboard (function key: brightness down) in OS (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr014301-keyboard-function-key-brightness-down-in-os-windows","title":"ECR014.301 Keyboard (function key: brightness down) in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the brightness down hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the brightness down hotkey once and note the effects.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the hotkey should decrease the brightness of the internal LCD    display.</li> <li>Each key press should cause a brightness down notification to appear in the    top left of the screen.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr015201-keyboard-function-key-brightness-up-in-os-ubuntu","title":"ECR015.201 Keyboard (function key: brightness up) in OS (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr015301-keyboard-function-key-brightness-up-in-os-windows","title":"ECR015.301 Keyboard (function key: brightness up) in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the brightness down hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the brightness up hotkey once and note the effects.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the hotkey should increase the brightness of the internal LCD    display.</li> <li>Each key press should cause a brightness up notification to appear in the    top left of the screen.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr016201-keyboard-function-key-camera-onoff-in-os-ubuntu","title":"ECR016.201 Keyboard (function key: camera on/off) in OS (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr016301-keyboard-function-key-camera-onoff-in-os-windows","title":"ECR016.301 Keyboard (function key: camera on/off) in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the camera on/off hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Open the <code>Camera</code> app.</li> <li>Press the camera on/off hotkey twice and note the effect after    a few seconds after the keypress.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the hotkey once should make the camera image disappear.</li> <li>Pressing the hotkey again should make the camera image appear again    after a few seconds.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr017201-keyboard-function-key-flight-mode-in-os-ubuntu","title":"ECR017.201 Keyboard (function key: flight mode) in OS (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr017301-keyboard-function-key-flight-mode-in-os-windows","title":"ECR017.301 Keyboard (function key: flight mode) in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the flight mode hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the camera on/off hotkey twice and note the effect after the key press.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the hotkey once should enable airplane mode and cause    <code>airplane mode on</code> notification to appear in the top right    part of the screen.</li> <li>Pressing the hotkey again should disable airplane mode and cause    <code>airplane mode off</code> notification to appear in the top right    part of the screen.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr018201-keyboard-function-key-sleep-in-os-ubuntu","title":"ECR018.201 Keyboard (function key: sleep) in OS (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that the sleep hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the sleep hotkey once and note the result.</li> </ol> <p>Expected result</p> <ol> <li>The laptop should go to sleep within seconds of the hotkey being pressed.</li> <li>The power LED should be blinking green, indicating the laptop is sleeping.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr018301-keyboard-function-key-sleep-in-os-windows","title":"ECR018.301 Keyboard (function key: sleep) in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the sleep hotkey works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Proceed with the     Installing updates and drivers     section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Wait 30 seconds for the system to load fully.</li> <li>Press the sleep hotkey once and note the result.</li> </ol> <p>Expected result</p> <ol> <li>The laptop should go to sleep within seconds of the hotkey being pressed.</li> <li>The power LED should be blinking green, indicating the laptop is sleeping.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr019201-buttons-button-power-in-os-ubuntu","title":"ECR019.201 Buttons (button: power) in OS (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr019301-buttons-button-power-in-os-windows","title":"ECR019.301 Buttons (button: power) in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the power button is detected correctly by the operating system. In Windows 11 OS the default function assigned to this key is sleep mode.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Proceed with the     Installing updates and drivers     section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Wait 30 seconds for the system to load fully.</li> <li>Press the power button once and note the result.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the button once should make laptop enter sleep mode.</li> <li>The power LED should be blinking green, indicating the laptop is sleeping.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr020201-buttons-button-lid-switch-in-os-ubuntu","title":"ECR020.201 Buttons (button: lid switch) in OS (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that the lid switch is detected correctly by the operating system.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open one terminal window and run the following command:</p> <pre><code>sudo systemd-inhibit --what handle-lid-switch --mode block watch echo \"Inhibiting lid switch\"\n</code></pre> </li> <li> <p>Open another terminal and run the command     <code>sleep 5 &amp;&amp; cat /proc/acpi/button/lid/LID0/state</code> to read the state of     the lid while it is closed.</p> </li> <li>Close the lid and wait 5 seconds.</li> <li>Open the lid and note the output of the command.</li> <li>Run the command <code>cat /proc/acpi/button/lid/LID0/state</code> while the lid is     open and note the output.</li> </ol> <p>Expected result</p> <ol> <li>The output of the second command should report that the lid is closed.</li> <li>The output of the third command should report that the lid is open.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr020301-buttons-button-lid-switch-in-os-windows","title":"ECR020.301 Buttons (button: lid switch) in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the lid switch is detected correctly by the operating system.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Proceed with the     Installing updates and drivers     section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Wait 30 seconds for the system to load fully.</li> <li>Close the lid and note the effect on the power LED.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the button once should make laptop enter sleep mode.</li> <li>The power LED should be blinking green, indicating the laptop is sleeping.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr021201-keyboard-function-key-rgb-keyboard-toggle-in-os-ubuntu","title":"ECR021.201 Keyboard (function key: RGB keyboard toggle) in OS (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that the RGB keyboard toggle hotkey is handled properly by the operating system.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the RGB keyboard toggle hotkey twice and note the result each time.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the button once should disable the keyboard backlight.</li> <li>Pressing the button again should re-enable the keyboard backlight.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr021301-keyboard-function-key-rgb-keyboard-toggle-in-os-windows","title":"ECR021.301 Keyboard (function key: RGB keyboard toggle) in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the RGB keyboard toggle hotkey is handled properly by the operating system.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the RGB keyboard toggle hotkey twice and note the result each time.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the button once should disable the keyboard backlight.</li> <li>Pressing the button again should re-enable the keyboard backlight.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr022201-rgb-keyboard-next-color-fn-key-in-os-ubuntu","title":"ECR022.201 RGB keyboard next color FN key in OS (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that the RGB keyboard's next color hotkey is handled properly by the operating system.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the RGB keyboard color hotkey repeatedly until the keyboard cycles    through all color modes.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the button once should switch the keyboard color.</li> <li>All color modes according to product documentation should be accessible.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr022301-rgb-keyboard-next-color-fn-key-in-os-windows","title":"ECR022.301 RGB keyboard next color FN key in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the RGB keyboard's next color hotkey is handled properly by the operating system.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the RGB keyboard color hotkey repeatedly until the keyboard cycles    through all color modes.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the button once should switch the keyboard color.</li> <li>All color modes according to product documentation should be accessible.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr023201-rgb-keyboard-brightness-down-fn-key-in-os-ubuntu","title":"ECR023.201 RGB keyboard brightness down FN key in OS (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that the RGB keyboard brightness down hotkey is handled properly by the operating system.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the RGB keyboard brightness down hotkey and note the result.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the button once should lower the keyboard backlight</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr023301-rgb-keyboard-brightness-down-fn-key-in-os-windows","title":"ECR023.301 RGB keyboard brightness down FN key in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the RGB keyboard brightness down hotkey is handled properly by the operating system.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the RGB keyboard brightness down hotkey and note the result.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the button once should lower the keyboard backlight.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr024201-rgb-keyboard-brightness-up-fn-key-in-os-ubuntu","title":"ECR024.201 RGB keyboard brightness up FN key in OS (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that the RGB keyboard brightness up hotkey is handled properly by the operating system.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the RGB keyboard brightness up hotkey and note the result.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the button once should increase the keyboard backlight.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr024301-rgb-keyboard-brightness-up-fn-key-in-os-windows","title":"ECR024.301 RGB keyboard brightness up FN key in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the RGB keyboard brightness up hotkey is handled properly by the operating system.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Press the RGB keyboard brightness up hotkey and note the result.</li> </ol> <p>Expected result</p> <ol> <li>Pressing the button once should increase the keyboard backlight.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr025201-permanent-keyboard-illumination-after-cold-boot-firmware","title":"ECR025.201 Permanent keyboard illumination after cold-boot (Firmware)","text":"<p>Test description</p> <p>This test aims to verify that after performing cold-boot, keyboard still illuminates in firmware.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT and press the <code>BIOS_SETUP_KEY</code> to enter the setup menu.</li> <li>Set keyboard brightness and color to arbitrary settings.</li> <li>Disconnect power source, and remove battery if present.</li> <li>Connect power and battery again.</li> <li>Power on the DUT again and press the <code>BIOS_SETUP_KEY</code> to enter the setup     menu.</li> </ol> <p>Expected result</p> <ol> <li>After cold-boot keyboard brightness and colors settings remain the same.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr025201-permanent-keyboard-illumination-after-cold-boot-ubuntu","title":"ECR025.201 Permanent keyboard illumination after cold-boot (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that after performing cold-boot, keyboard still illuminates in Ubuntu.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the <code>OPERATING_SYSTEM</code>.</li> <li>Log into the <code>OPERATING_SYSTEM</code> by using the proper login and password.</li> <li>Set keyboard brightness and color to arbitrary settings.</li> <li>Disconnect power source, and remove battery if present.</li> <li>Connect power and battery again.</li> <li>Power on the DUT.</li> <li>Boot into the <code>OPERATING_SYSTEM</code>.</li> <li>Log into the <code>OPERATING_SYSTEM</code> by using the proper login and password.</li> </ol> <p>Expected result</p> <ol> <li>After cold-boot keyboard brightness and colors settings remain the same.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr025301-permanent-keyboard-illumination-after-cold-boot-windows","title":"ECR025.301 Permanent keyboard illumination after cold-boot (Windows)","text":"<p>Test description</p> <p>This test aims to verify that after performing cold-boot, keyboard still illuminates in Windows.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the <code>OPERATING_SYSTEM</code>.</li> <li>Log into the <code>OPERATING_SYSTEM</code> by using the proper login and password.</li> <li>Set keyboard brightness and color to arbitrary settings.</li> <li>Disconnect power source, and remove battery if present.</li> <li>Connect power and battery again.</li> <li>Power on the DUT.</li> <li>Boot into the <code>OPERATING_SYSTEM</code>.</li> <li>Log into the <code>OPERATING_SYSTEM</code> by using the proper login and password.</li> </ol> <p>Expected result</p> <ol> <li>After cold-boot keyboard brightness and colors settings remain the same.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr026201-permanent-keyboard-illumination-after-warm-boot-firmware","title":"ECR026.201 Permanent keyboard illumination after warm-boot (Firmware)","text":"<p>Test description</p> <p>This test aims to verify that after performing warm-boot, keyboard still illuminates in firmware.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT and press the <code>BIOS_SETUP_KEY</code> to enter the setup menu.</li> <li>Set keyboard brightness and color to arbitrary settings.</li> <li>Power off the DUT using power button.</li> <li>Power on the DUT again and press the <code>BIOS_SETUP_KEY</code> to enter the setup     menu.</li> </ol> <p>Expected result</p> <ol> <li>After warm-boot keyboard brightness and colors settings remain the same.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr026201-permanent-keyboard-illumination-after-warm-boot-ubuntu","title":"ECR026.201 Permanent keyboard illumination after warm-boot (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that after performing warm-boot, keyboard still illuminates in Ubuntu.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the <code>OPERATING_SYSTEM</code>.</li> <li>Log into the <code>OPERATING_SYSTEM</code> by using the proper login and password.</li> <li>Set keyboard brightness and color to arbitrary settings.</li> <li>Power off the DUT using power button.</li> <li>Power on the DUT.</li> <li>Boot into the <code>OPERATING_SYSTEM</code>.</li> <li>Log into the <code>OPERATING_SYSTEM</code> by using the proper login and password.</li> </ol> <p>Expected result</p> <ol> <li>After warm-boot keyboard brightness and colors settings remain the same.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr026301-permanent-keyboard-illumination-after-warm-boot-windows","title":"ECR026.301 Permanent keyboard illumination after warm-boot (Windows)","text":"<p>Test description</p> <p>This test aims to verify that after performing warm-boot, keyboard still illuminates in Windows.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the <code>OPERATING_SYSTEM</code>.</li> <li>Log into the <code>OPERATING_SYSTEM</code> by using the proper login and password.</li> <li>Set keyboard brightness and color to arbitrary settings.</li> <li>Power off the DUT using power button.</li> <li>Power on the DUT.</li> <li>Boot into the <code>OPERATING_SYSTEM</code>.</li> <li>Log into the <code>OPERATING_SYSTEM</code> by using the proper login and password.</li> </ol> <p>Expected result</p> <ol> <li>After warm-boot keyboard brightness and colors settings remain the same.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr027201-permanent-keyboard-illumination-after-reboot-firmware","title":"ECR027.201 Permanent keyboard illumination after reboot (Firmware)","text":"<p>Test description</p> <p>This test aims to verify that after performing reboot, keyboard still illuminates in firmware.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT and press the <code>BIOS_SETUP_KEY</code> to enter the setup menu.</li> <li>Set keyboard brightness and color to arbitrary settings.</li> <li>Select <code>Reset</code> option from the bottom of the list.</li> <li>During boot press the <code>BIOS_SETUP_KEY</code> to enter the setup menu.</li> </ol> <p>Expected result</p> <ol> <li>After reboot keyboard brightness and colors settings remain the same.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr027201-permanent-keyboard-illumination-after-reboot-ubuntu","title":"ECR027.201 Permanent keyboard illumination after reboot (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that after performing reboot, keyboard still illuminates in Ubuntu</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Set keyboard brightness and color to arbitrary settings.</li> <li> <p>Reboot the device using:</p> <pre><code>sudo reboot now\n</code></pre> </li> </ol> <p>Expected result</p> <ol> <li>After reboot keyboard brightness and colors settings remain the same.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr027301-permanent-keyboard-illumination-after-reboot-windows","title":"ECR027.301 Permanent keyboard illumination after reboot (Windows)","text":"<p>Test description</p> <p>This test aims to verify that after performing reboot, keyboard still illuminates in Windows 11.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Set keyboard brightness and color to arbitrary settings.</li> <li> <p>Reboot the device executing in PowerShell:</p> <pre><code>Restart-Computer\n</code></pre> </li> </ol> <p>Expected result</p> <ol> <li>After reboot keyboard brightness and colors settings remain the same.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr028201-permanent-keyboard-illumination-after-suspension-firmware","title":"ECR028.201 Permanent keyboard illumination after suspension (Firmware)","text":"<p>Test description</p> <p>This test aims to verify that after performing suspension, keyboard still illuminates in firmware.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>SUSPEND_KEY</code> = <code>Fn + F12</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT and press the <code>BIOS_SETUP_KEY</code> to enter the setup menu.</li> <li>Set keyboard brightness and color to arbitrary settings.</li> <li>Suspend the DUT using <code>SUSPEND_KEY</code>.</li> <li>Wake the device from suspend pressing any key on keyboard.</li> </ol> <p>Expected result</p> <ol> <li>After suspend keyboard brightness and colors settings remain the same.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr028201-permanent-keyboard-illumination-after-suspension-ubuntu","title":"ECR028.201 Permanent keyboard illumination after suspension (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that after performing suspension, keyboard still illuminates in Ubuntu</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> <li><code>SUSPEND_KEY</code> = <code>Fn + F12</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Set keyboard brightness and color to arbitrary settings.</li> <li>Suspend the DUT using <code>SUSPEND_KEY</code>.</li> <li>Wake the device from suspend pressing any key on keyboard.</li> </ol> <p>Expected result</p> <ol> <li>After suspend keyboard brightness and colors settings remain the same.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr028301-permanent-keyboard-illumination-after-suspension-windows","title":"ECR028.301 Permanent keyboard illumination after suspension (Windows)","text":"<p>Test description</p> <p>This test aims to verify that after performing suspension, keyboard still illuminates in Windows.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> <li><code>SUSPEND_KEY</code> = <code>Fn + F12</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Set keyboard brightness and color to arbitrary settings.</li> <li>Suspend the DUT using <code>SUSPEND_KEY</code>.</li> <li>Wake the device from suspend pressing any key on keyboard.</li> </ol> <p>Expected result</p> <ol> <li>After suspend keyboard brightness and colors settings remain the same.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr029201-fnlock-hotkey-ubuntu","title":"ECR029.201 FnLock Hotkey (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that FnLock hotkey functionality works properly on Ubuntu.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> <li><code>FN_LOCK_KEY</code> = <code>Fn + CapsLock</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Use <code>FN_LOCK_KEY</code> to activate Fn lock functionality.</li> <li>Test function keys <code>F1</code> - <code>F12</code> and note the results.</li> </ol> <p>Expected result</p> <ol> <li>The function keys <code>F1</code> - <code>F12</code> behave as if <code>Fn</code> key is pressed.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr029301-fnlock-hotkey-windows","title":"ECR029.301 FnLock Hotkey (Windows)","text":"<p>Test description</p> <p>This test aims to verify that FnLock hotkey functionality works properly on Windows.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> <li><code>FN_LOCK_KEY</code> = <code>Fn + CapsLock</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Use <code>FN_LOCK_KEY</code> to activate Fn lock functionality.</li> <li>Test function keys <code>F1</code> - <code>F12</code> and note the results.</li> </ol> <p>Expected result</p> <ol> <li>The function keys <code>F1</code> - <code>F12</code> behave as if <code>Fn</code> key is pressed.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr030201-charging-until-98-battery-level-ubuntu","title":"ECR030.201 Charging until 98% battery level (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr031201-not-charging-between-95-and-98-levels-ubuntu","title":"ECR031.201 Not charging between 95% and 98% levels (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr032001-ec-firmware-sync-in-coreboot","title":"ECR032.001 EC firmware sync in coreboot","text":"<p>Test description</p> <p>This test verifies the automatic EC firmware update / sync feature in coreboot.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> <li>Downgrade to the previous firmware version (both EC and coreboot must be    downgraded) if needed.</li> <li>Keep AC adapter or USB-PD power supply connected for the duration of the    test.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Proceed with the firmware update steps as documented in the firmware update    guide.</li> <li>Reboot the DUT after updating firmware.</li> <li>Wait until the DUT updates the EC (indicated by the fans spinning at full    speed) and powers off.</li> <li>Power on the DUT.</li> <li>Note the EC firmware version displayed on the Dasharo boot screen.</li> </ol> <p>Expected result</p> <ol> <li>The EC version displayed on the boot screen should match the expected version    number.</li> <li>There should not be a pop-up indicating that the EC update failed for any    reason.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr033001-ec-firmware-sync-in-coreboot-blocked-when-ac-not-connected","title":"ECR033.001 EC firmware sync in coreboot blocked when AC not connected","text":"<p>Test description</p> <p>This test verifies that the automatic EC firmware update / sync feature in coreboot does not attempt to update the EC while an AC adapter is not connected.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> <li>Downgrade to the previous firmware version (both EC and coreboot must be    downgraded) if needed.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Proceed with the firmware update steps as documented in the firmware update    guide.</li> <li>Disconnect the AC adapter, if connected.</li> <li>Reboot the DUT.</li> <li>Note the contents of the popup displayed on the Dasharo boot screen.</li> </ol> <p>Expected result</p> <ol> <li>A warning message should appear, informing the user that the EC update did    not proceed correctly, and asking them to reboot with an AC adapter    connected.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr034001-ec-power-button-watchdog","title":"ECR034.001 EC power button watchdog","text":"<p>Test description</p> <p>This test verifies that the EC power switch watchdog feature is functional and can reset the EC.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the power button pressed for at least 10 seconds</li> <li>Note the DUT behavior</li> </ol> <p>Expected result 1. The DUT should power off and on all within the 10 seconds of power button being pressed down</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr035201-soft-switch-microphone-key-ubuntu","title":"ECR035.201 Soft Switch Microphone Key (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that Fn+4 key combination for microphone soft switch works</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Go to <code>Settings</code> -&gt; <code>Sound</code></li> <li>Observe the bar above the Input Device option</li> <li>Press the <code>Fn+4</code> combination at will</li> </ol> <p>Expected result</p> <ol> <li>The Fn+4 should toggle the mic ON and OFF and it should be seen on the  aforementioned bar which state is currently active as noise made will  make the bar go back and forth if ON and completely still if OFF</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr034301-soft-switch-microphone-key-windows","title":"ECR034.301 Soft Switch Microphone Key (Windows)","text":"<p>Test description</p> <p>This test verifies that Fn+4 key combination for microphone soft switch works</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Go to <code>Settings</code> -&gt; <code>System</code> -&gt; <code>Sound</code></li> <li>Observe the bar located on the mic volume slider</li> <li>Press the <code>Fn+4</code> combination at will</li> </ol> <p>Expected result</p> <ol> <li>The Fn+4 should toggle the mic ON and OFF and it should be seen on the  aforementioned bar which state is currently active as the noise made will  make the bar go back and forth if ON and completely still if OFF</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#sio001201-ps2-mouse-in-os-ubuntu","title":"SIO001.201 PS/2 mouse in OS - (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that the touchpad is initialized correctly and is detected by the operating system.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Connect PS/2 mouse to the green PS/2 port on the board or the PS/2 splitter    (if the board has a unified, black PS/2 connector)</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Verify that the cursor can be moved with the PS/2 mouse and that clicking    works.</li> </ol> <p>Expected result</p> <ol> <li>Moving the cursor and clicking working correctly in the operating system.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#sio001301-ps2-mouse-in-os-windows","title":"SIO001.301 PS/2 mouse in OS - (Windows)","text":"<p>Test description</p> <p>This test verifies that the touchpad is initialized correctly and is detected by the operating system.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Connect PS/2 mouse to the green PS/2 port on the board or the PS/2 splitter    (if the board has a unified, black PS/2 connector)</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Verify that the cursor can be moved with the PS/2 mouse and that clicking    works.</li> </ol> <p>Expected result</p> <ol> <li>Moving the cursor and clicking working correctly in the operating system.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#sio002001-ps2-keyboard-in-firmware","title":"SIO002.001 PS/2 keyboard in firmware","text":"<p>Test description</p> <p>This test verifies that the keyboard is detected correctly by the firmware and all basic keys work according to their labels.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>BIOS_SETUP_KEY</code> = <code>Esc</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware</li> <li>Connect PS/2 keyboard to the violet PS/2 port on the board or the PS/2    splitter (if the board has a unified, black PS/2 connector)</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT and press the <code>BIOS_SETUP_KEY</code> to enter the setup menu.</li> <li>Use the arrow keys and the Enter key to navigate the menus.</li> </ol> <p>Expected result</p> <ol> <li>All menus can be entered using the PS/2 keyboard.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#sio002201-ps2-keyboard-in-os-ubuntu","title":"SIO002.201 PS/2 keyboard in OS (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that the keyboard is detected correctly by the operating system and all basic keys work according to their labels.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>BIOS_SETUP_KEY</code> = <code>Esc</code></li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Connect PS/2 keyboard to the violet PS/2 port on the board or the PS/2    splitter (if the board has a unified, black PS/2 connector)</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Run <code>sudo libinput debug-events --show-keycodes</code> in the terminal.</li> <li>Press keyboard keys and check the generated keycode.</li> </ol> <p>Expected result</p> <ol> <li>All standard keyboard keys generate the correct keycodes and events as per    their labels.</li> <li>Key combinations are detected correctly.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#sio002301-ps2-keyboard-in-os-windows","title":"SIO002.301 PS/2 keyboard in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the keyboard is detected correctly by the operating system and all basic keys work according to their labels.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Connect PS/2 keyboard to the violet PS/2 port on the board or the PS/2    splitter (if the board has a unified, black PS/2 connector)</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Open <code>notepad</code><ul> <li>Test the alphanumeric keys and note the generated characters</li> <li>Test non-alphanumeric keys and verify that they generate the signs</li> <li>Test key combinations with the <code>Shift</code>, and <code>Alt</code> modifier keys</li> </ul> </li> <li>Open <code>On-Screen Keyboard</code> and press <code>Ctrl</code> key on the hardware keyboard.    Check if <code>On-Screen Keyboard</code> correctly highlights it.</li> <li>Open <code>Start menu</code> and press <code>Esc</code>. Check if <code>Start menu</code> is properly closed.</li> </ol> <p>Expected result</p> <ol> <li>All standard keyboard keys generate correct characters    or actions when pressed.</li> <li>Key combinations are detected correctly.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#sio003201-ps2-keyboard-wake-in-os-ubuntu","title":"SIO003.201 PS/2 keyboard wake in OS (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that the keyboard is detected correctly by the operating system and all basic keys work according to their labels.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>BIOS_SETUP_KEY</code> = <code>Esc</code></li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Connect PS/2 keyboard to the violet PS/2 port on the board or the PS/2    splitter (if the board has a unified, black PS/2 connector)</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Suspend the system to RAM.</li> <li>Press a keyboard key to wake the platform.</li> </ol> <p>Expected result</p> <ol> <li>Platform is resuming to the OS from sleep after pressing the key.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#sio003301-ps2-keyboard-wake-in-os-windows","title":"SIO003.301 PS/2 keyboard wake in OS (Windows)","text":"<p>Test description</p> <p>This test verifies that the keyboard is detected correctly by the operating system and all basic keys work according to their labels.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Connect PS/2 keyboard to the violet PS/2 port on the board or the PS/2    splitter (if the board has a unified, black PS/2 connector)</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Suspend the system to RAM.</li> <li>Press a keyboard key to wake the platform.</li> </ol> <p>Expected result</p> <ol> <li>Platform is resuming to the OS from sleep after pressing the key.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#sio004001-serial-port-in-firmware","title":"SIO004.001 Serial port in firmware","text":"<p>Test description</p> <p>This test verifies that the serial port is detected correctly by the firmware and the menu can be traversed with serial console.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>BIOS_SETUP_KEY</code> = <code>Esc</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware</li> <li>Connect DB9 null modem cable to RS232/USB adapter and the onboard serial    port connector.</li> </ol> <p>Test steps</p> <ol> <li>Open the terminal emulator, e.g. minicom, on the RS232/USB adapter.</li> <li>Power on the DUT and press the <code>BIOS_SETUP_KEY</code> to enter the setup menu.</li> <li>Use the arrow keys and the Enter key to navigate the menus.</li> </ol> <p>Expected result</p> <ol> <li>All menus can be entered using the serial console.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#sio004201-serial-port-in-os-ubuntu","title":"SIO004.201 Serial port in OS (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that the serial port is detected correctly by the operating system and can be utilized as serial console.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>BIOS_SETUP_KEY</code> = <code>Esc</code></li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Connect DB9 null modem cable to RS232/USB adapter and the onboard serial    port connector.</li> <li>Configure Linux kernel parameters to use serial console, e.g.    <code>console=ttyS0,115200</code></li> </ol> <p>Test steps</p> <ol> <li>Open the terminal emulator, e.g. minicom, on the RS232/USB adapter.</li> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password through serial    console.</li> </ol> <p>Expected result</p> <ol> <li>Serial port can be used as Linux console to log in.</li> <li>Serial port can be used to execute commands in bash/shell.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/","title":"Dasharo Compatibility: USB-C/Thunderbolt support with charging and display","text":""},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>The test suite is mostly fully automated. Only manual test cases are documented. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc001001-usb-type-a-charging-capability","title":"UTC001.001 USB Type-A charging capability","text":"<p>Test description</p> <p>This test verifies that the USB-A ports are able to provide charging to a connected smartphone.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Connect a phone to the USB Type-A port located on the left side of the laptop     using a USB cable.</li> <li>Note the charging status on the phone screen.</li> <li>Connect a phone to the USB Type-A port located on the right side of the laptop     using a USB cable.</li> <li>Note the charging status on the phone screen.</li> </ol> <p>Expected result</p> <ol> <li>The smartphone should indicate that it's charging when connected to either     USB Type-A port.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc001002-usb-type-a-charging-capability-with-me-disabled","title":"UTC001.002 USB Type-A charging capability with ME disabled","text":"<p>Test description</p> <p>This test verifies that the USB-A ports are able to provide charging to a connected smartphone.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu.</li> <li>Enter the Dasharo System Features menu using the arrow keys and Enter.</li> <li>Enter the Intel Management Engine Options submenu.</li> <li>Verify that the Intel ME mode option is in state Disable (HAP) or  Disable (Soft) - if not, using the arrow keys and Enter, choose option  Disable (HAP) or Disable (Soft).</li> <li>Press F10 to save the changes.</li> <li>If necessary - press Y to confirm saving the changes.</li> <li>Go back to the main menu using the ESC key.</li> <li>Select the Reset option to apply the settings and reboot.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Connect a phone to the USB Type-A port located on the left side of the laptop     using a USB cable.</li> <li>Note the charging status on the phone screen.</li> <li>Connect a phone to the USB Type-A port located on the right side of the laptop     using a USB cable.</li> <li>Note the charging status on the phone screen.</li> </ol> <p>Expected result</p> <ol> <li>The smartphone should indicate that it's charging when connected to either     USB Type-A port.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc002001-thunderbolt-4-usb-type-c-power-output","title":"UTC002.001 Thunderbolt 4 USB Type-C power output","text":"<p>Test description</p> <p>This test verifies that the Thunderbolt 4 port is able to provide charging to a USB Type-C accessory.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Connect a phone to the Thunderbolt 4 USB Type-C port located on the left side     of the laptop using a USB cable.</li> <li>Note the charging status on the phone screen.</li> </ol> <p>Expected result</p> <ol> <li>The smartphone should indicate that it's charging.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc002002-thunderbolt-4-usb-type-c-power-output-with-me-disabled","title":"UTC002.002 Thunderbolt 4 USB Type-C power output with ME disabled","text":"<p>Test description</p> <p>This test verifies that the Thunderbolt 4 port is able to provide charging to a USB Type-C accessory.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu.</li> <li>Enter the Dasharo System Features menu using the arrow keys and Enter.</li> <li>Enter the Intel Management Engine Options submenu.</li> <li>Verify that the Intel ME mode option is in state Disable (HAP) or Disable (Soft) - if not, using the arrow keys and Enter, choose option Disable (HAP) or Disable (Soft).</li> <li>Press F10 to save the changes.</li> <li>If necessary - press Y to confirm saving the changes.</li> <li>Go back to the main menu using the ESC key.</li> <li>Select the Reset option to apply the settings and reboot.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Connect a phone to the Thunderbolt 4 USB Type-C port located on the left side     of the laptop using a USB cable.</li> <li>Note the charging status on the phone screen.</li> </ol> <p>Expected result</p> <ol> <li>The smartphone should indicate that it's charging.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc007001-usb-type-c-docking-station-triple-display-ubuntu","title":"UTC007.001 USB Type-C docking station Triple display (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the three display simultaneously connected to the docking station is correctly recognized by the <code>OPERATING_SYSTEM</code>.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Connect three displays using HDMI/DisplayPort cables, depending on the    specifications of the docking station.</li> <li> <p>The <code>USB-C docking station</code> connected to the USB-C port.</p> <p>If the docking station is not directly connected to the DUT, but with a USB-C to USB-C cable, make sure it is full-featured cable (&gt;=5Gbps) with 5A current capability.</p> </li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Switch the display mode between <code>Mirror</code> and <code>Join Displays</code>.</li> </ol> <p>Expected result</p> <p>The image should be displayed on the three external displays in <code>Mirror</code> and <code>Join Displays</code> modes.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc007002-usb-type-c-docking-station-triple-display-windows","title":"UTC007.002 USB Type-C docking station Triple display (Windows)","text":"<p>Test description</p> <p>This test aims to verify that the three display simultaneously connected to the docking station is correctly recognized by the <code>OPERATING_SYSTEM</code>.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Connect three displays using HDMI/DisplayPort cables, depending on the    specifications of the docking station.</li> <li> <p>The <code>USB-C docking station</code> connected to the USB-C port.</p> <p>If the docking station is not directly connected to the DUT, but with a USB-C to USB-C cable, make sure it is full-featured cable (&gt;=5Gbps) with 5A current capability.</p> </li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>If using more than one display, switch the display mode between <code>Duplicate</code>    and <code>Extend</code>.</li> </ol> <p>Expected result</p> <p>The image should be displayed on the three external displays in <code>Duplicate</code> and <code>Extend</code> modes.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#tmd007001-usb-type-c-docking-station-triple-display-with-me-disabledubuntu","title":"TMD007.001 USB Type-C docking station Triple display with ME disabled(Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the three display simultaneously connected to the docking station is correctly recognized by the <code>OPERATING_SYSTEM</code>.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Connect three displays using HDMI/DisplayPort cables, depending on the    specifications of the docking station.</li> <li> <p>The <code>USB-C docking station</code> connected to the USB-C port.</p> <p>If the docking station is not directly connected to the DUT, but with a USB-C to USB-C cable, make sure it is full-featured cable (&gt;=5Gbps) with 5A current capability.</p> </li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu.</li> <li>Enter the Dasharo System Features menu using the arrow keys and Enter.</li> <li>Enter the Intel Management Engine Options submenu.</li> <li>Verify that the Intel ME mode option is in state Disable (HAP) or Disable (Soft) - if not, using the arrow keys and Enter, choose option Disable (HAP) or Disable (Soft).</li> <li>Press F10 to save the changes.</li> <li>If necessary - press Y to confirm saving the changes.</li> <li>Go back to the main menu using the ESC key.</li> <li>Select the Reset option to apply the settings and reboot.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Switch the display mode between <code>Mirror</code> and <code>Join Displays</code>.</li> </ol> <p>Expected result</p> <p>The image should be displayed on the three external displays in <code>Mirror</code> and <code>Join Displays</code> modes.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc007006-usb-type-c-docking-station-triple-display-with-me-disabledwindows","title":"UTC007.006 USB Type-C docking station Triple display with ME disabled(Windows)","text":"<p>Test description</p> <p>This test aims to verify that the three display simultaneously connected to the docking station is correctly recognized by the <code>OPERATING_SYSTEM</code>.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Connect three displays using HDMI/DisplayPort cables, depending on the    specifications of the docking station.</li> <li> <p>The <code>USB-C docking station</code> connected to the USB-C port.</p> <p>If the docking station is not directly connected to the DUT, but with a USB-C to USB-C cable, make sure it is full-featured cable (&gt;=5Gbps) with 5A current capability.</p> </li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu.</li> <li>Enter the Dasharo System Features menu using the arrow keys and Enter.</li> <li>Enter the Intel Management Engine Options submenu.</li> <li>Verify that the Intel ME mode option is in state Disable (HAP) or Disable (Soft) - if not, using the arrow keys and Enter, choose option Disable (HAP) or Disable (Soft).</li> <li>Press F10 to save the changes.</li> <li>If necessary - press Y to confirm saving the changes.</li> <li>Go back to the main menu using the ESC key.</li> <li>Select the Reset option to apply the settings and reboot.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>If using more than one display, switch the display mode between <code>Duplicate</code>    and <code>Extend</code>.</li> </ol> <p>Expected result</p> <p>The image should be displayed on the three external displays in <code>Duplicate</code> and <code>Extend</code> modes.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc011001-usb-type-c-docking-station-usb-devices-recognition-firmware","title":"UTC011.001 USB Type-C docking station USB devices recognition (firmware)","text":"<p>Test description</p> <p>This test aims to verify that the external USB devices connected to the docking station are recognized correctly by the <code>FIRMWARE</code>.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>The <code>USB-C docking station</code> connected to the USB-C port.</li> <li>The <code>USB storage</code> connected to the <code>USB-C docking station</code>.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the <code>BIOS_MENU_KEY</code> to enter the BIOS Menu.</li> <li>Check if the <code>USB storage</code> is available on the list.</li> </ol> <p>Expected result</p> <p>The <code>USB storage</code> is available which confirms successful recognition.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc011004-usb-type-c-docking-station-usb-devices-recognition-me-disabled-firmware","title":"UTC011.004 USB Type-C docking station USB devices recognition ME disabled (firmware)","text":"<p>Test description</p> <p>This test aims to verify that the external USB devices connected to the docking station are recognized correctly by the <code>FIRMWARE</code>.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>The <code>USB-C docking station</code> connected to the USB-C port.</li> <li>The <code>USB storage</code> connected to the <code>USB-C docking station</code>.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu.</li> <li>Enter the Dasharo System Features menu using the arrow keys and Enter.</li> <li>Enter the Intel Management Engine Options submenu.</li> <li>Verify that the Intel ME mode option is in state Disable (HAP) or Disable (Soft) - if not, using the arrow keys and Enter, choose option Disable (HAP) or Disable (Soft).</li> <li>Press F10 to save the changes.</li> <li>If necessary - press Y to confirm saving the changes.</li> <li>Go back to the main menu using the ESC key.</li> <li>Select the Reset option to apply the settings and reboot.</li> <li>Hold the <code>BIOS_MENU_KEY</code> to enter the BIOS Menu.</li> <li>Check if the <code>USB storage</code> is available on the list.</li> </ol> <p>Expected result</p> <p>The <code>USB storage</code> is available which confirms successful recognition.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc012001-usb-type-c-docking-station-usb-keyboard-firmware","title":"UTC012.001 USB Type-C docking station USB keyboard (firmware)","text":"<p>Test description</p> <p>This test aims to verify that the external USB keyboard connected to the docking station is detected correctly by the <code>FIRMWARE</code> and all basic keys work according to their labels.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>The <code>USB-C docking station</code> connected to the USB-C port.</li> <li>The <code>external USB keyboard</code> connected to the docking station.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT</li> <li>Hold the <code>BIOS_MENU_KEY</code> to enter the Bios Menu.</li> <li>Use the arrow keys, Esc key and the Enter key to navigate the menus.</li> </ol> <p>Expected result</p> <p>All menus can be entered using the external USB keyboard.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc013001-usb-type-c-docking-station-upload-1gb-file-on-usb-storage-ubuntu","title":"UTC013.001 USB Type-C docking station upload 1GB file on USB storage (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the 1GB file can be transferred from the <code>OPERATING_SYSTEM</code> to the <code>USB storage</code> connected to the docking station.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>The <code>USB-C docking station</code> connected to the USB-C port.</li> <li>The <code>USB storage</code> connected to the <code>USB-C docking station</code>.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command to generate 1GB file:</p> <pre><code>openssl rand -out test_file.txt -base64 $(( 2**30 * 3/4 ))\n</code></pre> </li> <li> <p>Read the path to the <code>USB storage</code> by running the following command:</p> <pre><code>lsblk\n</code></pre> </li> <li> <p>Copy the generated file to the <code>USB storage</code> by running the following    command:</p> <pre><code>cp test_file.txt {path_to_usb_storage}\n</code></pre> </li> <li> <p>Verify that the files are the same by running the following command:</p> <pre><code>sha256sum test_file.txt {path_to_usb_storage}/test_file.txt\n</code></pre> </li> </ol> <p>Expected result</p> <p>The output from the last command should contain 2 identical checksums:</p> <pre><code>f46597c0c63a1eefb200d40edf654e52f10c3d5d21565886ad603fabaf8d39fb  test_file.txt\nf46597c0c63a1eefb200d40edf654e52f10c3d5d21565886ad603fabaf8d39fb  {path_to_usb_storage}/test_file.txt\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc013002-usb-type-c-docking-station-upload-1gb-file-on-usb-storagewindows","title":"UTC013.002 USB Type-C docking station upload 1GB file on USB storage(Windows)","text":"<p>Test description</p> <p>This test aims to verify that the 1GB file can be transferred from the <code>OPERATING_SYSTEM</code> to the <code>USB storage</code> connected to the docking station.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>The <code>USB-C docking station</code> connected to the USB-C port.</li> <li>The <code>USB storage</code> connected to the <code>USB-C docking station</code>.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open powershell as administrator and run the following command to generate    1GB file:</p> <pre><code>fsutil file createnew test_file.txt 1073741824\n</code></pre> </li> <li> <p>Read the drive letter assigned to the <code>USB storage</code> by running the following    command:</p> <pre><code>(Get-Volume | where drivetype -eq removable).driveletter\n</code></pre> </li> <li> <p>Copy the generated file to the <code>USB storage</code> by running the following    command:</p> <pre><code>Copy-Item -Path C:\\Windows\\system32\\test_file.txt {drive_letter}:\n</code></pre> </li> <li> <p>Verify that the files are the same by running the following commands:</p> <pre><code>Get-FileHash test_file.txt\nGet-FileHash {drive_letter}:\\test_file.txt\n</code></pre> </li> </ol> <p>Expected result</p> <p>The output from the last commands should have equal hash:</p> <pre><code>Algorithm       Hash                                                              Path\n---------       ----                                                              ----\nSHA256          F46597C0C63A1EEFB200D40EDF654E52F10C3D5D21565886AD603FABAF8D39FB  C\\Windows\\system3...\n</code></pre> <pre><code>Algorithm       Hash                                                              Path\n---------       ----                                                              ----\nSHA256          F46597C0C63A1EEFB200D40EDF654E52F10C3D5D21565886AD603FABAF8D39FB  E:\\test_file.txt\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc013003-usb-type-c-docking-station-upload-1gb-file-on-usb-storage-with-me-disabledubuntu","title":"UTC013.003 USB Type-C docking station upload 1GB file on USB storage with ME disabled(Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the 1GB file can be transferred from the <code>OPERATING_SYSTEM</code> to the <code>USB storage</code> connected to the docking station.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>The <code>USB-C docking station</code> connected to the USB-C port.</li> <li>The <code>USB storage</code> connected to the <code>USB-C docking station</code>.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu.</li> <li>Enter the Dasharo System Features menu using the arrow keys and Enter.</li> <li>Enter the Intel Management Engine Options submenu.</li> <li>Verify that the Intel ME mode option is in state Disable (HAP) or Disable (Soft) - if not, using the arrow keys and Enter, choose option Disable (HAP) or Disable (Soft).</li> <li>Press F10 to save the changes.</li> <li>If necessary - press Y to confirm saving the changes.</li> <li>Go back to the main menu using the ESC key.</li> <li>Select the Reset option to apply the settings and reboot.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command to generate 1GB file:</p> <pre><code>openssl rand -out test_file.txt -base64 $(( 2**30 * 3/4 ))\n</code></pre> </li> <li> <p>Read the path to the <code>USB storage</code> by running the following command:</p> <pre><code>lsblk\n</code></pre> </li> <li> <p>Copy the generated file to the <code>USB storage</code> by running the following    command:</p> <pre><code>cp test_file.txt {path_to_usb_storage}\n</code></pre> </li> <li> <p>Verify that the files are the same by running the following command:</p> <pre><code>sha256sum test_file.txt {path_to_usb_storage}/test_file.txt\n</code></pre> </li> </ol> <p>Expected result</p> <p>The output from the last command should contain 2 identical checksums:</p> <pre><code>f46597c0c63a1eefb200d40edf654e52f10c3d5d21565886ad603fabaf8d39fb  test_file.txt\nf46597c0c63a1eefb200d40edf654e52f10c3d5d21565886ad603fabaf8d39fb  {path_to_usb_storage}/test_file.txt\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc013004-usb-type-c-docking-station-upload-1gb-file-on-usb-storage-with-me-disabledwindows","title":"UTC013.004 USB Type-C docking station upload 1GB file on USB storage with ME disabled(Windows)","text":"<p>Test description</p> <p>This test aims to verify that the 1GB file can be transferred from the <code>OPERATING_SYSTEM</code> to the <code>USB storage</code> connected to the docking station.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>The <code>USB-C docking station</code> connected to the USB-C port.</li> <li>The <code>USB storage</code> connected to the <code>USB-C docking station</code>.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu.</li> <li>Enter the Dasharo System Features menu using the arrow keys and Enter.</li> <li>Enter the Intel Management Engine Options submenu.</li> <li>Verify that the Intel ME mode option is in state Disable (HAP) or Disable (Soft) - if not, using the arrow keys and Enter, choose option Disable (HAP) or Disable (Soft).</li> <li>Press F10 to save the changes.</li> <li>If necessary - press Y to confirm saving the changes.</li> <li>Go back to the main menu using the ESC key.</li> <li>Select the Reset option to apply the settings and reboot.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open powershell as administrator and run the following command to generate    1GB file:</p> <pre><code>fsutil file createnew test_file.txt 1073741824\n</code></pre> </li> <li> <p>Read the drive letter assigned to the <code>USB storage</code> by running the following    command:</p> <pre><code>(Get-Volume | where drivetype -eq removable).driveletter\n</code></pre> </li> <li> <p>Copy the generated file to the <code>USB storage</code> by running the following    command:</p> <pre><code>Copy-Item -Path C:\\Windows\\system32\\test_file.txt {drive_letter}:\n</code></pre> </li> <li> <p>Verify that the files are the same by running the following commands:</p> <pre><code>Get-FileHash test_file.txt\nGet-FileHash {drive_letter}:\\test_file.txt\n</code></pre> </li> </ol> <p>Expected result</p> <p>The output from the last commands should have equal hash:</p> <pre><code>Algorithm       Hash                                                              Path\n---------       ----                                                              ----\nSHA256          F46597C0C63A1EEFB200D40EDF654E52F10C3D5D21565886AD603FABAF8D39FB  C\\Windows\\system3...\n</code></pre> <pre><code>Algorithm       Hash                                                              Path\n---------       ----                                                              ----\nSHA256          F46597C0C63A1EEFB200D40EDF654E52F10C3D5D21565886AD603FABAF8D39FB  E:\\test_file.txt\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc016001-usb-type-c-docking-station-audio-playback-ubuntu","title":"UTC016.001 USB Type-C docking station audio playback (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the audio subsystem is able to playback audio recordings by using the external headset speakers connected to the docking station.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>The <code>USB-C docking station</code> connected to the USB-C port.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Plug in a headset jack into the docking station.</li> <li>When the <code>Select Audio Device</code> menu appears, select what type of external     device has been connected to the laptop (headset).</li> <li> <p>Open a terminal window and execute the following command:</p> <pre><code>pactl set-sink-mute alsa_output.pci-0000_00_1f.3.analog-stereo  0\npactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo 65535\nspeaker-test\n</code></pre> </li> </ol> <p>Expected result</p> <p>Sound should be played from the external speakers.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc016002-usb-type-c-docking-station-audio-playback-windows","title":"UTC016.002 USB Type-C docking station audio playback (Windows)","text":"<p>Test description</p> <p>This test aims to verify that the audio subsystem is able to playback audio recordings by using the external headset speakers connected to the docking station.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>The <code>USB-C docking station</code> connected to the USB-C port.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Plug in a headset jack into the docking station.</li> <li>Find the <code>Speakers</code> icon in the bottom right part of the screen and click    it using the left mouse button to open volume menu.</li> <li>After the <code>Which device did you plug in</code> menu appearing, select what type     of external device has been connected to the laptop (headset).</li> <li>In the volume menu, click the rightmost part of it and note the result.</li> </ol> <p>Expected result</p> <p>Sound should be played from the external speakers.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc016003-usb-type-c-docking-station-audio-playback-with-me-disabledubuntu","title":"UTC016.003 USB Type-C docking station audio playback with ME disabled(Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the audio subsystem is able to playback audio recordings by using the external headset speakers connected to the docking station.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>The <code>USB-C docking station</code> connected to the USB-C port.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu.</li> <li>Enter the Dasharo System Features menu using the arrow keys and Enter.</li> <li>Enter the Intel Management Engine Options submenu.</li> <li>Verify that the Intel ME mode option is in state Disable (HAP) or Disable (Soft) - if not, using the arrow keys and Enter, choose option Disable (HAP) or Disable (Soft).</li> <li>Press F10 to save the changes.</li> <li>If necessary - press Y to confirm saving the changes.</li> <li>Go back to the main menu using the ESC key.</li> <li>Select the Reset option to apply the settings and reboot.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Plug in a headset jack into the docking station.</li> <li>When the <code>Select Audio Device</code> menu appears, select what type of external     device has been connected to the laptop (headset).</li> <li> <p>Open a terminal window and execute the following command:</p> <pre><code>pactl set-sink-mute alsa_output.pci-0000_00_1f.3.analog-stereo  0\npactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo 65535\nspeaker-test\n</code></pre> </li> </ol> <p>Expected result</p> <p>Sound should be played from the external speakers.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc016004-usb-type-c-docking-station-audio-playback-with-me-disabledwindows","title":"UTC016.004 USB Type-C docking station audio playback with ME disabled(Windows)","text":"<p>Test description</p> <p>This test aims to verify that the audio subsystem is able to playback audio recordings by using the external headset speakers connected to the docking station.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>The <code>USB-C docking station</code> connected to the USB-C port.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu.</li> <li>Enter the Dasharo System Features menu using the arrow keys and Enter.</li> <li>Enter the Intel Management Engine Options submenu.</li> <li>Verify that the Intel ME mode option is in state Disable (HAP) or Disable (Soft) - if not, using the arrow keys and Enter, choose option Disable (HAP) or Disable (Soft).</li> <li>Press F10 to save the changes.</li> <li>If necessary - press Y to confirm saving the changes.</li> <li>Go back to the main menu using the ESC key.</li> <li>Select the Reset option to apply the settings and reboot.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Plug in a headset jack into the docking station.</li> <li>Find the <code>Speakers</code> icon in the bottom right part of the screen and click    it using the left mouse button to open volume menu.</li> <li>After the <code>Which device did you plug in</code> menu appearing, select what type     of external device has been connected to the laptop (headset).</li> <li>In the volume menu, click the rightmost part of it and note the result.</li> </ol> <p>Expected result</p> <p>Sound should be played from the external speakers.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc017001-usb-type-c-docking-station-audio-capture-ubuntu","title":"UTC017.001 USB Type-C docking station audio capture (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the audio subsystem is able to capture audio from external headset connected to the docking station.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>The <code>USB-C docking station</code> connected to the USB-C port.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Plug in a headset jack into the docking station.</li> <li>When the <code>Select Audio Device</code> menu appears, select what type of external     device has been connected to the laptop (headset).</li> <li> <p>Open a terminal window and execute the following command:</p> <pre><code>arecord -f S16_LE -d 10 -r 16000 /tmp/test-mic.wav\n</code></pre> </li> <li> <p>Make some noise for the headset. For example, say something.</p> </li> <li> <p>Execute the following command:</p> <pre><code>aplay /tmp/test-mic.wav\n</code></pre> </li> </ol> <p>Expected result</p> <p>The recorded audio clip is recorded correctly and played back.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc017002-usb-type-c-docking-station-audio-capture-windows","title":"UTC017.002 USB Type-C docking station audio capture (Windows)","text":"<p>Test description</p> <p>This test aims to verify that the audio subsystem is able to capture audio from external headset connected to the docking station.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>The <code>USB-C docking station</code> connected to the USB-C port.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Plug in a headset jack into the docking station.</li> <li>After the <code>Which device did you plug in</code> menu appearing, select what type     of external device has been connected to the laptop (headset).</li> <li>Find the <code>Speakers</code> icon in the bottom right part of the screen and click     it using the right mouse button then using the left mouse button     click <code>Sound Settings</code>.</li> <li>Locate the <code>All sound devices</code> bar and click on it.</li> <li>Select the <code>Microphone</code> position in the <code>Input devices</code> section.</li> <li>Click on the <code>Start Test</code> bar in the <code>Input settings</code> section.</li> <li>Create some noise for the DUT to capture and note the result.     For example, say something.</li> <li>Click on the <code>Stop Test</code> bar.</li> </ol> <p>Expected result</p> <ol> <li>The <code>Input volume</code> bar located in the <code>Input settings</code> section should raise when     some noise is being created.</li> <li>The result of the test after clicking the <code>Stop Test</code> bar should be more than     0% of the total volume.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc017003-usb-type-c-docking-station-audio-capture-with-me-disabledubuntu","title":"UTC017.003 USB Type-C docking station audio capture with ME disabled(Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the audio subsystem is able to capture audio from external headset connected to the docking station.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>The <code>USB-C docking station</code> connected to the USB-C port.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu.</li> <li>Enter the Dasharo System Features menu using the arrow keys and Enter.</li> <li>Enter the Intel Management Engine Options submenu.</li> <li>Verify that the Intel ME mode option is in state Disable (HAP) or Disable (Soft) - if not, using the arrow keys and Enter, choose option Disable (HAP) or Disable (Soft).</li> <li>Press F10 to save the changes.</li> <li>If necessary - press Y to confirm saving the changes.</li> <li>Go back to the main menu using the ESC key.</li> <li>Select the Reset option to apply the settings and reboot.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Plug in a headset jack into the docking station.</li> <li>When the <code>Select Audio Device</code> menu appears, select what type of external     device has been connected to the laptop (headset).</li> <li> <p>Open a terminal window and execute the following command:</p> <pre><code>arecord -f S16_LE -d 10 -r 16000 /tmp/test-mic.wav\n</code></pre> </li> <li> <p>Make some noise for the headset. For example, say something.</p> </li> <li> <p>Execute the following command:</p> <pre><code>aplay /tmp/test-mic.wav\n</code></pre> </li> </ol> <p>Expected result</p> <p>The recorded audio clip is recorded correctly and played back.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc017004-usb-type-c-docking-station-audio-capture-with-me-disabledwindows","title":"UTC017.004 USB Type-C docking station audio capture with ME disabled(Windows)","text":"<p>Test description</p> <p>This test aims to verify that the audio subsystem is able to capture audio from external headset connected to the docking station.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>The <code>USB-C docking station</code> connected to the USB-C port.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu.</li> <li>Enter the Dasharo System Features menu using the arrow keys and Enter.</li> <li>Enter the Intel Management Engine Options submenu.</li> <li>Verify that the Intel ME mode option is in state Disable (HAP) or Disable (Soft) - if not, using the arrow keys and Enter, choose option Disable (HAP) or Disable (Soft).</li> <li>Press F10 to save the changes.</li> <li>If necessary - press Y to confirm saving the changes.</li> <li>Go back to the main menu using the ESC key.</li> <li>Select the Reset option to apply the settings and reboot.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Plug in a headset jack into the docking station.</li> <li>After the <code>Which device did you plug in</code> menu appearing, select what type     of external device has been connected to the laptop (headset).</li> <li>Find the <code>Speakers</code> icon in the bottom right part of the screen and click     it using the right mouse button then using the left mouse button     click <code>Sound Settings</code>.</li> <li>Locate the <code>All sound devices</code> bar and click on it.</li> <li>Select the <code>Microphone</code> position in the <code>Input devices</code> section.</li> <li>Click on the <code>Start Test</code> bar in the <code>Input settings</code> section.</li> <li>Create some noise for the DUT to capture and note the result.     For example, say something.</li> <li>Click on the <code>Stop Test</code> bar.</li> </ol> <p>Expected result</p> <ol> <li>The <code>Input volume</code> bar located in the <code>Input settings</code> section should raise when     some noise is being created.</li> <li>The result of the test after clicking the <code>Stop Test</code> bar should be more than     0% of the total volume.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc020002-usb-type-c-pd-current-limiting-windows","title":"UTC020.002 USB Type-C PD current limiting (Windows)","text":"<p>Test description</p> <p>This test aims to verify that the power draw from a USB-C PD power supply does not exceed the limits of the power supply's specifications.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test steps 1. Power on the DUT. 1. Boot into the system. 1. Log into the system by using the proper login and password. 1. Download and install ThrottleStop 1. Attach a 65W USB-C power supply, with the power meter between the power     supply and the laptop's Thunderbolt 4 port. 1. Open ThrottleStop. 1. Click the <code>Limits</code> button to open a window displaying current throttle status     and reasons. 1. Click the <code>TS Bench</code> button to open the benchmark window. 1. Start a benchmark with the default parameters (Normal, 16 threads, 120M,     Fixed MHz), while observing the power meter's display. 1. Repeat the step above 5 times, noting the maximum power draw shown on the     power meter each time.</p> <p>Expected result</p> <p>The power draw does not exceed more than 105% of the power supply's nominal power. The power meter's display stays lit all the time, indicating that the power supply's over-current protection was not triggered. When the power draw approaches or exceeds 100% of the AC adapter's rating (65W), the field <code>EDP Other</code> in the ThrottleStop Limit Reasons window is colored red.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc020003-usb-type-c-pd-current-limiting-with-me-disabled-ubuntu","title":"UTC020.003 USB Type-C PD current limiting with ME disabled (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the power draw from a USB-C PD power supply does not exceed the limits of the power supply's specifications.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test steps 1. Power on the DUT. 1. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. 1. Enter the Dasharo System Features menu using the arrow keys and Enter. 1. Enter the Intel Management Engine Options submenu. 1. Verify that the Intel ME mode option is in state Disable (HAP) or Disable (Soft) - if not, using the arrow keys and Enter, choose option Disable (HAP) or Disable (Soft). 1. Press F10 to save the changes. 1. If necessary - press Y to confirm saving the changes. 1. Go back to the main menu using the ESC key. 1. Select the Reset option to apply the settings and reboot. 1. Boot into the system. 1. Log into the system by using the proper login and password. 1. Attach a 65W USB-C power supply, with the power meter between the power     supply and the laptop's Thunderbolt 4 port. 1. Open a terminal window and run the following command, while observing the     power meter's display:</p> <pre><code>```bash\nstress-ng -c 20 -t 5\n```\n</code></pre> <ol> <li>Repeat the step above 5 times, noting the maximum power draw shown on the     power meter each time.</li> </ol> <p>Expected result</p> <p>The power draw does not exceed more than 105% of the power supply's nominal power. The power meter's display stays lit all the time, indicating that the power supply's over-current protection was not triggered.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc020004-usb-type-c-pd-current-limiting-with-me-disabled-windows","title":"UTC020.004 USB Type-C PD current limiting with ME disabled (Windows)","text":"<p>Test description</p> <p>This test aims to verify that the power draw from a USB-C PD power supply does not exceed the limits of the power supply's specifications.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test steps 1. Power on the DUT. 1. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. 1. Enter the Dasharo System Features menu using the arrow keys and Enter. 1. Enter the Intel Management Engine Options submenu. 1. Verify that the Intel ME mode option is in state Disable (HAP) or Disable (Soft) - if not, using the arrow keys and Enter, choose option Disable (HAP) or Disable (Soft). 1. Press F10 to save the changes. 1. If necessary - press Y to confirm saving the changes. 1. Go back to the main menu using the ESC key. 1. Select the Reset option to apply the settings and reboot. 1. Boot into the system. 1. Log into the system by using the proper login and password. 1. Download and install ThrottleStop 1. Attach a 65W USB-C power supply, with the power meter between the power     supply and the laptop's Thunderbolt 4 port. 1. Open ThrottleStop. 1. Click the <code>Limits</code> button to open a window displaying current throttle status     and reasons. 1. Click the <code>TS Bench</code> button to open the benchmark window. 1. Start a benchmark with the default parameters (Normal, 16 threads, 120M,     Fixed MHz), while observing the power meter's display. 1. Repeat the step above 5 times, noting the maximum power draw shown on the     power meter each time.</p> <p>Expected result</p> <p>The power draw does not exceed more than 105% of the power supply's nominal power. The power meter's display stays lit all the time, indicating that the power supply's over-current protection was not triggered. When the power draw approaches or exceeds 100% of the AC adapter's rating (65W), the field <code>EDP Other</code> in the ThrottleStop Limit Reasons window is colored red.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31I-nvme-switching/","title":"Dasharo Compatibility: M.2 automatic SATA/NVMe switching support","text":""},{"location":"unified-test-documentation/dasharo-compatibility/31I-nvme-switching/#mss001001-m2-automatic-satanvme-switching-support-ubuntu","title":"MSS001.001 M.2 automatic SATA/NVMe switching support (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify detection of the NVMe and SATA disk in M.2 hybrid slot via the Operating System slot.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Insert an NVMe disk into the M.2 slot on the DUT.</li> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Open a terminal window and execute <code>sudo parted -l</code>.</li> <li>Check if the connected disk is present on the list.</li> <li>Power off the DUT.</li> <li>Replace the NVMe disk with SATA M.2 disk.</li> <li>Repeat steps 1-5.</li> </ol> <p>Expected result</p> <ol> <li> <p>The NVMe M.2 disk is detected in OS:</p> <pre><code>Model: SAMSUNG MZVLB256HBHQ-00000 (nvme)\nDisk /dev/nvme0n1: 256GB\nSector size (logical/physical): 512B/512B\nPartition Table: gpt\nDisk Flags:\n\nNumber  Start   End     Size    File system  Name                  Flags\n 1      1049kB  2097kB  1049kB\n 2      2097kB  540MB   538MB   fat32        EFI System Partition  boot, esp\n 3      540MB   67,6GB  67,1GB  ext4\n 6      67,6GB  126GB   57,9GB  ext4\n 4      126GB   193GB   67,7GB  ext4\n 5      193GB   256GB   62,9GB  ext4\n</code></pre> </li> <li> <p>The SATA M.2 disk is detected in OS:</p> <pre><code>Model: ATA Hoodisk SSD (scsi)\nDisk /dev/sda: 32,0GB\nSector size (logical/physical): 512B/512B\nPartition Table: gpt\nDisk Flags:\n\nNumber  Start   End     Size    File system  Name                  Flags\n 1      1049kB  538MB   537MB   fat32        EFI System Partition  boot, esp\n 2      538MB   32,0GB  31,5GB  ext4\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31J-sleep-mode/","title":"Dasharo Compatibility: Sleep mode","text":""},{"location":"unified-test-documentation/dasharo-compatibility/31J-sleep-mode/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31J-sleep-mode/#slm001001-sleep-mode-battery-monitoring-ubuntu","title":"SLM001.001 Sleep mode - battery monitoring (Ubuntu)","text":"<p>Test description</p> <p>This test verifies how quickly the battery discharges while in sleep mode in the OS.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Charge the battery fully (note: due to the manufacturer's settings the     maximum battery charge level is limited to 90%; also, the battery charging     process can only be started if the current battery level is less than 80%).</li> <li>Disconnect the power supply.</li> <li>Close the lid.</li> <li>Wake up the DUT in the following timestamps and note the battery level:<ul> <li>1 hour from fully charging,</li> <li>2 hours from fully charging,</li> <li>3 hours from fully charging,</li> <li>6 hours from fully charging,</li> <li>(optional) 24 hours from fully charging.</li> </ul> </li> </ol> <p>Expected result</p> <ol> <li>The battery should discharge at a similar rate as in the table below (take    the battery wear into account).</li> </ol> Time Battery level 0h 90% 1h 88% 2h 86% 3h 84% 6h 80% 24h (optional) 57%"},{"location":"unified-test-documentation/dasharo-compatibility/31J-sleep-mode/#slm000002-sleep-mode-battery-monitoring-windows","title":"SLM000.002 Sleep mode - battery monitoring (Windows)","text":"<p>Test description</p> <p>This test verifies how quickly the battery discharges while in sleep mode in the OS.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Charge the battery fully (note: due to the manufacturer's settings the     maximum battery charge level is limited to 90%; also, the battery charging     process can only be started if the current battery level is less than 80%).</li> <li>Wait 30 seconds for the system to load fully.</li> <li>Disconnect the power supply.</li> <li>Close the lid.</li> <li>Wake up the DUT in the following timestamps and note the battery level:<ul> <li>1 hour from fully charging,</li> <li>2 hours from fully charging,</li> <li>3 hours from fully charging,</li> <li>6 hours from fully charging,</li> </ul> </li> </ol> <p>Expected result</p> <ol> <li>The battery should discharge at a similar rate as in the table below (take    the battery wear into account).</li> </ol> Time Battery level 0h 90% 1h 79% 2h 69% 3h 58% 6h 26%"},{"location":"unified-test-documentation/dasharo-compatibility/31K-minipcie-verification/","title":"Dasharo Compatibility: miniPCIe slot verification","text":""},{"location":"unified-test-documentation/dasharo-compatibility/31K-minipcie-verification/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31K-minipcie-verification/#mwl001201-wireless-card-detection-ubuntu","title":"MWL001.201 Wireless card detection (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31K-minipcie-verification/#mwl001301-wireless-card-detection-windows","title":"MWL001.301 Wireless card detection (Windows)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31K-minipcie-verification/#mwl002201-wi-fi-scanning-ubuntu","title":"MWL002.201 Wi-Fi scanning (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31K-minipcie-verification/#mwl002301-wi-fi-scanning-windows","title":"MWL002.301 Wi-Fi scanning (Windows)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31K-minipcie-verification/#mwl003201-bluetooth-scanning-ubuntu","title":"MWL003.201 Bluetooth scanning (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31K-minipcie-verification/#mwl003301-bluetooth-scanning-windows","title":"MWL003.301 Bluetooth scanning (Windows)","text":"<p>Test description</p> <p>This test aims to verify that the Bluetooth functionality of card is initialized correctly and can be used from within the operating system.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Enable Bluetooth and make it discoverable in any device nearby DUT</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Enter <code>Notification Center</code> in the bottom right part of the screen.</li> <li>Using right mouse button click on the Bluetooth icon.</li> <li>In shown drop-down menu click <code>Go to settings</code>.</li> <li>Click the <code>+</code> icon described as <code>Add Bluetooth or other device</code>.</li> <li>In the <code>Add a device</code> menu click <code>Bluetooth</code>.</li> <li>Wait a few moments until DUT scans for nearby Bluetooth devices and note    the result.</li> </ol> <p>Expected result</p> <p>Available Bluetooth devices should appear in the <code>Add a device</code> window.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31K-minipcie-verification/#mwl004201-lte-card-detection-ubuntu","title":"MWL004.201 LTE card detection (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31L-smbios/","title":"Dasharo compatibility: SMBIOS","text":"<p>The test suite is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31M-emmc-support/","title":"Dasharo Compatibility: eMMC support","text":""},{"location":"unified-test-documentation/dasharo-compatibility/31M-emmc-support/#mmc001001-emmc-support-ubuntu","title":"MMC001.001 eMMC support (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify detection of the eMMC driver via the Operating System.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Open a terminal window and execute <code>sudo parted -l</code>.</li> <li>Check if the eMMC is present on the list.</li> </ol> <p>Expected result</p> <ol> <li> <p>The eMMC disk is detected in OS:</p> <pre><code>Model: MMC 8GTF4R (sd/mmc)\nDisk /dev/mmcblk0: 7818MB\nSector size (logical/physical): 512B/512B\nPartition Table: msdos\nDisk Flags:\n\nNumber  Start   End     Size    Type      File system  Flags\n 1      1049kB  538MB   537MB   primary   fat32\n 2      538MB   1076MB  538MB   primary   fat32        boot, esp\n 3      1077MB  7817MB  6740MB  extended\n 5      1077MB  7817MB  6740MB  logical   ext4\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/","title":"Dasharo Compatibility: Platform suspend and resume","text":""},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/#susp001201-platform-suspend-and-resume-ubuntu-wakeup-flag","title":"SUSP001.201 Platform suspend and resume (Ubuntu, wakeup flag)","text":"<p>Test description</p> <p>This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, the wakeup flag is tested in this case.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Ubuntu</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Install the <code>pm-utils</code> package: <code>sudo apt-get install pm-utils</code>.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and execute the following command to set the wakeup     flag:</p> <pre><code>rtcwake --mode no --seconds 60\n</code></pre> </li> <li> <p>Execute the following command to enter the DUT into sleep mode:</p> <pre><code>pm-suspend\n</code></pre> </li> <li> <p>Wait 60 seconds.</p> </li> <li>Log into the system again.</li> <li> <p>Execute the following command to get the results of suspend process:</p> <pre><code>cat /var/log/pm-suspend.log | grep 'suspend suspend: '\n</code></pre> </li> <li> <p>Execute the following command to get the results of resume process:</p> <pre><code>cat /var/log/pm-suspend.log | grep 'resume suspend: '\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <ol> <li>After entering the second command the DUT should enter sleep mode.</li> <li>The DUT should automatically awaken after 60 seconds.</li> <li> <p>The output of the third and fourth commands should contain information about     suspend and resume procedure hooks' status. For none of them, an error     message should be returned.</p> <p>Example output for the suspend process:</p> <pre><code>/usr/lib/pm-utils/sleep.d/000kernel-change suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/000record-status suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/00logging suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/00powersave suspend suspend: success.\n/etc/pm/sleep.d/10_grub-common suspend suspend: success.\n/etc/pm/sleep.d/10_unattended-upgrades-hibernate suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/40inputattach suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/50unload_alx suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/60_wpa_supplicant suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/75modules suspend suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/90clock suspend suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/94cpufreq suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/95hdparm-apm suspend suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/95led suspend suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/98video-quirk-db-handler suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/99video suspend suspend: success.\n</code></pre> <p>Example output for the resume process:</p> <pre><code>/usr/lib/pm-utils/sleep.d/99video resume suspend: success.\n/usr/lib/pm-utils/sleep.d/98video-quirk-db-handler resume suspend: success.\n/usr/lib/pm-utils/sleep.d/95led resume suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/95hdparm-apm resume suspend: success.\n/usr/lib/pm-utils/sleep.d/94cpufreq resume suspend: success.\n/usr/lib/pm-utils/sleep.d/90clock resume suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/75modules resume suspend: success.\n/usr/lib/pm-utils/sleep.d/60_wpa_supplicant resume suspend: success.\n/usr/lib/pm-utils/sleep.d/50unload_alx resume suspend: success.\n/usr/lib/pm-utils/sleep.d/40inputattach resume suspend: success.\n/etc/pm/sleep.d/10_unattended-upgrades-hibernate resume suspend: success.\n/etc/pm/sleep.d/10_grub-common resume suspend: success.\n/usr/lib/pm-utils/sleep.d/00powersave resume suspend: success.\n/usr/lib/pm-utils/sleep.d/00logging resume suspend: success.\n/usr/lib/pm-utils/sleep.d/000record-status resume suspend: success.\n/usr/lib/pm-utils/sleep.d/000kernel-change resume suspend: success.\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/#susp001203-platform-suspend-and-resume-qubesos-wakeup-flag","title":"SUSP001.203 Platform suspend and resume (QubesOS, wakeup flag)","text":"<p>Test description</p> <p>This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, the wakeup flag is tested in this case.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = QubesOS stable</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window in <code>dom0</code> and execute the following command to set the    wakeup flag:</p> <pre><code>rtcwake --mode no --seconds 60\n</code></pre> </li> <li> <p>Execute the following command to enter the DUT into sleep mode:</p> <pre><code>sudo systemctl suspend\n</code></pre> </li> <li> <p>Wait 60 seconds.</p> </li> <li>Log into the system again.</li> <li> <p>Execute the following command to get the results of process:</p> <pre><code>journalctl | grep systemd-sleep\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <ol> <li>After entering the <code>sudo systemctl suspend</code> command the DUT should enter    sleep mode.</li> <li> <p>The output of the second command should contain information about performed    suspend and resume operations. Each suspend and resume of the system should    be reported in the output of this command with the correct date, an example    of reporting one suspend and resume operation:</p> <pre><code>Feb 10 16:38:55 dom0 systemd-sleep[14729]: Suspending system...\nFeb 10 16:39:10 dom0 systemd-sleep[14729]: System resumed.\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/#susp002201-platform-suspend-and-resume-ubuntu-press-key","title":"SUSP002.201 Platform suspend and resume (Ubuntu, press key)","text":"<p>Test description</p> <p>This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, pressing any key on the keyboard is tested in this case.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Ubuntu</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Install the <code>pm-utils</code> package: <code>sudo apt-get install pm-utils</code>.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and execute the following command to enter DUT into     sleep mode:</p> <pre><code>pm-suspend\n</code></pre> </li> <li> <p>Wait 15 seconds.</p> </li> <li>Press any key on the keyboard to resume the system.</li> <li>Log into the system again.</li> <li> <p>Execute the following command to get the results of suspend process:</p> <pre><code>cat /var/log/pm-suspend.log | grep 'suspend suspend: '\n</code></pre> </li> <li> <p>Execute the following command to get the results of resume process:</p> <pre><code>cat /var/log/pm-suspend.log | grep 'resume suspend: '\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <ol> <li>After entering the first command the DUT should enter sleep mode.</li> <li> <p>The output of the second and third commands should contain information about     suspend and resume procedure hooks' status. For none of them, an error     message should be returned.</p> <p>Example output for the suspend process:</p> <pre><code>/usr/lib/pm-utils/sleep.d/000kernel-change suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/000record-status suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/00logging suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/00powersave suspend suspend: success.\n/etc/pm/sleep.d/10_grub-common suspend suspend: success.\n/etc/pm/sleep.d/10_unattended-upgrades-hibernate suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/40inputattach suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/50unload_alx suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/60_wpa_supplicant suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/75modules suspend suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/90clock suspend suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/94cpufreq suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/95hdparm-apm suspend suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/95led suspend suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/98video-quirk-db-handler suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/99video suspend suspend: success.\n</code></pre> <p>Example output for the resume process:</p> <pre><code>/usr/lib/pm-utils/sleep.d/99video resume suspend: success.\n/usr/lib/pm-utils/sleep.d/98video-quirk-db-handler resume suspend: success.\n/usr/lib/pm-utils/sleep.d/95led resume suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/95hdparm-apm resume suspend: success.\n/usr/lib/pm-utils/sleep.d/94cpufreq resume suspend: success.\n/usr/lib/pm-utils/sleep.d/90clock resume suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/75modules resume suspend: success.\n/usr/lib/pm-utils/sleep.d/60_wpa_supplicant resume suspend: success.\n/usr/lib/pm-utils/sleep.d/50unload_alx resume suspend: success.\n/usr/lib/pm-utils/sleep.d/40inputattach resume suspend: success.\n/etc/pm/sleep.d/10_unattended-upgrades-hibernate resume suspend: success.\n/etc/pm/sleep.d/10_grub-common resume suspend: success.\n/usr/lib/pm-utils/sleep.d/00powersave resume suspend: success.\n/usr/lib/pm-utils/sleep.d/00logging resume suspend: success.\n/usr/lib/pm-utils/sleep.d/000record-status resume suspend: success.\n/usr/lib/pm-utils/sleep.d/000kernel-change resume suspend: success.\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/#susp002203-platform-suspend-and-resume-qubesos-press-key","title":"SUSP002.203 Platform suspend and resume (QubesOS, press key)","text":"<p>Test description</p> <p>This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, pressing any key on the keyboard is tested in this case.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = QubesOS stable</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window in <code>dom0</code> and execute the following command to enter    the DUT into sleep mode:</p> <pre><code>sudo systemctl suspend\n</code></pre> </li> <li> <p>Wait 15 seconds.</p> </li> <li>Press any key on the keyboard to resume the system.</li> <li>Log into the system again.</li> <li> <p>Execute the following command to get the results of process:</p> <pre><code>journalctl | grep systemd-sleep\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <ol> <li>After entering the first command the DUT should enter sleep mode.</li> <li> <p>The output of the second command should contain information about performed    suspend and resume operations. Each suspend and resume of the system should    be reported in the output of this command with the correct date, an example    of reporting one suspend and resume operation:</p> <pre><code>Feb 10 16:38:55 dom0 systemd-sleep[14729]: Suspending system...\nFeb 10 16:39:10 dom0 systemd-sleep[14729]: System resumed.\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/#susp003201-platform-suspend-and-resume-ubuntu-push-power-button","title":"SUSP003.201 Platform suspend and resume (Ubuntu, push power button)","text":"<p>Test description</p> <p>This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, pushing the power button is tested in this case.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Ubuntu</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Install the <code>pm-utils</code> package: <code>sudo apt-get install pm-utils</code>.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and execute the following command to enter DUT into     sleep mode:</p> <pre><code>pm-suspend\n</code></pre> </li> <li> <p>Wait 15 seconds.</p> </li> <li>Push the power button to resume the system.</li> <li>Log into the system again.</li> <li> <p>Execute the following command to get the results of suspend process:</p> <pre><code>cat /var/log/pm-suspend.log | grep 'suspend suspend: '\n</code></pre> </li> <li> <p>Execute the following command to get the results of resume process:</p> <pre><code>cat /var/log/pm-suspend.log | grep 'resume suspend: '\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <ol> <li>After entering the first command the DUT should enter sleep mode.</li> <li> <p>The output of the second and third commands should contain information about     suspend and resume procedure hooks' status. For none of them, an error     message should be returned.</p> <p>Example output for the suspend process:</p> <pre><code>/usr/lib/pm-utils/sleep.d/000kernel-change suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/000record-status suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/00logging suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/00powersave suspend suspend: success.\n/etc/pm/sleep.d/10_grub-common suspend suspend: success.\n/etc/pm/sleep.d/10_unattended-upgrades-hibernate suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/40inputattach suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/50unload_alx suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/60_wpa_supplicant suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/75modules suspend suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/90clock suspend suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/94cpufreq suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/95hdparm-apm suspend suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/95led suspend suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/98video-quirk-db-handler suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/99video suspend suspend: success.\n</code></pre> <p>Example output for the resume process:</p> <pre><code>/usr/lib/pm-utils/sleep.d/99video resume suspend: success.\n/usr/lib/pm-utils/sleep.d/98video-quirk-db-handler resume suspend: success.\n/usr/lib/pm-utils/sleep.d/95led resume suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/95hdparm-apm resume suspend: success.\n/usr/lib/pm-utils/sleep.d/94cpufreq resume suspend: success.\n/usr/lib/pm-utils/sleep.d/90clock resume suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/75modules resume suspend: success.\n/usr/lib/pm-utils/sleep.d/60_wpa_supplicant resume suspend: success.\n/usr/lib/pm-utils/sleep.d/50unload_alx resume suspend: success.\n/usr/lib/pm-utils/sleep.d/40inputattach resume suspend: success.\n/etc/pm/sleep.d/10_unattended-upgrades-hibernate resume suspend: success.\n/etc/pm/sleep.d/10_grub-common resume suspend: success.\n/usr/lib/pm-utils/sleep.d/00powersave resume suspend: success.\n/usr/lib/pm-utils/sleep.d/00logging resume suspend: success.\n/usr/lib/pm-utils/sleep.d/000record-status resume suspend: success.\n/usr/lib/pm-utils/sleep.d/000kernel-change resume suspend: success.\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/#susp003203-platform-suspend-and-resume-qubesos-push-power-button","title":"SUSP003.203 Platform suspend and resume (QubesOS, push power button)","text":"<p>Test description</p> <p>This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, pushing the power button is tested in this case.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = QubesOS stable</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window in <code>dom0</code> and execute the following command to enter    the DUT into sleep mode:</p> <pre><code>sudo systemctl suspend\n</code></pre> </li> <li> <p>Wait 15 seconds.</p> </li> <li>Push the power button to resume the system.</li> <li>Log into the system again.</li> <li> <p>Execute the following command to get the results of process:</p> <pre><code>journalctl | grep systemd-sleep\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <ol> <li>After entering the first command the DUT should enter sleep mode.</li> <li> <p>The output of the second command should contain information about performed    suspend and resume operations. Each suspend and resume of the system should    be reported in the output of this command with the correct date, an example    of reporting one suspend and resume operation:</p> <pre><code>Feb 10 16:38:55 dom0 systemd-sleep[14729]: Suspending system...\nFeb 10 16:39:10 dom0 systemd-sleep[14729]: System resumed.\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/#susp004201-platform-suspend-and-resume-ubuntu-wake-on-lan","title":"SUSP004.201 Platform suspend and resume (Ubuntu, Wake-on-LAN)","text":"<p>Test description</p> <p>This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, the Wake-on-LAN mechanism is tested in this case.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Ubuntu</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Install the <code>pm-utils</code> package: <code>sudo apt-get install pm-utils</code>.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and execute the following command to obtain the device     lowest MAC address:</p> <pre><code>ip address\n</code></pre> <p>Note, that the output of the above command might include information about all communication interfaces with their MAC addresses. In the Wake-on-LAN procedure, only the lowest MAC address of the active interface will be needed.</p> </li> <li> <p>Execute the following command to enter DUT into sleep mode:</p> <pre><code>pm-suspend\n</code></pre> </li> <li> <p>Wait 15 seconds.</p> </li> <li> <p>On another active machine execute the following command to send a magic     pocket:</p> <pre><code>wakeonlan &lt;DUT MAC address&gt;\n</code></pre> </li> <li> <p>Log into the system (on the DUT) again.</p> </li> <li> <p>Execute the following command to get the results of suspend process:</p> <pre><code>cat /var/log/pm-suspend.log | grep 'suspend suspend: '\n</code></pre> </li> <li> <p>Execute the following command to get the results of resume process:</p> <pre><code>cat /var/log/pm-suspend.log | grep 'resume suspend: '\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <ol> <li>After entering the first command the DUT should enter sleep mode.</li> <li> <p>The output of the second and third commands should contain information about     suspend and resume procedure hooks' status. For none of them, an error     message should be returned.</p> <p>Example output for the suspend process:</p> <pre><code>/usr/lib/pm-utils/sleep.d/000kernel-change suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/000record-status suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/00logging suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/00powersave suspend suspend: success.\n/etc/pm/sleep.d/10_grub-common suspend suspend: success.\n/etc/pm/sleep.d/10_unattended-upgrades-hibernate suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/40inputattach suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/50unload_alx suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/60_wpa_supplicant suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/75modules suspend suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/90clock suspend suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/94cpufreq suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/95hdparm-apm suspend suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/95led suspend suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/98video-quirk-db-handler suspend suspend: success.\n/usr/lib/pm-utils/sleep.d/99video suspend suspend: success.\n</code></pre> <p>Example output for the resume process:</p> <pre><code>/usr/lib/pm-utils/sleep.d/99video resume suspend: success.\n/usr/lib/pm-utils/sleep.d/98video-quirk-db-handler resume suspend: success.\n/usr/lib/pm-utils/sleep.d/95led resume suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/95hdparm-apm resume suspend: success.\n/usr/lib/pm-utils/sleep.d/94cpufreq resume suspend: success.\n/usr/lib/pm-utils/sleep.d/90clock resume suspend: not applicable.\n/usr/lib/pm-utils/sleep.d/75modules resume suspend: success.\n/usr/lib/pm-utils/sleep.d/60_wpa_supplicant resume suspend: success.\n/usr/lib/pm-utils/sleep.d/50unload_alx resume suspend: success.\n/usr/lib/pm-utils/sleep.d/40inputattach resume suspend: success.\n/etc/pm/sleep.d/10_unattended-upgrades-hibernate resume suspend: success.\n/etc/pm/sleep.d/10_grub-common resume suspend: success.\n/usr/lib/pm-utils/sleep.d/00powersave resume suspend: success.\n/usr/lib/pm-utils/sleep.d/00logging resume suspend: success.\n/usr/lib/pm-utils/sleep.d/000record-status resume suspend: success.\n/usr/lib/pm-utils/sleep.d/000kernel-change resume suspend: success.\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/#susp005201-cyclic-platform-suspend-and-resume-ubuntu","title":"SUSP005.201 Cyclic platform suspend and resume (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31N-usb-boot/","title":"Dasharo Compatibility: USB Boot","text":""},{"location":"unified-test-documentation/dasharo-compatibility/31N-usb-boot/#ubt001001-usb-detect-and-boot-after-coldboot","title":"UBT001.001 USB detect and boot after coldboot","text":"<p>Test description</p> <p>This test aims to verify that the DUT properly detects USB device and boots into the operating system after coldboot (reboot realized by power supply cutting off then restoring back). This test case may be re-done several times to specify the platform and connection stability.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Debian</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Cut the power off.</li> <li>Restore power to the DUT.</li> <li>Wait for boot until <code>BOOT_MENU_STRING</code> appears.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Check if <code>USB_STICK</code> entry is available.</li> <li>Select the proper number for <code>USB_STICK</code> option.</li> <li>Wait for <code>Debian GNU/Linux</code>.</li> </ol> <p>Expected result</p> <p>The <code>Debian GNU/Linux</code> is visible and confirms successful boot into OS after coldboot.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31N-usb-boot/#ubt002001-usb-detect-and-boot-after-warmboot","title":"UBT002.001 USB detect and boot after warmboot","text":"<p>Test description</p> <p>This test aims to verify that the DUT properly detects USB device and boots into the operating system after warmboot (reboot realized by device turning off then turning on). This test case may be re-done several times to specify the platform and connection stability.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Debian</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for boot until <code>BOOT_MENU_STRING</code> appears.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Check if <code>USB_STICK</code> entry is available.</li> <li>Select the proper number for <code>USB_STICK</code> option.</li> <li>Wait for <code>Debian GNU/Linux</code>.</li> </ol> <p>Expected result</p> <p>The <code>Debian GNU/Linux</code> is visible and confirms successful boot into OS after warmboot.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31N-usb-boot/#ubt003001-usb-detect-and-boot-after-system-reboot","title":"UBT003.001 USB detect and boot after system reboot","text":"<p>Test description</p> <p>This test aims to verify that the DUT properly detects USB device and boots into the operating system after system reboot (reboot performed by relevant command). This test case may be re-done several times to specify the platform and connection stability.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Debian</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for boot until <code>BOOT_MENU_STRING</code> appears.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Check if <code>USB_STICK</code> entry is available.</li> <li>Select the proper number for <code>USB_STICK</code> option.</li> <li>Wait for <code>Debian GNU/Linux</code>.</li> <li>Wait for <code>debian login:</code>.</li> <li>Type the <code>root</code> login.</li> <li>Wait for <code>Password:</code>.</li> <li>Type the proper password.</li> <li>Wait for <code>root@debian:~#</code>.</li> <li>Execute <code>reboot</code> command.</li> <li>Wait for boot until <code>BOOT_MENU_STRING</code> appears.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Check if <code>USB_STICK</code> entry is available.</li> <li>Select the proper number for <code>USB_STICK</code> option.</li> <li>Wait for <code>Debian GNU/Linux</code>.</li> </ol> <p>Expected result</p> <p>The <code>Debian GNU/Linux</code> is visible and confirms successful boot into OS after system reboot.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31O-usb-detect/","title":"Dasharo Compatibility: USB Detection","text":""},{"location":"unified-test-documentation/dasharo-compatibility/31O-usb-detect/#udt001001-usb-detection-after-coldboot","title":"UDT001.001 USB detection after coldboot","text":"<p>Test description</p> <p>This test aims to verify that the DUT properly detects USB device after coldboot (reboot realized by power supply cutting off then restoring back). This test case may be re-done several times to specify the platform and connection stability.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Debian</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Cut the power off.</li> <li>Restore power to the DUT.</li> <li>Wait for boot until <code>BOOT_MENU_STRING</code> appears.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Check if <code>USB_STICK</code> entry is available.</li> </ol> <p>Expected result</p> <p>The <code>USB_STICK</code> entry is visible which confirms successful detection after coldboot.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31O-usb-detect/#udt001002-usb-detection-after-warmboot","title":"UDT001.002 USB detection after warmboot","text":"<p>Test description</p> <p>This test aims to verify that the DUT properly detects USB device after warmboot (reboot realized by device turning off then turning on). This test case may be re-done several times to specify the platform and connection stability.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Debian</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for boot until <code>BOOT_MENU_STRING</code> appears.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Check if <code>USB_STICK</code> entry is available.</li> </ol> <p>Expected result</p> <p>The <code>USB_STICK</code> entry is visible which confirms successful detection after warmboot.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31O-usb-detect/#udt001003-usb-detection-after-system-reboot","title":"UDT001.003 USB detection after system reboot","text":"<p>Test description</p> <p>This test aims to verify that the DUT properly detects USB device after system reboot (reboot performed by relevant command). This test case may be re-done several times to specify the platform and connection stability.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Debian</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for boot until <code>BOOT_MENU_STRING</code> appears.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Check if <code>USB_STICK</code> entry is available.</li> <li>Select the key with a proper number for <code>iPXE</code>.</li> <li>Press <code>Ctrl+B</code> when prompted to stop iPXE from booting automatically.</li> <li>Wait until <code>iPXE&gt;</code> prompt appears.</li> <li>Type in <code>dhcp</code> to obtain an IP address.</li> <li>Type in <code>chain</code> and local iPXE address after a single space to load a network boot menu.</li> <li>Select <code>Debian stable netboot 4.14.y</code> option below <code>iPXE boot menu</code> header.</li> <li>Wait for <code>debian login:</code>.</li> <li>Type the <code>root</code> login.</li> <li>Wait for <code>Password:</code>.</li> <li>Type the proper password.</li> <li>Wait for <code>root@debian:~#</code>.</li> <li>Execute <code>reboot</code> command.</li> <li>Wait for boot until <code>BOOT_MENU_STRING</code> appears.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Check if <code>USB_STICK</code> entry is available.</li> </ol> <p>Expected result</p> <p>The <code>USB_STICK</code> entry is visible which confirms successful detection after system reboot.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31P-flash-write-protection/","title":"Dasharo Security: Flash write protection","text":""},{"location":"unified-test-documentation/dasharo-compatibility/31P-flash-write-protection/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> <li>Make yourself familiar with     SPI hardware write protection.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31P-flash-write-protection/#hwp001001-hardware-flash-write-protection-support","title":"HWP001.001 Hardware flash write protection support","text":"<p>Test description</p> <p>This test aims to verify whether the DUT supports hardware write protection mechanism.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Debian</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Open a terminal window and execute the following command:</li> </ol> <pre><code>sudo ./flashrom -p internal --wp-list\n</code></pre> <p>Expected result</p> <p>The output of the command should contain the information about lst of available write protection ranges, example has been shown below:</p> <pre><code>Available write protection ranges:\n    start=0x00000000 length=0x00000000 (none)\n    start=0x00000000 length=0x00001000 (lower 1/2048)\n    start=0x007ff000 length=0x00001000 (upper 1/2048)\n    start=0x00000000 length=0x00002000 (lower 1/1024)\n    start=0x007fe000 length=0x00002000 (upper 1/1024)\n    start=0x00000000 length=0x00004000 (lower 1/512)\n    start=0x007fc000 length=0x00004000 (upper 1/512)\n    start=0x00000000 length=0x00008000 (lower 1/256)\n    start=0x007f8000 length=0x00008000 (upper 1/256)\n    start=0x00000000 length=0x00020000 (lower 1/64)\n    start=0x007e0000 length=0x00020000 (upper 1/64)\n    start=0x00000000 length=0x00040000 (lower 1/32)\n    start=0x007c0000 length=0x00040000 (upper 1/32)\n    start=0x00000000 length=0x00080000 (lower 1/16)\n    start=0x00780000 length=0x00080000 (upper 1/16)\n    start=0x00000000 length=0x00100000 (lower 1/8)\n    start=0x00700000 length=0x00100000 (upper 1/8)\n    start=0x00000000 length=0x00200000 (lower 1/4)\n    start=0x00600000 length=0x00200000 (upper 1/4)\n    start=0x00000000 length=0x00400000 (lower 1/2)\n    start=0x00400000 length=0x00400000 (upper 1/2)\n    start=0x00000000 length=0x00600000 (lower 3/4)\n    start=0x00200000 length=0x00600000 (upper 3/4)\n    start=0x00000000 length=0x00700000 (lower 7/8)\n    start=0x00100000 length=0x00700000 (upper 7/8)\n    start=0x00000000 length=0x00780000 (lower 15/16)\n    start=0x00080000 length=0x00780000 (upper 15/16)\n    start=0x00000000 length=0x007c0000 (lower 31/32)\n    start=0x00040000 length=0x007c0000 (upper 31/32)\n    start=0x00000000 length=0x007e0000 (lower 63/64)\n    start=0x00020000 length=0x007e0000 (upper 63/64)\n    start=0x00000000 length=0x007f8000 (lower 255/256)\n    start=0x00008000 length=0x007f8000 (upper 255/256)\n    start=0x00000000 length=0x007fc000 (lower 511/512)\n    start=0x00004000 length=0x007fc000 (upper 511/512)\n    start=0x00000000 length=0x007fe000 (lower 1023/1024)\n    start=0x00002000 length=0x007fe000 (upper 1023/1024)\n    start=0x00000000 length=0x007ff000 (lower 2047/2048)\n    start=0x00001000 length=0x007ff000 (upper 2047/2048)\n    start=0x00000000 length=0x00800000 (all)\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/31P-flash-write-protection/#hwp002001-hardware-flash-write-protection-enable-disable","title":"HWP002.001 Hardware flash write protection enable / disable","text":"<p>Test description</p> <p>This test aims to verify whether there is a possibility to set and erase hardware write protection on the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Debian</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Based on the documentation     erase current write protection.</li> <li>Based on the documentation     set write protection for a specific range.</li> <li> <p>Execute the following command in the terminal to check the status and the     range of write protection:</p> <pre><code>sudo ./flashrom -p internal --wp-status\n</code></pre> </li> </ol> <p>Expected result</p> <ol> <li> <p>The output of the command should contain the information about protection     mode:</p> <pre><code>Protection mode: hardware\n</code></pre> </li> <li> <p>Protection range: read from the command output and set before should be the     same.</p> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31R-pcie-ports/","title":"Dasharo Compatibility: PCI Express ports support","text":""},{"location":"unified-test-documentation/dasharo-compatibility/31R-pcie-ports/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31R-pcie-ports/#pex001001-pci-express-card-detection-ubuntu","title":"PEX001.001 PCI Express card detection (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the PCI Express extension card is enumerated correctly and can be detected from the operating system.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Plug the PCI Express extension card to the tested slot.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Open a terminal window and execute the following command:</li> </ol> <pre><code>lspci\n</code></pre> <p>Expected result</p> <p>The output of the command should contain the plugged device name:</p> <pre><code>01:00.0 VGA compatible controller: Advanced Micro Devices, Inc. [AMD/ATI] Turks PRO [Radeon HD 7570]\n</code></pre> <p>The exact name and revision may be different depending on hardware configuration.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31R-pcie-ports/#pex001002-pci-express-card-detection-windows","title":"PEX001.002 PCI Express card detection (Windows)","text":"<p>Test description</p> <p>This test aims to verify that the Wi-Fi/Bluetooth card is enumerated correctly and can be detected from the operating system.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Plug the PCI Express extension card to the tested slot.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Open Device Manager and find the plugged device</li> <li>Note the device status.</li> </ol> <p>Expected result</p> <p>The device status in the Device Manager should indicate that the device is working properly and has no problems.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31S-sata-led-and-pc-speaker-error-indication/","title":"Dasharo Compatibility: SATA LED and PC speaker error indication","text":""},{"location":"unified-test-documentation/dasharo-compatibility/31S-sata-led-and-pc-speaker-error-indication/#err001001-sata-led-and-pc-speaker-error-indication-support-firmware","title":"ERR001.001 SATA LED and PC speaker error indication support (firmware)","text":"<p>Test description</p> <p>This test aims to verify if SATA LED blink and PC speaker beeps on critical firmware errors.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li>DUT with PC speaker</li> <li>DUT with SATA LED</li> <li>DUT with removable RAM modules.</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Remove power from DUT.</li> <li>Remove all RAM memory modules from the DUT.</li> <li>Connect power supply and power on the DUT.</li> <li>Observe the DUT starts blinking the SATA LED and beeps with PC speaker.</li> </ol> <p>Expected result</p> <p>When no memory modules are connected, this is considered a critical firmware error and the platform can not proceed with booting. Error indication path will be triggered causing the platform to beep and blink the SATA LED. There should be only 12 beeps, but the SATA LED should blink endlessly (until DUT is powered off or reset).</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31S-sata-led-and-pc-speaker-error-indication/#err002001-pc-speaker-beep-during-boot-firmware","title":"ERR002.001 PC speaker beep during boot (firmware)","text":"<p>Test description</p> <p>This test aims to verify if PC speaker beeps during the boot process.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li>DUT with PC speaker</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Listen for a single beep until the bootsplash logo appears.</li> </ol> <p>Expected result</p> <p>The DUT should make a single beep shortly before the bootsplash logo appears.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31T-cpu-status/","title":"Dasharo Compatibility: CPU Status","text":"<p>The test suite is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/","title":"Dasharo Compatibility: Heads bootloader support","text":""},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds001001-heads-installation","title":"HDS001.001 Heads installation","text":"<p>Test description</p> <p>This test aims to verify that Heads could be installed on the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Flash bootkernel partition with Heads in accordance with the     documentation.</li> </ol> <p>Expected result</p> <p>The output of the <code>pflash</code> command should contain information, that flashing procedure has been ended without any errors.</p> <p>Example output:</p> <pre><code>Programming &amp; Verifying...\n[==================================================] 100% ETA:0s\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds002001-boot-into-heads","title":"HDS002.001 Boot into Heads","text":"<p>Test description</p> <p>This test aims to verify that the DUT during the booting procedure reaches Heads bootloader.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the <code>Heads</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>Heads</code> bootloader screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds003001-boot-from-usb-option-is-available-and-works-correctly","title":"HDS003.001 Boot from USB option is available and works correctly","text":"<p>Test description</p> <p>This test aims to verify that the <code>Boot from USB</code> option in the <code>Default boot menu</code> is available (if there is no option to boot OS from the Hard Disk) and allows to boot system mounted on the USB.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li><code>USB storage</code> with the installed OS.</li> </ol> <p>Test steps</p> <ol> <li>Plug the <code>USB storage</code> into DUT.</li> <li>Power on the DUT.</li> <li>Wait for the <code>Default boot menu</code> appears.</li> <li>Select <code>Boot from USB</code> option using the arrow keys and Enter.</li> <li>Select a partition from the <code>USB storage</code> from which the system will be     booted.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>The operating system from <code>USB storage</code> should boot properly.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds004001-continue-to-the-main-menu-option-is-available-and-works-correctly","title":"HDS004.001 Continue to the main menu option is available and works correctly","text":"<p>Test description</p> <p>This test aims to verify that the <code>Continue to the main menu</code> option in the <code>Default boot menu</code> is available and works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the <code>Default boot menu</code> appears.</li> <li>Select the <code>Continue to the main menu</code> option using the arrow keys and Enter.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>After selecting <code>Continue to the main menu</code>, the <code>Heads Boot Menu</code> should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds005001-exit-to-recovery-shell-option-is-available-and-works-correctly","title":"HDS005.001 Exit to recovery shell option is available and works correctly","text":"<p>Test description</p> <p>This test aims to verify that the <code>Exit to recovery shell</code> option in the <code>Default boot menu</code> is available and works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the <code>Default boot menu</code> appears.</li> <li>Select the <code>Exit to recovery shell</code> option using the arrow keys and Enter.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>After selecting <code>Exit to recovery shell</code>, the recovery shell should be shown.</p> <p>Example output:</p> <pre><code>!!!!! User requested recovery shell\n!!!!! Starting recovery shell\n~ #\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds006001-default-boot-option-is-available-and-works-correctly","title":"HDS006.001 Default boot option is available and works correctly","text":"<p>Test description</p> <p>This test aims to verify that the <code>Default boot</code> option in the <code>Heads boot menu</code> is available and works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the <code>Default boot menu</code> appears.</li> <li>Select the <code>Continue to the main menu</code> option using the arrow keys and Enter.</li> <li>Select the <code>Default boot</code> option in the <code>Heads boot menu</code>.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>After selecting <code>Default boot</code>, the <code>Default boot menu</code> should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds007001-options-submenu-is-available-and-works-correctly","title":"HDS007.001 Options submenu is available and works correctly","text":"<p>Test description</p> <p>This test aims to verify that the <code>Options --&gt;</code> option in the <code>Heads boot menu</code> is available and works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the <code>Default boot menu</code> appears.</li> <li>Select the <code>Continue to the main menu</code> option using the arrow keys and Enter.</li> <li>Select the <code>Options --&gt;</code> option in the <code>Heads boot menu</code>.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>After selecting <code>Options --&gt;</code>, the <code>HEADS Options</code> menu should be displayed.</p> <p>Example view of <code>HEADS Options</code>:</p> <pre><code>b  Boot Options --&gt;\nt  TPM/TOTP/HOTP Options --&gt;\nu  Update checksums and sign all files in /boot\nc  Change configuration settings --&gt;\nf  Flash/Update the BIOS --&gt;\ng  GPG Options --&gt;\nF  OEM Factory Reset --&gt;\nx  Exit to recovery shell\nr  &lt;-- Return to main menu\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds008001-system-info-option-is-available-and-works-correctly","title":"HDS008.001 System info option is available and works correctly","text":"<p>Test description</p> <p>This test aims to verify that the <code>System Info</code> option in the <code>Heads boot menu</code> allows displaying all basic system information.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the <code>Default boot menu</code> appears.</li> <li>Select the <code>Continue to the main menu</code> option using the arrow keys and Enter.</li> <li>Select the <code>System Info</code> option in the <code>Heads boot menu</code>.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>After selecting <code>System Info</code>, the basic system information should be displayed.</p> <p>Example output:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 System Info \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                          \u2502\n\u2502 Talos 2 Server                                           \u2502\n\u2502                                                          \u2502\n\u2502 FW_VER: v0.5.0                                           \u2502\n\u2502 Kernel: Linux 5.5.0-openpower1                           \u2502\n\u2502                                                          \u2502\n\u2502 CPU: IBM POWER9 \u201cSforza\u201d                                 \u2502\n\u2502 RAM: 8 GB                                                \u2502\n\u2502                                                          \u2502\n\u2502 Disk /dev/nvme0n1: 477 GB                                \u2502\n\u2502                                                          \u2502\n\u2502                                                          \u2502\n\u2502                          &lt;Ok&gt;                            \u2502\n\u2502                                                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds009001-power-off-option-is-available-and-works-correctly","title":"HDS009.001 Power off option is available and works correctly","text":"<p>Test description</p> <p>This test aims to verify that the <code>Power Off</code> option in the <code>Heads boot menu</code> allows turning off the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the <code>Default boot menu</code> appears.</li> <li>Select the <code>Continue to the main menu</code> option using the arrow keys and Enter.</li> <li>Select the <code>Power Off</code> option in the <code>Heads boot menu</code>.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>After selecting <code>Power Off</code>, the DUT should be turned off without any complications.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds010001-oem-factory-reset-option-is-available-and-works-correctly","title":"HDS010.001 OEM Factory Reset option is available and works correctly","text":"<p>Test description</p> <p>This test aims to verify that the <code>OEM Factory Reset / Re-Ownership --&gt;</code> option in the <code>HEADS Options</code> submenu is available and works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>USB Security Dongle</code></li> <li>Previously installed OS</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Plug the <code>USB Security Dongle</code> into DUT.</li> <li>Power on the DUT.</li> <li>Wait for the <code>Default boot menu</code> appears.</li> <li>Select the <code>Continue to the main menu</code> option using the arrow keys and Enter.</li> <li>Select the <code>Options --&gt;</code> option in the <code>Heads boot menu</code>.</li> <li>Select the <code>OEM Factory Reset / Re-Ownership --&gt;</code> option in the    <code>HEADS Options</code> submenu.</li> <li>Choose <code>&lt;Continue&gt;</code> in the displayed <code>OEM Factory Reset / Re-Ownership</code>    window using the arrow keys and Enter.</li> <li>Go through the installation process by answering the questions.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <ol> <li>The <code>Provisioned Security Components Secrets</code> should be displayed at the end    of the installation.</li> <li>The new GPG keys should be placed on the <code>USB Security Dongle</code>.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds011001-add-gpg-key-to-running-bios-and-reflash","title":"HDS011.001 Add GPG key to running BIOS and reflash","text":"<p>Test description</p> <p>This test aims to verify that the <code>Add GPG key to running BIOS and reflash</code> option in the <code>GPG Management Menu</code> is available and works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li>Additional <code>USB storage</code> - at least 1GB, with GPG public key</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Plug the <code>USB storage</code> into DUT.</li> <li>Power on the DUT.</li> <li>Wait for the <code>Default boot menu</code> appears.</li> <li>Select the <code>Continue to the main menu</code> option using the arrow keys and Enter.</li> <li>Select the <code>Options --&gt;</code> option in the <code>Heads boot menu</code>.</li> <li>Select the <code>GPG Options --&gt;</code> option in the <code>HEADS Options</code> submenu.</li> <li>Select the <code>Add GPG key to running BIOS and reflash</code> option in the    <code>GPG Management Menu</code>.</li> <li>Choose <code>&lt;Yes&gt;</code> in the displayed <code>GPG public key required</code> window using the    arrow keys and Enter.</li> <li>Choose GPG public key from the <code>USB storage</code> and press Enter.</li> <li>Select the <code>Options --&gt;</code> option in the <code>Heads boot menu</code>.</li> <li>Select the <code>GPG Options --&gt;</code> option in the <code>HEADS Options</code> submenu.</li> <li>Select the <code>List GPG keys in your keyring</code> option in the    <code>GPG Management Menu</code>.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>The <code>GPG Keyring</code> window should contain information about the given GPG key.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds012001-add-gpg-key-to-standalone-bios-image-and-flash","title":"HDS012.001 Add GPG key to standalone BIOS image and flash","text":"<p>Test description</p> <p>This test aims to verify that the <code>Add GPG key to standalone BIOS image and flash</code> option in the <code>GPG Management Menu</code> is available and works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li>Additional <code>USB storage</code> - at least 1GB, with GPG public key and BIOS image</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Plug the <code>USB storage</code> into DUT.</li> <li>Power on the DUT.</li> <li>Wait for the <code>Default boot menu</code> appears.</li> <li>Select the <code>Continue to the main menu</code> option using the arrow keys and Enter.</li> <li>Select the <code>Options --&gt;</code> option in the <code>Heads boot menu</code>.</li> <li>Select the <code>GPG Options --&gt;</code> option in the <code>HEADS Options</code> submenu.</li> <li>Select the <code>Add GPG key to standalone BIOS image and flash</code> option in the    <code>GPG Management Menu</code>.</li> <li>Choose <code>&lt;Yes&gt;</code> in the displayed <code>GPG public key required</code> window using the    arrow keys and Enter.</li> <li>Choose GPG public key from the <code>USB storage</code> and press Enter.</li> <li>Choose BIOS image(*.rom) from the <code>USB storage</code> and press Enter.</li> <li>Choose <code>&lt;Yes&gt;</code> in the displayed <code>Flash ROM?</code> window using the arrow keys and    Enter.</li> <li>Select the <code>Options --&gt;</code> option in the <code>Heads boot menu</code>.</li> <li>Select the <code>GPG Options --&gt;</code> option in the <code>HEADS Options</code> submenu.</li> <li>Select the <code>List GPG keys in your keyring</code> option in the    <code>GPG Management Menu</code>.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>The <code>GPG Keyring</code> window should contain information about the given GPG key.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds013001-replace-gpg-keys-in-the-current-rom-and-reflash","title":"HDS013.001 Replace GPG key(s) in the current ROM and reflash","text":"<p>Test description</p> <p>This test aims to verify that the <code>Replace GPG key(s) in the current ROM and reflash</code> option in the <code>GPG Management Menu</code> is available and replaces GPG keys correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li>Additional <code>USB storage</code> - at least 1GB, with GPG public key</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Plug the <code>USB storage</code> into DUT.</li> <li>Power on the DUT.</li> <li>Wait for the <code>Default boot menu</code> appears.</li> <li>Select the <code>Continue to the main menu</code> option using the arrow keys and Enter.</li> <li>Select the <code>Options --&gt;</code> option in the <code>Heads boot menu</code>.</li> <li>Select the <code>GPG Options --&gt;</code> option in the <code>HEADS Options</code> submenu.</li> <li>Select the <code>Replace GPG key(s) in the current ROM and reflash</code> option in the    <code>GPG Management Menu</code>.</li> <li>Choose <code>&lt;Yes&gt;</code> in the displayed <code>GPG public key required</code> window using the    arrow keys and Enter.</li> <li>Choose GPG public key from the <code>USB storage</code> and press Enter.</li> <li>Select the <code>Options --&gt;</code> option in the <code>Heads boot menu</code>.</li> <li>Select the <code>GPG Options --&gt;</code> option in the <code>HEADS Options</code> submenu.</li> <li>Select the <code>List GPG keys in your keyring</code> option in the    <code>GPG Management Menu</code>.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>The <code>GPG Keyring</code> window should contain information about the given GPG key.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds014001-list-gpg-keys-in-your-keyring","title":"HDS014.001 List GPG keys in your keyring","text":"<p>Test description</p> <p>This test aims to verify that the <code>List GPG keys in your keyring</code> option in the <code>GPG Management Menu</code> is available and listed GPG keys correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the <code>Default boot menu</code> appears.</li> <li>Select the <code>Continue to the main menu</code> option using the arrow keys and Enter.</li> <li>Select the <code>Options --&gt;</code> option in the <code>Heads boot menu</code>.</li> <li>Select the <code>GPG Options --&gt;</code> option in the <code>HEADS Options</code> submenu.</li> <li>Select the <code>List GPG keys in your keyring</code> option in the    <code>GPG Management Menu</code>.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <ol> <li> <p>The <code>GPG Keyring</code> window should contain information about the GPG key if any    was added.</p> <p>Example information in the <code>GPG Keyring</code> window:</p> <pre><code>//.gnupg/pubring.kbx\n--------------------\npub   rsa3072 2022-11-22 [SC]\n      AFA824E4660A265253BA1571B640E02380808C34\nuid          [ultimate] OEM Key (OEM-generated key) &lt;oem-20221122083831@example.co\nsub   rsa3072 2022-11-22 [A]\nsub   rsa3072 2022-11-22 [E]\n</code></pre> </li> <li> <p>The <code>GPG Keyring</code> window should be empty if no key has been added.</p> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds015001-export-public-gpg-key-to-usb-drive","title":"HDS015.001 Export public GPG key to USB drive","text":"<p>Test description</p> <p>This test aims to verify that the <code>Export public GPG key to USB drive</code> option in the <code>GPG Management Menu</code> is available and exports GPG keys correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li>Additional <code>USB storage</code> - at least 1GB</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the <code>Default boot menu</code> appears.</li> <li>Select the <code>Continue to the main menu</code> option using the arrow keys and Enter.</li> <li>Select the <code>Options --&gt;</code> option in the <code>Heads boot menu</code>.</li> <li>Select the <code>GPG Options --&gt;</code> option in the <code>HEADS Options</code> submenu.</li> <li>Select the <code>Export public GPG key to USB drive</code> option in the    <code>GPG Management Menu</code>.</li> <li>Choose <code>&lt;Yes&gt;</code> in the displayed <code>Export Public Key(s) to USB drive?</code> window    using the arrow keys and Enter.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <ol> <li><code>The GPG Key Copied Successfully</code> window should be displayed.</li> <li>The <code>public-key.asc</code> file should be on <code>USB storage</code>.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds016001-generate-gpg-keys-manually-on-a-usb-security-token","title":"HDS016.001 Generate GPG keys manually on a USB security token","text":"<p>Test description</p> <p>This test aims to verify that the <code>Generate GPG keys manually on a USB security token</code> option in the <code>GPG Management Menu</code> is available and works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>USB Security Dongle</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Plug the <code>USB Security Dongle</code> into DUT.</li> <li>Power on the DUT.</li> <li>Wait for the <code>Default boot menu</code> appears.</li> <li>Select the <code>Continue to the main menu</code> option using the arrow keys and Enter.</li> <li>Select the <code>Options --&gt;</code> option in the <code>Heads boot menu</code>.</li> <li>Select the <code>GPG Options --&gt;</code> option in the <code>HEADS Options</code> submenu.</li> <li>Select the <code>Generate GPG keys manually on a USB security token</code> option in the    <code>GPG Management Menu</code>.</li> <li>Confirm that the <code>USB Security Dongle</code> is inserted, type <code>Y</code> and press Enter.</li> <li>Wait for <code>gpg/card&gt;</code> prompt is appeared.</li> <li>Type <code>admin</code> and press Enter.</li> <li>Type <code>generate</code> and press Enter.</li> <li>Answer <code>y</code> to question <code>Replace existing keys?</code>.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <ol> <li>Information about the successful generation of GPG keys should be displayed.</li> <li>The new GPG keys are on the <code>USB Security Dongle</code>.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds017001-clear-gpg-keys-and-reset-all-user-settings","title":"HDS017.001 Clear GPG key(s) and reset all user settings","text":"<p>Test description</p> <p>This test aims to verify that the <code>Clear GPG key(s) and reset all user settings</code> option in the <code>Config Management Menu</code> is available and works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the <code>Default boot menu</code> appears.</li> <li>Select the <code>Continue to the main menu</code> option using the arrow keys and Enter.</li> <li>Select the <code>Options --&gt;</code> option in the <code>Heads boot menu</code>.</li> <li>Select the <code>Change configuration settings --&gt;</code> option in the <code>HEADS Options</code>    submenu.</li> <li>Select the <code>Clear GPG key(s) and reset all user settings</code> option in the    <code>Config Management Menu</code>.</li> <li>Choose <code>&lt;Yes&gt;</code> in the displayed <code>Reset Configuration?</code> window using the    arrow keys and Enter.</li> <li>Reboot the DUT.</li> <li>Wait for the <code>Default boot menu</code> appears.</li> <li>Select the <code>Continue to the main menu</code> option using the arrow keys and Enter.</li> <li>Select the <code>Options --&gt;</code> option in the <code>Heads boot menu</code>.</li> <li>Select the <code>GPG Options --&gt;</code> option in the <code>HEADS Options</code> submenu.</li> <li>Select the <code>List GPG keys in your keyring</code> option in the    <code>GPG Management Menu</code>.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>The <code>GPG Keyring</code> window should be empty.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds018001-reset-tpm-option-is-available-and-works-correctly","title":"HDS018.001 Reset TPM option is available and works correctly","text":"<p>Test description</p> <p>This test aims to verify that the <code>Reset TPM</code> option in the <code>TPM/TOTP/HOTP Options</code> submenu is available and works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the <code>Default boot menu</code> appears.</li> <li>Select the <code>Continue to the main menu</code> option using the arrow keys and Enter.</li> <li>Select the <code>Options --&gt;</code> option in the <code>Heads boot menu</code>.</li> <li>Select the <code>TPM/TOTP/HOTP Options --&gt;</code> option in the <code>HEADS Options</code> submenu.</li> <li>Select the <code>Reset the TPM</code> option in the <code>TPM/TOTP/HOTP Options</code> submenu.</li> <li>Choose <code>&lt;Yes&gt;</code> in the displayed <code>Reset the TPM</code> window using the arrow keys    and Enter.</li> <li>Set the TPM owner password.</li> <li>Scan the QR code using a mobile application to add the new TOTP secret and    press Enter.</li> <li>Reboot the DUT.</li> <li>Wait for the <code>Default boot menu</code> appears.</li> <li>Select the <code>Continue to the main menu</code> option using the arrow keys and Enter.</li> </ol> <p>Expected result</p> <p>After selecting the <code>Continue to the main menu</code> option, should be prompted for the TPM owner password.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds019001-generate-new-totphotp-secret","title":"HDS019.001 Generate new TOTP/HOTP secret","text":"<p>Test description</p> <p>This test aims to verify that the <code>Generate new TOTP/HOTP secret</code> option in the <code>TPM/TOTP/HOTP Options</code> submenu is available and works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the <code>Default boot menu</code> appears.</li> <li>Select the <code>Continue to the main menu</code> option using the arrow keys and Enter.</li> <li>Select the <code>Options --&gt;</code> option in the <code>Heads boot menu</code>.</li> <li>Select the <code>TPM/TOTP/HOTP Options --&gt;</code> option in the <code>HEADS Options</code> submenu.</li> <li>Select the <code>Generate new TOTP/HOTP secret</code> option in the    <code>TPM/TOTP/HOTP Options</code> submenu.</li> <li>Scan the QR code using a mobile application to add the new TOTP secret and    press Enter.</li> <li>Reboot the DUT.</li> <li>Wait for the <code>Default boot menu</code> appears.</li> <li>Select the <code>Continue to the main menu</code> option using the arrow keys and Enter.</li> </ol> <p>Expected result</p> <p>After selecting the <code>Continue to the main menu</code> option, should be prompted for the TOTP password.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31V-petitboot-payload-support/","title":"Dasharo Compatibility: Petitboot payload support","text":""},{"location":"unified-test-documentation/dasharo-compatibility/31V-petitboot-payload-support/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31V-petitboot-payload-support/#pbt001001-boot-into-petitboot","title":"PBT001.001 Boot into Petitboot","text":"<p>Test description</p> <p>This test verifies that the DUT during booting procedure reaches Petitboot menu.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the <code>Petitboot</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>Petitbooot</code> menu screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31V-petitboot-payload-support/#pbt002001-read-system-information-from-petitboot","title":"PBT002.001 Read System Information from Petitboot","text":"<p>Test description</p> <p>This test verifies that Petitboot System Information option is available and works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the <code>Petitboot</code> to boot.</li> <li>Select the <code>System Information</code> option using the arrow keys and press     <code>Enter</code>.</li> <li>Note the result.</li> </ol> <p>Expected result</p> <p>After select <code>System Information</code> option, device information tree should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31V-petitboot-payload-support/#pbt003001-rescan-devices-by-petitboot","title":"PBT003.001 Rescan Devices by Petitboot","text":"<p>Test description</p> <p>This test verifies that Petitboot Rescan Device option is available and works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the <code>Petitboot</code> to boot.</li> <li>Select the <code>Rescan Devices</code> option using the arrow keys and press <code>Enter</code>.</li> <li>Note the results.</li> <li>Attach <code>USB Stick</code> with bootable system to USB port in DUT.</li> <li>Select the <code>Rescan Devices</code> again and note the results.</li> </ol> <p>Expected result</p> <p>Information about the attached <code>USB Stick</code> should be displayed after the second use of the <code>Rescan Devices</code> option.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/31W-device-tree/","title":"Dasharo compatibility: Device tree","text":""},{"location":"unified-test-documentation/dasharo-compatibility/31W-device-tree/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/31W-device-tree/#dvt001001-node-with-coreboot-exists","title":"DVT001.001 Node with coreboot exists","text":"<p>Test description</p> <p>This test aims to verify whether the node with the coreboot exists in the Device Tree.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Debian</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>xxd /sys/firmware/devicetree/base/firmware/coreboot/compatible\n</code></pre> </li> <li> <p>Note the result.</p> </li> </ol> <p>Expected result</p> <p>The output of the command should contain information about memory sectors dedicated for coreboot. Example output:</p> <pre><code>00000000: 636f 7265 626f 6f74 00                   coreboot\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/31W-device-tree/#dvt002001-memory-for-coreboot-is-reserved-ubuntu","title":"DVT002.001 Memory for coreboot is reserved (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that in the system exists reserved memory for coreboot.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Debian</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>xxd /sys/firmware/devicetree/base/firmware/coreboot/reg\n</code></pre> </li> <li> <p>Note the results.</p> </li> <li> <p>Run the following command in the terminal:</p> <pre><code> xxd /sys/firmware/devicetree/base/reserved-memory/ranges\n</code></pre> </li> </ol> <p>Expected result</p> <ol> <li>Output of the first command should contain information about memory ranges     for corebotot.</li> <li>Output of the second command should contain information about reserved     ranges.</li> <li>All memory range for coreboot (output from command 1) should be reserved     (output from command 2).</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/320-fwupd-firmware-update/","title":"Dasharo Compatibility: Firmware update using fwupd","text":""},{"location":"unified-test-documentation/dasharo-compatibility/320-fwupd-firmware-update/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> <li>Install the <code>dmidecode</code> package: <code>sudo apt install dmidecode</code>.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/320-fwupd-firmware-update/#ffw001001-firmware-update-by-using-fwupd","title":"FFW001.001 Firmware update by using fwupd","text":"<p>Test description</p> <p>This test verify whether it is possible to update the firmware on the DUT by using fwupd demon.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Disable Secure Boot.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the  system by using the proper login and password.</li> <li> <p>Start firmware updating procedure by executing the following command in     the terminal:</p> <pre><code>    sudo fwupdmgr update\n</code></pre> </li> <li> <p>Reboot the DUT.</p> </li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command to verify results:</p> <pre><code>sudo dmidecode -t bios\n</code></pre> </li> </ol> <p>Expected result</p> <p>The output of <code>dmidecode</code> command should contain information about current firmware. The current firmware version should be equal to the latest released firmware version.</p> <p>Example output:</p> <pre><code>BIOS Information\n        Vendor: 3mdeb\n        Version: Dasharo (coreboot+UEFI) v1.1.0\n        Release Date: 03/24/2022\n        ROM Size: 16 MB\n        Characteristics:\n            PCI is supported\n            PC Card (PCMCIA) is supported\n            BIOS is upgradeable\n            BIOS shadowing is allowed\n            Selectable boot is supported\n            ACPI is supported\n            USB legacy is supported\n            Targeted content distribution is supported\n            UEFI is supported\n        BIOS Revision: 1.1\n        Firmware Revision: 0.0\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/325-custom-boot-order/","title":"Dasharo Compatibility: Custom Boot Order","text":""},{"location":"unified-test-documentation/dasharo-compatibility/325-custom-boot-order/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/325-custom-boot-order/#cbo001001-custom-boot-order-seabios","title":"CBO001.001 Custom boot order (SeaBIOS)","text":"<p>Test description</p> <p>This test aims to verify that the DUT boot from the suitable source, with the possibility to boot from other sources.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT</li> <li>Press <code>BOOT_MENU_KEY</code> key to display boot menu.</li> <li>Compare the listed devices with the desired boot order.</li> </ol> <p>Expected result</p> <p>When there is a possibility for the platform to boot from different sources:</p> <ol> <li>Priority will be given to the system booted from SSD connected by mSATA.</li> <li>If above-mentioned SSD does not include system, it will be booted from USB.</li> <li>If it either not include system, it will be booted from SSD connected by SATA 2.5</li> </ol> <p>If there is only one bootable medium the platform shall boot from it.</p> <p>Example boot menu:</p> <pre><code>Select boot device:\n\n1. AHCI/0: SATA SSD ATA-11 Hard-Disk (15272 MiBytes)\n2. USB MSC Drive  USB Flash Memory PMAP\n3. USB MSC Drive SanDisk Ultra 1.00\n4. USB MSC Drive Generic Flash Disk 8.07\n5. AHCI/1: TOSHIBA MK2561GSYN ATA-8 Hard-Disk (232 GiBytes)\n6. iPXE\n7. Payload [memtest]\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/325-custom-boot-order/#cbo001002-custom-boot-order-edk2","title":"CBO001.002 Custom boot order (edk2)","text":"<p>Test description</p> <p>This test aims to verify that the DUT boot from the suitable source, with the possibility to boot from other sources.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT</li> <li>Press <code>SETUP MENU</code> key to display boot menu.</li> <li>Select <code>Boot Maintenance Manager</code> and press <code>ENTER</code>.</li> <li>In <code>Boot Maintenance Manager</code> menu select <code>Boot Options</code> and press <code>ENTER</code>.</li> <li>In <code>Change Boot Order</code> menu select <code>Change the order</code> option and press     <code>ENTER</code>.</li> <li>Set the desired boot order.</li> <li>Reboot the device.</li> <li>Press <code>BOOT_MENU_KEY</code> key to display boot menu.</li> <li>Compare the listed devices with the desired boot order.</li> </ol> <p>Expected result</p> <p>Current boot order option list should correspond to the desired boot order.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/","title":"Dasharo Compatibility: Dasharo Tools Suite","text":""},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> <li>Wired network connection.</li> <li>Disable Secure Boot.</li> <li>Prepare the bootable USB    stick</li> <li>Make yourself familiar with     Dasharo Tools Suite.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#dts001001-booting-dts-from-usb-works-correctly","title":"DTS001.001 Booting DTS from USB works correctly","text":"<p>Test description</p> <p>This test aims to verify that DTS is properly booting from USB.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Plug the USB stick with DTS into the USB slot on the DUT.</li> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the USB stick with DTS using the arrow keys and press <code>Enter</code>.</li> </ol> <p>Expected result</p> <p>After a while, the DTS menu should appear.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#dts002001-dts-option-creating-dasharo-hcl-report-works-correctly","title":"DTS002.001 DTS option Creating Dasharo HCL report works correctly","text":"<p>Test description</p> <p>This test aims to verify that the option <code>Dasharo HCL report</code> in the DTS menu properly creates the report.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Plug the USB stick with DTS into the USB slot on the DUT.</li> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the USB stick with DTS using the arrow keys and press <code>Enter</code>.</li> <li>Wait for <code>Enter an option:</code>.</li> <li>Type in <code>1</code> and press <code>Enter</code>.</li> <li>Wait for the question: <code>Do you want to support Dasharo development by</code> <code>sending us logs with hardware configuration</code>?</li> <li>Type in <code>y</code> and press Enter.</li> </ol> <p>Expected result</p> <p>The whole process may take a few minutes.</p> <ol> <li>The report should be generated.</li> <li>The report should be sent to the cloud.</li> <li>In the summary should be displayed information that all calls exited without     errors.</li> </ol> <p>Example summary output:</p> <pre><code>SUMMARY\n========\n\n &gt; All Curl calls exited without errors\n &gt; Attempt to send completed &gt; &lt;report_name&gt;.tar.gz\nThanks you for supporting Dasharo!\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#dts003001-dts-option-power-off-dut-works-correctly","title":"DTS003.001 DTS option power-off DUT works correctly","text":"<p>Test description</p> <p>This test aims to verify that the option <code>Power off system</code> in the DTS menu turns off the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Plug the USB stick with DTS into the USB slot on the DUT.</li> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the USB stick with DTS using the arrow keys and press <code>Enter</code>.</li> <li>Wait for <code>Enter an option:</code>.</li> <li>Type in <code>10</code> and press <code>Enter</code>.</li> </ol> <p>Expected result</p> <p>The DUT should be turned off without any complications.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#dts004001-dts-option-reboot-dut-works-correctly","title":"DTS004.001 DTS option reboot DUT works correctly","text":"<p>Test description</p> <p>This test aims to verify that the option <code>Reboot system</code> in the DTS menu reboots the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Plug the USB stick with DTS into the USB slot on the DUT.</li> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the USB stick with DTS using the arrow keys and press <code>Enter</code>.</li> <li>Wait for <code>Enter an option:</code>.</li> <li>Type in <code>11</code> and press <code>Enter</code>.</li> </ol> <p>Expected result</p> <p>The DUT should be rebooted without any complications.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#dts005001-dts-drop-to-shell-option-works-correctly","title":"DTS005.001 DTS drop-to-shell option works correctly","text":"<p>Test description</p> <p>This test aims to verify that the option <code>Shell</code> in the DTS menu opens Shell.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Plug the USB stick with DTS into the USB slot on the DUT.</li> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the USB stick with DTS using the arrow keys and press <code>Enter</code>.</li> <li>Wait for <code>Enter an option:</code>.</li> <li>Type in <code>9</code> and press <code>Enter</code>.</li> </ol> <p>Expected result</p> <ol> <li>Information about entering the shell and how to exit should be displayed.</li> <li>Shell command input should be activated.</li> </ol> <p>Example output:</p> <pre><code>Entering shell, to leave type exit and press Enter or press LCtrl+D\n\nbash-5.1#\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#dts006001-flash-device-from-dts-shell-by-using-flashrom-works-correctly","title":"DTS006.001 Flash device from DTS shell by using flashrom works correctly","text":"<p>Test description</p> <p>This test aims to verify whether is the possibility to flash the DUT firmware by using flashrom in <code>DTS Shell</code>.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li><code>{PATH}</code> = individual path to a specific binary.</li> </ol> <p>Test steps</p> <ol> <li>Plug the USB stick with DTS into the USB slot on the DUT.</li> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the USB stick with DTS using the arrow keys and press <code>Enter</code>.</li> <li>Wait for <code>Enter an option:</code>.</li> <li>Type 9 and click <code>Enter</code> to launch Shell.</li> <li> <p>Run the following command to obtain <code>coreboot.rom</code> binary:</p> <pre><code>wget https://3mdeb.com/open-source-firmware/{PATH} -O /tmp/coreboot.rom\n</code></pre> <p>The above-described command is not the only way to obtain binary. For example, <code>scp</code> command might be used, too.</p> </li> <li> <p>Run the following command to flash the firmware:</p> <pre><code>flashrom -p internal -w /tmp/coreboot.rom\n</code></pre> <p>Additional parameters may be needed for the <code>flashrom</code> command depending on the DUT. Documentation describing the exact command to flash the specific platform is always available in localization: <code>Supported hardware</code> -&gt; <code>Platform name</code> -&gt; <code>Initial Deployment</code>.</p> </li> <li> <p>Power off the DUT.</p> </li> <li>Repeat steps 2-6.</li> <li> <p>Run the following command to check the firmware version:</p> <pre><code>dmidecode -t 0\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <p>The output of <code>dmidecode</code> command should contain information about the current firmware. The current firmware version should be equal to the binary version, which you were flashing.</p> <p>Example output:</p> <pre><code>Version: Dasharo (coreboot+UEFI) v1.1.0\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#dts007001-update-device-firmware-from-dts-shell-by-using-fwupd-works-correctly","title":"DTS007.001 Update device firmware from DTS Shell by using fwupd works correctly","text":"<p>Test description</p> <p>This test aims to verify whether there is the possibility to update the DUT firmware by using fwupd in DTS.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Plug the USB stick with DTS into the USB slot on the DUT.</li> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the USB stick with DTS using the arrow keys and press <code>Enter</code>.</li> <li>Wait for <code>Enter an option:</code>.</li> <li>Type in <code>9</code> and press <code>Enter</code>.</li> <li> <p>Run the following commands to update the firmware to the latest version:</p> <pre><code>fwupdmgr refresh\nfwupdmgr update\n</code></pre> </li> <li> <p>Power off the DUT.</p> </li> <li>Repeat steps 2-6.</li> <li> <p>Run the following command to check the firmware version:</p> <pre><code>dmidecode -t 0\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <p>The output of <code>dmidecode</code> command should contain information about the current firmware. The current firmware version should be equal to the binary version, which you were flashing.</p> <p>Example output:</p> <pre><code>Version: Dasharo (coreboot+UEFI) v1.1.0\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#dts008001-flash-device-ec-firmware-by-using-dts-built-in-script-works-correctly","title":"DTS008.001 Flash device EC firmware by using DTS built-in script works correctly","text":"<p>Test description</p> <p>This test aims to verify whether there is the possibility to flash the DUT EC firmware by using the built-in script in DTS.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Plug the USB stick with DTS into the USB slot on the DUT.</li> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the USB stick with DTS using the arrow keys and press <code>Enter</code>.</li> <li>Wait for <code>Enter an option:</code>.</li> <li>Proceed with Dasharo EC     Transition.</li> </ol> <p>Expected result</p> <ol> <li>After the flashing procedure itself, the DUT should be able to boot.</li> <li>The EC firmware version, after checking the method described in the     above-mentioned     documentation,     should correspond to the latest version.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#dts009001-update-device-ec-firmware-by-using-dts-works-correctly","title":"DTS009.001 Update device EC firmware by using DTS works correctly","text":"<p>Test description</p> <p>This test aims to verify whether there is the possibility to update the DUT EC firmware by using dasharo_ectool in DTS.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Plug the USB stick with DTS into the USB slot on the DUT.</li> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the USB stick with DTS using the arrow keys and press <code>Enter</code>.</li> <li>Wait for <code>Enter an option:</code>.</li> <li>Type in <code>9</code> and press <code>Enter</code>.</li> <li>Proceed with Dasharo EC     Update.</li> </ol> <p>Expected result</p> <ol> <li>After the updating firmware procedure itself, the DUT should be able to boot.</li> <li>The EC firmware version, after checking the method described in the     above-mentioned     documentation,     should correspond to the binary version used.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#dts010001-test-firmware-update-in-pre-release-dts-over-ipxe","title":"DTS010.001 Test firmware update in pre-release DTS over iPXE","text":"<p>Test description</p> <p>This test verifies that DTS is able to correctly update device firmware from the previous to the currently tested version.</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Ensure that the previous firmware version (the one before the one you're    currently testing) is flashed to the DUT.</li> <li>If custom boot logo functionality is supported, ensure that a custom logo    is installed. Follow the steps outlined    here.</li> <li> <p>Ensure that the DUT is connected to a wired network.</p> <p>Use an Ethernet cable plugged into the DUT's onboard NIC. USB networking adapters may not work correctly, and wireless (Wi-Fi) connection is not supported.</p> </li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the <code>SETUP_MENU_KEY</code> to enter the Dasharo setup menu.</li> <li>In the setup menu, navigate to <code>Dasharo System Features</code> -&gt; <code>Networking    Options</code> and ensure that the option <code>Enable Network Boot</code> is enabled.<ol> <li>If you changed the setting, press <code>F10</code> to save changes.</li> </ol> </li> <li>Exit to the setup menu front page by pressing the <code>Esc</code> key.</li> <li>Select <code>Reset</code> to reboot the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the boot device selection menu.</li> <li> <p>Select <code>iPXE Network Boot</code> to enter the iPXE menu.</p> <p>The option may have a different name on some platforms.</p> </li> <li> <p>Select <code>iPXE Shell</code> to drop to shell.</p> </li> <li> <p>Type in the following commands:</p> <pre><code>dhcp\nchain https://boot.dasharo.com/dts/dts-rc.ipxe\n</code></pre> </li> <li> <p>Press the <code>Enter</code> key to begin downloading DTS.</p> </li> <li>If required, enter the appropriate credentials in the DTS menu.</li> </ol> <p>Credential for DPP releases are not publicly available. If you need DPP credentials for testing DTS, consult your TL.</p> <ol> <li>Select the <code>Update Dasharo Firmware</code> option to check for update.</li> <li>When asked for confirmation, confirm to allow the update process to continue.</li> <li>When the update is completed, reboot the DUT.</li> <li>Hold down the <code>SETUP_MENU_KEY</code> to enter the setup menu again.</li> </ol> <p>Expected result</p> <ol> <li>A DTS release candidate is correctly booted over the network.</li> <li>A firmware update is available and installed to the DUT without errors.</li> <li>The device is able to boot after the update is applied.</li> <li>If custom boot logo functionality is supported, the logo is displayed after    the update.</li> <li>After the update, in the setup menu, the expected firmware version is    displayed.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/326b-firmware-building-locally/","title":"Dasharo Compatibility: Firmware locally building and flashing","text":""},{"location":"unified-test-documentation/dasharo-compatibility/326b-firmware-building-locally/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> <li>Make yourself familiar with Building manual procedure dedicated for     the relevant platform:<ul> <li>NovaCustom laptops</li> </ul> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/326b-firmware-building-locally/#flb001001-firmware-locally-build","title":"FLB001.001 Firmware locally build","text":"<p>Test description</p> <p>This test aims to verify whether there is a possibility to build firmware on the local machine, based on <code>Build manual</code> procedure dedicated to the platform.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Ubuntu</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Based on the dedicated documentation build firmware.</li> <li>Check if the binary file, after finishing the building process, is available     in the <code>build</code> location.</li> </ol> <p>Expected result</p> <p>The <code>build</code> location should contain the binary file, which size is equal to the flash chip size.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/326b-firmware-building-locally/#flb002001-flash-locally-built-firmware","title":"FLB002.001 Flash locally built firmware","text":"<p>Test description</p> <p>This test aims to verify whether there is a possibility to flash the locally built firmware to the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Ubuntu</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Localize the firmware, which was built in the <code>FLB001.001</code> test case.</li> <li> <p>Flash the firmware by using the internal programmer and <code>flashrom</code> tool. If     DUT is already flashed with the Dasharo firmware, the following command     should be used:</p> <pre><code>flashrom -p internal -w [path-to-binary] --fmap -i RW_SECTION_A\n</code></pre> <p>Otherwise, the following command should be used:</p> <pre><code>flashrom -p internal -w [path-to-binary] --ifd -i bios\n</code></pre> </li> <li> <p>Reboot the DUT.</p> </li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command to verify the results:</p> <pre><code>sudo dmidecode -t bios | grep Version\n</code></pre> </li> </ol> <p>Expected result</p> <p>The output of <code>dmidecode</code> command should contain information about the current firmware. The current firmware version should be equal to the latest released firmware version.</p> <p>Example output:</p> <pre><code>Version: Dasharo (coreboot+UEFI) v1.1.0\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/327-embedded_controller_flashing/","title":"Dasharo Compatibility: Embedded controller flashing","text":""},{"location":"unified-test-documentation/dasharo-compatibility/327-embedded_controller_flashing/#ecf001001-ec-firmware-external-flashing","title":"ECF001.001 EC firmware external flashing","text":"<p>Test description</p> <p>This test aims to verify whether there is the possibility to flash the DUT EC firmware externally using Arduino.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> <li>Make yourself familiar with     EC recovery documentation.</li> </ol> <p>Test steps</p> <ol> <li>Perform EC firmware flashing in accordance with the EC Recovery section</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>The output of the last command should contain information about the correctly performed procedure:</p> <pre><code>Successfully programmed SPI ROM\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/328-logo-customization-functionality/","title":"Dasharo Compatibility: Logo customization functionality","text":""},{"location":"unified-test-documentation/dasharo-compatibility/328-logo-customization-functionality/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Get familiar with    Logo customization procedure</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/328-logo-customization-functionality/#lcm001001-replace-logo-in-existing-image-and-flashing-firmware","title":"LCM001.001 Replace logo in existing image and flashing firmware","text":"<p>Test description</p> <p>The test aims to verify whether replacing the logo in the existing image is possible and, whether after flashing the DUT with the new image, the new logo will be shown properly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> <li>Current Dasharo firmware dedicated for the platform.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the <code>iPXE Network boot</code> option using the arrow keys and press <code>Enter</code>.</li> <li>Select the <code>iPXE Shell</code> option using the arrow keys and press <code>Enter</code>.</li> <li> <p>Configure communication interface by using the following command:</p> <pre><code>dhcp\n</code></pre> </li> <li> <p>Connect to the DTS ipxe menu by using the following command:</p> <pre><code>chain http://boot.3mdeb.com/dts.ipxe\n</code></pre> </li> <li> <p>Wait for <code>Enter an option:</code>.</p> </li> <li>Type in <code>S</code> and press <code>Enter</code>.</li> <li>Based on the    dedicated documentation    replace the logo in an existing image.</li> <li>Reboot the DUT and observe the boot logo.</li> </ol> <p>Expected result</p> <p>During the DUT booting process, custom logo should appear on the screen.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/328-logo-customization-functionality/#lcm002001-build-image-with-custom-logo-and-flashing-firmware","title":"LCM002.001 Build image with custom logo and flashing firmware","text":"<p>Test description</p> <p>This test aims to verify whether building an image with the custom logo is possible and, whether after flashing the DUT with the new image, the new logo will be shown properly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Based on the     dedicated documentation     build firmware with the custom logo.</li> <li> <p>Flash the firmware by using the internal programmer and <code>flashrom</code> tool. If     DUT is already flashed with the Dasharo firmware and only the logo should     be replaced, the following command should be used:</p> <pre><code>sudo flashrom -p internal --fmap -i BOOTSPLASH -w [path]\n</code></pre> <p>If also the procedure of Dasharo firmware updating should be performed, the following command should be used:</p> <pre><code>flashrom -p internal -w [path-to-binary] --fmap -i RW_SECTION_A\n</code></pre> <p>In any other cases, the following command should be used:</p> <pre><code>flashrom -p internal -w [path-to-binary] --ifd -i bios\n</code></pre> </li> <li> <p>Reboot DUT.</p> </li> </ol> <p>Expected result</p> <p>During the DUT booting process, custom logo should appear on the screen.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/328-logo-customization-functionality/#lcm003001-attempt-to-flash-firmware-with-improper-image","title":"LCM003.001 Attempt to flash firmware with improper image","text":"<p>Test description</p> <p>This test aims to verify whether the attempt to flash the DUT with firmware with an improper logo is possible but will result in a fallback to the default logo.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Based on the     dedicated documentation     build firmware with the logo, that that does not meet the     Quality criteria.</li> <li> <p>Flash the firmware by using the internal programmer and <code>flashrom</code> tool. If     DUT is already flashed with the Dasharo firmware and only the logo should     be replaced, the following command should be used:</p> <pre><code>sudo flashrom -p internal --fmap -i BOOTSPLASH -w [path]\n</code></pre> <p>If also the procedure of Dasharo firmware updating should be performed, the following command should be used:</p> <pre><code>flashrom -p internal -w [path-to-binary] --fmap -i RW_SECTION_A\n</code></pre> <p>In any other cases, the following command should be used:</p> <pre><code>flashrom -p internal -w [path-to-binary] --ifd -i bios\n</code></pre> </li> <li> <p>Reboot DUT.</p> </li> </ol> <p>Expected result</p> <p>During the DUT booting process, the default logo should appear on the screen.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/328-logo-customization-functionality/#lcm004001-custom-logo-persists-after-firmware-update","title":"LCM004.001 Custom logo persists after firmware update","text":"<p>Test description</p> <p>This test aims to verify whether after updating the platform's firmware with the <code>fwupd</code> command, the custom added logo remains unaffected and continues to display.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot <code>Dasharo Tools Suite</code></li> <li>Type in <code>9</code> to gain shell access.</li> <li>Basing on the    dedicated documentation    replace the logo in an existing image.</li> <li>Run <code>dasharo-deploy update</code></li> <li>Reboot the DUT and observe the boot logo.</li> </ol> <p>Expected result</p> <p>During the DUT booting process, the custom logo replacement should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/341-pfSense-support/","title":"Dasharo Compatibility: pfSense support","text":""},{"location":"unified-test-documentation/dasharo-compatibility/341-pfSense-support/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/341-pfSense-support/#pfs001001-pfsense-stable-serial-output-installation-on-hard-disk","title":"PFS001.001 pfSense stable (serial output) installation on Hard Disk","text":"<p>Test description</p> <p>This test aims to verify that PfSense stable (serial output) could be installed on the hard disk on the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = pfSense stable</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>According to the Documentation    perform the OS installation process.</li> </ol> <p>Expected result</p> <p>The information about successful installation should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/341-pfSense-support/#pfs001002-boot-pfsense-stable-serial-output-from-hard-disk","title":"PFS001.002 Boot pfSense stable (serial output) from Hard Disk","text":"<p>Test description</p> <p>This test aims to verify that pfSense stable (serial output) could be booted from the hard disk on the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = pfSense stable</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the device on which the system was previously    installed.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/341-pfSense-support/#pfs002001-pfsense-stable-vga-output-installation-on-hard-disk","title":"PFS002.001 pfSense stable (VGA output) installation on Hard Disk","text":"<p>Test description</p> <p>This test aims to verify that pfSense stable (VGA output) could be installed on the hard disk on the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = pfSense stable</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>According to the Documentation     perform the OS installation process.</li> </ol> <p>Expected result</p> <p>The information about successful installation should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/341-pfSense-support/#pfs002002-boot-pfsense-stable-vga-output-from-hard-disk","title":"PFS002.002 Boot pfSense stable (VGA output) from Hard Disk","text":"<p>Test description</p> <p>This test aims to verify that pfSense stable (VGA output) could be booted from the hard disk on the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = pfSense stable</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the device on which the system was previously    installed.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/342-OPNsense-support/","title":"Dasharo Compatibility: OPNsense support","text":""},{"location":"unified-test-documentation/dasharo-compatibility/342-OPNsense-support/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/342-OPNsense-support/#opn001001-opnsense-stable-serial-output-installation-on-hard-disk","title":"OPN001.001 OPNsense stable (serial output) installation on Hard Disk","text":"<p>Test description</p> <p>This test aims to verify that OPNsense stable (serial output) could be installed on the hard disk on the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = OPNsense stable</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>According to the Documentation    perform the OS installation process.</li> </ol> <p>Expected result</p> <p>The information about successful installation should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/342-OPNsense-support/#opn001002-boot-opnsense-stable-serial-output-from-hard-disk","title":"OPN001.002 Boot OPNsense stable (serial output) from Hard Disk","text":"<p>Test description</p> <p>This test aims to verify that OPNsense stable serial could be booted from the hard disk on the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = OPNsense stable</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the device on which the system was previously    installed.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/342-OPNsense-support/#opn002001-opnsense-stable-vga-output-installation-on-hard-disk","title":"OPN002.001 OPNsense stable (VGA output) installation on Hard Disk","text":"<p>Test description</p> <p>This test aims to verify that OPNsense stable (VGA output) could be installed on the hard disk on the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = OPNsense stable</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>According to the Documentation    perform the OS installation process.</li> </ol> <p>Expected result</p> <p>The information about successful installation should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/342-OPNsense-support/#opn002002-boot-opnsense-stable-vga-output-from-hard-disk","title":"OPN002.002 Boot OPNsense stable (VGA output) from Hard Disk","text":"<p>Test description</p> <p>This test aims to verify that OPNsense stable (VGA output) could be booted from the hard disk on the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = OPNsense stable</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the device on which the system was previously    installed.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/343-super-I-O-initialization-on-QubesOS/","title":"Dasharo compatibility: Super I/O initialization - QubesOS","text":""},{"location":"unified-test-documentation/dasharo-compatibility/343-super-I-O-initialization-on-QubesOS/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/343-super-I-O-initialization-on-QubesOS/#pps001001-ps2-keyboard-detection","title":"PPS001.001 PS/2 keyboard detection","text":"<p>Test description</p> <p>This test aims to verify that the external PS/2 keyboard is detected correctly by the <code>OPERATING_SYSTEM</code> and that all basic keys work according to their labels.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = QubesOS stable</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> <li>Install <code>libinput-tools</code> in <code>dom0</code> on the DUT.</li> <li>Connect the external PS/2 keyboard to the PS/2 port.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window in <code>dom0</code> and run the following command:</p> <pre><code>sudo dmesg | grep -i PS/2\n</code></pre> </li> <li> <p>Run the following command in the terminal:</p> <pre><code>libinput debug-events --show-keycodes\n</code></pre> </li> <li> <p>Test the alphanumeric keys and note the generated keycodes.</p> </li> <li>Test non-alphanumeric keys and verify that they generate the correct    keycodes.</li> <li>Test key combinations with the <code>Shift</code>, <code>Ctrl</code> and <code>Alt</code> modifier keys    (this tests 2-key rollover).</li> </ol> <p>Expected result</p> <ol> <li>The external PS/2 keyboard is detected in OS.</li> <li>All standard keyboard keys generate the correct keycodes and events as per    their labels.</li> <li>Key combinations are detected correctly.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/344-power-operations/","title":"Dasharo compatibility: Device power control operations","text":""},{"location":"unified-test-documentation/dasharo-compatibility/344-power-operations/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/344-power-operations/#dpc001001-reset-button-qubesos","title":"DPC001.001 Reset button (QubesOS)","text":"<p>Test description</p> <p>This test aims to verify that the reset button works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = QubesOS stable</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Observe the power LED and use the reset button.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <ol> <li>The DUT should perform a reset, the power LED should be on all the time.</li> <li>The DUT shouldn't perform a power cycle, the power LED shouldn't be off even    for a moment.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/345-display-resolution/","title":"Dasharo compatibility: Display resolution - QubesOS","text":""},{"location":"unified-test-documentation/dasharo-compatibility/345-display-resolution/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/345-display-resolution/#dsr001001-changing-the-display-resolution","title":"DSR001.001 Changing the display resolution","text":"<p>Test description</p> <p>This test aims to verify that the display resolution could be changed in the <code>OPERATING_SYSTEM</code> and that the GUI is displayed correctly after this change.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = QubesOS stable</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> <li>Connect any display.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window in <code>dom0</code> and run the following command:</p> <pre><code>xrandr -s &lt;display_resolution&gt;\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <ol> <li>Changing the display resolution is possible.</li> <li>After changing the resolution, all icons and subtitles should be displayed    correctly.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/346-SATA-hotplug-detection/","title":"Dasharo compatibility: SATA hot plug","text":""},{"location":"unified-test-documentation/dasharo-compatibility/346-SATA-hotplug-detection/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/346-SATA-hotplug-detection/#sht001001-sata-hot-plug-firmware","title":"SHT001.001 SATA hot plug (firmware)","text":"<p>Test description</p> <p>This test aims to verify that the disk connected to the SATA port could be detected after hot-plug.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> <li>Any operating system should be installed on the SATA disk.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot Menu.</li> <li>Select the <code>UEFI Shell</code> option using the arrow keys and press <code>Enter</code>.</li> <li> <p>Execute the following command in the shell:</p> <pre><code>map -t hd\n</code></pre> </li> <li> <p>Note the results.</p> </li> <li>Connect the disk to the SATA port.</li> <li> <p>Execute the following command in the shell:</p> <pre><code>map -t hd -r\n</code></pre> </li> </ol> <p>Expected result</p> <ol> <li>The output of the first command should contain mapping table for all hard     disks connected to the device.</li> <li>The output of the second command should contain refreshed mapping table for     all hard disks connected to the device.</li> <li>The refreshed list should contain additional item - mounted SATA disk.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/346-SATA-hotplug-detection/#sht001002-sata-hot-plug-ubuntu","title":"SHT001.002 SATA hot plug (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the disk connected to the SATA port could be detected after hot-plug.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Connect the disk to the SATA port.</li> <li> <p>Check that the connected disk is detected by running the following command:</p> <pre><code>sudo parted -l\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <p>The SATA disk should be detected in OS, example output:</p> <pre><code>(...)\nModel: ATA SSDPR-CL100-240- (scsi)\nDisk /dev/sda: 240GB\nSector size (logical/physical): 512B/512B\nPartition Table: gpt\nDisk Flags:\n\nNumber  Start   End     Size    File system  Name                  Flags\n 1      1049kB  538MB   537MB   fat32        EFI System Partition  boot, esp\n 2      538MB   240GB   240GB   ext4\n(...)\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/346-SATA-hotplug-detection/#sht001003-sata-hot-plug-windows","title":"SHT001.003 SATA hot plug (Windows)","text":"<p>Test description</p> <p>This test aims to verify that the disk connected to the SATA port could be detected after hot-plug.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Connect the disk to the SATA port.</li> <li> <p>Check that the connected disk is detected by running the following command:</p> <pre><code>Get-WMIObject -Class Win32_DiskDrive\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <p>The SATA disk should be detected in OS, example output:</p> <pre><code>(...)\nPartitions : 4\nDeviceID   : \\\\.\\PHYSICALDRIVE0\nModel      : SSDPR-CL100-240-G2\nSize       : 240054796800\nCaption    : SSDPR-CL100-240-G2\n(...)\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/347-sign-of-life/","title":"Dasharo compatibility: Sign of life","text":""},{"location":"unified-test-documentation/dasharo-compatibility/347-sign-of-life/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/347-sign-of-life/#sol001001-sol-string-shows-dasharo-firmware-and-ec-version","title":"SOL001.001 SOL string shows Dasharo firmware and EC version","text":"<p>Test description</p> <p>This test aims to verify that the information about the version of Dasharo firmware and Dasharo EC firmware is recognized correctly and displayed during the boot phase.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>EC firmware</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the Sign of life string.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>During the boot phase, the information about the version of Dasharo firmware and Dasharo EC firmware should be displayed.</p> <p>Example output:</p> <pre><code>Firmware version: Dasahro (coreboot+UEFI) v1.5.0\nEC firmware version: 2023-03-20_c398446\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/347-sign-of-life/#sol002001-sol-string-shows-information-about-proprietary-ec","title":"SOL002.001 SOL string shows information about proprietary EC","text":"<p>Test description</p> <p>This test aims to verify that the information about the version of Dasharo firmware and proprietary EC firmware is recognized correctly and displayed during the boot phase.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>EC firmware</code> = Proprietary</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for the Sign of life string.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>During the boot phase, the information about the version of Dasharo firmware and proprietary EC firmware should be displayed. In addition, the prompt asking for updated EC firmware should be displayed also.</p> <p>Example output:</p> <pre><code>Firmware version: Dasahro (coreboot+UEFI) v1.5.0\nEC firmware version: 1.07.02\nProprietary EC firmware detected!\nPlease update your EC firmware per docs.dasharo.com instructions!\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/348-proxmox-support/","title":"Dasharo Compatibility: Proxmox support","text":""},{"location":"unified-test-documentation/dasharo-compatibility/348-proxmox-support/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/348-proxmox-support/#pve001001-proxmox-virtual-environment-stable-installation-on-hard-disk","title":"PVE001.001 Proxmox Virtual Environment stable installation on Hard Disk","text":"<p>Test description</p> <p>This test aims to verify that Proxmox VE stable could be installed on the hard disk on the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Proxmox VE stable</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>According to the Documentation    perform the OS installation process.</li> </ol> <p>Expected result</p> <p>The information about successful installation should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/348-proxmox-support/#pve001002-boot-proxmox-virtual-environment-stable-from-hard-disk","title":"PVE001.002 Boot Proxmox Virtual Environment stable from Hard Disk","text":"<p>Test description</p> <p>This test aims to verify that Proxmox VE stable could be booted from the hard disk on the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Proxmox VE stable</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the device on which the system was previously    installed.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/349-ubuntu-server-support/","title":"Dasharo Compatibility: Ubuntu Server support","text":""},{"location":"unified-test-documentation/dasharo-compatibility/349-ubuntu-server-support/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/349-ubuntu-server-support/#uss001001-ubuntu-server-stable-installation-on-hard-disk","title":"USS001.001 Ubuntu Server stable installation on Hard Disk","text":"<p>Test description</p> <p>This test aims to verify that Ubuntu Server stable could be installed on the hard disk on the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu Server stable</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>According to the Documentation    perform the OS installation process.</li> </ol> <p>Expected result</p> <p>The information about successful installation should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/349-ubuntu-server-support/#uss001002-boot-ubuntu-server-stable-from-hard-disk","title":"USS001.002 Boot Ubuntu Server stable from Hard Disk","text":"<p>Test description</p> <p>This test aims to verify that Ubuntu Server stable could be booted from the hard disk on the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu Server stable</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the device on which the system was previously    installed.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/357-bios-menu-function-keys/","title":"Dasharo Compatibility: BIOS menu function keys","text":""},{"location":"unified-test-documentation/dasharo-compatibility/357-bios-menu-function-keys/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/357-bios-menu-function-keys/#bmf001001-reset-to-defaults-option","title":"BMF001.001 Reset to Defaults option","text":"<p>Test description</p> <p>This test aims to verify that the <code>F9</code> key feature properly reset to Defaults all Dasharo System Features settings.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While booting, press the <code>SETUP_MENU_KEY</code> to enter Setup Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu option.</li> <li>Enter the any of submenus eg. <code>Power Management Options</code>.</li> <li>Verify that the <code>F9=Reset to Defaults</code> entry is displayed at the bottom of    the screen.</li> <li>Press <code>F9</code> to reset options to defaults.</li> <li>Press <code>Y</code> to confirm saving the changes.</li> <li>Go back to the main menu using the <code>ESC</code> key. If necessary - press <code>Y</code> to    confirm saving the changes again.</li> <li>Select the <code>Reset</code> option to apply the settings and reboot.</li> <li>While booting, press the <code>SETUP_MENU_KEY</code> to enter Setup Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu option.</li> <li>Check the state of each option in each submenu.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <ol> <li>The <code>F9=Reset to Defaults</code> entry is displayed in each submenu of Dasharo    System Features.</li> <li>After using the <code>F9</code> key, all <code>Dasharo System Features</code> options should be set    to default. All options covered by this functionality can be found    here.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/358-suspend-mechanism-switching-S0ix-S3/","title":"Dasharo Compatibility: Suspend mechanism switching (S0ix/S3)","text":""},{"location":"unified-test-documentation/dasharo-compatibility/358-suspend-mechanism-switching-S0ix-S3/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/358-suspend-mechanism-switching-S0ix-S3/#sms001001-suspend-to-idle-s0ix-check-ubuntu","title":"SMS001.001 Suspend to Idle (S0ix) check (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify whether the Suspend to Idle (S0ix) option selected in the BIOS firmware is correctly recognised in the OS.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Ubuntu</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Enter the BIOS setup using <code>BIOS_SETUP_KEY</code>.</li> <li>Inside the BIOS setup, navigate to <code>Dasharo System Features</code> -&gt;     <code>Power Management Options</code> -&gt; <code>Platform Sleep Type</code> and choose the option     <code>Suspend to Idle (S0ix)</code>.</li> <li>Press <code>F10</code> and confirm with <code>y</code> key to save selected settings.</li> <li>Select <code>reset</code> option to reboot the system.</li> <li>After the system reboots, log into the system by using the proper login and     password.</li> <li> <p>Open a terminal window and execute the following command to confirm that     Suspend to Idle (S0ix) mode is enabled and properly recognised in the OS:</p> <pre><code>sudo cat /sys/power/mem_sleep\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <p>The output from the command above should contain the phrase <code>s2idle</code> enclosed in square brackets, indicating that the Suspend to Idle (S0ix) mode is enabled.</p> <p>Example output:</p> <pre><code>[s2idle] shallow\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/358-suspend-mechanism-switching-S0ix-S3/#sms001002-suspend-to-ram-s3-check-ubuntu","title":"SMS001.002 Suspend to RAM (S3) check (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify whether the Suspend to RAM (S3) option selected in the BIOS firmware is correctly recognised in the OS.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Ubuntu</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Enter the BIOS setup using <code>BIOS_SETUP_KEY</code>.</li> <li>Inside the BIOS setup, navigate to <code>Dasharo System Features</code> -&gt;     <code>Power Management Options</code> -&gt; <code>Platform Sleep Type</code> and choose the option     <code>Suspend to RAM (S3)</code>.</li> <li>Press <code>F10</code> and confirm with <code>y</code> key to save selected settings.</li> <li>Select <code>reset</code> option to reboot the system.</li> <li>After the system reboots, log into the system by using the proper login and     password.</li> <li> <p>Open a terminal window and execute the following command to confirm that     Suspend to RAM (S3) mode is enabled and properly recognised in the OS:</p> <pre><code>sudo cat /sys/power/mem_sleep\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <p>The output from the command above should contain the phrase <code>deep</code> enclosed in square brackets, indicating that the Suspend to RAM (S3) mode is enabled.</p> <p>Example output:</p> <pre><code>s2idle [deep]\n</code></pre>"},{"location":"unified-test-documentation/dasharo-compatibility/359-boot-blocking/","title":"Dasharo Compatibility: Battery boot block","text":""},{"location":"unified-test-documentation/dasharo-compatibility/359-boot-blocking/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/359-boot-blocking/#bbb001001-boot-blocking-charger-disconnected-ubuntu","title":"BBB001.001 Boot blocking (charger disconnected) (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that booting is blocked when the battery level is below 5% with charger disconnected from the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Make sure the charger is not plugged into the DUT.</li> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Open a terminal window and install <code>stress-ng</code> package by executing following     command:</li> </ol> <pre><code>sudo apt install stress-ng\n</code></pre> <ol> <li>Open a terminal window and run following bash script:</li> </ol> <pre><code>get_battery_level() {\n    battery_level=$(cat /sys/class/power_supply/BAT0/capacity)\n    echo \"$battery_level\"\n}\ntarget_battery_level=3\nwhile true; do\n    current_battery_level=$(get_battery_level)\n    echo \"Current battery level: $current_battery_level%\"\n    if [ \"$current_battery_level\" -le \"$target_battery_level\" ]; then\n        echo \"Battery level reached 3%. Stopping stress-ng.\"\n        break\n    fi\n    stress-ng --cpu 0 --timeout 10s\ndone\n</code></pre> <ol> <li>After the script finished working, reboot the DUT.</li> </ol> <p>Expected result</p> <ol> <li>The bash script reads current battery charge level and stresses the CPU until     the battery charge level reaches below 5%. Example output:</li> </ol> <pre><code>Current battery level: 92%\nstress-ng: info:  [25309] setting to a 10 secs run per stressor\nstress-ng: info:  [25309] dispatching hogs: 16 cpu\n</code></pre> <ol> <li> <p>After reboot, booting into the OS should be blocked and following warning     message should appear:</p> <p></p> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/359-boot-blocking/#bbb001002-boot-blocking-charger-connected-ubuntu","title":"BBB001.002 Boot blocking (charger connected) (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that booting is not blocked when the battery level is below 5% with charger connected to the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Make sure the charger is not plugged into the DUT.</li> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Open a terminal window and install <code>stress-ng</code> package by executing following     command:</li> </ol> <pre><code>sudo apt install stress-ng\n</code></pre> <ol> <li>Open a terminal window and run following bash script:</li> </ol> <pre><code>get_battery_level() {\n    battery_level=$(cat /sys/class/power_supply/BAT0/capacity)\n    echo \"$battery_level\"\n}\ntarget_battery_level=3\nwhile true; do\n    current_battery_level=$(get_battery_level)\n    echo \"Current battery level: $current_battery_level%\"\n    if [ \"$current_battery_level\" -le \"$target_battery_level\" ]; then\n        echo \"Battery level reached 3%. Stopping stress-ng.\"\n        break\n    fi\n    stress-ng --cpu 0 --timeout 10s\ndone\n</code></pre> <ol> <li>After the script finished working, plug the charger into the DUT.</li> <li>Reboot the DUT.</li> </ol> <p>Expected Result</p> <ol> <li>After reboot, the warning message should not appear and the DUT should boot     normally.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/359-boot-blocking/#bbb002001-battery-not-connected-warning-firmware","title":"BBB002.001 Battery not connected warning (Firmware)","text":"<p>Test description</p> <p>This test aims to verify whether a warning message appears when the battery is disconnected from the DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li> <p>Unscrew the bottom cover from the DUT.</p> <p></p> </li> <li> <p>Disconnect the battery (1)</p> <p></p> </li> <li> <p>Reattach the bottom cover and flip the DUT over.</p> </li> <li>Plug the charger into the DUT.</li> <li>Power on the DUT.</li> </ol> <p>Expected result</p> <ol> <li> <p>After powering on the DUT, following warning message should appear:</p> <p></p> </li> <li> <p>After pressing enter or passing the timeout, the DUT should continue booting.</p> </li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/360-power-after-fail/","title":"Dasharo Compatibility: Power State After Power Failure","text":""},{"location":"unified-test-documentation/dasharo-compatibility/360-power-after-fail/#psf001001-check-power-state-after-power-failure-default-state-firmware","title":"PSF001.001 Check Power State After Power Failure default state (firmware)","text":"<p>Test description</p> <p>This BIOS setup feature allows users to determine the system's power state after a power failure. Users can choose between restoring the previous power state or always returning to a powered off state. This test ensures that the option is present, and the default state of this option after flashing is correct.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup     Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Power Management Options</code> submenu.</li> <li>Verify the <code>Power state after power failure</code> field.</li> </ol> <p>Expected result</p> <p>The <code>Power state after power failure</code> field should inform that the current Power state after power failure is <code>Powered Off</code>.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/360-power-after-fail/#psf002001-powered-off-state-restoration-test","title":"PSF002.001 Powered Off State Restoration Test","text":"<p>Test description</p> <p>This test verifies that the <code>Powered Off</code> setting works correctly. After we cut and restore power, the machine should not power on by itself.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup     Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Power Management Options</code> submenu.</li> <li>Set the <code>Power state after power failure</code> field to <code>Powered Off</code>.</li> <li>Simulate a power failure by cutting power to the system.</li> <li>Restore power and verify that the system does not attempt to start on its own.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>The system should remain in the power off state upon power restoration.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/360-power-after-fail/#psf003001-powered-on-state-restoration-test","title":"PSF003.001 Powered On State Restoration Test","text":"<p>Test description</p> <p>This test verifies that the <code>Powered On</code> setting works correctly. After we cut and restore power, the machine should not power on by itself.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup     Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Power Management Options</code> submenu.</li> <li>Set the <code>Power state after power failure</code> field to <code>Powered On</code>.</li> <li>Simulate a power failure by cutting power to the system.</li> <li>Restore power and verify that the system attempts to power on without any external prompt.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>The system should attempt to power on upon power restoration.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/360-power-after-fail/#psf004001-previous-power-state-restoration-test-powered-off","title":"PSF004.001 Previous Power State Restoration Test - Powered Off","text":"<p>Test description</p> <p>This test verifies that the <code>The state at the moment of power failure</code> setting works correctly if the machine was powered off prior to the failure. After we cut and restore power, the machine should remain powered off.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup     Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Power Management Options</code> submenu.</li> <li>Set the <code>Power state after power failure</code> field to <code>The state at the moment of power failure</code>.</li> <li>Power off the DUT.</li> <li>Simulate a power failure by cutting power to the system.</li> <li>Restore power and verify that the system does not attempt to start on its own.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>The system should remain in the powered off state upon power restoration.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/360-power-after-fail/#psf004002-previous-power-state-restoration-test-powered-on","title":"PSF004.002 Previous Power State Restoration Test - Powered On","text":"<p>Test description</p> <p>This test verifies that the <code>The state at the moment of power failure</code> setting works correctly if the machine was powered on prior to the failure. After we cut and restore power, the machine should attempt to power on without any external prompt.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup     Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Power Management Options</code> submenu.</li> <li>Set the <code>Power state after power failure</code> field to <code>The state at the moment of power failure</code>.</li> <li>Do not power off the DUT.</li> <li>Simulate a power failure by cutting power to the system.</li> <li>Restore power and verify that the system attempts to power on without any external prompt.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>The system should attempt to power on upon power restoration.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/361-esp-scanning/","title":"Dasharo Compatibility: ESP Partition Scanning","text":""},{"location":"unified-test-documentation/dasharo-compatibility/361-esp-scanning/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> </ol> <p>The purpose of this test is to verify that the EFI partition is scanned for any OS-specific folders and .efi files, and that corresponding boot menu entries are created for them. The list of supported .efi files and their boot menu entries is as follows:</p> <ul> <li>\\EFI\\Microsoft\\Boot\\bootmgfw.efi - Windows Boot Manager (on <code>&lt;disk_name&gt;</code>)</li> <li>\\EFI\\Suse\\elilo.efi - Suse Boot Manager (on <code>&lt;disk_name&gt;</code>)</li> <li>\\EFI\\Ubuntu\\grubx64.efi Ubuntu (on <code>&lt;disk_name&gt;</code>)</li> <li>\\EFI\\Ubuntu\\shimx64.efi - Ubuntu (on <code>&lt;disk_name&gt;</code>)</li> <li>\\EFI\\Redhat\\elilo.efi - RedHat Boot Manager (on <code>&lt;disk_name&gt;</code>)</li> <li>\\EFI\\Redhat\\grubx64.efi - RedHat (on <code>&lt;disk_name&gt;</code>)</li> <li>\\EFI\\Redhat\\shimx64.efi - RedHat (on <code>&lt;disk_name&gt;</code>)</li> <li>\\EFI\\Fedora\\shimx64.efi - Fedora (on <code>&lt;disk_name&gt;</code>)</li> <li>\\EFI\\Fedora\\grub64.efi - Fedora (on <code>&lt;disk_name&gt;</code>)</li> <li>\\EFI\\Centos\\shimx64.efi - CentOS (on <code>&lt;disk_name&gt;</code>)</li> <li>\\EFI\\Centos\\grubx64.efi - CentOS (on <code>&lt;disk_name&gt;</code>)</li> <li>\\EFI\\opensuse\\grubx64.efi - OpenSuse (on <code>&lt;disk_name&gt;</code>)</li> <li>\\EFI\\debian\\grubx64.efi - Debian (on <code>&lt;disk_name&gt;</code>)</li> <li>\\EFI\\qubes\\shimx64.efi - Qubes OS (on <code>&lt;disk_name&gt;</code>)</li> <li>\\EFI\\qubes\\grubx64.efi - Qubes OS (on <code>&lt;disk_name&gt;</code>)</li> <li>\\EFI\\DTS\\grubx64.efi\" - Dasharo Tools Suite (on <code>&lt;disk_name&gt;</code>) (populated  regardless of removable media state)</li> </ul>"},{"location":"unified-test-documentation/dasharo-compatibility/361-esp-scanning/#esp001001-esp-scan-with-os-specific-efi-files-added","title":"ESP001.001 ESP Scan with OS-specific .efi files added","text":"<p>Test description</p> <p>This test aims to verify that any properly added .efi files will have boot menu entries created for them.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Place some OS-specific folders and .efi files in /EFI/, as listed in common test documentation above</li> <li>Power on the DUT.</li> <li>Enter Boot Menu</li> <li>Note all the listed entries</li> </ol> <p>Expected result</p> <p>Systems corresponding with the newly added files should be listed in boot menu.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/361-esp-scanning/#esp002001-esp-scan-after-deleting-additional-efi-files","title":"ESP002.001 ESP Scan after deleting additional .efi files","text":"<p>Test description</p> <p>This test aims to verify that none of the systems linger on in the boot menu after we've deleted their files from /EFI/.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Delete any additional boot folders and files in the /EFI partition.</li> <li>Power on the DUT.</li> <li>Enter Boot Menu.</li> <li>Note all the listed entries.</li> </ol> <p>Expected result</p> <p>None of the formerly added and now removed entries should still be listed as available to boot.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/361-esp-scanning/#esp003001-esp-scan-ignores-oses-on-removable-media","title":"ESP003.001 ESP Scan ignores OSes on removable media","text":"<p>Test description</p> <p>This test aims to verify that the bootable /EFI partitions of removable media are ignored by the scan and aren't listed in boot menu.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Plug in a USB flash disk containing boot files in its /EFI partition</li> <li>Power on the DUT.</li> <li>Enter Boot Menu.</li> <li>Note all the listed entries.</li> </ol> <p>Expected result</p> <p>None of the listed boot entries should be related to the USB stick - except DTS.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/361-esp-scanning/#esp004001-esp-scan-does-not-create-duplicate-entries","title":"ESP004.001 ESP Scan does not create duplicate entries","text":"<p>Test description</p> <p>This test aims to verify that the firmware will not create duplicate entries, for example, if both shimx64 and grubx64 are present for a single OS.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Create a distro folder in /EFI/ and place both the shimx64 and grubx64 files there.</li> <li>Power on the DUT.</li> <li>Enter Boot Menu.</li> <li>Note all the listed entries.</li> </ol> <p>Expected result</p> <p>Despite there being two files for a single distribution, there shouldn't be any duplicate entries in the boot menu.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/361-esp-scanning/#esp005001-esp-scan-detects-dasharo-tools-suite","title":"ESP005.001 ESP Scan detects Dasharo Tools Suite","text":"<p>Test description</p> <p>This test aims to verify that the firmware detects Dasharo Tools Suite boot media and creates a corresponding boot menu entry</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Plug in a DTS flash stick to the DUT.</li> <li>Power on the DUT.</li> <li>Enter Boot Menu.</li> <li>Note all the listed entries.</li> </ol> <p>Expected result</p> <p>Dasharo Tools Suite should be listed in the boot menu.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/362-dcu/","title":"Dasharo Compatibility: Dasharo Configuration Utility","text":""},{"location":"unified-test-documentation/dasharo-compatibility/362-dcu/#dcu001201-change-the-uuid","title":"DCU001.201 Change the UUID","text":"<p>Test description</p> <p>The Dasharo Configuration Utility is a part of the Dasharo Tools Suite. This test case verifies that the UUID encoded in the DMI table of an image can be changed using our utility.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> <li>Download Dasharo Configuration Utility</li> </ol> <p>Test steps</p> <ol> <li>Run <code>./dcu smbios -u 96bcfa1a-42b4-6717-a44c-d8bbc18cbea4 coreboot.rom</code></li> <li>Flash the <code>coreboot.rom</code> file onto the platform.</li> <li>Power on the DUT.</li> <li>Examine the DMI tables with <code>dmidecode</code>.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>The UUID of the platform should be <code>96bcfa1a-42b4-6717-a44c-d8bbc18cbea4</code>, just as we had set it.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/362-dcu/#dcu002201-change-the-serial-number","title":"DCU002.201 Change the serial number","text":"<p>Test description</p> <p>This test case verifies that the serial number encoded in the DMI table of an image can be changed using our utility.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> <li>Download Dasharo Configuration Utility</li> </ol> <p>Test steps</p> <ol> <li>Run <code>./dcu smbios -s D01234567 coreboot.rom</code></li> <li>Flash the <code>coreboot.rom</code> file onto the platform.</li> <li>Power on the DUT.</li> <li>Examine the DMI tables with <code>dmidecode</code>.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>The serial number of the platform should be <code>D01234567</code>, just as we had set it.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/362-dcu/#dcu003201-change-the-bootsplash-logo","title":"DCU003.201 Change the bootsplash logo","text":"<p>Test description</p> <p>This test case verifies that the bootsplash logo of an image can be changed using our utility. PLEASE NOTE that a display device must be physically connected to the DUT for this test to pass.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> <li>Download Dasharo Configuration Utility</li> </ol> <p>Test steps</p> <ol> <li>Run <code>./dcu logo -l ./logo.svg coreboot.rom</code></li> <li>Flash the <code>coreboot.rom</code> file onto the platform.</li> <li>Power on the DUT.</li> <li>Verify the bootsplash logo.</li> </ol> <p>Expected result</p> <p>The bootsplash logo should now be your image of choice placed under ./logo.svg.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/363-xmp/","title":"Dasharo Compatibility: Memory Profile Switching","text":""},{"location":"unified-test-documentation/dasharo-compatibility/363-xmp/#mps003001-booting-at-xmp-profile-1","title":"MPS003.001 Booting at XMP profile 1","text":"<p>Test description</p> <p>This test aims to verify that XMP profile #1 is functional and that the DUT is able to train memory at the settings specified by the XMP profile.</p> <p>XMP is an overclocking feature. The outcome of this test is inherently dependent on the DIMM modules tested as well as the silicon quality of the CPU itself.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While booting, press the <code>SETUP_MENU_KEY</code> to enter Setup Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu option.</li> <li>Enter the <code>Memory Configuration</code> submenu.</li> <li>Set the <code>Memory SPD Profile</code> option to the <code>XMP Profile 1</code> setting.</li> <li>Save settings and reset the DUT.</li> </ol> <p>Expected result</p> <p>The DUT correctly boots after the setting is applied.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/S30-fan-speed/","title":"Dasharo Compatibility: Fan speed measure","text":"<p>The test suite is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-compatibility/S31-coreboot-fan-control/","title":"Dasharo Compatibility: coreboot Fan Control","text":""},{"location":"unified-test-documentation/dasharo-compatibility/S31-coreboot-fan-control/#cfn001001-check-cpu-entry-temperature-and-cpu-fan-speed","title":"CFN001.001 Check CPU entry temperature and CPU fan speed","text":"<p>Test description</p> <p>This test aims to verify that data for CPU temperature and CPU fan speed is available.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for boot until <code>BOOT_MENU_STRING</code> appears.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the proper number for <code>USB_STICK</code> option.</li> <li>Wait for <code>debian login:</code>.</li> <li>Type proper login.</li> <li>Wait for <code>Password:</code>.</li> <li>Type the proper password.</li> <li>Wait for <code>root@debian:~#</code>.</li> <li>Execute <code>watch -n 1 \"sensors w83795g-i2c-1-2f |grep fan1 -A 16\"</code>.</li> </ol> <p>Expected result</p> <p>There are visible data for <code>fan1</code> and <code>temp7</code> which represents CPU fan speed and CPU temperature.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/S31-coreboot-fan-control/#cfn001002-check-if-increasing-cpu-temperature-increases-cpu-fan-speed","title":"CFN001.002 Check if increasing CPU temperature increases CPU fan speed","text":"<p>Test description</p> <p>This test aims to verify that CPU fan speed responds properly to increasing CPU temperature.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Wait for boot until <code>BOOT_MENU_STRING</code> appears.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the proper number for <code>USB_STICK</code> option.</li> <li>Wait for <code>debian login:</code>.</li> <li>Type proper login.</li> <li>Wait for <code>Password:</code>.</li> <li>Type the proper password.</li> <li>Wait for <code>root@debian:~#</code>.</li> <li>Install <code>stress-ng</code> package by executing: <code>sudo apt install stress-ng</code>.</li> <li>Confirm installation by typing <code>Y</code> and pressing <code>Enter</code> when asked.</li> <li>Execute command: <code>watch -n 1 \"sensors w83795g-i2c-1-2f |grep fan1 -A 16\"</code>     and check current CPU temperature and CPU fan speed.</li> <li>Execute command:     <code>stress-ng --cpu 16 --io 8 --vm 4 --vm-bytes 4G --timeout 30s --metrics</code>.</li> <li>Wait 2 minutes.</li> <li>Execute command: <code>watch -n 1 \"sensors w83795g-i2c-1-2f |grep fan1 -A 16\"</code>     and check current CPU temperature and CPU fan speed.</li> </ol> <p>Expected result</p> <ol> <li>The CPU temperature after the second check is higher at least 20 degrees.</li> <li>The CPU fan speed after the second check is higher at least 1000 RPM.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/build-on-new-os/","title":"Dasharo Compatibility: Building from source on a newly installed OS works","text":""},{"location":"unified-test-documentation/dasharo-compatibility/build-on-new-os/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> </ol>"},{"location":"unified-test-documentation/dasharo-compatibility/build-on-new-os/#bno001001-build-on-a-newly-installed-os-ubuntu","title":"BNO001.001 Build on a newly installed OS (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that Dasharo is buildable on freshly installed Ubuntu.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test steps 1. If the Ubuntu on the device is not freshly installed, install a clean one. Use an autoinstaller Preseeds as suggested in Generic Test Setup 1. Boot into Ubuntu 1. Build the Dasharo firmware for the DUT following the build instructions from docs.dasharo.com documentation for this device. For example Novacustom building manual in the case of testing on a Novacustom laptop.</p> <p>Expected result The build process should result in creating a rom file.</p>"},{"location":"unified-test-documentation/dasharo-compatibility/build-on-new-os/#bno001002-boot-ubuntu","title":"BNO001.002 Boot (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that Ubuntu Linux is bootable with the firmware built using the instructions at docs.dasharo.com.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test steps 1. Flash the firmware built on a newly installed OS using the instructions for the device from docs.dasharo.com. For example Novacustom firmware update in the case of testing on a Novacustom laptop. 1. Power on the DUT. 1. Boot into Ubuntu.</p> <p>Expected result There was no message that the device booted from recovery. The OS boots properly.</p>"},{"location":"unified-test-documentation/dasharo-performance/400-coreboot-boot-measure/","title":"Dasharo Performance: coreboot boot measure","text":""},{"location":"unified-test-documentation/dasharo-performance/400-coreboot-boot-measure/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.gi</li> <li>Download <code>cbmem</code> from the     cloud to the DUT.</li> <li>Disable Secure Boot.</li> </ol>"},{"location":"unified-test-documentation/dasharo-performance/400-coreboot-boot-measure/#cbmem001201-coreboot-booting-time-measure-after-coldboot-ubuntu","title":"CBMEM001.201 coreboot booting time measure after coldboot (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify whether the DUT boots after coldboot and how long this process takes. This test case may be re-done several times to to average the results and specify the platform stability.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Ubuntu</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Download <code>cbmem</code> from the     cloud to the DUT.</li> <li>Disable Secure Boot.</li> </ol> <p>Test steps</p> <ol> <li>Open a terminal window and execute the following command:</li> </ol> <pre><code>sudo ./cbmem -T\n</code></pre> <p>Expected result</p> <p>The output of the command should contain the information about duration of all boot stages.</p>"},{"location":"unified-test-documentation/dasharo-performance/400-coreboot-boot-measure/#cbmem002201-coreboot-booting-time-measure-after-warmboot-ubuntu","title":"CBMEM002.201 coreboot booting time measure after warmboot (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-performance/400-coreboot-boot-measure/#cbmem003201-coreboot-booting-time-measure-after-system-reboot-ubuntu","title":"CBMEM003.201 coreboot booting time measure after system reboot (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-performance/401-cpu-temperature/","title":"Dasharo Performance: CPU temperature measure","text":"<p>The test suite is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/","title":"Dasharo Performance: CPU frequency measure","text":""},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf001201-cpu-not-stuck-on-initial-frequency-ubuntu","title":"CPF001.201 CPU not stuck on initial frequency (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf001301-cpu-not-stuck-on-initial-frequency-windows","title":"CPF001.301 CPU not stuck on initial frequency (Windows)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf001003-cpu-not-stuck-on-initial-frequency-headsdebian","title":"CPF001.003 CPU not stuck on initial frequency (Heads+Debian)","text":"<p>Test description</p> <p>This test aims to verify whether the mounted CPU does not stuck on the initial frequency after booting into the OS.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Debian 12</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>cat /proc/cpuinfo | grep -i mhz\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <p>The output of the command should contain information about the current frequency of each CPU core. If the current frequency for each core is the same as initial frequency, the test should be considered as failed.</p> <p>Example output with unwanted results:</p> <pre><code>cpu MHz     : 2800.000\ncpu MHz     : 2800.000\ncpu MHz     : 2800.000\ncpu MHz     : 2800.000\ncpu MHz     : 2800.000\ncpu MHz     : 2800.000\ncpu MHz     : 2800.000\ncpu MHz     : 2800.000\n</code></pre>"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf002201-cpu-runs-on-expected-frequency-ubuntu","title":"CPF002.201 CPU runs on expected frequency (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf002301-cpu-runs-on-expected-frequency-windows","title":"CPF002.301 CPU runs on expected frequency (Windows)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf003201-cpu-runs-on-expected-frequency-ubuntu-battery","title":"CPF003.201 CPU runs on expected frequency (Ubuntu, battery)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf003301-cpu-runs-on-expected-frequency-windows-battery","title":"CPF003.301 CPU runs on expected frequency (Windows, battery)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf004201-cpu-with-load-runs-on-expected-frequency-ubuntu","title":"CPF004.201 CPU with load runs on expected frequency (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf004301-cpu-with-load-runs-on-expected-frequency-windows","title":"CPF004.301 CPU with load runs on expected frequency (Windows)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf005201-cpu-with-load-runs-on-expected-frequency-ubuntu-battery","title":"CPF005.201 CPU with load runs on expected frequency (Ubuntu, battery)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf005301-cpu-with-load-runs-on-expected-frequency-windows-battery","title":"CPF005.301 CPU with load runs on expected frequency (Windows, battery)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-performance/403-device-boot-measure/","title":"Dasharo Performance: Device boot measure","text":""},{"location":"unified-test-documentation/dasharo-performance/403-device-boot-measure/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-performance/403-device-boot-measure/#dbm001001-device-boot-measure-after-coldboot-ubuntu","title":"DBM001.001 Device boot measure after coldboot (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify whether the DUT boots after coldboot and how long this process takes. This test case may be re-done several times to to average the results and specify the platform stability.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Ubuntu</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Cut the power off while DUT is turned on.</li> <li>Restore power and power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>systemd-analyze\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <p>The output of the command should contain the information about duration of all boot stages.</p>"},{"location":"unified-test-documentation/dasharo-performance/403-device-boot-measure/#dbm002001-device-boot-measure-after-warmboot-ubuntu","title":"DBM002.001 Device boot measure after warmboot (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify whether the DUT boots after warmboot and how long this process takes. This test case may be re-done several times to to average the results and specify the platform stability.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Ubuntu</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>systemd-analyze\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <p>The output of the command should contain the information about duration of all boot stages.</p>"},{"location":"unified-test-documentation/dasharo-performance/403-device-boot-measure/#dbm003001-device-boot-measure-after-reboot-ubuntu","title":"DBM003.001 Device boot measure after reboot (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify whether the DUT boots after system reboot and how long this process takes. This test case may be re-done several times to to average the results and specify the platform stability.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Ubuntu</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>sudo reboot\n</code></pre> </li> <li> <p>Boot into the system.</p> </li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>systemd-analyze\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <p>The output of the command should contain the information about duration of all boot stages.</p>"},{"location":"unified-test-documentation/dasharo-performance/404-platform-stability/","title":"Dasharo Performance: Platform stability","text":""},{"location":"unified-test-documentation/dasharo-performance/404-platform-stability/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-performance/404-platform-stability/#stb001001-verify-if-no-reboot-occurs-in-the-firmware","title":"STB001.001 Verify if no reboot occurs in the firmware","text":"<p>Test description</p> <p>This test aims to verify that the DUT booted to the BIOS does not reset. The test is performed in multiple iterations - after a defined time an attempt to read the same menu is repeated.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While booting, press <code>SETUP_MENU_KEY</code> to enter the setup menu.</li> <li>Note the results.</li> <li>After the specified time has elapsed, repeat the operation described in     step 3.</li> </ol> <p>Expected result</p> <p>The platform should remain in the setup menu in every testing iteration.</p>"},{"location":"unified-test-documentation/dasharo-performance/404-platform-stability/#stb001201-verify-if-no-reboot-occurs-in-the-os-ubuntu","title":"STB001.201 Verify if no reboot occurs in the OS (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-performance/404-platform-stability/#stb001301-verify-if-no-reboot-occurs-in-the-os-windows","title":"STB001.301 Verify if no reboot occurs in the OS (Windows)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-performance/405-fan-control-measure/","title":"Dasharo Performance: Fan Control","text":""},{"location":"unified-test-documentation/dasharo-performance/405-fan-control-measure/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> <li> <p>Check if package <code>lm-sensors</code> is installed and if not, use below command in     the terminal to install:</p> <pre><code>apt-get install --assume-yes lm-sensors\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-performance/405-fan-control-measure/#fnm001001-fan-does-not-stuck-after-coldboot-ubuntu","title":"FNM001.001 Fan does not stuck after coldboot (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the fan does not stuck on initial or any defined speed after coldboot.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Ubuntu</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Cut the power off while DUT is turned on.</li> <li>Restore power and power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>In the terminal window run the following command:</p> <pre><code>sensors | grep fan1\n</code></pre> </li> <li> <p>Repeat command every one minute, for 60 minutes.</p> </li> <li>Compare the results.</li> </ol> <p>Expected result</p> <p>The output of the command should contain information about the current fan speed. If the current speed is the same as initial speed, the test should be considered as failed. If the current speed does not change in the long term, the test should be considered as failed.</p> <p>Example output:</p> <pre><code>fan1:        1131 RPM  (min =  329 RPM)\n</code></pre>"},{"location":"unified-test-documentation/dasharo-performance/405-fan-control-measure/#fnm002001-fan-does-not-stuck-after-warmboot-ubuntu","title":"FNM002.001 Fan does not stuck after warmboot (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the fan does not stuck on initial or any defined speed after warmboot.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Ubuntu</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>In the terminal window run the following command:</p> <pre><code>sensors | grep fan1\n</code></pre> </li> <li> <p>Repeat command every one minute, for 60 minutes.</p> </li> <li>Compare the results.</li> </ol> <p>Expected result</p> <p>The output of the command should contain information about the current fan speed. If the current speed is the same as initial speed, the test should be considered as failed. If the current speed does not change in the long term, the test should be considered as failed.</p> <p>Example output:</p> <pre><code>fan1:        1131 RPM  (min =  329 RPM)\n</code></pre>"},{"location":"unified-test-documentation/dasharo-performance/405-fan-control-measure/#fnm003001-fan-does-not-stuck-after-reboot-ubuntu","title":"FNM003.001 Fan does not stuck after reboot (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the fan does not stuck on initial or any defined speed after reboot.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Ubuntu</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>In the terminal window run the following command:</p> <pre><code>sensors | grep fan1\n</code></pre> </li> <li> <p>Repeat command every one minute, for 60 minutes.</p> </li> <li>Compare the results.</li> </ol> <p>Expected result</p> <p>The output of the command should contain information about the current fan speed. If the current speed is the same as initial speed, the test should be considered as failed. If the current speed does not change in the long term, the test should be considered as failed.</p> <p>Example output:</p> <pre><code>fan1:        1131 RPM  (min =  329 RPM)\n</code></pre>"},{"location":"unified-test-documentation/dasharo-performance/406-custom-fan-curve/","title":"Dasharo Performance: Custom fan curve","text":""},{"location":"unified-test-documentation/dasharo-performance/406-custom-fan-curve/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-performance/406-custom-fan-curve/#cfc001001-custom-fan-curve-silent-profile-measure-ubuntu","title":"CFC001.001 Custom fan curve silent profile measure (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the fan curve is configured correctly in silent profile and the fan spins up and down according to the defined values.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> <li>Install <code>stress-ng</code> on the DUT.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup    Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Power Management Options</code> submenu.</li> <li>Verify that the <code>Fan profile</code> field is set to <code>Silent</code> - if not, using the    arrow keys and <code>Enter</code>, choose the <code>Silent</code> option.</li> <li>Press <code>F10</code> to save the changes.</li> <li>If necessary - press <code>Y</code> to confirm saving the changes.</li> <li>Go back to the main menu using the <code>ESC</code> key.</li> <li>Select the <code>Reset</code> option to apply the settings and reboot.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open the terminal window and run the following command:</p> <pre><code>stress-ng --cpu $(nproc --all) --cpu-load 100 --timeout 1m\n</code></pre> </li> <li> <p>Make a couple of measurements of the temperature and fan speeds    in a device specific way.    The <code>--cpu-load</code> parameter specifies the approximate percentage usage of    the cpu. Change it to values in range [1, 100] to measure the fan speeds    in all the working points of the fan curve.</p> </li> <li>Note the results.</li> </ol> <p>Expected result The values of CPU temperature and fan speeds should match the device specific instructions on verifying the <code>Silent</code> fan curve.</p>"},{"location":"unified-test-documentation/dasharo-performance/406-custom-fan-curve/#cfc002001-custom-fan-curve-performance-profile-measure-ubuntu","title":"CFC002.001 Custom fan curve performance profile measure (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the fan curve is configured correctly in the performance profile and the fan spins up and down according to the defined values.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> <li>Install <code>stress-ng</code> on the DUT.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup    Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Power Management Options</code> submenu.</li> <li>Verify that the <code>Fan profile</code> field is set to <code>Performance</code> - if not, using    the arrow keys and <code>Enter</code>, choose the <code>Performance</code> option.</li> <li>Press <code>F10</code> to save the changes.</li> <li>If necessary - press <code>Y</code> to confirm saving the changes.</li> <li>Go back to the main menu using the <code>ESC</code> key.</li> <li>Select the <code>Reset</code> option to apply the settings and reboot.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open the terminal window and run the following command:</p> <pre><code>stress-ng --cpu $(nproc --all) --cpu-load 100 --timeout 1m\n</code></pre> </li> <li> <p>Make a couple of measurements of the temperature and fan speeds    in a device specific way.    The <code>--cpu-load</code> parameter specifies the approximate percentage usage of    the cpu. Change it to values in range [1, 100] to measure the fan speeds    in all the working points of the fan curve.</p> </li> <li>Note the results.</li> </ol> <p>Expected result The values of CPU temperature and fan speeds should match the device specific instructions on verifying the <code>Performance</code> fan curve.</p>"},{"location":"unified-test-documentation/dasharo-performance/406-custom-fan-curve/#cfc003001-custom-fan-curve-off-profile-measure-ubuntu","title":"CFC003.001 Custom fan curve OFF profile measure (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the fan curve is configured correctly in the OFF profile and the fan does not spin, or barely spins, which depends on the type of the fan.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> <li>Install <code>stress-ng</code> on the DUT.</li> <li>Install <code>lm-sensors</code> on the DUT</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup    Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Power Management Options</code> submenu.</li> <li>Verify that the <code>Fan profile</code> field is set to <code>Off</code> - if not, using    the arrow keys and <code>Enter</code>, choose the <code>Off</code> option.</li> <li>Press <code>F10</code> to save the changes.</li> <li>If necessary - press <code>Y</code> to confirm saving the changes.</li> <li>Go back to the main menu using the <code>ESC</code> key.</li> <li>Select the <code>Reset</code> option to apply the settings and reboot.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open the terminal window and run the following command:</p> <pre><code>stress-ng --cpu $(nproc --all) --cpu-load 100 --timeout 1m\n</code></pre> </li> <li> <p>Make a couple of measurements of the temperature and fan speeds    in a device specific way.    The <code>--cpu-load</code> parameter specifies the approximate percentage usage of    the cpu. Change it to values in range [1, 100] to measure the fan speeds    in all the working points of the fan curve.</p> </li> <li>Note the results.</li> </ol> <p>Expected result The values of CPU temperature and fan speeds should match the device specific instructions on verifying the <code>Off</code> fan curve.</p>"},{"location":"unified-test-documentation/dasharo-performance/406-custom-fan-curve/#measuring-the-temperature-and-fan-speeds","title":"Measuring the temperature and fan speeds","text":"Protectli VP66xx &amp; VP32xx <ol> <li>Run the following command to load the kernel module required for    measuring the fan RPM    <pre><code>sudo modprobe it87 force_id=0x8786\n</code></pre></li> <li>Run the following command to detect available sensors    <pre><code>sudo sensors-detect\n</code></pre></li> <li>Run the following command to read the temperature and RPM    <pre><code>watch -n1 \"sensors it8786-isa-* | grep -E 'fan|temp1'\"\n</code></pre></li> </ol>"},{"location":"unified-test-documentation/dasharo-performance/406-custom-fan-curve/#verifying-the-temperature-and-fan-speeds","title":"Verifying the temperature and fan speeds","text":"Protectli VP66xxVP32xx <p>The fans have a minimal RPM of <code>~200 RPM</code>, and a maximum of up to <code>~3200 RPM</code>. When in <code>off</code> state they still spin at <code>~200 RPM</code>.</p> SilentPerformanceOff <p>The fans:</p> <ul> <li>start spinning up from the minimal RPM at 50 degrees   and slow down to the minimal RPM at 40 degrees (hysteresis)</li> <li>spin up proportionally to the CPU temperature, reaching the   maximum RPM at 85 degrees</li> </ul> <p>{    \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",    \"title\": \"The \\\"Silent\\\" fan curve for Protectli VP66xx\",    \"data\": {          \"values\": [          {\"t1\": 0, \"r\": 200, \"h\": 0}, {\"t1\": 40, \"r\": 200, \"h\": 0},          {\"t1\": 85, \"r\": 3200, \"h\": 0}, {\"t1\": 100, \"r\": 3200, \"h\": 0},           {\"t1\": 0, \"r\": 200, \"h\": 1}, {\"t1\": 50, \"r\": 200, \"h\": 1},          {\"t1\": 85, \"r\": 3200, \"h\": 1}, {\"t1\": 100, \"r\": 3200, \"h\": 1}          ]    },    \"mark\": {\"type\": \"line\", \"tooltip\": true},    \"encoding\": {          \"x\": {\"field\": \"t1\", \"type\": \"quantitative\", \"title\": \"CPU Temperature [\u00b0C]\"},          \"y\": {\"field\": \"r\", \"type\": \"quantitative\", \"title\": \"Fan speed [RPM]\"},          \"color\": {\"field\": \"h\", \"type\": \"nominal\", \"legend\": null}    } }</p> <p>The fans:</p> <ul> <li>start spinning up from the minimal RPM at 40 degrees   and slow down to the minimal RPM at 30 degrees (hysteresis)</li> <li>spin up proportionally to the CPU temperature, reaching the   maximum RPM at 75 degrees</li> </ul> <p>{    \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",    \"title\": \"The \\\"Performance\\\" fan curve for Protectli VP66xx\",    \"data\": {          \"values\": [          {\"t1\": 0, \"r\": 200, \"h\": 0}, {\"t1\": 30, \"r\": 200, \"h\": 0},          {\"t1\": 75, \"r\": 3200, \"h\": 0}, {\"t1\": 100, \"r\": 3200, \"h\": 0},           {\"t1\": 0, \"r\": 200, \"h\": 1}, {\"t1\": 40, \"r\": 200, \"h\": 1},          {\"t1\": 75, \"r\": 3200, \"h\": 1}, {\"t1\": 100, \"r\": 3200, \"h\": 1}          ]    },    \"mark\": {\"type\": \"line\", \"tooltip\": true},    \"encoding\": {          \"x\": {\"field\": \"t1\", \"type\": \"quantitative\", \"title\": \"CPU Temperature [\u00b0C]\"},          \"y\": {\"field\": \"r\", \"type\": \"quantitative\", \"title\": \"Fan speed [RPM]\"},          \"color\": {\"field\": \"h\", \"type\": \"nominal\", \"legend\": null}    } }</p> <p>The fan RPM value should be constant and oscillate around the minimum of <code>~200 RPM</code> regardless of the CPU temperature.</p> <p>{    \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",    \"title\": \"The \\\"Off\\\" fan curve for Protectli VP66xx\",     \"data\": {          \"values\": [             {\"t1\": 0, \"r\": 200, \"h\": 0}, {\"t1\": 100, \"r\": 200, \"h\": 0}          ]    },    \"mark\": {\"type\": \"line\", \"tooltip\": true},    \"encoding\": {          \"x\": {\"field\": \"t1\", \"type\": \"quantitative\", \"title\": \"CPU Temperature [\u00b0C]\"},          \"y\": {             \"field\": \"r\",             \"type\": \"quantitative\",             \"title\": \"Fan speed [RPM]\",             \"scale\": {\"domain\": [0, 300]}          },          \"color\": {\"field\": \"h\", \"type\": \"nominal\", \"legend\": null}    } }</p> <p>The fan from the modular extension bay have a minimal RPM of <code>0 RPM</code>, and a maximum up to <code>~2100 RPM</code>. When in <code>off</code> state they stop spinning and remain at constant <code>0 RPM</code>.</p> SilentPerformanceOff <p>The fans:</p> <ul> <li>start spinning at 50 degrees and stop spinning at 40 degrees   (hysteresis)</li> <li>spin up proportionally to the CPU temperature, reaching the   maximum RPM at 85 degrees</li> </ul> <p>{    \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",    \"title\": \"The \\\"Silent\\\" fan curve for Protectli VP66xx\",    \"data\": {          \"values\": [          {\"t1\": 0, \"r\": 0, \"h\": 0}, {\"t1\": 40, \"r\": 0, \"h\": 0},          {\"t1\": 85, \"r\": 2100, \"h\": 0}, {\"t1\": 100, \"r\": 2100, \"h\": 0},           {\"t1\": 0, \"r\": 0, \"h\": 1}, {\"t1\": 50, \"r\": 0, \"h\": 1},          {\"t1\": 85, \"r\": 2100, \"h\": 1}, {\"t1\": 100, \"r\": 2100, \"h\": 1}          ]    },    \"mark\": {\"type\": \"line\", \"tooltip\": true},    \"encoding\": {          \"x\": {\"field\": \"t1\", \"type\": \"quantitative\", \"title\": \"CPU Temperature [\u00b0C]\"},          \"y\": {             \"field\": \"r\",             \"type\": \"quantitative\",             \"title\": \"Fan speed [RPM]\",             \"scale\": {\"domain\": [-100, 2200]}          },          \"color\": {\"field\": \"h\", \"type\": \"nominal\", \"legend\": null}    } }</p> <p>The fans:</p> <ul> <li>start spinning at 40 degrees and stop spinning at 30 degrees   (hysteresis)</li> <li>spin up proportionally to the CPU temperature, reaching the   maximum RPM at 75 degrees</li> </ul> <p>{    \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",    \"title\": \"The \\\"Performance\\\" fan curve for Protectli VP66xx\",    \"data\": {          \"values\": [          {\"t1\": 0, \"r\": 0, \"h\": 0}, {\"t1\": 30, \"r\": 0, \"h\": 0},          {\"t1\": 75, \"r\": 2100, \"h\": 0}, {\"t1\": 100, \"r\": 2100, \"h\": 0},           {\"t1\": 0, \"r\": 0, \"h\": 1}, {\"t1\": 40, \"r\": 0, \"h\": 1},          {\"t1\": 75, \"r\": 2100, \"h\": 1}, {\"t1\": 100, \"r\": 2100, \"h\": 1}          ]    },    \"mark\": {\"type\": \"line\", \"tooltip\": true},    \"encoding\": {          \"x\": {\"field\": \"t1\", \"type\": \"quantitative\", \"title\": \"CPU Temperature [\u00b0C]\"},          \"y\": {             \"field\": \"r\",             \"type\": \"quantitative\",             \"title\": \"Fan speed [RPM]\",             \"scale\": {\"domain\": [-100, 2200]}          },          \"color\": {\"field\": \"h\", \"type\": \"nominal\", \"legend\": null}    } }</p> <p>The fan RPM value should be constant at the minimum of <code>0 RPM</code> regardless of the CPU temperature.</p> <p>{    \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",    \"title\": \"The \\\"Off\\\" fan curve for Protectli VP66xx\",     \"data\": {          \"values\": [             {\"t1\": 0, \"r\": 0, \"h\": 0}, {\"t1\": 100, \"r\": 0, \"h\": 0}          ]    },    \"mark\": {\"type\": \"line\", \"tooltip\": true},    \"encoding\": {          \"x\": {\"field\": \"t1\", \"type\": \"quantitative\", \"title\": \"CPU Temperature [\u00b0C]\"},          \"y\": {             \"field\": \"r\",             \"type\": \"quantitative\",             \"title\": \"Fan speed [RPM]\",             \"scale\": {\"domain\": [-100, 100]}          },          \"color\": {\"field\": \"h\", \"type\": \"nominal\", \"legend\": null}    } }</p>"},{"location":"unified-test-documentation/dasharo-performance/407-ubuntu-booting-performance-test/","title":"Dasharo Performance: Ubuntu booting performance test","text":""},{"location":"unified-test-documentation/dasharo-performance/407-ubuntu-booting-performance-test/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-performance/407-ubuntu-booting-performance-test/#bub001001-boot-ubuntu-lts-from-disk-after-cold-boot","title":"BUB001.001 Boot Ubuntu LTS from disk after cold-boot","text":"<p>Test description</p> <p>This test aims to verify that Ubuntu LTS could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Cut the power off while DUT is turned on.</li> <li>Restore power and power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/407-ubuntu-booting-performance-test/#bub002001-boot-ubuntu-lts-from-disk-after-warm-boot","title":"BUB002.001 Boot Ubuntu LTS from disk after warm-boot","text":"<p>Test description</p> <p>This test aims to verify that Ubuntu LTS could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/407-ubuntu-booting-performance-test/#bub003001-boot-ubuntu-lts-from-disk-after-reboot","title":"BUB003.001 Boot Ubuntu LTS from disk after reboot","text":"<p>Test description</p> <p>This test aims to verify that Ubuntu LTS could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>sudo reboot\n</code></pre> </li> <li> <p>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</p> </li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/408-debian-booting-performance-test/","title":"Dasharo Performance: Debian booting performance test","text":""},{"location":"unified-test-documentation/dasharo-performance/408-debian-booting-performance-test/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-performance/408-debian-booting-performance-test/#bde001001-boot-debian-lts-from-disk-after-cold-boot","title":"BDE001.001 Boot Debian LTS from disk after cold-boot","text":"<p>Test description</p> <p>This test aims to verify that Debian LTS could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Debian 11.6</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Cut the power off while DUT is turned on.</li> <li>Restore power and power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/408-debian-booting-performance-test/#bde002001-boot-debian-lts-from-disk-after-warm-boot","title":"BDE002.001 Boot Debian LTS from disk after warm-boot","text":"<p>Test description</p> <p>This test aims to verify that Debian LTS could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Debian 11.6</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/408-debian-booting-performance-test/#bde003001-boot-debian-lts-from-disk-after-reboot","title":"BDE003.001 Boot Debian LTS from disk after reboot","text":"<p>Test description</p> <p>This test aims to verify that Debian LTS could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Debian 11.6</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>sudo reboot\n</code></pre> </li> <li> <p>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</p> </li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/409-freebsd-booting-performance-test/","title":"Dasharo Performance: FreeBSD booting performance test","text":""},{"location":"unified-test-documentation/dasharo-performance/409-freebsd-booting-performance-test/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-performance/409-freebsd-booting-performance-test/#bfb001001-boot-freebsd-release-from-disk-after-cold-boot","title":"BFB001.001 Boot FreeBSD-RELEASE from disk after cold-boot","text":"<p>Test description</p> <p>This test aims to verify that FreeBSD-RELEASE could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = FreeBSD</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Cut the power off while DUT is turned on.</li> <li>Restore power and power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/409-freebsd-booting-performance-test/#bfb002001-boot-freebsd-release-from-disk-after-warm-boot","title":"BFB002.001 Boot FreeBSD-RELEASE from disk after warm-boot","text":"<p>Test description</p> <p>This test aims to verify that FreeBSD-RELEASE could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = FreeBSD</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/409-freebsd-booting-performance-test/#bfb003001-boot-freebsd-release-from-disk-after-reboot","title":"BFB003.001 Boot FreeBSD-RELEASE from disk after reboot","text":"<p>Test description</p> <p>This test aims to verify that FreeBSD-RELEASE could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = FreeBSD</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>sudo reboot\n</code></pre> </li> <li> <p>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</p> </li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/410-proxmox-booting-performance-test/","title":"Dasharo Performance: Proxmox booting performance test","text":""},{"location":"unified-test-documentation/dasharo-performance/410-proxmox-booting-performance-test/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-performance/410-proxmox-booting-performance-test/#bpm001001-boot-proxmox-virtual-environment-from-disk-after-cold-boot","title":"BPM001.001 Boot Proxmox Virtual Environment from disk after cold-boot","text":"<p>Test description</p> <p>This test aims to verify that Proxmox VE could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Proxmox VE</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Cut the power off while DUT is turned on.</li> <li>Restore power and power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/410-proxmox-booting-performance-test/#bpm002001-boot-proxmox-virtual-environment-from-disk-after-warm-boot","title":"BPM002.001 Boot Proxmox Virtual Environment from disk after warm-boot","text":"<p>Test description</p> <p>This test aims to verify that Proxmox VE could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Proxmox VE</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/410-proxmox-booting-performance-test/#bpm003001-boot-proxmox-virtual-environment-from-disk-after-reboot","title":"BPM003.001 Boot Proxmox Virtual Environment from disk after reboot","text":"<p>Test description</p> <p>This test aims to verify that Proxmox VE could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Proxmox VE</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>sudo reboot\n</code></pre> </li> <li> <p>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</p> </li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/411-ubuntu-server-booting-performance-test/","title":"Dasharo Performance: Ubuntu Server booting performance test","text":""},{"location":"unified-test-documentation/dasharo-performance/411-ubuntu-server-booting-performance-test/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-performance/411-ubuntu-server-booting-performance-test/#bus001001-boot-ubuntu-server-lts-from-disk-after-cold-boot","title":"BUS001.001 Boot Ubuntu Server LTS from disk after cold-boot","text":"<p>Test description</p> <p>This test aims to verify that Ubuntu Server LTS could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu Server</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Cut the power off while DUT is turned on.</li> <li>Restore power and power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/411-ubuntu-server-booting-performance-test/#bus002001-boot-ubuntu-server-lts-from-disk-after-warm-boot","title":"BUS002.001 Boot Ubuntu Server LTS from disk after warm-boot","text":"<p>Test description</p> <p>This test aims to verify that Ubuntu Server LTS could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu Server</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/411-ubuntu-server-booting-performance-test/#bus003001-boot-ubuntu-server-lts-from-disk-after-reboot","title":"BUS003.001 Boot Ubuntu Server LTS from disk after reboot","text":"<p>Test description</p> <p>This test aims to verify that Ubuntu Server LTS could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu Server</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>sudo reboot\n</code></pre> </li> <li> <p>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</p> </li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/412-opnsense-serial-booting-performance-test/","title":"Dasharo Performance: OPNsense (serial output) booting performance test","text":""},{"location":"unified-test-documentation/dasharo-performance/412-opnsense-serial-booting-performance-test/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-performance/412-opnsense-serial-booting-performance-test/#bos001001-boot-opnsense-serial-output-from-disk-after-cold-boot","title":"BOS001.001 Boot OPNsense (serial output) from disk after cold-boot","text":"<p>Test description</p> <p>This test aims to verify that OPNsense (serial output) could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = OPNsense serial</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Cut the power off while DUT is turned on.</li> <li>Restore power and power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/412-opnsense-serial-booting-performance-test/#bos002001-boot-opnsense-serial-output-from-disk-after-warm-boot","title":"BOS002.001 Boot OPNsense (serial output) from disk after warm-boot","text":"<p>Test description</p> <p>This test aims to verify that OPNsense (serial output) could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = OPNsense serial</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/412-opnsense-serial-booting-performance-test/#bos003001-boot-opnsense-serial-output-from-disk-after-reboot","title":"BOS003.001 Boot OPNsense (serial output) from disk after reboot","text":"<p>Test description</p> <p>This test aims to verify that OPNsense (serial output) could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = OPNsense serial</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>sudo reboot\n</code></pre> </li> <li> <p>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</p> </li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/413-opnsense-vga-booting-performance-test/","title":"Dasharo Performance: OPNsense (VGA output) booting performance test","text":""},{"location":"unified-test-documentation/dasharo-performance/413-opnsense-vga-booting-performance-test/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-performance/413-opnsense-vga-booting-performance-test/#bov001001-boot-opnsense-vga-output-from-disk-after-cold-boot","title":"BOV001.001 Boot OPNsense (VGA output) from disk after cold-boot","text":"<p>Test description</p> <p>This test aims to verify that OPNsense (VGA output) could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = OPNsense VGA</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Cut the power off while DUT is turned on.</li> <li>Restore power and power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/413-opnsense-vga-booting-performance-test/#bov002001-boot-opnsense-vga-output-stable-from-disk-after-warm-boot","title":"BOV002.001 Boot OPNsense (VGA output) stable from disk after warm-boot","text":"<p>Test description</p> <p>This test aims to verify that OPNsense (VGA output) stable could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = OPNsense VGA</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/413-opnsense-vga-booting-performance-test/#bov003001-boot-opnsense-vga-output-stable-from-disk-after-reboot","title":"BOV003.001 Boot OPNsense (VGA output) stable from disk after reboot","text":"<p>Test description</p> <p>This test aims to verify that OPNsense (VGA output) stable could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = OPNsense VGA</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>sudo reboot\n</code></pre> </li> <li> <p>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</p> </li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/414-pfsense-serial-booting-performance-test/","title":"Dasharo Performance: pfSense (serial output) booting performance test","text":""},{"location":"unified-test-documentation/dasharo-performance/414-pfsense-serial-booting-performance-test/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-performance/414-pfsense-serial-booting-performance-test/#bps001001-boot-pfsense-lts-ce-serial-output-from-disk-after-cold-boot","title":"BPS001.001 Boot pfSense LTS CE (serial output) from disk after cold-boot","text":"<p>Test description</p> <p>This test aims to verify that pfSense LTS CE (serial output) could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = pfSense CE serial</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Cut the power off while DUT is turned on.</li> <li>Restore power and power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/414-pfsense-serial-booting-performance-test/#bps002001-boot-pfsense-lts-ce-serial-output-from-disk-after-warm-boot","title":"BPS002.001 Boot pfSense LTS CE (serial output) from disk after warm-boot","text":"<p>Test description</p> <p>This test aims to verify that pfSense LTS CE (serial output) could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = pfSense CE serial</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/414-pfsense-serial-booting-performance-test/#bps003001-boot-pfsense-lts-ce-serial-output-from-disk-after-reboot","title":"BPS003.001 Boot pfSense LTS CE (serial output) from disk after reboot","text":"<p>Test description</p> <p>This test aims to verify that pfSense LTS CE (serial output) could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = pfSense CE serial</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>sudo reboot\n</code></pre> </li> <li> <p>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</p> </li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/415-pfsense-vga-booting-performance-test/","title":"Dasharo Performance: pfSense (VGA output) booting performance test","text":""},{"location":"unified-test-documentation/dasharo-performance/415-pfsense-vga-booting-performance-test/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-performance/415-pfsense-vga-booting-performance-test/#bpv001001-boot-pfsense-lts-ce-vga-output-from-disk-after-cold-boot","title":"BPV001.001 Boot pfSense LTS CE (VGA output) from disk after cold-boot","text":"<p>Test description</p> <p>This test aims to verify that pfSense LTS CE (VGA output) could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = pfSense CE VGA</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Cut the power off while DUT is turned on.</li> <li>Restore power and power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/415-pfsense-vga-booting-performance-test/#bpv002001-boot-pfsense-lts-ce-vga-output-from-disk-after-warm-boot","title":"BPV002.001 Boot pfSense LTS CE (VGA output) from disk after warm-boot","text":"<p>Test description</p> <p>This test aims to verify that pfSense LTS CE (VGA output) could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = pfSense CE VGA</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/415-pfsense-vga-booting-performance-test/#bpv003001-boot-pfsense-lts-ce-vga-output-from-disk-after-reboot","title":"BPV003.001 Boot pfSense LTS CE (VGA output) from disk after reboot","text":"<p>Test description</p> <p>This test aims to verify that pfSense LTS CE (VGA output) could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = pfSense CE VGA</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>sudo reboot\n</code></pre> </li> <li> <p>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</p> </li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/416-windows-booting-performance-test/","title":"Dasharo Performance: Windows booting performance test","text":""},{"location":"unified-test-documentation/dasharo-performance/416-windows-booting-performance-test/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-performance/416-windows-booting-performance-test/#bwi001001-boot-windows-from-disk-after-cold-boot","title":"BWI001.001 Boot Windows from disk after cold-boot","text":"<p>Test description</p> <p>This test aims to verify that Windows could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Cut the power off while DUT is turned on.</li> <li>Restore power and power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/416-windows-booting-performance-test/#bwi002001-boot-windows-from-disk-after-warm-boot","title":"BWI002.001 Boot Windows from disk after warm-boot","text":"<p>Test description</p> <p>This test aims to verify that Windows could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-performance/416-windows-booting-performance-test/#bwi003001-boot-windows-from-disk-after-reboot","title":"BWI003.001 Boot Windows from disk after reboot","text":"<p>Test description</p> <p>This test aims to verify that Windows could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Reboot the device executing in PowerShell:</p> <pre><code>Restart-Computer\n</code></pre> </li> <li> <p>Press <code>BOOT_MENU_KEY</code> to enter the boot menu.</p> </li> <li>In the <code>Boot Menu</code>, select the disk on which the system was previously    installed or boot entry with the name of <code>OPERATING_SYSTEM</code>.</li> <li>Wait for the <code>OPERATING_SYSTEM</code> to boot and note the result.</li> </ol> <p>Expected result</p> <p>The <code>OPERATING_SYSTEM</code> login screen should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/","title":"Dasharo Security: TPM Support","text":""},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm001001-tpm-support-tpm-events","title":"TPM001.001 TPM Support (TPM events)","text":"<p>The test suite is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm001201-tpm-support-ubuntu","title":"TPM001.201 TPM Support (Ubuntu)","text":"<p>The test suite is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm001301-tpm-support-windows","title":"TPM001.301 TPM Support (Windows)","text":"<p>The test suite is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm001004-tpm-support-bios","title":"TPM001.004 TPM Support (BIOS)","text":"<p>Test description</p> <p>This test aims to verify that the TPM is initialized correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Disable Secure Boot.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the BIOS.</li> <li>Enter Device Manager.</li> <li>Enter TCG2 Configuration</li> </ol> <p>Expected result</p> <p><code>Current TPM Device</code> should contain <code>TPM 2.0</code> or <code>TPM 1.2</code>.</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm002201-verify-tpm-version-ubuntu","title":"TPM002.201 Verify TPM version (Ubuntu)","text":"<p>The test suite is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm002301-verify-tpm-version-windows","title":"TPM002.301 Verify TPM version (Windows)","text":"<p>The test suite is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm003001-check-tpm-physical-presence-interface-firmware","title":"TPM003.001 Check TPM Physical Presence Interface (firmware)","text":"<p>The test suite is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm003201-check-tpm-physical-presence-interface-ubuntu","title":"TPM003.201 Check TPM Physical Presence Interface (Ubuntu)","text":"<p>The test suite is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm003301-check-tpm-physical-presence-interface-windows","title":"TPM003.301 Check TPM Physical Presence Interface (Windows)","text":"<p>The test suite is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm004001-check-tpm-clear-procedure","title":"TPM004.001 Check TPM Clear procedure","text":"<p>Test description</p> <p>This test aims to verify whether the TPM Clear procedure works properly, starts with running TPM Clear procedure to ensure correct state of ownership.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Install the <code>tpm2-tools</code> package: <code>sudo apt install tpm2-tools</code>.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the BIOS.</li> <li>Enter Device Manager.</li> <li>Enter TCG2 Configuration.</li> <li>Scroll down to TPM2 Operation and press Enter.</li> <li>Choose <code>TPM2 ClearControl(NO) + Clear</code>.</li> <li>Save and Reboot.</li> <li>When prompted, press F12 to clear the TPM.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open the terminal and run the following commands to take ownership over TPM2:</p> <pre><code>tpm2_changeauth --quiet -c owner pass\ntpm2_changeauth --quiet -c lockout pass\ntpm2_createprimary -Q --hierarchy=o --key-context=/tmp/test --key-auth=pass2 -P pass\ntpm2_evictcontrol -Q -C o -P pass -c /tmp/test 0x81000001\nrm /tmp/test\n</code></pre> </li> <li> <p>Execute the following commands to check that the ownership is taken:</p> <pre><code>! tpm2_changeauth --quiet -c owner 2&gt;/dev/null\necho $?\n</code></pre> </li> <li> <p>Reboot the DUT and enter BIOS.</p> </li> <li>Enter Device Manager.</li> <li>Enter TCG2 Configuration.</li> <li>Scroll down to TPM2 Operation and press Enter.</li> <li>Choose <code>TPM2 ClearControl(NO) + Clear</code>.</li> <li>Save and Reboot.</li> <li>When prompted, press F12 to clear the TPM.</li> <li>Boot into the system and log in.</li> <li>Execute the commands from step 11.</li> </ol> <p>Expected result</p> <ol> <li>The output in step 11 should be equal 1.</li> <li>The output in step 21 should be 0.</li> </ol>"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm005001-check-tpm-hash-algorithm-support-sha1-firmware","title":"TPM005.001 Check TPM Hash Algorithm Support SHA1 (Firmware)","text":"<p>Test description</p> <p>This test aims to verify that the TPM supports needed hash algorithm (SHA1).</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the BIOS.</li> <li>Enter Device Manager.</li> <li>Enter TCG2 Configuration</li> <li>Scroll down to <code>TPM2 Hardware Supported Hash Algorithm</code></li> </ol> <p>Expected result</p> <p>The entry should contain <code>SHA1</code>.</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm006001-check-tpm-hash-algorithm-support-sha256-firmware","title":"TPM006.001 Check TPM Hash Algorithm Support SHA256 (Firmware)","text":"<p>Test description</p> <p>This test aims to verify that the TPM supports needed hash algorithm (SHA256).</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the BIOS.</li> <li>Enter Device Manager.</li> <li>Enter TCG2 Configuration</li> <li>Scroll down to <code>TPM2 Hardware Supported Hash Algorithm</code></li> </ol> <p>Expected result</p> <p>The entry should contain <code>SHA256</code>.</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm007001-check-tpm-hash-algorithm-support-sha384-firmware","title":"TPM007.001 Check TPM Hash Algorithm Support SHA384 (Firmware)","text":"<p>Test description</p> <p>This test aims to verify that the TPM supports needed hash algorithm (SHA384).</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the BIOS.</li> <li>Enter Device Manager.</li> <li>Enter TCG2 Configuration</li> <li>Scroll down to <code>TPM2 Hardware Supported Hash Algorithm</code></li> </ol> <p>Expected result</p> <p>The entry should contain <code>SHA384</code>.</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm008001-check-tpm-hash-algorithm-support-sha512-firmware","title":"TPM008.001 Check TPM Hash Algorithm Support SHA512 (Firmware)","text":"<p>Test description</p> <p>This test aims to verify that the TPM supports needed hash algorithm (SHA512).</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the BIOS.</li> <li>Enter Device Manager.</li> <li>Enter TCG2 Configuration</li> <li>Scroll down to <code>TPM2 Hardware Supported Hash Algorithm</code></li> </ol> <p>Expected result</p> <p>The entry should contain <code>SHA512</code>.</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm009201-encrypt-and-decrypt-non-rootfs-partition-ubuntu","title":"TPM009.201 Encrypt and Decrypt non-rootfs partition (Ubuntu)","text":"<p>Test description</p> <p>Test encrypting and decrypting non-rootfs partition using TPM.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Create ext4 formatted LUKS partition with <code>hello-world</code> named file on it     using following commands:</p> <pre><code>fallocate -l 20MB test-partition\ndd if=/dev/urandom bs=1 count=32 status=none &gt; key\ncryptsetup luksFormat -q --key-file=key test-partition\ncryptsetup luksOpen --key-file=key test-partition test-partition\nmkfs.ext4 /dev/mapper/test-partition\nmount /dev/mapper/test-partition /mnt\ntouch /mnt/hello-world\numount /dev/mapper/test-partition\ncryptsetup luksClose test-partition\n</code></pre> </li> <li> <p>Create the sealing object by executing the following commands:</p> <pre><code>tpm2_createprimary -Q -C o -c prim.ctx\ncat key | tpm2_create -Q -g sha256 -u seal.pub -r seal.priv -i- -C prim.ctx\ntpm2_load -Q -C prim.ctx -u seal.pub -r seal.priv -n seal.name -c seal.ctx\ntpm2_evictcontrol -C o -c seal.ctx 0x81010001\ntpm2_unseal -Q -c 0x81010001 &gt; key\n</code></pre> </li> <li> <p>Check a file stored on the partition by executing the following commands:</p> <pre><code>cryptsetup luksOpen ./test-partition --key-file=key test-partition\nmount /dev/mapper/test-partition /mnt\nls /mnt | grep hello-world\n</code></pre> </li> <li> <p>Clean up by executing the following commands:</p> <pre><code>umount /mnt\ncryptsetup luksClose test-partition\nrm -f key seal.* prim.* test-partition\ntpm2_evictcontrol -c 0x81010001\n</code></pre> </li> </ol> <p>Expected result</p> <p>The output in step 5 should contain <code>hello-world</code>.</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm010201-encrypt-and-decrypt-rootfs-partition-ubuntu","title":"TPM010.201 Encrypt and Decrypt rootfs partition (Ubuntu)","text":"<p>Test description</p> <p>Test encrypting and decrypting rootfs partition using TPM.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>This test assumes that there is another Ubuntu with encrypted     rootfs connected to the system, so it can be booted and two partitions     with specific labels: EFI partition with label <code>ubuntu-enc</code> and rootfs     with label <code>encrypted-rootfs</code>.</li> <li>Install needed packages: <code>sudo apt install tpm2-tools clevis clevis-luks     clevis-tpm2 clevis-initramfs</code></li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the BIOS.</li> <li>Enter the Boot Maintenance Manager.</li> <li>Enter Boot Options.</li> <li>Enter Add Boot Option.</li> <li>Enter the <code>ubuntu-enc</code> volume.</li> <li>Go to <code>&lt;EFI&gt;/&lt;ubuntu&gt;</code> and select <code>shimx64.efi</code>.</li> <li>Go to <code>Input the description</code> and enter <code>ubuntu-enc-rootfs</code>.</li> <li>Go to <code>Commit Changes and Exit</code> and press Enter.</li> <li>Save the changes and reset.</li> <li>Enter the boot menu and choose the newly added option.</li> <li>Unlock the rootfs with your password.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Bind clevis by executing the following command:</p> <pre><code>echo ${UBUNTU_PASSWORD} | clevis luks bind -d /dev/disk/by-label/encrypted-rootfs tpm2 '{\"pcr_ids\":\"0,1,2,3,7\"}' -s 1\n</code></pre> <p>where <code>${UBUNTU_PASSWORD}</code> is your password.</p> </li> <li> <p>Reboot the system.</p> </li> <li>Wait for the partition to be unlocked.</li> <li>Log into the system.</li> <li> <p>Clean up by executing the following command:</p> <pre><code>clevis luks unbind -d /dev/vda3 -f -s 1\n</code></pre> </li> </ol> <p>Expected result</p> <ol> <li>In step 12 you should be prompted to unlock the rootfs.</li> <li>In step 16 the partition should the unlocked automatically.</li> </ol>"},{"location":"unified-test-documentation/dasharo-security/200-tpm2-commands/","title":"Dasharo Security: TPM2 commands","text":""},{"location":"unified-test-documentation/dasharo-security/200-tpm2-commands/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> <li>Install the <code>tpm2-tools</code> package:</li> </ol> <pre><code>sudo apt install tpm2-tools\n</code></pre> <ol> <li> <p>Check if SHA1 and SHA256 banks are enabled: <code>tpm2_getcap pcrs</code>     Output should contain:</p> <pre><code>sha1: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 ]\nsha256: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 ]\n</code></pre> <p>If not, run <code>tpm2_pcrallocate</code> and reboot the system.</p> </li> </ol>"},{"location":"unified-test-documentation/dasharo-security/200-tpm2-commands/#tpmcmd001001-check-if-both-sha1-and-sha256-pcrs-are-enabled-ubuntu","title":"TPMCMD001.001 Check if both SHA1 and SHA256 PCRs are enabled (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that <code>PCRALLOCATE</code> function works properly. It allows the user to specify a PCR allocation for the TPM.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Run the following command in the shell:</p> <pre><code>tpm2_getcap pcrs\n</code></pre> </li> </ol> <p>Expected result</p> <p>The output should contain a list of SHA1 and SHA256 PCR registers, example:</p> <pre><code>selected-pcrs:\n  - sha1: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 ]\n  - sha256: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 ]\n  - sha384: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 ]\n  - sha512: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 ]\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/200-tpm2-commands/#tpmcmd002001-pcrread-function-verification-ubuntu","title":"TPMCMD002.001 PCRREAD Function Verification (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that PCRREAD function works properly. The function reads PCR banks and returns them to the terminal.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Run the following command in the shell:</p> <pre><code>tpm2_pcrread\n</code></pre> </li> </ol> <p>Expected result</p> <p>The output should contain values of various PCR registers, example:</p> <pre><code>  sha1:\n    0 : 0x5E29B8750345DF1698B7024690C421BB72196992\n    1 : 0xEB9A154B08553DD29370A22A2DB24E13C90E2880\n    2 : 0x15FDC991BF9C14D090E7EBAF843B08B1F4C60F4A\n    3 : 0xB2A83B0EBF2F8374299A5B2BDFC31EA955AD7236\n    4 : 0x19EC12B10FCA38B3FD69C394D1DDDAE64DC91B10\n    5 : 0x53F9145E792EBB289142E1DB6DB850353C120E1E\n    6 : 0xB2A83B0EBF2F8374299A5B2BDFC31EA955AD7236\n    7 : 0x704687C3C9FF69601B0AEAF8DA88DCC903B1FEF5\n    8 : 0x0BFB7AD3F77F5ABDAE34B842CCA06EAD23433AED\n    9 : 0x2AE892DEC99C2DD4E1FC626EBAB0A9E352AFE97C\n    10: 0xD236A7BDC845310C2878EDF6F9B9D2567764DB07\n    11: 0x0000000000000000000000000000000000000000\n    12: 0x0000000000000000000000000000000000000000\n    13: 0x0000000000000000000000000000000000000000\n    14: 0xA482A15E112717D6A915B989A0EA6140A507E3E6\n    15: 0x0000000000000000000000000000000000000000\n    16: 0x0000000000000000000000000000000000000000\n    17: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n    18: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n    19: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n    20: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n    21: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n    22: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n    23: 0x0000000000000000000000000000000000000000\n(...)\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/200-tpm2-commands/#tpmcmd003001-pcrextend-and-pcrreset-functions-ubuntu","title":"TPMCMD003.001 PCREXTEND And PCRRESET Functions (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that PCREXTEND and PCRRESET functions are working properly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Reset the twenty-third PCR bank with the following command:</p> <pre><code>tpm2_pcrreset 23\n</code></pre> </li> <li> <p>Check whether bank the twenty-third has been reset using the following     command:</p> <pre><code>tpm2_pcrread | grep 23:\n</code></pre> </li> <li> <p>Enroll some <code>sha1</code> and <code>sha256</code> checksums into the twenty-third PCR bank with     the following command:</p> <pre><code>tpm2_pcrextend 23:sha1=f1d2d2f924e986ac86fdf7b36c94bcdf32beec15,sha256=b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c\n</code></pre> </li> <li> <p>Check whether the bank has been set to right <code>sha1</code> and <code>sha256</code> values using     the following command:</p> <pre><code>tpm2_pcrread | grep 23:\n</code></pre> </li> <li> <p>Reset the twenty-third PCR bank with the following command:</p> <pre><code>tpm2_pcrreset 23\n</code></pre> </li> <li> <p>Check whether the bank has been reset using the following command:</p> <pre><code>tpm2_pcrread | grep 23:\n</code></pre> </li> </ol> <p>Expected result</p> <p>The twenty-third PCR bank should change its <code>sha1</code> and <code>sha256</code> values accordingly.</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm2-commands/#tpmcmd003002-pcrextend-and-pcrreset-functions-locality-protections-ubuntu","title":"TPMCMD003.002 PCREXTEND And PCRRESET Functions - locality protections (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that PCREXTEND and PCRRESET functions are working properly when trying to modify protected PCRs.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Reset the eighteenth PCR bank with the following command:</p> <pre><code>tpm2_pcrreset 18\n</code></pre> </li> <li> <p>Enroll some <code>sha1</code> and <code>sha256</code> checksums into the eighteenth PCR bank with     the following command:</p> <pre><code>tpm2_pcrextend 18:sha1=f1d2d2f924e986ac86fdf7b36c94bcdf32beec15,sha256=b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c\n</code></pre> </li> <li> <p>Read the eighteenth bank to check whether the checksums have been enrolled     using the following command:</p> <pre><code>tpm2_pcrread | grep 18:\n</code></pre> </li> </ol> <p>Expected result</p> <p>Warning should appear after the first step and second step, the eighteenth bank should contain <code>0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</code> after the third step.</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm2-commands/#tpmcmd004001-pcrevent-function-ubuntu","title":"TPMCMD004.001 PCREVENT Function (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the PCREVENT function is working properly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Reset the twenty-third PCR bank with the following command:</p> <pre><code>tpm2_pcrreset 23\n</code></pre> </li> <li> <p>Make sure it has been reset using the following command:</p> <pre><code>tpm2_pcrread | grep 23:\n</code></pre> </li> <li> <p>Create some file with some data to be hashed using the following command:</p> <pre><code>echo \"foo\" &gt; data\n</code></pre> </li> <li> <p>Execute command <code>tpm2_pcrevent</code> using the twenty-third PCR bank and file with     data to be hashed:</p> <pre><code>tpm2_pcrevent 23 data\n</code></pre> </li> <li> <p>Calculate hashes for the data manually using commands <code>sha1sum</code> and     <code>sha256sum</code>:</p> <pre><code>sha1sum data\nsha256sum data\n</code></pre> </li> <li> <p>Compare manually calculated hashes with those from the twenty-third PCR bank:</p> <pre><code>tpm2_pcrread | grep 23:\n</code></pre> </li> </ol> <p>Expected result</p> <p>Hashes calculated manually should match those calculated by <code>tpm2_event</code>.</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm2-commands/#tpmcmd005001-createprimary-function-verification-ubuntu","title":"TPMCMD005.001 CREATEPRIMARY Function Verification (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that CREATEPRIMARY function works as expected. This command is used to create a primary object under one of the hierarchies: Owner, Platform, Endorsement, NULL.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Create a primary object using the following command:</p> <pre><code>tpm2_createprimary -c primary.ctx\n</code></pre> </li> </ol> <p>Expected result</p> <p>This test aims to verify that NVDEFINE and NVUNDEFINE functions are working as expected. Those functions are used to define and undefine a TPM Non-Volatile index. Example output of given command is presented below:</p> <pre><code>name-alg:\n  value: sha256\n  raw: 0xb\nattributes:\n  value: fixedtpm|fixedparent|sensitivedataorigin|userwithauth|restricted|decrypt\n  raw: 0x30072\ntype:\n  value: rsa\n  raw: 0x1\nexponent: 65537\nbits: 2048\nscheme:\n  value: null\n  raw: 0x10\nscheme-halg:\n  value: (null)\n  raw: 0x0\nsym-alg:\n  value: aes\n  raw: 0x6\nsym-mode:\n  value: cfb\n  raw: 0x43\nsym-keybits: 128\nrsa: a463fa1da7b5515481ad7171cad9402d1a4a0864cb918035733dc9095daa9798279cbf82facadf7661ed9aca42a1af6b0150080a4e862af1c671b62402ac0b97025a92c209bb80cd1192788c0dd572e91a3e86ecdef9ffb6382b57d7d5c569c0242926cd373c27c385da8c204dba4a0f83c19ce4c\n289c9af6d3d319f049b60e3ae1f7e6b66d5c4371cc409b1a49f837dbad80f6184b7ab37c7c8118d12de502bbb3c4a38fdfad5a12a03d496079d3b97d25d0bb05bc0b00a6b4c34df02d02ba31861e68aa188e0394df57bb84a0a1fb46b41d53ec008f40e272d50b16ec5f7cbd8f8a92a72bcff7a2f17d6e122c6539b62f51c8b4881f412c4de814362725895\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/200-tpm2-commands/#tpmcmd006001-nvdefine-and-nvundefine-functions-verification-ubuntu","title":"TPMCMD006.001 NVDEFINE and NVUNDEFINE Functions Verification (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that CREATEPRIMARY function works as expected. This command is used to create a primary object under one of the hierarchies: Owner, Platform, Endorsement, NULL.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Define TPM a Non-Volatile index using the following command:</p> <pre><code>tpm2_nvdefine -C o -s 32 -a \"ownerread|policywrite|ownerwrite\" 1\n</code></pre> </li> <li> <p>Write the data into the Non-Volatile index using the following commands:</p> <pre><code>echo \"nvtest\" &gt; nv.dat\ntpm2_nvwrite -C o -i nv.dat 1\n</code></pre> </li> <li> <p>Read the data from the Non-Volatile index using the following command:</p> <pre><code>tpm2_nvread -C o -s 32 1 | tr '\\\\377' '\\\\000'\n</code></pre> </li> <li> <p>Undefine the defined TPM Non-Volatile index using the following command:</p> <pre><code>tpm2_nvundefine -C o 1\n</code></pre> </li> <li> <p>Check whether, after the imdex has been undefined, it can be read using the     following command:</p> <pre><code>tpm2_nvread -C o -s 32 1 2&gt;&amp;1\n</code></pre> </li> </ol> <p>Expected result</p> <p>The data should be successfully written and read using TPM Non-Volatile index but it also should not be read successfully after the TPM Non-Volatile index has been undefined.</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm2-commands/#tpmcmd007001-create-function-ubuntu","title":"TPMCMD007.001 CREATE Function (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the CREATE function works as expected. It will create an object using all the default values and store the TPM sealed private and public portions to the paths specified via <code>-u</code> and <code>-r</code> respectively.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Create a primary object using the following command:</p> <pre><code>tpm2_createprimary -c primary.ctx\n</code></pre> </li> <li> <p>Seal some public and secret portions in TPM using the following command:</p> <pre><code>tpm2_create -C primary.ctx -u obj.pub -r obj.priv\n</code></pre> </li> </ol> <p>Expected result</p> <p>The public and secret portions should be sealed without any issues.</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm2-commands/#tpmcmd007002-createloaded-function-ubuntu","title":"TPMCMD007.002 CREATELOADED Function (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the CREATELOADED function works as expected. It will create an object using all the default values and store key context to the path specified via <code>-c</code>.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Create a primary object using the following command:</p> <pre><code>tpm2_createprimary -c primary.ctx\n</code></pre> </li> <li> <p>Store some key in TPM using the following command:</p> <pre><code>tpm2_create -C primary.ctx -c obj.key\n</code></pre> </li> </ol> <p>Expected result</p> <p>The key should be stored in TPM without any issues.</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm2-commands/#tpmcmd008001-signing-the-file-ubuntu","title":"TPMCMD008.001 Signing the file (Ubuntu)","text":"<p>Test description</p> <p>Check whether the TPM supports file signing.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Create a primary object using the following command:</p> <pre><code>tpm2_createprimary -c primary_key.ctx\n</code></pre> </li> <li> <p>Seal some public and secret portions in TPM using the following command:</p> <pre><code>tpm2_create -u key.pub -r key.priv -C primary_key.ctx\n</code></pre> </li> <li> <p>Store some key in TPM using the following command:</p> <pre><code>tpm2_load -C primary_key.ctx -u key.pub -r key.priv -c key.ctx\n</code></pre> </li> <li> <p>Sign a file using TPM and the following commands:</p> <pre><code>echo \"my secret\" &gt; secret.data\ntpm2_sign -c key.ctx -o sig.rssa secret.data\n</code></pre> </li> <li> <p>Verify the signature using the following command:</p> <pre><code>tpm2_verifysignature -c key.ctx -s sig.rssa -m secret.data\n</code></pre> </li> </ol> <p>Expected result</p> <p>The file should be signed successfully.</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm2-commands/#tpmcmd009001-encryption-and-decryption-of-the-file-ubuntu","title":"TPMCMD009.001 Encryption and Decryption of the file (Ubuntu)","text":"<p>Test description</p> <p>Check whether the TPM supports the encryption and decryption of the file.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Check for the presence of the TPM command for encryption/decryption.</p> <pre><code>tpm2_getcap commands | grep TPM2_EncryptDecrypt\n</code></pre> </li> <li> <p>Create a primary object using the following command:</p> <pre><code>tpm2_createprimary -c primary_key.ctx\n</code></pre> </li> <li> <p>Create a key for the file encryption/decryption and store it in TPM using the     following commands:</p> <pre><code>tpm2_create -u key.pub -r key.priv -C primary_key.ctx -Gaes128\ntpm2_load -C primary_key.ctx -u key.pub -r key.priv -c key.ctx\n</code></pre> </li> <li> <p>Encrypt and decrypt the file using the following commands:</p> <pre><code>echo \"my secret\" &gt; secret.data\ndd if=/dev/zero bs=1 count=16 of=iv.bin\ntpm2_encryptdecrypt -c key.ctx -o secret.enc secret.data -t iv.bin\ntpm2_encryptdecrypt -d -c key.ctx -o secret.dec secret.enc -t iv.bin\n</code></pre> </li> </ol> <p>Expected result</p> <p>The file should be encrypted and then decrypted successfully. Content of <code>secret.data</code> and <code>secret.dec</code> should be the same.</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm2-commands/#tpmcmd010001-hashing-the-file-ubuntu","title":"TPMCMD010.001 Hashing the file (Ubuntu)","text":"<p>Test description</p> <p>Check whether the TPM supports file hashing.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Hash a file using the following commands:</p> <pre><code>echo \"my secret\" &gt; secret.data\ntpm2_hash -o hash.out -t ticket.out secret.data\n</code></pre> </li> <li> <p>Check whether the hashes have been created.</p> </li> </ol> <p>Expected result</p> <p>The hashes should be created successfully.</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm2-commands/#tpmcmd011001-performing-hmac-operation-on-the-file-ubuntu","title":"TPMCMD011.001 Performing HMAC operation on the file (Ubuntu)","text":"<p>Test description</p> <p>Check whether the TPM supports HMAC operation.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Create a primary object using the following command:</p> <pre><code>tpm2_createprimary -c primary_key.ctx\n</code></pre> </li> <li> <p>Seal some public and secret portions in TPM using the HMAC key algorithm with     the following command:</p> <pre><code>tpm2_create -u key.pub -r key.priv -C primary_key.ctx -G hmac\n</code></pre> </li> <li> <p>Create a key for the file encryption/decryption and store it in TPM using the     following command:</p> <pre><code>tpm2_load -C primary_key.ctx -u key.pub -r key.priv -c hmac.key\n</code></pre> </li> <li> <p>Perform an HMAC operation on some data and record it results in some file     using the following commands:</p> <pre><code>echo \"my secret\" &gt; secret.data\ntpm2_hmac -c hmac.key -o hmac.out secret.data\n</code></pre> </li> </ol> <p>Expected result</p> <p>Verify that HMAC operation ended successfully.</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm2-commands/#tpmcmd012001-sealing-and-unsealing-the-file-without-policy-ubuntu","title":"TPMCMD012.001 Sealing and Unsealing the file without Policy (Ubuntu)","text":"<p>Test description</p> <p>This test verifies TPM sealing functionality.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Create a file to seal by executing the following commands:</p> <pre><code>tpm2_createprimary -c primary.ctx\necho \"my sealed data\" &gt; seal.dat\n</code></pre> </li> <li> <p>Seal the file:</p> <pre><code>tpm2_create -C primary.ctx -i seal.dat -u key.pub -r key.priv\ntpm2_evictcontrol --hierarchy owner --object-context seal.ctx -o seal.handle\n</code></pre> </li> <li> <p>Unseal the file and check its contents:</p> <pre><code>tpm2_unseal -c seal.handle &gt; unsealed.dat\ncat unsealed.dat\n</code></pre> </li> </ol> <p>Expected result</p> <p>The output in step 6 should be the equal to the content of <code>seal.dat</code>.</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm2-commands/#tpmcmd013001-sealing-and-unsealing-with-policy-password-only-ubuntu","title":"TPMCMD013.001 Sealing and Unsealing with Policy - Password Only (Ubuntu)","text":"<p>Test description</p> <p>Check whether the TPM supports sealing and unsealing using password policy.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Create the file to seal:</p> <pre><code>tpm2_createprimary -C e -g sha256 -G ecc -c primary.ctx\necho \"password policy sealed data\" &gt; seal.dat\n</code></pre> </li> <li> <p>Seal the file using password policy:</p> <pre><code>tpm2_startauthsession -S session.dat\ntpm2_policypassword -S session.dat -L policy.dat\ntpm2_create -Q -u key.pub -r key.priv -C primary.ctx -L policy.dat -i seal.dat -p policypswd\ntpm2_load -C primary.ctx -u key.pub -r key.priv -n seal.name -c seal.ctx\n</code></pre> </li> <li> <p>Unseal the file and check its content:</p> <pre><code>tpm2_startauthsession --policy-session -S session.dat\ntpm2_policypassword -S session.dat -L policy.dat\ntpm2_unseal -p session:session.dat+policypswd -c seal.ctx\n</code></pre> </li> </ol> <p>Expected result</p> <p>The output in step 6 should be the equal to the content of <code>seal.dat</code>.</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm2-commands/#tpmcmd013002-sealing-and-unsealing-with-policy-pcr-only-ubuntu","title":"TPMCMD013.002 Sealing and Unsealing with Policy - PCR Only (Ubuntu)","text":"<p>Test description</p> <p>Check whether the TPM supports sealing and unsealing using PCR policy.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Create a file to seal:</p> <pre><code>tpm2_createprimary -C e -g sha256 -G ecc -c primary.ctx\necho \"PCR policy sealed data\" &gt; seal.dat\n</code></pre> </li> <li> <p>Seal the file:</p> <pre><code>tpm2_startauthsession -S session.dat\ntpm2_policypcr -S session.dat -l \"sha1:0,1,2,3,7\" -L policy.dat\ntpm2_create -Q -u key.pub -r key.priv -C primary.ctx -L policy.dat -i seal.dat\ntpm2_load -C primary.ctx -u key.pub -r key.priv -n seal.name -c seal.ctx\n</code></pre> </li> <li> <p>Unseal the file:</p> <pre><code>tpm2_startauthsession --policy-session -S session.dat\ntpm2_policypcr -S session.dat -l \"sha1:0,1,2,3,7\" -L policy.dat\ntpm2_unseal -p session:session.dat -c seal.ctx\n</code></pre> </li> </ol> <p>Expected result</p> <p>The output in step 6 should be the equal to the content of <code>seal.dat</code>.</p>"},{"location":"unified-test-documentation/dasharo-security/200-tpm2-commands/#tpmcmd013003-sealing-and-unsealing-with-policy-password-and-pcr-ubuntu","title":"TPMCMD013.003 Sealing and unsealing with Policy - Password and PCR (Ubuntu)","text":"<p>Test description</p> <p>Check whether the TPM supports sealing and unsealing using PCR and password policy at the same time.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Create a file to seal:</p> <pre><code>tpm2_createprimary -C e -g sha256 -G ecc -c primary.ctx\necho \"policy sealed data\" &gt; seal.dat\n</code></pre> </li> <li> <p>Seal the file:</p> <pre><code>tpm2_startauthsession -S session.dat\ntpm2_policypassword -S session.dat -L policy.dat\ntpm2_policypcr -S session.dat -l \"sha1:0,1,2,3,7\" -L policy.dat\ntpm2_create -Q -u key.pub -r key.priv -C primary.ctx -L policy.dat -i seal.dat -p policypswd\ntpm2_load -C primary.ctx -u key.pub -r key.priv -n seal.name -c seal.ctx\n</code></pre> </li> <li> <p>Unseal the file:</p> <pre><code>tpm2_startauthsession --policy-session -S session.dat\ntpm2_policypassword -S session.dat -L policy.dat\ntpm2_policypcr -S session.dat -l \"sha1:0,1,2,3,7\" -L policy.dat\ntpm2_unseal -p session:session.dat+policypswd -c seal.ctx\n</code></pre> </li> </ol> <p>Expected result</p> <p>The output in step 6 should be the equal to the content of <code>seal.dat</code>.</p>"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/","title":"Dasharo Security: Verified Boot support","text":""},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo006001-verified-boot-support-firmware","title":"VBO006.001 Verified boot support (firmware)","text":"<p>Test description</p> <p>Verified Boot is a method of verifying that the firmware components come from a trusted source. This test aims to confirm that verified boot is enabled and functional.</p> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> <li>Disable Secure Boot.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Read coreboot loading logs.</li> </ol> <p>Expected result</p> <p>The logs should indicate that vboot is enabled and verstage has been entered:</p> <pre><code>VBOOT: Loading verstage.\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo006002-verified-boot-support-ubuntu","title":"VBO006.002 Verified boot support (Ubuntu)","text":"<p>Test description</p> <p>Verified Boot is a method of verifying that the firmware components come from a trusted source. This test aims to confirm that verified boot is enabled and functional.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Download <code>cbmem</code> and <code>flashrom</code> from https://cloud.3mdeb.com/index.php/s/zTqkJQdNtJDo5Nd     to the DUT.</li> <li>Disable Secure Boot.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Open a terminal window and execute the following command:</li> </ol> <pre><code>sudo ./cbmem -c | grep VBOOT\n</code></pre> <p>Expected result</p> <p>The output of the command should indicate that vboot is enabled and verstage has been entered:</p> <pre><code>VBOOT: Loading verstage.\nTPM: Extending digest for VBOOT: boot mode into PCR 0\nTPM: Extending digest for VBOOT: GBB HWID into PCR 1\nVBOOT WORK  8. 0x76c05000 0x00014000\nPCR-0 2547cc736e951fa4919853c43ae890861a3b3264000000000000000000000000 SHA256 [VBOOT: boot mode]\nPCR-1 e3324765a25f8a59c7c20cc35c1c33a8ab384159d2b40a269246b0b4491cdf89 SHA256 [VBOOT: GBB HWID]\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo007001-verified-boot-booting-from-slot-a-firmware","title":"VBO007.001 Verified boot: Booting from Slot A (firmware)","text":"<p>Test description</p> <p>If the signatures for firmware stored in vboot Slot A are correct, vboot should proceed to boot from Slot A.</p> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> <li>Disable Secure Boot.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Read coreboot loading logs.</li> </ol> <p>Expected result</p> <p>The logs should indicate that vboot has chosen to boot from slot A:</p> <pre><code>Slot A is selected\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo007002-verified-boot-booting-from-slot-a-ubuntu","title":"VBO007.002 Verified boot: Booting from Slot A (Ubuntu)","text":"<p>Test description</p> <p>If the signatures for firmware stored in vboot Slot A are correct, vboot should proceed to boot from Slot A.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Download <code>cbmem</code> and <code>flashrom</code> from https://cloud.3mdeb.com/index.php/s/zTqkJQdNtJDo5Nd    to the DUT.</li> <li>Disable Secure Boot.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Open a terminal window and execute the following command:</li> </ol> <pre><code>sudo ./cbmem -c | grep \"Slot A\"\n</code></pre> <p>Expected result</p> <p>The output of the command should indicate that vboot has chosen to boot from slot A:</p> <pre><code>Slot A is selected\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo008001-verified-boot-booting-from-recovery-ubuntu","title":"VBO008.001 Verified boot: Booting from Recovery (Ubuntu)","text":"<p>Test description</p> <p>If the signatures for firmware stored in vboot Slot A are incorrect, vboot should revert to booting from the recovery slot.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Download <code>cbmem</code> and <code>flashrom</code> from https://cloud.3mdeb.com/index.php/s/zTqkJQdNtJDo5Nd    to the DUT.</li> <li>Disable Secure Boot.</li> <li>Obtain coreboot binary     signed with wrong vboot keys.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Flash coreboot signed with wrong vboot keys by executing the following command:</p> <pre><code>flashrom -p internal --fmap -i RW_SECTION_A -w [coreboot binary]\n</code></pre> </li> <li> <p>Power off the DUT</p> </li> <li>Connect to the DUT using the serial port.</li> <li>Power on the DUT</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and execute the following command:</p> <pre><code>sudo ./cbmem -c | grep -i recovery\n</code></pre> </li> <li> <p>If booting into the system is impossible, read coreboot loading logs.</p> </li> </ol> <p>Expected result</p> <p>The logs should indicate that vboot has chosen to boot from the recovery slot.</p> <p>Example:</p> <pre><code>VB2:vb2_check_recovery() Recovery reason from previous boot: 0x3 / 0x3\nVB2:vb2_check_recovery() We have a recovery request: 0x3 / 0x0\nRecovery requested (1009000e)\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo009001-recovery-boot-popup-firmware","title":"VBO009.001 Recovery boot popup (firmware)","text":"<p>Test description</p> <p>This test aims to verify whether the recovery mode information is displayed as the popup after rebooting the DUT which is flashed with the firmware with the wrong vboot keys.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Disable Secure Boot.</li> <li>Obtain <code>coreboot binary</code> signed with wrong vboot keys.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Flash coreboot signed with wrong vboot keys by executing the following command:</p> <pre><code>flashrom -p internal --fmap -i RW_SECTION_A -w [coreboot binary]\n</code></pre> </li> <li> <p>Reboot the DUT.</p> </li> <li>Wait for the popup to appear.</li> </ol> <p>Expected result</p> <p>Popup with information about recovery mode should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo010001-recovery-boot-popup-confirmation-firmware","title":"VBO010.001  Recovery boot popup confirmation (firmware)","text":"<p>Test description</p> <p>This test aims to verify whether the recovery popup might be confirmed which allows to proceed to the next booting stages.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Disable Secure Boot.</li> <li>Obtain <code>coreboot binary</code> signed with wrong vboot keys.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Flash coreboot signed with wrong vboot keys by executing the following command:</p> <pre><code>flashrom -p internal --fmap -i RW_SECTION_A -w [coreboot binary]\n</code></pre> </li> <li> <p>Reboot the DUT.</p> </li> <li>Wait for the popup to appear.</li> <li>Press <code>ENTER</code>.</li> </ol> <p>Expected result</p> <p>After pressing <code>ENTER</code> the DUT should immediately move to the next stages of booting.</p>"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo011001-booting-after-flashing-with-valid-binary-ubuntu","title":"VBO011.001 Booting after flashing with valid binary (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify whether after flashing the DUT with the valid binary, the DUT will boot correctly from the default slot and no recovery popup will be displayed.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> <li>Download <code>cbmem</code> and <code>flashrom</code> from https://cloud.3mdeb.com/index.php/s/zTqkJQdNtJDo5Nd    to the DUT.</li> <li>Disable Secure Boot.</li> <li>Slot A is flashed with an binary with wrong-signed vboot keys.</li> <li>Obtain the correct <code>coreboot binary</code> appropriate for the DUT.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Flash firmware with valid binary by executing the following command:</p> <pre><code>flashrom -p internal --fmap -i RW_SECTION_A -w [coreboot binary]\n</code></pre> </li> <li> <p>Reboot the DUT.</p> </li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and execute the following command:</p> <pre><code>sudo ./cbmem -c | grep -i recovery\n</code></pre> </li> </ol> <p>Expected result</p> <ol> <li>Popup with information about recovery mode should not be displayed.</li> <li> <p>The logs should indicate that vboot hasn't chosen to boot from the recovery    slot. Example output:</p> <pre><code>VB2:vb2_check_recovery() Recovery reason from previous boot: 0x0 / 0x0\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-security/203-measured-boot/","title":"Dasharo Security: Measured Boot support","text":"<p>The test suite is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/","title":"Dasharo Security: UEFI Secure Boot","text":""},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo001001-check-secure-boot-default-state-firmware","title":"SBO001.001 Check Secure Boot default state (firmware)","text":"<p>Test description</p> <p>Secure Boot is a verification mechanism for ensuring that code launched by firmware is trusted. This test aims to verify that the Secure Boot state after flashing the platform with the Dasharo firmware is correct.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup     Menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Verify the <code>Current Secure Boot State</code> field.</li> </ol> <p>Expected result</p> <p>The <code>Secure Boot State</code> field should inform that the current state of Secure Boot is <code>Disabled</code>.</p>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo002001-uefi-secure-boot-ubuntu","title":"SBO002.001 UEFI Secure Boot (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that Secure Boot can be enabled from the boot menu and, after the DUT reset, it is seen from the OS.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> <li>Proceed with the    Secure Boot Configuration    to enable the <code>Attempt Secure Boot</code> option in the    <code>Secure Boot Configuration</code> menu.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup     Menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>If a message <code>To enable Secure Boot, set Secure Boot Mode to Custom and    enroll the keys/PK first</code> appears:<ol> <li>Set <code>Secure Boot Mode</code> to <code>Custom Mode</code></li> <li>Enter <code>Advanced Secure Boot Keys Management</code> submenu</li> <li>Select <code>Reset to default Secure Boot Keys</code></li> <li>If a pop-up appears to confirm the selection, select <code>Yes</code></li> <li>Press <code>Esc</code> to go back</li> </ol> </li> <li>Verify that the <code>Current Secure Boot State</code> field says <code>Enabled</code> - if not,     select the <code>Attempt Secure Boot</code> option below.</li> <li>Go back to the main menu using the <code>ESC</code> key.</li> <li>Select the <code>Reset</code> option to apply the settings and reboot.</li> <li>The DUT will now attempt to boot <code>OPERATING_SYSTEM</code> with Secure Boot enabled.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>sudo dmesg | grep \"Secure boot\"\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <p>The output of the command should contain the line:</p> <pre><code>secureboot: Secure boot enabled\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo002002-uefi-secure-boot-windows","title":"SBO002.002 UEFI Secure Boot (Windows)","text":"<p>Test description</p> <p>This test verifies that Secure Boot can be enabled from the boot menu and, after the DUT reset, it is seen from the OS.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installer.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Secure Boot Configuration    to enable the <code>Attempt Secure Boot</code> option in the    <code>Secure Boot Configuration</code> menu.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup    Menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Verify that the <code>Current Secure Boot State</code> field says <code>Enabled</code> - if not,    select the <code>Attempt Secure Boot</code> option below.</li> <li>Go back to the main menu using the <code>ESC</code> key.</li> <li>Select the <code>Reset</code> option to apply the settings and reboot.</li> <li>The DUT will now attempt to boot <code>OPERATING_SYSTEM</code> with Secure Boot enabled.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open Powershell as administrator and run the following command:</p> <pre><code>Confirm-SecureBootUEFI\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <p>The output of the command should return the information, that Secure Boot is enabled:</p> <pre><code>True\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo003001-attempt-to-boot-file-with-the-correct-key-from-shell-firmware","title":"SBO003.001 Attempt to boot file with the correct key from Shell (firmware)","text":"<p>Test description</p> <p>This test verifies that Secure Boot allows booting a signed file with a correct key.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li>Additional <code>USB storage</code> - at least 1GB - for keeping files for booting</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Run     sb-img-wrapper.sh     script to generate keys and sign efi file.</li> <li> <p>Flash generated <code>GOOD_KEYS.img</code> into <code>USB storage</code> using the following     command:</p> <pre><code>sudo dd if=path/to/GOOD_KEYS.img of=/dev/sdx\n</code></pre> </li> <li> <p>Plug the <code>USB storage</code> into DUT.</p> </li> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup     Menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set the <code>Secure Boot Mode</code> field to <code>Custom Mode</code>.</li> <li>Select options in the given order: <code>Custom Secure Boot Options</code> -&gt;     <code>DB Options</code> -&gt; <code>Enroll Signature</code> -&gt; <code>Enroll Signature Using File</code></li> <li>Select the certificate from the <code>USB storage</code>.</li> <li>Select the <code>Commit Changes and Exit</code> option.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>Reset</code> option.</li> <li>While the DUT is booting, hold the <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the <code>UEFI Shell</code> option using the arrow keys and press <code>Enter</code>.</li> <li> <p>In the shell open the <code>USB storage</code> by executing the following command:</p> <pre><code>FS0:\n</code></pre> <p>One of the filesystems in the FS list will be the USB storage - typically <code>FS0:</code></p> </li> <li> <p>Boot the previously prepared file by typing its full name:</p> <pre><code>signed-hello.efi\n</code></pre> </li> </ol> <p>Expected result</p> <p>File boots correctly (no information: <code>Command Error Status: Access Denied</code> on the output) and the output of the command shows file content. Example output:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo004001-attempt-to-boot-file-without-the-key-from-shell-firmware","title":"SBO004.001 Attempt to boot file without the key from Shell (firmware)","text":"<p>Test description</p> <p>This test verifies that Secure Boot blocks booting a file without a key.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li>Additional <code>USB storage</code> - at least 1GB - for keeping files for booting</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Run     sb-img-wrapper.sh     script to generate keys and sign efi file.</li> <li> <p>Flash generated <code>NOT_SIGNED.img</code> into <code>USB storage</code> using the following     command:</p> <pre><code>sudo dd if=path/to/NOT_SIGNED.img of=/dev/sdx\n</code></pre> </li> <li> <p>Plug the <code>USB storage</code> into DUT.</p> </li> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the <code>UEFI Shell</code> option using the arrow keys and press <code>Enter</code>.</li> <li> <p>In the shell open the <code>USB storage</code> by executing the following command:</p> <pre><code>FS0:\n</code></pre> <p>One of the filesystems in the FS list will be the USB storage - typically <code>FS0:</code></p> </li> <li> <p>Boot the previously prepared file by typing its full name:</p> <pre><code>hello.efi\n</code></pre> </li> </ol> <p>Expected result</p> <p>The output of the command doesn't show file content and information about access denied is displayed. Example output:</p> <pre><code>Command Error Status: Access Denied\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo005001-attempt-to-boot-file-with-the-wrong-signed-key-from-shell-firmware","title":"SBO005.001 Attempt to boot file with the wrong-signed key from Shell (firmware)","text":"<p>Test description</p> <p>This test verifies that Secure Boot blocks booting a file with the wrong-signed key.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li>Additional <code>USB storage</code> - at least 1GB - for keeping files for booting</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Run     sb-img-wrapper.sh     script to generate keys and sign efi file.</li> <li> <p>Flash generated <code>BAD_KEYS.img</code> into <code>USB storage</code> using the following     command:</p> <pre><code>sudo dd if=path/to/BAD_KEYS.img of=/dev/sdx\n</code></pre> </li> <li> <p>Plug the <code>USB storage</code> into DUT.</p> </li> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the <code>UEFI Shell</code> option using the arrow keys and press <code>Enter</code>.</li> <li> <p>In the shell open the <code>USB storage</code> by executing the following command:</p> <pre><code>FS0:\n</code></pre> <p>One of the filesystems in the FS list will be the USB storage - typically <code>FS0:</code></p> </li> <li> <p>Boot the previously prepared file by typing its full name:</p> <pre><code>signed-hello.efi\n</code></pre> </li> </ol> <p>Expected result</p> <p>The output of the command doesn't show file content and information about access denied is displayed. Example output:</p> <pre><code>Command Error Status: Access Denied\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo006001-reset-secure-boot-keys-option-availability-firmware","title":"SBO006.001 Reset Secure Boot Keys option availability (firmware)","text":"<p>Test description</p> <p>This test aims to verify, that the <code>Reset Secure Boot Keys</code> option is available after flashing the platform with the Dasharo firmware.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup     Menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set <code>Advanced Secure Boot Keys Management</code> submenu.</li> <li>Verify the <code>Reset to default Secure Boot Keys</code> field.</li> </ol> <p>Expected result</p> <p>The <code>Reset Secure Boot Keys</code> option should be listed after entering the key management submenu.</p>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo007001-attempt-to-boot-the-file-after-restoring-keys-to-default-firmware","title":"SBO007.001 Attempt to boot the file after restoring keys to default (firmware)","text":"<p>Test description</p> <p>This test verifies that the <code>Reset Secure Boot Keys</code> option works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li>Additional <code>USB storage</code> - at least 1GB - for keeping files for booting</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Run     sb-img-wrapper.sh     script to generate keys and sign efi file.</li> <li> <p>Flash generated <code>GOOD_KEYS.img</code> into <code>USB storage</code> using the following     command:</p> <pre><code>sudo dd if=path/to/GOOD_KEYS.img of=/dev/sdx\n</code></pre> </li> <li> <p>Plug the <code>USB storage</code> into DUT.</p> </li> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup     Menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set the <code>Secure Boot Mode</code> field to <code>Custom Mode</code>.</li> <li>Select options in the given order: <code>Advanced Secure Boot Keys Management</code> -&gt;     <code>DB Options</code> -&gt; <code>Enroll Signature</code> -&gt; <code>Enroll Signature Using File</code></li> <li>Select the certificate from the <code>USB storage</code>.</li> <li>Select the <code>Commit Changes and Exit</code> option.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>Reset</code> option.</li> <li>While the DUT is booting, hold the <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the <code>UEFI Shell</code> option using the arrow keys and press <code>Enter</code>.</li> <li> <p>In the shell open the <code>USB storage</code> by executing the following command:</p> <pre><code>FS0:\n</code></pre> <p>One of the filesystems in the FS list will be the USB storage - typically <code>FS0:</code></p> </li> <li> <p>Boot the previously prepared file by typing its full name:</p> <pre><code>signed-hello.efi\n</code></pre> </li> <li> <p>Exit the shell by executing the following command:</p> <pre><code>exit\n</code></pre> </li> <li> <p>Press <code>ESC</code> until the setup menu.</p> </li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Enter the <code>Advanced Secure Boot Keys Management</code> submenu.</li> <li>Select the <code>Reset to default Secure Boot keys</code> option using the arrow keys    and Enter.</li> <li>If necessary - press <code>Y</code> to confirm saving the changes.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>Reset</code> option to apply the settings and reboot.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup     Menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Verify that the <code>Current Secure Boot State</code> field says <code>Enabled</code>.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>One Time Boot</code> menu using the arrow keys and Enter.</li> <li>Select the <code>UEFI Shell</code> option using the arrow keys and press <code>Enter</code>.</li> <li> <p>In the shell open the <code>USB storage</code> by executing the following command:</p> <pre><code>FS0:\n</code></pre> <p>One of the filesystems in the FS list will be the USB storage - typically <code>FS0:</code></p> </li> <li> <p>Boot the previously prepared file by typing its full name:</p> <pre><code>signed-hello.efi\n</code></pre> </li> </ol> <p>Expected result</p> <p>The first attempt to run the <code>signed-hello.efi</code> file will results with file boots correctly (no information: <code>Command Error Status: Access Denied</code> on the output). The output of the command shows file content. Example output:</p> <pre><code>Hello, world!\n</code></pre> <p>The second attempt to run the <code>signed-hello.efi</code> file will ends with information about access denied displayed. Example output:</p> <pre><code>Command Error Status: Access Denied\n</code></pre> <p>After selecting the <code>Reset Secure Boot Keys</code> option, the Secure boot state should be automatically enabled.</p>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo008001-attempt-to-enroll-the-key-in-the-incorrect-format-firmware","title":"SBO008.001 Attempt to enroll the key in the incorrect format (firmware)","text":"<p>Test description</p> <p>This test verifies that Secure Boot doesn't allow enrolling keys in the incorrect format.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> <li>Additional <code>USB storage</code> - at least 1GB - for keeping files for booting</li> </ol> <p>Test steps</p> <ol> <li>Run     sb-img-wrapper.sh     script to generate certificate in wrong format.</li> <li> <p>Flash generated <code>BAD_FORMAT.img</code> into <code>USB storage</code> using the following     command:</p> <pre><code>sudo dd if=path/to/BAD_FORMAT.img of=/dev/sdx\n</code></pre> </li> <li> <p>Plug the <code>USB storage</code> into DUT.</p> </li> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup     Menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set the <code>Secure Boot Mode</code> field to <code>Custom Mode</code>.</li> <li>Select options in the given order: <code>Advanced Secure Boot Keys Management</code> -&gt;     <code>DB Options</code> -&gt; <code>Enroll Signature</code> -&gt; <code>Enroll Signature Using File</code></li> <li>Select the file with the <code>.der</code> extension from the <code>USB storage</code>.</li> <li>Select the <code>Commit Changes and Exit</code> option.</li> </ol> <p>Expected result</p> <p>The popup with information about <code>ERROR: Unsupported file type!</code> should appear.</p>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo009001-attempt-to-boot-file-signed-for-intermediate-certificate","title":"SBO009.001 Attempt to boot file signed for intermediate certificate","text":"<p>Test description</p> <p>This test verifies that a file signed with an intermediate certificate can be executed.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo.</li> <li>Additional <code>USB storage</code> - at least 1GB - for keeping files for booting.</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Run     sb-img-wrapper.sh     script to generate keys and sign efi file.</li> <li> <p>Flash generated <code>INTERMEDIATE.img</code> into <code>USB storage</code> using the following     command:</p> <pre><code>sudo dd if=path/to/INTERMEDIATE.img of=/dev/sdx\n</code></pre> </li> <li> <p>Plug the <code>USB storage</code> into DUT.</p> </li> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI setup     menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set the <code>Current Secure Boot State</code> field to <code>Enabled</code>.</li> <li>Set the <code>Secure Boot Mode</code> field to <code>Custom Mode</code>.</li> <li>Select options in the given order: <code>Custom Secure Boot Options</code> -&gt;     <code>DB Options</code> -&gt; <code>Enroll Signature</code> -&gt; <code>Enroll Signature Using File</code>.</li> <li>Select the certificate from the <code>USB storage</code>.</li> <li>Select the <code>Commit Changes and Exit</code> option.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>Reset</code> option.</li> <li>While the DUT is booting, hold the <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the <code>UEFI Shell</code> option using the arrow keys and press <code>Enter</code>.</li> <li> <p>In the shell open the <code>USB storage</code> by executing the following command:</p> <pre><code>FS0:\n</code></pre> <p>One of the filesystems in the FS list will be the USB storage - typically <code>FS0:</code></p> </li> <li> <p>Boot the previously prepared file by typing its full name:</p> <pre><code>signed-hello.efi\n</code></pre> </li> </ol> <p>Expected result</p> <p>File boots correctly (no information: <code>Command Error Status: Access Denied</code> on the output) and the output of the command shows file content. Example output:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo010001-check-support-for-rsa2k-signed-certificates","title":"SBO010.001 Check support for rsa2k signed certificates","text":"<p>Test description</p> <p>This test verifies that a file can be booted via Secure Boot using an RSA2048 signed certificate.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo.</li> <li>Additional <code>USB storage</code> - at least 1GB - for keeping files for booting.</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Run     sb-img-wrapper.sh     script to generate keys and sign efi file.</li> <li> <p>Flash generated <code>RSA2048.img</code> into <code>USB storage</code> using the following     command:</p> <pre><code>sudo dd if=path/to/RSA2048.img of=/dev/sdx\n</code></pre> </li> <li> <p>Plug the <code>USB storage</code> into DUT.</p> </li> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI setup     menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set the <code>Current Secure Boot State</code> field to <code>Enabled</code>.</li> <li>Set the <code>Secure Boot Mode</code> field to <code>Custom Mode</code>.</li> <li>Select options in the given order: <code>Custom Secure Boot Options</code> -&gt;     <code>DB Options</code> -&gt; <code>Enroll Signature</code> -&gt; <code>Enroll Signature Using File</code></li> <li>Select the certificate from the <code>USB storage</code>.</li> <li>Select the <code>Commit Changes and Exit</code> option.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>Reset</code> option.</li> <li>While the DUT is booting, hold the <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the <code>UEFI Shell</code> option using the arrow keys and press <code>Enter</code>.</li> <li> <p>In the shell open the <code>USB storage</code> by executing the following command:</p> <pre><code>FS0:\n</code></pre> <p>One of the filesystems in the FS list will be the USB storage - typically <code>FS0:</code></p> </li> <li> <p>Boot the previously prepared file by typing its full name:</p> <pre><code>signed-hello.efi\n</code></pre> </li> </ol> <p>Expected result</p> <p>File boots correctly (no information: <code>Command Error Status: Access Denied</code> on the output) and the output of the command shows file content. Example output:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo010002-check-support-for-rsa3k-signed-certificates","title":"SBO010.002 Check support for rsa3k signed certificates","text":"<p>Test description</p> <p>This test verifies that a file can be booted via Secure Boot using an RSA3072 signed certificate.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo.</li> <li>Additional <code>USB storage</code> - at least 1GB - for keeping files for booting.</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Run     sb-img-wrapper.sh     script to generate keys and sign efi file.</li> <li> <p>Flash generated <code>RSA3072.img</code> into <code>USB storage</code> using the following     command:</p> <pre><code>sudo dd if=path/to/RSA3072.img of=/dev/sdx\n</code></pre> </li> <li> <p>Plug the <code>USB storage</code> into DUT.</p> </li> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI setup     menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set the <code>Current Secure Boot State</code> field to <code>Enabled</code>.</li> <li>Set the <code>Secure Boot Mode</code> field to <code>Custom Mode</code>.</li> <li>Select options in the given order: <code>Custom Secure Boot Options</code> -&gt;     <code>DB Options</code> -&gt; <code>Enroll Signature</code> -&gt; <code>Enroll Signature Using File</code></li> <li>Select the certificate from the <code>USB storage</code>.</li> <li>Select the <code>Commit Changes and Exit</code> option.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>Reset</code> option.</li> <li>While the DUT is booting, hold the <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the <code>UEFI Shell</code> option using the arrow keys and press <code>Enter</code>.</li> <li> <p>In the shell open the <code>USB storage</code> by executing the following command:</p> <pre><code>FS0:\n</code></pre> <p>One of the filesystems in the FS list will be the USB storage - typically <code>FS0:</code></p> </li> <li> <p>Boot the previously prepared file by typing its full name:</p> <pre><code>signed-hello.efi\n</code></pre> </li> </ol> <p>Expected result</p> <p>File boots correctly (no information: <code>Command Error Status: Access Denied</code> on the output) and the output of the command shows file content. Example output:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo010003-check-support-for-rsa4k-signed-certificates","title":"SBO010.003 Check support for rsa4k signed certificates","text":"<p>Test description</p> <p>This test verifies that a file can be booted via Secure Boot using an RSA4096 signed certificate.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo.</li> <li>Additional <code>USB storage</code> - at least 1GB - for keeping files for booting.</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Run     sb-img-wrapper.sh     script to generate keys and sign efi file.</li> <li> <p>Flash generated <code>RSA4096.img</code> into <code>USB storage</code> using the following     command:</p> <pre><code>sudo dd if=path/to/RSA4096.img of=/dev/sdx\n</code></pre> </li> <li> <p>Plug the <code>USB storage</code> into DUT.</p> </li> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI setup     menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set the <code>Current Secure Boot State</code> field to <code>Enabled</code>.</li> <li>Set the <code>Secure Boot Mode</code> field to <code>Custom Mode</code>.</li> <li>Select options in the given order: <code>Custom Secure Boot Options</code> -&gt;     <code>DB Options</code> -&gt; <code>Enroll Signature</code> -&gt; <code>Enroll Signature Using File</code></li> <li>Select the certificate from the <code>USB storage</code>.</li> <li>Select the <code>Commit Changes and Exit</code> option.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>Reset</code> option.</li> <li>While the DUT is booting, hold the <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the <code>UEFI Shell</code> option using the arrow keys and press <code>Enter</code>.</li> <li> <p>In the shell open the <code>USB storage</code> by executing the following command:</p> <pre><code>FS0:\n</code></pre> <p>One of the filesystems in the FS list will be the USB storage - typically <code>FS0:</code></p> </li> <li> <p>Boot the previously prepared file by typing its full name:</p> <pre><code>signed-hello.efi\n</code></pre> </li> </ol> <p>Expected result</p> <p>File boots correctly (no information: <code>Command Error Status: Access Denied</code> on the output) and the output of the command shows file content. Example output:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo010004-check-support-for-ecdsa256-signed-certificates","title":"SBO010.004 Check support for ecdsa256 signed certificates","text":"<p>Test description</p> <p>This test verifies that a file can be booted via Secure Boot using an ESCDA256 signed certificate.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo.</li> <li>Additional <code>USB storage</code> - at least 1GB - for keeping files for booting.</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Run     sb-img-wrapper.sh     script to generate keys and sign efi file.</li> <li> <p>Flash generated <code>ECDSA256.img</code> into <code>USB storage</code> using the following     command:</p> <pre><code>sudo dd if=path/to/ECDSA256.img of=/dev/sdx\n</code></pre> </li> <li> <p>Plug the <code>USB storage</code> into DUT.</p> </li> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI setup     menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set the <code>Current Secure Boot State</code> field to <code>Enabled</code>.</li> <li>Set the <code>Secure Boot Mode</code> field to <code>Custom Mode</code>.</li> <li>Select options in the given order: <code>Custom Secure Boot Options</code> -&gt;     <code>DB Options</code> -&gt; <code>Enroll Signature</code> -&gt; <code>Enroll Signature Using File</code></li> <li>Select the certificate from the <code>USB storage</code>.</li> <li>Select the <code>Commit Changes and Exit</code> option.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>Reset</code> option.</li> <li>While the DUT is booting, hold the <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the <code>UEFI Shell</code> option using the arrow keys and press <code>Enter</code>.</li> <li> <p>In the shell open the <code>USB storage</code> by executing the following command:</p> <pre><code>FS0:\n</code></pre> <p>One of the filesystems in the FS list will be the USB storage - typically <code>FS0:</code></p> </li> <li> <p>Boot the previously prepared file by typing its full name:</p> <pre><code>signed-hello.efi\n</code></pre> </li> </ol> <p>Expected result</p> <p>File boots correctly (no information: <code>Command Error Status: Access Denied</code> on the output) and the output of the command shows file content. Example output:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo010005-check-support-for-ecdsa384-signed-certificates","title":"SBO010.005 Check support for ecdsa384 signed certificates","text":"<p>Test description</p> <p>This test verifies that a file can be booted via Secure Boot using an ESCDA384 signed certificate.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo.</li> <li>Additional <code>USB storage</code> - at least 1GB - for keeping files for booting.</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Run     sb-img-wrapper.sh     script to generate keys and sign efi file.</li> <li> <p>Flash generated <code>ECDSA384.img</code> into <code>USB storage</code> using the following     command:</p> <pre><code>sudo dd if=path/to/ECDSA384.img of=/dev/sdx\n</code></pre> </li> <li> <p>Plug the <code>USB storage</code> into DUT.</p> </li> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI setup     menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set the <code>Current Secure Boot State</code> field to <code>Enabled</code>.</li> <li>Set the <code>Secure Boot Mode</code> field to <code>Custom Mode</code>.</li> <li>Select options in the given order: <code>Custom Secure Boot Options</code> -&gt;     <code>DB Options</code> -&gt; <code>Enroll Signature</code> -&gt; <code>Enroll Signature Using File</code></li> <li>Select the certificate from the <code>USB storage</code>.</li> <li>Select the <code>Commit Changes and Exit</code> option.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>Reset</code> option.</li> <li>While the DUT is booting, hold the <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the <code>UEFI Shell</code> option using the arrow keys and press <code>Enter</code>.</li> <li> <p>In the shell open the <code>USB storage</code> by executing the following command:</p> <pre><code>FS0:\n</code></pre> <p>One of the filesystems in the FS list will be the USB storage - typically <code>FS0:</code></p> </li> <li> <p>Boot the previously prepared file by typing its full name:</p> <pre><code>signed-hello.efi\n</code></pre> </li> </ol> <p>Expected result</p> <p>File boots correctly (no information: <code>Command Error Status: Access Denied</code> on the output) and the output of the command shows file content. Example output:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo010006-check-support-for-ecdsa521-signed-certificates","title":"SBO010.006 Check support for ecdsa521 signed certificates","text":"<p>Test description</p> <p>This test verifies that a file can be booted via Secure Boot using an ESCDA521 signed certificate.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo.</li> <li>Additional <code>USB storage</code> - at least 1GB - for keeping files for booting.</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Run     sb-img-wrapper.sh     script to generate keys and sign efi file.</li> <li> <p>Flash generated <code>ECDSA521.img</code> into <code>USB storage</code> using the following     command:</p> <pre><code>sudo dd if=path/to/ECDSA521.img of=/dev/sdx\n</code></pre> </li> <li> <p>Plug the <code>USB storage</code> into DUT.</p> </li> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI setup     menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set the <code>Current Secure Boot State</code> field to <code>Enabled</code>.</li> <li>Set the <code>Secure Boot Mode</code> field to <code>Custom Mode</code>.</li> <li>Select options in the given order: <code>Custom Secure Boot Options</code> -&gt;     <code>DB Options</code> -&gt; <code>Enroll Signature</code> -&gt; <code>Enroll Signature Using File</code></li> <li>Select the certificate from the <code>USB storage</code>.</li> <li>Select the <code>Commit Changes and Exit</code> option.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>Reset</code> option.</li> <li>While the DUT is booting, hold the <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the <code>UEFI Shell</code> option using the arrow keys and press <code>Enter</code>.</li> <li> <p>In the shell open the <code>USB storage</code> by executing the following command:</p> <pre><code>FS0:\n</code></pre> <p>One of the filesystems in the FS list will be the USB storage - typically <code>FS0:</code></p> </li> <li> <p>Boot the previously prepared file by typing its full name:</p> <pre><code>signed-hello.efi\n</code></pre> </li> </ol> <p>Expected result</p> <p>File boots correctly (no information: <code>Command Error Status: Access Denied</code> on the output) and the output of the command shows file content. Example output:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo011001-attempt-to-enroll-expired-certificate-and-boot-signed-image","title":"SBO011.001 Attempt to enroll expired certificate and boot signed image","text":"<p>Test description</p> <p>This test verifies that an expired certificate cannot be used to verify a booted image.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo.</li> <li>Additional <code>USB storage</code> - at least 1GB - for keeping files for booting.</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Run     sb-img-wrapper.sh     script to generate keys and sign efi file.</li> <li> <p>Flash generated <code>EXPIRED.img</code> into <code>USB storage</code> using the following     command:</p> <pre><code>sudo dd if=path/to/EXPIRED.img of=/dev/sdx\n</code></pre> </li> <li> <p>Plug the <code>USB storage</code> into DUT.</p> </li> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI setup     menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set the <code>Current Secure Boot State</code> field to <code>Enabled</code>.</li> <li>Set the <code>Secure Boot Mode</code> field to <code>Custom Mode</code>.</li> <li>Select options in the given order: <code>Custom Secure Boot Options</code> -&gt;     <code>DB Options</code> -&gt; <code>Enroll Signature</code> -&gt; <code>Enroll Signature Using File</code></li> <li>Select the certificate from the <code>USB storage</code>.</li> <li>Select the <code>Commit Changes and Exit</code> option.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>Reset</code> option.</li> <li>While the DUT is booting, hold the <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Select the <code>UEFI Shell</code> option using the arrow keys and press <code>Enter</code>.</li> <li> <p>In the shell open the <code>USB storage</code> by executing the following command:</p> <pre><code>FS0:\n</code></pre> <p>One of the filesystems in the FS list will be the USB storage - typically <code>FS0:</code></p> </li> <li> <p>Boot the previously prepared file by typing its full name:</p> <pre><code>signed-hello.efi\n</code></pre> </li> </ol> <p>Expected result</p> <p>File does not boot correctly: <code>Command Error Status: Access Denied</code>.</p>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo012001-boot-os-signed-and-enrolled-from-inside-system-ubuntu","title":"SBO012.001 Boot OS Signed And Enrolled From Inside System (Ubuntu)","text":"<p>Test description</p> <p>This test verifies that OS boots after enrolling keys and signing system from inside.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo.</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu.</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> <li>Install the <code>sbctl</code> package through git by following installation     guide.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI setup     menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set the <code>Secure Boot Mode</code> field to <code>Custom Mode</code>.</li> <li>Erase Secure Boot keys select options in the given order: <code>Custom Secure Boot     Options</code> -&gt; <code>DB Options</code> -&gt; <code>Enroll Signature</code> -&gt; <code>Erase all Secure Boot     Keys</code></li> <li>Press <code>F10</code> to save changes.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>Reset</code> option.</li> <li>The DUT will now attempt to boot <code>OPERATING_SYSTEM</code>.</li> <li>Login to <code>OPERATING_SYSTEM</code>.</li> <li> <p>Remove Old Secure Boot keys:</p> <pre><code>rm -rf /usr/share/secureboot\n</code></pre> <p>Note: <code>root</code> right might be needed.</p> </li> <li> <p>Generate new Secure Boot keys:</p> <pre><code>sbctl create-keys\n</code></pre> <p>Note: <code>root</code> rights might be needed.</p> </li> <li> <p>Enroll generated Secure Boot keys:</p> <pre><code>sbctl enroll-keys --yes-this-might-brick-my-machine\n</code></pre> <p>Note: <code>root</code> rights might be needed.</p> </li> <li> <p>Sign all components in <code>OPERATING_SYSTEM</code>:</p> <pre><code>sbctl verify | awk -F ' ' '{print $2}' | tail -n+2 | xargs -I \"#\" sbctl sign \"#\"\n</code></pre> <p>Note: <code>root</code> rights might be needed.</p> </li> <li> <p>Reboot <code>OPERATING_SYSTEM</code>.</p> </li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI setup     menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set the <code>Current Secure Boot State</code> field to <code>Enabled</code>.</li> <li>Press <code>F10</code> to save changes.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>Reset</code> option.</li> <li>The DUT will now attempt to boot <code>OPERATING_SYSTEM</code>.</li> <li>Login to <code>OPERATING_SYSTEM</code>.</li> <li> <p>Check if Secure Boot is enabled:</p> <pre><code>dmesg | grep secureboot\n</code></pre> <p>Note: <code>root</code> rights might be needed.</p> </li> </ol> <p>Expected result</p> <p>In <code>dmesg</code> output should be a line informing that Secure Boot is enabled.</p>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo013001-check-automatic-certificate-provisioning","title":"SBO013.001 Check automatic certificate provisioning","text":"<p>Test description</p> <p>This test verifies that the automatic certificate provisioning will install custom keys which will make Ubuntu unbootable. Before launching test, make sure that DTS with automatic certificate provisioning is attached and can be booted on DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo.</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu.</li> <li>Additional <code>USB storage</code>for keeping Dasharo Tools Suite.</li> <li>Dasharo Tools Suite with UEFI secure boot support.</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> <li>Proceed with the DTS: Build image with UEFI Secure Boot     support.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI setup     menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set the <code>Secure Boot Mode</code> field to <code>Custom Mode</code>.</li> <li>Erase Secure Boot keys select options in the given order: <code>Custom Secure Boot     Options</code> -&gt; <code>DB Options</code> -&gt; <code>Enroll Signature</code> -&gt; <code>Erase all Secure Boot     Keys</code>.</li> <li>Press <code>F10</code> to save changes.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>Reset</code> option.</li> <li>While the DUT is booting, hold the <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Boot Dasharo Tools Suite from <code>USB Storage</code>.</li> <li>Wait until Dasharo Tools Suite enrolls keys and resets the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI setup     menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set the <code>Current Secure Boot State</code> field to <code>Enabled</code>.</li> <li>Press <code>F10</code> to save changes.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>Reset</code> option.</li> <li>Verify by booting signed Dasharo Tools Suite:<ol> <li>While the DUT is booting, hold the <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Boot Dasharo Tools Suite from <code>USB Storage</code>.</li> </ol> </li> <li>Reboot the DUT.</li> <li>Verify by booting unsigned Ubuntu:<ol> <li>While the DUT is booting, hold the <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Boot <code>OPERATING_SYSTEM</code>.</li> </ol> </li> </ol> <p>Expected result</p> <p>Dasharo Tools Suite system signed with custom keys should boot while Ubuntu should not boot as it is signed with Microsoft keys.</p>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo013002-check-automatic-certificate-provisioning-kek-certificate","title":"SBO013.002 Check automatic certificate provisioning KEK certificate","text":"<p>Test description</p> <p>This test verifies that the automatic certificate provisioning installs the expected KEK certificate. Before launching test, make sure that DTS with automatic certificate provisioning is attached and can be booted on DUT.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo.</li> <li><code>OPERATING_SYSTEM</code> = Dasharo Tools Suite.</li> <li>Additional <code>USB storage</code>for keeping Dasharo Tools Suite.</li> <li>Dasharo Tools Suite with UEFI secure boot support.</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> <li>Proceed with the DTS: Build image with UEFI Secure Boot support.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI setup     menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set the <code>Secure Boot Mode</code> field to <code>Custom Mode</code>.</li> <li>Erase Secure Boot keys select options in the given order: <code>Custom Secure Boot     Options</code> -&gt; <code>DB Options</code> -&gt; <code>Enroll Signature</code> -&gt; <code>Erase all Secure Boot     Keys</code>.</li> <li>Press <code>F10</code> to save changes.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>Reset</code> option.</li> <li>While the DUT is booting, hold the <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Boot Dasharo Tools Suite from <code>USB Storage</code>.</li> <li>Wait until Dasharo Tools Suite enrolls keys and resets the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI setup     menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set the <code>Current Secure Boot State</code> field to <code>Enabled</code>.</li> <li>Press <code>F10</code> to save changes.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>Reset</code> option.</li> <li>While the DUT is booting, hold the <code>BOOT_MENU_KEY</code> to enter the boot menu.</li> <li>Boot Dasharo Tools Suite from <code>USB Storage</code>.</li> <li>Enter shell in Dasharo Tools Suite by pressing <code>9</code>.</li> <li> <p>Compare the current KEK certificate with the certificate that should be     enrolled:</p> <ol> <li> <p>Download the sample certificate:</p> <pre><code>wget https://cloud.3mdeb.com/index.php/s/FGdaGq2QqnGWQew/download/KEK.crt -O /tmp/first_certificate.crt\n</code></pre> </li> <li> <p>Convert the sample certificate:</p> <pre><code>openssl x509 -in /tmp/first_certificate.crt -noout -text &gt; /tmp/first_certificate.crt\n</code></pre> </li> <li> <p>Export already enrolled certificate:</p> <pre><code>mokutil --kek &gt; /tmp/second_certificate.crt\n</code></pre> </li> <li> <p>Compare the certificates:</p> <pre><code>diff /tpm/first_certificate.crt /tmp/second_certificate.crt\n</code></pre> </li> </ol> </li> </ol> <p>Expected result</p> <p>The data provided by both certificates should be equal, the form of the compared data might differ.</p>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo014001-enroll-certificates-using-sbctl","title":"SBO014.001 Enroll certificates using sbctl","text":"<p>Test description</p> <p>This test erases Secure Boot keys from the BIOS menu and verifies if new keys can be enrolled from the operating system using <code>sbctl</code>.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo.</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu.</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> <li>Install the <code>sbctl</code> package through git by following installation     guide.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI setup     menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set the <code>Secure Boot Mode</code> field to <code>Custom Mode</code>.</li> <li>Erase Secure Boot keys select options in the given order: <code>Custom Secure Boot     Options</code> -&gt; <code>DB Options</code> -&gt; <code>Enroll Signature</code> -&gt; <code>Erase all Secure Boot     Keys</code></li> <li>Press <code>F10</code> to save changes.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>Reset</code> option.</li> <li>The DUT will now attempt to boot <code>OPERATING_SYSTEM</code>.</li> <li>Login to <code>OPERATING_SYSTEM</code>.</li> <li> <p>Remove old Secure Boot keys:</p> <pre><code>rm -rf /usr/share/secureboot\n</code></pre> <p>Note: <code>root</code> rights might be needed.</p> </li> <li> <p>Generate new Secure Boot keys:</p> <pre><code>sbctl create-keys\n</code></pre> <p>Note: <code>root</code> rights might be needed.</p> </li> <li> <p>Enroll generated Secure Boot keys:</p> <pre><code>sbctl enroll-keys --yes-this-might-brick-my-machine\n</code></pre> <p>Note: <code>root</code> rights might be needed.</p> </li> <li> <p>Restart the DUT.</p> </li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI setup     menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set the <code>Current Secure Boot State</code> field to <code>Enabled</code>.</li> <li>Press <code>F10</code> to save changes.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>Reset</code> option.</li> </ol> <p>Expected result</p> <p>You should not be able to boot the system after enrolling the keys and enabling Secure Boot.</p>"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo015001-attempt-to-enroll-the-key-in-the-incorrect-format-os","title":"SBO015.001 Attempt to enroll the key in the incorrect format (OS)","text":"<p>Test description</p> <p>This test verifies that it is impossible to load a certificate in the wrong file format from the operating system while using <code>sbctl</code>.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo.</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu.</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> <li>Install the <code>sbctl</code> package through git by following installation     guide.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI setup     menu.</li> <li>Enter the <code>Device Manager</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Secure Boot Configuration</code> submenu.</li> <li>Set the <code>Secure Boot Mode</code> field to <code>Custom Mode</code>.</li> <li>Erase Secure Boot keys select options in the given order: <code>Custom Secure Boot     Options</code> -&gt; <code>DB Options</code> -&gt; <code>Enroll Signature</code> -&gt; <code>Erase all Secure Boot     Keys</code></li> <li>Press <code>F10</code> to save changes.</li> <li>Press <code>ESC</code> until the setup menu.</li> <li>Select the <code>Reset</code> option.</li> <li>The DUT will now attempt to boot <code>OPERATING_SYSTEM</code>.</li> <li>Login to <code>OPERATING_SYSTEM</code>.</li> <li> <p>Remove Old Secure Boot keys:</p> <pre><code>rm -rf /usr/share/secureboot\n</code></pre> <p>Note: <code>root</code> rights might be needed.</p> </li> <li> <p>Generate new Secure Boot keys:</p> <pre><code>sbctl create-keys\n</code></pre> <p>Note: <code>root</code> rights might be needed.</p> </li> <li> <p>Generate wrong format keys and move them to the appropriate locations:</p> <pre><code>openssl ecparam -genkey -name secp384r1 -out db.key &amp;&amp; openssl req -new -x509 -key db.key -out db.pem -days 365 -subj \"/CN=3mdeb_test\"\nopenssl ecparam -genkey -name secp384r1 -out PK.key &amp;&amp; openssl req -new -x509 -key PK.key -out PK.pem -days 365 -subj \"/CN=3mdeb_test\"\nopenssl ecparam -genkey -name secp384r1 -out KEK.key &amp;&amp; openssl req -new -x509 -key KEK.key -out KEK.pem -days 365 -subj \"/CN=3mdeb_test\"\nmv db.key /usr/share/secureboot/keys/db/\nmv PK.key /usr/share/secureboot/keys/PK/\nmv KEK.key /usr/share/secureboot/keys/KEK/\n</code></pre> <p>Note: <code>root</code> rights might be needed.</p> </li> <li> <p>Attempt to enroll generated Secure Boot keys:</p> <pre><code>sbctl enroll-keys --yes-this-might-brick-my-machine\n</code></pre> <p>Note: <code>root</code> rights might be needed.</p> </li> </ol> <p>Expected result</p> <p>Utility <code>sbctl</code> should fail while enrolling keys.</p>"},{"location":"unified-test-documentation/dasharo-security/207-boot-guard-support/","title":"Dasharo Security: Boot Guard support","text":""},{"location":"unified-test-documentation/dasharo-security/207-boot-guard-support/#bgs001001-boot-guard-support-ubuntu","title":"BGS001.001 Boot Guard support (Ubuntu)","text":"<p>Test description</p> <p>Intel Boot Guard is a hardware-based technology intended to protect the device against executing non-genuine firmware, which could happen when a possible attacker has bypassed protection against modification of BIOS. This test aims to verify that the implemented Boot Guard mechanism works correctly.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> <li>Download <code>cbmem</code> from the     cloud to the DUT.</li> <li>Disable Secure Boot.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and execute the following command:</p> <pre><code>sudo ./cbmem -1 | grep CBnT\n</code></pre> </li> <li> <p>Analyze the output from the command.</p> </li> </ol> <p>Expected result</p> <p>The output of the command should indicate the state of the Boot Guard.</p> <p>Example output:</p> <pre><code>CBnT: SACM INFO MSR (0x13A) raw: 0x000000130000007d\nCBnT:   NEM status:                 1\nCBnT:   TPM type:                   TPM 2.0\nCBnT:   TPM success:                1\nCBnT:   FACB:                       1\nCBnT:   measured boot:              1\nCBnT:   verified boot:              1\nCBnT:   revoked:                    0\nCBnT:   BtG capable:                1\nCBnT:   Server TXT capable:         0\nCBnT: BOOTSTATUS (0xA0) raw: 0x1840000080000000\nCBnT:   TXT startup success:        0\nCBnT:   BtG startup success:        1\nCBnT:   Block boot enabled:         0\nCBnT:   PFR startup success:        0\nCBnT:   Memory power down executed: 0\nCBnT:   BtG thread sync failed:     0\nCBnT:   Bios trusted:               1\nCBnT:   TXT disabled by policy:     1\nCBnT:   Bootguard startup error:    0\nCBnT:   TXT ucode or ACM error:     0\nCBnT:   S-ACM success:              0\nCBnT: ERRORCODE (0x30) raw: 0x00000000\nCBnT: TXT disabled in Policy\nCBnT: BIOSACM_ERRORCODE (0x328) raw: 0xc000acf0\nCBnT: BIOSACM_ERRORCODE: TXT ucode or ACM error\nCBnT:   AC Module Type:          BIOS ACM Error\nCBnT:   class:                   0xf\nCBnT:   major:                   0xb\nCBnT:   External:                0x1\n</code></pre> <p>During the analyzing process, the main thing is to pay attention to the following:</p> <ol> <li>The field <code>NEM status</code> should have the value 1.</li> <li>If the Boot Guard profile is 4 or 5, the field <code>FACB</code> should have the value     1.</li> <li>If the Boot Guard profile is 3 or 5, the fields <code>measured boot</code> and     <code>verified boot</code> should have the value 1.</li> <li>If TPM is physically mounted on the platform, the <code>TPM type</code> field should     contain information about the type of the mounted TPM; also, in that     situation, field <code>TPM success</code> should have the value 1.</li> </ol>"},{"location":"unified-test-documentation/dasharo-security/208-opal-disk-password-support/","title":"Dasharo Security: TCG OPAL disk password support","text":""},{"location":"unified-test-documentation/dasharo-security/208-opal-disk-password-support/#dmp001001-tcg-opal-disk-password-set-and-check","title":"DMP001.001 TCG OPAL disk password set and check","text":"<p>Test description</p> <p>This suite tests disk password that can be set on the disk. After setting it up it is required to type in the password at every boot. The test password used is <code>123</code> and after setting it up it is removed.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Enter Setup Menu Tianocore</li> <li>Open <code>Device manager</code></li> <li>Open <code>TCG Drive Management</code></li> <li>Select the disk</li> <li>Check <code>Enable Feature</code> option</li> <li>Save and restart</li> <li>Type in the new password</li> <li>Confirm the password</li> <li>Enter Setup Menu Tianocore</li> <li>Restart to test if password is set</li> <li>Type in the password - it should be successful</li> </ol> <p>Removing the password</p> <ol> <li>Enter Setup Menu Tianocore</li> <li>Open <code>Device manager</code></li> <li>Open <code>TCG Drive Management</code></li> <li>Select the disk</li> <li>Check <code>Admin Revert to factory default and Disable</code></li> <li>Save and restart</li> <li>Type in the password to unlock</li> <li>Type in the password to remove it</li> <li>Enter Setup Menu Tianocore</li> <li>Reset</li> <li>Confirm the password prompt do not appear</li> </ol> <p>Expected result</p> <p>Password prompt should show up:</p> <ul> <li>after setting up the password option</li> <li>after reboot</li> <li>only once as password removal confirmation</li> </ul>"},{"location":"unified-test-documentation/dasharo-security/20F-me-neuter/","title":"Dasharo Security: ME neuter/disable","text":""},{"location":"unified-test-documentation/dasharo-security/20F-me-neuter/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-security/20F-me-neuter/#mne001001-intel-me-mode-option-is-available-and-has-the-correct-default-state","title":"MNE001.001 Intel ME mode option is available and has the correct default state","text":"<p>Test description</p> <p>This test aims to verify that the <code>Intel ME mode</code> state after flashing the platform with the Dasharo firmware is correct.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup     Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Intel Management Engine Options</code> submenu.</li> <li>Verify the <code>Intel ME mode</code> field.</li> </ol> <p>Expected result</p> <p>The <code>Intel ME mode</code> field should inform that the current state is <code>Enabled</code>.</p>"},{"location":"unified-test-documentation/dasharo-security/20F-me-neuter/#mne002201-intel-me-mode-option-enabled-works-correctly-ubuntu","title":"MNE002.201 Intel ME mode option Enabled works correctly (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-security/20F-me-neuter/#mne004201-intel-me-mode-option-disable-hap-works-correctly-ubuntu","title":"MNE004.201 Intel ME mode option Disable (HAP) works correctly (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-security/20F-me-neuter/#mne005201-pci-express-50-port-is-functional-when-me-disabled-ubuntu","title":"MNE005.201 PCI Express 5.0 port is functional when ME disabled (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that <code>Intel ME mode</code> option in state Disable (HAP) or Disable (Soft) does not break the PCIe 5.0 port functionality and the caching of PCIe 5.0 firmware by Dasharo works.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> <li>DUT (Alder Lake or newer) with PCIe 5.0 port and a PCIe device plugged to    the port.</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Download <code>cbmem</code> from the     cloud to the DUT.</li> <li>Disable Secure Boot.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup     Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Intel Management Engine Options</code> submenu.</li> <li>Verify that the <code>Intel ME mode</code> option is in state <code>Disable (HAP)</code> or    <code>Disable (Soft)</code> - if not, using the arrow keys and <code>Enter</code>, choose option    <code>Disable (HAP)</code> or <code>Disable (Soft)</code>.</li> <li>Press <code>F10</code> to save the changes.</li> <li>If necessary - press <code>Y</code> to confirm saving the changes.</li> <li>Go back to the main menu using the <code>ESC</code> key.</li> <li>Select the <code>Reset</code> option to apply the settings and reboot.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>sudo cbmem -1 &gt; cbmem.log\nlspci\nlspci -t\n</code></pre> </li> <li> <p>Note the results. Repeat all steps to cover both disable methods.</p> </li> </ol> <p>Expected result</p> <p>The output of the command should contain the information about PCI Express 5.0 interface located at PCI 00:01.0. Also the device plugged to the PCI port 00:01.0 should be visible and functional.</p> <p>Example of desired output:</p> <pre><code>lspci -t\n-[0000:00]-+-00.0\n           +-01.0-[01]--+-00.0\n           |            \\-00.1\n           +-02.0\n           +-06.0-[02]----00.0\n           +-14.0\n           +-14.2\n           +-17.0\n           +-1a.0-[03]----00.0\n           +-1c.0-[04]--\n           +-1c.2-[05]----00.0\n           +-1c.4-[06-08]----00.0-[07-08]----00.0-[08]--+-00.0\n           |                                            \\-00.1\n           +-1d.0-[09]----00.0\n           +-1f.0\n           +-1f.3\n           +-1f.4\n           \\-1f.5\n</code></pre> <pre><code>lspci\n00:00.0 Host bridge: Intel Corporation Device 4648 (rev 02)\n00:01.0 PCI bridge: Intel Corporation 12th Gen Core Processor PCI Express x16 Controller #1 (rev 02)\n00:02.0 Display controller: Intel Corporation AlderLake-S GT1 (rev 0c)\n00:06.0 PCI bridge: Intel Corporation 12th Gen Core Processor PCI Express x4 Controller #0 (rev 02)\n00:14.0 USB controller: Intel Corporation Device 7ae0 (rev 11)\n00:14.2 RAM memory: Intel Corporation Device 7aa7 (rev 11)\n00:17.0 SATA controller: Intel Corporation Device 7ae2 (rev 11)\n00:1a.0 PCI bridge: Intel Corporation Device 7ac8 (rev 11)\n00:1c.0 PCI bridge: Intel Corporation Device 7ab8 (rev 11)\n00:1c.2 PCI bridge: Intel Corporation Device 7aba (rev 11)\n00:1c.4 PCI bridge: Intel Corporation Device 7abc (rev 11)\n00:1d.0 PCI bridge: Intel Corporation Device 7ab0 (rev 11)\n00:1f.0 ISA bridge: Intel Corporation Device 7a84 (rev 11)\n00:1f.3 Audio device: Intel Corporation Device 7ad0 (rev 11)\n00:1f.4 SMBus: Intel Corporation Device 7aa3 (rev 11)\n00:1f.5 Serial bus controller: Intel Corporation Device 7aa4 (rev 11)\n01:00.0 VGA compatible controller: NVIDIA Corporation GA106 [GeForce RTX 3060 Lite Hash Rate] (rev a1)\n01:00.1 Audio device: NVIDIA Corporation Device 228e (rev a1)\n02:00.0 Non-Volatile memory controller: Intel Corporation Device f1aa (rev 03)\n03:00.0 Non-Volatile memory controller: Samsung Electronics Co Ltd NVMe SSD Controller PM9A1/PM9A3/980PRO\n05:00.0 Ethernet controller: Intel Corporation Ethernet Controller I225-V (rev 03)\n06:00.0 PCI bridge: Advanced Micro Devices, Inc. [AMD/ATI] Navi 10 XL Upstream Port of PCI Express Switch (rev c1)\n07:00.0 PCI bridge: Advanced Micro Devices, Inc. [AMD/ATI] Navi 10 XL Downstream Port of PCI Express Switch\n08:00.0 VGA compatible controller: Advanced Micro Devices, Inc. [AMD/ATI] Device 743f (rev c1)\n08:00.1 Audio device: Advanced Micro Devices, Inc. [AMD/ATI] Navi 21 HDMI Audio [Radeon RX 6800/6800 XT / 6900 XT]\n09:00.0 Non-Volatile memory controller: Samsung Electronics Co Ltd NVMe SSD Controller PM9A1/PM9A3/980PRO\n</code></pre> <p>The device that must be visible and working:</p> <pre><code>00:01.0 PCI bridge: Intel Corporation 12th Gen Core Processor PCI Express x16 Controller #1 (rev 02)\n</code></pre> <p>The device behind the port must also be visible, in this example it is:</p> <pre><code>01:00.0 VGA compatible controller: NVIDIA Corporation GA106 [GeForce RTX 3060 Lite Hash Rate] (rev a1)\n01:00.1 Audio device: NVIDIA Corporation Device 228e (rev a1)\n</code></pre> <p>To verify the PCIe 5.0 firmware caching is working, check the <code>cbmem.log</code> for the following string:</p> <pre><code>[INFO ]  Loading HSPHY firmware from cache\n</code></pre> <p>If there are no errors printed nearby concerning the HSPHY, test pass.</p>"},{"location":"unified-test-documentation/dasharo-security/20F-me-neuter/#mne006201-check-intel-me-version-ubuntu","title":"MNE006.201 Check Intel ME version (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-security/20J-bios-lock-support/","title":"Dasharo Security: BIOS lock support","text":"<p>The test suite is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-security/20L-early-boot-dma-protection/","title":"Dasharo Security: Early Boot DMA Protection","text":""},{"location":"unified-test-documentation/dasharo-security/20L-early-boot-dma-protection/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> <li>Download <code>cbmem</code> from the     cloud to the DUT.</li> <li>Disable Secure Boot.</li> </ol>"},{"location":"unified-test-documentation/dasharo-security/20L-early-boot-dma-protection/#edp001001-enable-early-boot-dma-protection-support","title":"EDP001.001 Enable early Boot DMA Protection support","text":"<p>Test description</p> <p>This test aims to verify that the early boot DMA protection might be activated. If the functionality is enabled, the protection against malicious PCIe devices DMA transactions by configuring VT-D/IOMMU should be active.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Download <code>cbmem</code> from the     cloud to the DUT.</li> <li>Disable Secure Boot.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While booting, press the <code>SETUP_MENU_KEY</code> to enter Setup Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Dasharo Security Options</code> submenu.</li> <li>Verify that the <code>Enable early DMA protection</code> field is checked - if not, use     <code>Spacebar</code> to change option settings.</li> <li>Save the changes using <code>F10</code>, and exit from the menu using <code>Esc</code>.</li> <li>Reboot the device.</li> <li>While booting, press <code>BOOT_MENU_KEY</code>  to enter Boot Menu.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Open a terminal window and execute the following command:</li> </ol> <pre><code>sudo ./cbmem -1\n</code></pre> <ol> <li>Note the result.</li> </ol> <p>Expected result</p> <p>The output of the cbmem utility should contain the information, that the DMA protection has been set up.</p> <p>Example output:</p> <pre><code>[DEBUG]  VT-d @ 0xfed91000, version 5.0\n[INFO ]  Setting DMA protection [0x0 - 0x46c00000]\n[INFO ]  Setting DMA protection [0x100000000 - 0x00000008afc00000]\n[INFO ]  Successfully enabled VT-d PMR DMA protection\n</code></pre> <p>Note the memory address ranges in square braces may differ per DUT.</p> <p>If the DUT does not support serial redirection, it is also possible to investigate UEFI Payload logs if VT-d is being used properly. Check for following output:</p> <pre><code>EnableDmar\n&gt;&gt;&gt;&gt;&gt;&gt;EnableDmar() for engine [0] BAR [0xFED90000]\nRootEntryTable 0x4518C000\nEnableDmar: waiting for RTPS bit to be set...\nSet GCMD_REG bits 0x40000000.\nEnableDmar: Waiting B_GSTS_REG_TE ...\nSet GCMD_REG bits 0x80000000.\nVTD (0) enabled!&lt;&lt;&lt;&lt;&lt;&lt;\n&gt;&gt;&gt;&gt;&gt;&gt;EnableDmar() for engine [1] BAR [0xFED91000]\nRootEntryTable 0x44FDD000\nEnableDmar: waiting for RTPS bit to be set...\nSet GCMD_REG bits 0x40000000.\nEnableDmar: Waiting B_GSTS_REG_TE ...\nSet GCMD_REG bits 0x80000000.\nVTD (1) enabled!&lt;&lt;&lt;&lt;&lt;&lt;\nDisablePmr\nPmr(0) not enabled\nPmr(1) disabled\n</code></pre> <p>The most important are <code>VTD (0) enabled!&lt;&lt;&lt;&lt;&lt;&lt;</code> and <code>VTD (1) enabled!&lt;&lt;&lt;&lt;&lt;&lt;</code>. Also the following:</p> <pre><code>DisablePmr\nPmr(0) not enabled\nPmr(1) disabled\n</code></pre> <p>Indicate that VT-D engine 1 had PMR enabled earlier, which is expected.</p> <p>If all above conditions are met, test pass.</p>"},{"location":"unified-test-documentation/dasharo-security/20L-early-boot-dma-protection/#edp002001-disable-early-boot-dma-protection-support","title":"EDP002.001 Disable early Boot DMA Protection support","text":"<p>Test description</p> <p>This test aims to verify that the early boot DMA protection might be deactivated. If the functionality is disabled, the protection against malicious PCIe devices DMA transactions by configuring VT-D/IOMMU should be non-active.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Download <code>cbmem</code> from the     cloud to the DUT.</li> <li>Disable Secure Boot.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While booting, press the <code>SETUP_MENU_KEY</code> to enter Setup Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Dasharo Security Options</code> submenu.</li> <li>Verify that the <code>Enable early DMA protection</code> option is checked - if so, use     <code>Spacebar</code> to change option settings.</li> <li>Save the changes using <code>F10</code>, and exit from the menu using <code>Esc</code>.</li> <li>Reboot the device.</li> <li>While booting, press <code>BOOT_MENU_KEY</code>  to enter Boot Menu.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Open a terminal window and execute the following command:</li> </ol> <pre><code>sudo ./cbmem -1\n</code></pre> <ol> <li>Note the result.</li> </ol> <p>Expected result</p> <p>The output of the cbmem utility should not contain the information, that the DMA protection has been set up.</p> <p>Example output with unwanted results:</p> <pre><code>[DEBUG]  VT-d @ 0xfed91000, version 5.0\n[INFO ]  Setting DMA protection [0x0 - 0x46c00000]\n[INFO ]  Setting DMA protection [0x100000000 - 0x00000008afc00000]\n[INFO ]  Successfully enabled VT-d PMR DMA protection\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/20O-SMM-bios-write-protection/","title":"Dasharo Security: SMM BIOS write protection","text":""},{"location":"unified-test-documentation/dasharo-security/20O-SMM-bios-write-protection/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> <li>Disable Secure Boot.</li> </ol>"},{"location":"unified-test-documentation/dasharo-security/20O-SMM-bios-write-protection/#smm001001-smm-bios-write-protection-enabling-ubuntu","title":"SMM001.001 SMM BIOS write protection enabling (Ubuntu)","text":"<p>Test description</p> <p>SMM BIOS write protection is the method to prevent a specific region of the firmware from being flashed - when enabled allows only SMM code (the privileged code installed by the firmware in the system memory) to write to BIOS flash. This test aims to verify that, the SMM BIOS protection option is available in the <code>Dasharo Security Options</code> and, if the mechanism works correctly - during the attempt of firmware flashing information about the SMM protection is returned.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup     Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Dasharo Security Options</code> submenu.</li> <li>Verify that the <code>Enable SMM BIOS write protection</code> option is chosen - if not,     press <code>Space</code> and then <code>F10</code> to save the changes.</li> <li>If necessary - press <code>Y</code> to confirm saving the changes.</li> <li>Go back to the main menu using the <code>ESC</code> key.</li> <li>Select the <code>Reset</code> option to apply the settings and reboot.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Execute the following command in the terminal to check platform flashing     conditions:</p> <pre><code>flashrom -p internal\n</code></pre> </li> <li> <p>Note the result.</p> </li> </ol> <p>Expected result</p> <p>The output of the flashing command should contain the information, that the BIOS region SMM protection is enabled.</p> <p>Example output:</p> <pre><code>Enabling flash write... Warning: BIOS region SMM protection is enabled!\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/20O-SMM-bios-write-protection/#smm002001-smm-bios-write-protection-disabling-ubuntu","title":"SMM002.001 SMM BIOS write protection disabling (Ubuntu)","text":"<p>Test description</p> <p>SMM BIOS write protection is the method to prevent a specific region of the firmware from being flashed - when enabled allows only SMM code (the privileged code installed by the firmware in the system memory) to write to BIOS flash. This test aims to verify that, after disabling the mechanism, information about SMM protection is not returned any more.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup     Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Dasharo Security Options</code> submenu.</li> <li>Verify that the <code>Enable SMM BIOS write protection</code> option is not chosen - if     so, press <code>Space</code> and then <code>F10</code> to save the changes.</li> <li>If necessary - press <code>Y</code> to confirm saving the changes.</li> <li>Go back to the main menu using the <code>ESC</code> key.</li> <li>Select the <code>Reset</code> option to apply the settings and reboot.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Execute the following command in the terminal to check platform flashing     conditions:</p> <pre><code>flashrom -p internal\n</code></pre> </li> <li> <p>Note the result.</p> </li> </ol> <p>Expected result</p> <p>The output of the flashing command should not contain the information, that the BIOS region SMM protection is enabled.</p> <p>Example output with unwanted results:</p> <pre><code>Enabling flash write... Warning: BIOS region SMM protection is enabled!\n</code></pre>"},{"location":"unified-test-documentation/dasharo-security/20P-boot-menu/","title":"Dasharo Security: Boot menu enable/disable","text":""},{"location":"unified-test-documentation/dasharo-security/20P-boot-menu/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> </ol>"},{"location":"unified-test-documentation/dasharo-security/20P-boot-menu/#bma001001-boot-menu-enabling","title":"BMA001.001 Boot menu enabling","text":"<p>Test description</p> <p>This test aims to verify that, the boot menu is accessible when the <code>Boot menu enabled</code> option in the <code>Dasharo Security Options</code> submenu is chosen.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup    Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Dasharo Security Options</code> submenu.</li> <li>Verify that the <code>Boot menu enabled</code> option is chosen - if not, press <code>Space</code>    and then <code>F10</code> to save the changes.</li> <li>If necessary - press <code>Y</code> to confirm saving the changes.</li> <li>Go back to the main menu using the <code>ESC</code> key.</li> <li>Select the <code>Reset</code> option to apply the settings and reboot.</li> <li>While the DUT is booting, hold the <code>BOOT_MENU_KEY</code> to enter the UEFI Boot    Menu.</li> </ol> <p>Expected result</p> <ol> <li> <p>While the DUT is booting, the prompt    <code>BOOT_MENU_KEY to enter Boot Manager Menu</code> should be displayed.    Example output:</p> <pre><code>F11 to enter Boot Manager Menu\n</code></pre> </li> <li> <p>After using the <code>BOOT MENU KEY</code> during boot, the boot menu should be    displayed.</p> </li> </ol>"},{"location":"unified-test-documentation/dasharo-security/20P-boot-menu/#bma002001-boot-menu-disabling","title":"BMA002.001 Boot menu disabling","text":"<p>Test description</p> <p>This test aims to verify that, the boot menu is not accessible when the <code>Boot menu enabled</code> option in the <code>Dasharo Security Options</code> submenu is not chosen.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Setup    Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu using the arrow keys and Enter.</li> <li>Enter the <code>Dasharo Security Options</code> submenu.</li> <li>Verify that the <code>Boot menu enabled</code> option is not chosen - if so, press    <code>Space</code> and then <code>F10</code> to save the changes.</li> <li>If necessary - press <code>Y</code> to confirm saving the changes.</li> <li>Go back to the main menu using the <code>ESC</code> key.</li> <li>Select the <code>Reset</code> option to apply the settings and reboot.</li> <li>While the DUT is booting, hold the <code>BIOS_SETUP_KEY</code> to enter the UEFI Boot    Menu.</li> </ol> <p>Expected result</p> <ol> <li> <p>While the DUT is booting, the prompt    <code>BOOT_MENU_KEY to enter Boot Manager Menu</code> should not be displayed.    Example of unwanted output:</p> <pre><code>F11 to enter Boot Manager Menu\n</code></pre> </li> <li> <p>Despite using the <code>BIOS_SETUP_KEY</code> boot menu should not be displayed.</p> </li> </ol>"},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/","title":"Dasharo Security: UEFI Setup password","text":""},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol>"},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/#psw001001-check-password-setup-option-availability-and-default-state","title":"PSW001.001 Check Password Setup option availability and default state","text":"<p>Test description</p> <p>This test aims to verify whether <code>User Password Management</code> submenu is available and, whether all options in the submenu have correct default state.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>SETUP_MENU_KEY</code> to enter the <code>Setup Menu</code>.</li> <li>Enter the <code>User Password Management</code> submenu using the arrow keys and Enter.</li> <li>Verify the <code>Admin Password Status</code> field.</li> <li>Verify the <code>Change Admin Password</code> field.</li> </ol> <p>Expected result</p> <ol> <li>The <code>Admin Password Status</code> field should be present and indicate, that     password setup is currently disabled.</li> <li>The <code>Change Admin Password</code> field should be present. After passing the     cursor over this option, information about password minimum terms and     conditions should be displayed.</li> </ol>"},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/#psw002001-password-setting-mechanism-correctness-checking","title":"PSW002.001 Password setting mechanism correctness checking","text":"<p>Test description</p> <p>This test aims to verify whether <code>Change Admin Password</code> option works correctly - after restarting the device and trying to enter the <code>Setup Menu</code>, a window to enter the password will be displayed.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>SETUP_MENU_KEY</code> to enter the <code>Setup Menu</code>.</li> <li>Enter the <code>User Password Management</code> submenu using the arrow keys and Enter.</li> <li>Select the option <code>Change Admin Password</code> by using the arrow keys and Enter.</li> <li>Set the password in accordance with the password minimum terms and     conditions. Make sure the new password is not the same as the last 5     passwords - to be sure, you can set the password 5 times and then     set the actual password.</li> <li>Restart the DUT.</li> <li>Press <code>SETUP_MENU_KEY</code> to enter the <code>Setup Menu</code>.</li> <li>Verify if the password window will be displayed.</li> </ol> <p>Expected result</p> <p>The password window should be displayed correctly.</p>"},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/#psw003001-attempt-to-log-in-with-a-correct-password","title":"PSW003.001 Attempt to log in with a correct password","text":"<p>Test description</p> <p>This test aims to verify whether, after entering the correct Setup password, the <code>Setup menu</code> will be displayed.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT</li> <li>Press <code>SETUP_MENU_KEY</code> to enter the <code>Setup Menu</code>.</li> <li>Enter the correct password and note the result.</li> </ol> <p>Expected result</p> <p>After typing in the correct password <code>Setup menu</code> should be displayed.</p>"},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/#psw004001-attempt-to-log-in-with-an-incorrect-password","title":"PSW004.001 Attempt to log in with an incorrect password","text":"<p>Test description</p> <p>This test aims to verify whether, after entering the incorrect Setup password, the message about the demand for re-entering the password will be displayed.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT</li> <li>Press <code>BOOT_MENU_KEY</code> key to display the boot menu.</li> <li>Enter the incorrect password and note the result.</li> </ol> <p>Expected result</p> <p>After typing in the incorrect password the message about the demand for re-entering the password will be displayed.</p>"},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/#psw005001-attempt-to-log-in-with-an-incorrect-password-3-times","title":"PSW005.001 Attempt to log in with an incorrect password 3 times","text":"<p>Test description</p> <p>This test aims to verify whether, after entering the incorrect Setup password three times, the message about demand for rebooting the DUT will be displayed.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT</li> <li>Press <code>BOOT_MENU_KEY</code> key to display the boot menu.</li> <li>Enter the incorrect password three times and note the result.</li> </ol> <p>Expected result</p> <p>After typing in the incorrect password three times the message about the demand for rebooting the DUT will be displayed.</p>"},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/#psw006001-attempt-to-turn-off-setup-password-functionality","title":"PSW006.001 Attempt to turn off setup password functionality","text":"<p>Test description</p> <p>This test aims to verify whether there is a possibility to turn off the Setup Password functionality by entering empty password.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>SETUP_MENU_KEY</code> to enter the <code>Setup Menu</code>.</li> <li>Enter the <code>User Password Management</code> submenu using the arrow keys and Enter.</li> <li>Select the option <code>Change Admin Password</code> by using the arrow keys and Enter.</li> <li>Set the empty password.</li> <li>Restart the DUT.</li> <li>Press <code>SETUP_MENU_KEY</code> to enter the <code>Setup Menu</code>.</li> <li>Verify if the password window will be displayed.</li> </ol> <p>Expected result</p> <ol> <li>Password window should not be displayed.</li> <li>The DUT should boot into <code>Setup Menu</code>.</li> </ol>"},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/#psw007001-attempt-to-set-non-compilant-password","title":"PSW007.001 Attempt to set non-compilant password","text":"<p>Test description</p> <p>This test aims to verify whether the attempt to set a non-compilant password will be rejected.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>SETUP_MENU_KEY</code> to enter the <code>Setup Menu</code>.</li> <li>Enter the <code>User Password Management</code> submenu using the arrow keys and Enter.</li> <li>Select the option <code>Change Admin Password</code> by using the arrow keys and Enter.</li> <li>Set the password in non-accordance with the password minimum terms and     conditions.</li> </ol> <p>Expected result</p> <ol> <li>The window with the information that requested password is not strong     enough should be displayed.</li> <li>The attempt to set the password should be rejected.</li> </ol>"},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/#psw008001-attempt-to-set-old-password","title":"PSW008.001 Attempt to set old password","text":"<p>Test description</p> <p>UEFI Setup password feature has been equipped with an additional functionality that prevents re-setting one of the last 5 access passwords. This test aims to verify whether the attempt to set old password again will be rejected.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Press <code>SETUP_MENU_KEY</code> to enter the <code>Setup Menu</code>.</li> <li>Enter the <code>User Password Management</code> submenu using the arrow keys and Enter.</li> <li>Select the option <code>Change Admin Password</code> by using the arrow keys and Enter.</li> <li>Set the password identically as one of the 5 latest passwords.</li> </ol> <p>Expected result</p> <ol> <li>The window with the information that requested password has been found in     the passwords history should be displayed.</li> <li>The attempt to set the password should be rejected.</li> </ol>"},{"location":"unified-test-documentation/dasharo-security/20S-usb-stack/","title":"Dasharo Security: USB stack enable/disable","text":""},{"location":"unified-test-documentation/dasharo-security/20S-usb-stack/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the     Generic test setup: firmware.</li> </ol>"},{"location":"unified-test-documentation/dasharo-security/20S-usb-stack/#uss001001-enable-usb-stack-firmware","title":"USS001.001 Enable USB stack (firmware)","text":"<p>Test description</p> <p>This test aims to verify that the USB stack might be enabled. If the stack is activated, there will be an option to use USB bootable drives and USB keyboards on the firmware level.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Connect PS/2 keyboard to the device.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While booting, press the <code>SETUP_MENU_KEY</code> to enter Setup Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu option.</li> <li>Verify that the <code>Enable USB stack</code> field is checked - if not, use <code>Spacebar</code>     to change option settings.</li> <li>Save using <code>F10</code>, and exit from the menu using <code>Esc</code>.</li> <li>Connect any USB with a bootable system and USB keyboard to the DUT.</li> <li>Reboot the device.</li> <li>While booting, press <code>BOOT_MENU_KEY</code> on the USB keyboard to enter Setup     Menu.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <ol> <li>USB keyboard should be operable.</li> <li>USB installer should be visible as a bootable device.</li> </ol>"},{"location":"unified-test-documentation/dasharo-security/20S-usb-stack/#uss002001-disable-usb-stack-firmware","title":"USS002.001 Disable USB stack (firmware)","text":"<p>Test description</p> <p>This test aims to verify that the USB stack might be disabled. If the stack is deactivated, there will be no option to use USB bootable drives and USB keyboards on the firmware level.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> <li>Connect PS/2 keyboard to the device.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While booting, press the <code>SETUP_MENU_KEY</code> to enter Setup Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu option.</li> <li>Verify that the <code>Enable USB stack</code> field is not checked - if so, use     <code>Spacebar</code> to change option settings.</li> <li>Save using <code>F10</code>, and exit from the menu using <code>Esc</code>.</li> <li>Connect any USB with a bootable system and USB keyboard to the DUT.</li> <li>Reboot the device.</li> <li>While booting, press <code>BOOT_MENU_KEY</code> on the PS/2 keyboard to enter Setup     Menu.</li> <li>Try to navigate through the menu by using the USB keyboard.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <ol> <li>USB keyboard should be non-operable.</li> <li>USB installer should not be visible as a bootable device.</li> </ol>"},{"location":"unified-test-documentation/dasharo-security/20S-usb-stack/#uss003001-enable-usb-mass-storage-firmware","title":"USS003.001 Enable USB Mass Storage (firmware)","text":"<p>Test description</p> <p>This test aims to verify that USB Mass Storage might be enabled. If the storage support is activated, there will be an option to use USB bootable drives on the firmware level.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While booting, press the <code>SETUP_MENU_KEY</code> to enter Setup Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu option.</li> <li>Verify that the <code>Enable USB Mass Storage</code> field is checked - if not, use     <code>Spacebar</code> to change option settings.</li> <li>Save using <code>F10</code>, and exit from the menu using <code>Esc</code>.</li> <li>Connect any USB with a bootable system and USB keyboard to the DUT.</li> <li>Reboot the device.</li> <li>While booting, press <code>BOOT_MENU_KEY</code> to enter Setup Menu.</li> <li>Note the result.</li> </ol> <p>Expected result</p> <p>USB installer should be visible as a bootable device.</p>"},{"location":"unified-test-documentation/dasharo-security/20S-usb-stack/#uss004001-disable-usb-mass-storage-firmware","title":"USS004.001 Disable USB Mass Storage (firmware)","text":"<p>Test description</p> <p>This test aims to verify that USB Mass Storage might be disabled. If the storage support is deactivated, there will be no option to use USB bootable drives on the firmware level.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While booting, press the <code>SETUP_MENU_KEY</code> to enter Setup Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu option.</li> <li>Verify that the <code>Enable USB Mass Storage</code> field is not checked - if so, use     <code>Spacebar</code> to change option settings.</li> <li>Save using <code>F10</code>, and exit from the menu using <code>Esc</code>.</li> <li>Connect any USB with a bootable system and USB keyboard to the DUT.</li> <li>Reboot the device.</li> <li>While booting, press <code>BOOT_MENU_KEY</code> to enter Setup Menu.</li> <li>Note the result.</li> </ol> <p>Expected result</p> <p>USB installer should not be visible as a bootable device.</p>"},{"location":"unified-test-documentation/dasharo-security/20T-network-boot/","title":"Dasharo Security: Network stack enable/disable","text":""},{"location":"unified-test-documentation/dasharo-security/20T-network-boot/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>The DUT should be connected to the Internet by using an Ethernet cable.</li> </ol>"},{"location":"unified-test-documentation/dasharo-security/20T-network-boot/#nba001001-enable-network-boot-firmware","title":"NBA001.001 Enable Network Boot (firmware)","text":"<p>Test description</p> <p>This test aims to verify that the Network Boot option might be enabled. If this option is activated, an additional option in the Boot menu which allows to boot the system from iPXE servers will appear.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While booting, press the <code>SETUP_MENU_KEY</code> to enter Setup Menu.</li> <li>Enter the <code>Networking Options</code> menu option.</li> <li>Verify that the <code>Enable Network Boot</code> field is checked - if not, use     <code>Spacebar</code> to change option settings.</li> <li>Save using <code>F10</code>, and exit from the menu using <code>Esc</code>.</li> <li>Reboot the device.</li> <li>While booting, press <code>BOOT_MENU_KEY</code> on the USB keyboard to enter Setup     Menu.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>The <code>Network Boot</code> option in the <code>Boot menu</code> should be visible.</p>"},{"location":"unified-test-documentation/dasharo-security/20T-network-boot/#nba002001-disable-network-boot-firmware","title":"NBA002.001 Disable Network Boot (firmware)","text":"<p>Test description</p> <p>This test aims to verify that the Network Boot option might be disabled. If this option is deactivated, an additional option in the Boot menu which allows to boot the system from iPXE servers will be hidden.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>While booting, press the <code>SETUP_MENU_KEY</code> to enter Setup Menu.</li> <li>Enter the <code>Networking Options</code> menu option.</li> <li>Verify that the <code>Enable Network Boot</code> field is checked - if so, use     <code>Spacebar</code> to change option settings.</li> <li>Save using <code>F10</code>, and exit from the menu using <code>Esc</code>.</li> <li>Reboot the device.</li> <li>While booting, press <code>BOOT_MENU_KEY</code> on the USB keyboard to enter Setup     Menu.</li> <li>Note the results.</li> </ol> <p>Expected result</p> <p>The <code>Network Boot</code> option in the <code>Boot menu</code> should not be visible.</p>"},{"location":"unified-test-documentation/dasharo-stability/01-net-controller-after-coldboot-warmboot-reboot-suspend/","title":"Dasharo Compatibility: NET controller after coldboot/warmboot/reboot/suspend","text":""},{"location":"unified-test-documentation/dasharo-stability/01-net-controller-after-coldboot-warmboot-reboot-suspend/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> <li>The <code>Thunderbolt docking station</code> connected to the Thunderbolt port.</li> </ol>"},{"location":"unified-test-documentation/dasharo-stability/01-net-controller-after-coldboot-warmboot-reboot-suspend/#net001001-201-controller-after-coldboot-ubuntu","title":"NET001.001 201 controller after coldboot (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the network controller works and the platform is able to connect to the network after coldboot.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = <code>Ubuntu</code></li> </ol> <p>Test setup</p> <ol> <li>Proceed with the     Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Plug in a Ethernet cable with internet connection to the platform.</li> <li>Wait for internet connection to initialize.</li> <li> <p>Open a terminal window and execute following command to list available     network interfaces:</p> <pre><code>ip a\n</code></pre> </li> <li> <p>Determine the name of the ethernet controller. It typically is <code>ethX</code> or     <code>enpXsY</code>, where <code>X</code> and <code>Y</code>  are numbers.</p> </li> <li> <p>Then, execute following command to check if the network interface is working     correctly:</p> <pre><code>cat /sys/class/net/&lt;interface_name&gt;/operstate\n</code></pre> </li> <li> <p>Perform coldboot.</p> </li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li>Open a terminal window and execute the command mentioned in point 8.</li> </ol> <p>Expected result</p> <ol> <li> <p>The <code>ip a</code> command should return information about available NET     interfaces. The list should contain the ethernet network interface, which is     typically identified as <code>ethX</code> or <code>enpXsY</code>, where <code>X</code> and <code>Y</code>  are numbers.     Example output:</p> <pre><code>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\nlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\ninet 127.0.0.1/8 scope host lo\n   valid_lft forever preferred_lft forever\ninet6 ::1/128 scope host\n   valid_lft forever preferred_lft forever\n2: enp46s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000\nlink/ether d4:93:90:16:92:f8 brd ff:ff:ff:ff:ff:ff\ninet 192.168.4.85/24 brd 192.168.4.255 scope global dynamic noprefixroute enp46s0\n   valid_lft 40276sec preferred_lft 40276sec\ninet6 fe80::8317:79e3:81ec:a1f4/64 scope link noprefixroute\n   valid_lft forever preferred_lft forever\n3: wlp0s20f3: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000\nlink/ether 14:18:c3:7d:77:06 brd ff:ff:ff:ff:ff:ff\n</code></pre> </li> <li> <p>The <code>cat /sys/class/net/&lt;interface_name&gt;/operstate</code> command should return     information indicating if the network interface works correctly (<code>up</code>) or     not (<code>down</code>). Example output:</p> <pre><code>up\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-stability/01-net-controller-after-coldboot-warmboot-reboot-suspend/#net002201-net-controller-after-warmboot-ubuntu","title":"NET002.201 NET controller after warmboot (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-stability/01-net-controller-after-coldboot-warmboot-reboot-suspend/#net003201-net-controller-after-reboot-ubuntu","title":"NET003.201 NET controller after reboot (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-stability/01-net-controller-after-coldboot-warmboot-reboot-suspend/#net004201-net-controller-after-suspend-ubuntu","title":"NET004.201 NET controller after suspend (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-stability/C01-usb-type-a-devices-detection/","title":"Dasharo Stability: USB Type-A devices detection","text":""},{"location":"unified-test-documentation/dasharo-stability/C01-usb-type-a-devices-detection/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> <li>Connect the <code>USB device</code> to the USB Type-A port.</li> </ol>"},{"location":"unified-test-documentation/dasharo-stability/C01-usb-type-a-devices-detection/#sud0001201-usb-devices-detection-after-cold-boot-ubuntu","title":"SUD0001.201 USB devices detection after cold boot (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the external USB devices are detected correctly after performing a cold boot. The test should be performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>lsusb\n</code></pre> </li> <li> <p>Note the results.</p> </li> <li>Disconnect the power source, and remove the battery if present.</li> <li>Connect power and battery again.</li> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>lsusb\n</code></pre> </li> <li> <p>Note the results.</p> </li> </ol> <p>Expected result</p> <p>The output of each <code>lsusb</code> command should contain an entry of the connected <code>USB device</code>.</p>"},{"location":"unified-test-documentation/dasharo-stability/C01-usb-type-a-devices-detection/#sud0002201-usb-devices-detection-after-warm-boot-ubuntu","title":"SUD0002.201 USB devices detection after warm boot (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-stability/C01-usb-type-a-devices-detection/#sud0003201-usb-devices-detection-after-reboot-ubuntu","title":"SUD0003.201 USB devices detection after reboot (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-stability/C01-usb-type-a-devices-detection/#sud0004201-usb-devices-detection-after-suspension-ubuntu","title":"SUD0004.201 USB devices detection after suspension (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-stability/C02-m2-wi-fi/","title":"Dasharo Stability: M.2 Wi-fi","text":""},{"location":"unified-test-documentation/dasharo-stability/C02-m2-wi-fi/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-stability/C02-m2-wi-fi/#smw0001201-wi-fi-connection-after-cold-boot-ubuntu","title":"SMW0001.201 Wi-fi connection after cold boot (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the Wi-Fi card is detected and working correctly after performing a cold boot. The test should be performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>lspci | grep \"Network Controller\"\n</code></pre> </li> <li> <p>Open a terminal window and run the following commands:</p> <pre><code>nmcli radio wifi on\nnmcli device wifi rescan\n# Wait ~5 seconds\nnmcli device wifi list\n</code></pre> </li> <li> <p>Disconnect the power source, and remove the battery if present.</p> </li> <li>Connect power and battery again.</li> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>lspci | grep \"Network Controller\"\n</code></pre> </li> <li> <p>Open a terminal window and run the following commands:</p> <pre><code>nmcli radio wifi on\nnmcli device wifi rescan\n# Wait ~5 seconds\nnmcli device wifi list\n</code></pre> </li> </ol> <p>Expected result</p> <ol> <li> <p>The output of each <code>lspci</code> command should contain information about the    mounted on the DUT network controller. Example output:</p> <pre><code>2f:00.0 Network controller: Intel Corporation Wi-Fi 6 AX201 (rev 1a)\n</code></pre> </li> <li> <p>The output of each <code>nmcli device</code> wifi list` command should return a list of    available Wi-Fi networks. Example output:</p> <pre><code>IN-USE  BSSID              SSID                    MODE   CHAN  RATE        SIGNAL  BARS  SECURITY\n        XX:XX:XX:XX:XX:XX  DIRECT-ny               Infra  6     65 Mbit/s   75      \u2582\u2584\u2586_  WPA2\n*       XX:XX:XX:XX:XX:XX  3mdeb_abr_5GHz          Infra  48    405 Mbit/s  72      \u2582\u2584\u2586_  WPA2\n        XX:XX:XX:XX:XX:XX  3mdeb_abr               Infra  11    54 Mbit/s   69      \u2582\u2584\u2586_  WPA2\n        XX:XX:XX:XX:XX:XX  FunBox2-F9BF_2.4GHz     Infra  1     130 Mbit/s  50      \u2582\u2584__  WPA1 WPA2\n        XX:XX:XX:XX:XX:XX  H_Office                Infra  2     270 Mbit/s  35      \u2582\u2584__  WPA2\n        XX:XX:XX:XX:XX:XX  DIRECT-xpPhaser 3330    Infra  1     65 Mbit/s   34      \u2582\u2584__  WPA2\n        XX:XX:XX:XX:XX:XX  Orange_Swiatlowod_A79A  Infra  108   540 Mbit/s  32      \u2582\u2584__  WPA2\n        XX:XX:XX:XX:XX:XX  DIRECT-KRM288x Series   Infra  11    54 Mbit/s   22      \u2582___  WPA2\n        XX:XX:XX:XX:XX:XX  Orange_Swiatlowod_A79A  Infra  11    130 Mbit/s  20      \u2582___  WPA2\n        XX:XX:XX:XX:XX:XX  DIRECT-ejPhaser 3330    Infra  1     65 Mbit/s   17      \u2582___  WPA2\n        XX:XX:XX:XX:XX:XX  NED-WIFI                Infra  11    270 Mbit/s  17      \u2582___  WPA2\n</code></pre> </li> </ol>"},{"location":"unified-test-documentation/dasharo-stability/C02-m2-wi-fi/#smw0002201-wi-fi-connection-after-warm-boot-ubuntu","title":"SMW0002.201 Wi-fi connection after warm boot (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-stability/C02-m2-wi-fi/#smw0003201-wi-fi-connection-after-reboot-ubuntu","title":"SMW0003.201 Wi-fi connection after reboot (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-stability/C02-m2-wi-fi/#smw0004201-wi-fi-connection-after-suspension-ubuntu","title":"SMW0004.201 Wi-fi connection after suspension (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-stability/C03-nvme-detection/","title":"Dasharo Stability: NVMe detection","text":""},{"location":"unified-test-documentation/dasharo-stability/C03-nvme-detection/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-stability/C03-nvme-detection/#snv0001201-nvme-detection-after-cold-boot-ubuntu","title":"SNV0001.201 NVMe detection after cold boot (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify that the NVMe disk is correctly detected after performing a cold boot. The test should be performed in multiple iterations.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>lspci | grep -i nvme\n</code></pre> </li> <li> <p>Disconnect the power source, and remove the battery if present.</p> </li> <li>Connect power and battery again.</li> <li>Power on the DUT.</li> <li>Boot into the system.</li> <li>Log into the system by using the proper login and password.</li> <li> <p>Open a terminal window and run the following command:</p> <pre><code>lspci | grep -i nvme\n</code></pre> </li> </ol> <p>Expected result</p> <p>The output of each <code>lspci</code> command should contain information about the mounted on the DUT NVMe disk. Example output:</p> <pre><code>01:00.0 Non-Volatile memory controller: Samsung Electronics Co Ltd NVMe SSD Controller 980\n</code></pre>"},{"location":"unified-test-documentation/dasharo-stability/C03-nvme-detection/#snv0001201-nvme-detection-after-warm-boot-ubuntu","title":"SNV0001.201 NVMe detection after warm boot (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-stability/C03-nvme-detection/#snv0003201-nvme-detection-after-reboot-ubuntu","title":"SNV0003.201 NVMe detection after reboot (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-stability/C03-nvme-detection/#snv0004201-nvme-detection-after-suspension-ubuntu","title":"SNV0004.201 NVMe detection after suspension (Ubuntu)","text":"<p>The test is fully automated. Refer to https://github.com/Dasharo/open-source-firmware-validation/tree/develop</p>"},{"location":"unified-test-documentation/dasharo-stability/C04-power-management/","title":"Dasharo Stability: Power Management","text":""},{"location":"unified-test-documentation/dasharo-stability/C04-power-management/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> </ol>"},{"location":"unified-test-documentation/dasharo-stability/C04-power-management/#spm001001-2x-s0ix-suspend-cycle-battery-ubuntu","title":"SPM001.001 2x S0ix suspend cycle (Battery) (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify the stability of the S0ix / Modern Standby sleep state.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Enter the setup menu.</li> <li>Ensure that the sleep mode option is set to <code>Suspend to Idle (S0ix)</code></li> <li>Save and exit the setup menu.</li> <li>Boot into OS.</li> <li>Log into the system.</li> <li>Put the DUT to sleep using the OS's UI</li> <li>Ensure the sleep mode has been entered (i.e. power LED blinking or    \"breathing\", depending on platform)</li> <li>Wait at least 60 seconds</li> <li>Wake up the DUT</li> <li>Verify basic functionality remains functional</li> <li>Repeat steps 7-11.</li> </ol> <p>Expected result</p> <p>Sleep mode should be entered correctly on each attempt.</p> <p>Waking up should proceed without issues on each attempt. All basic functionality (i.e. builtin keyboard, touchpad, display etc) should keep working.</p>"},{"location":"unified-test-documentation/dasharo-stability/C04-power-management/#spm001002-2x-s0ix-suspend-cycle-battery-windows","title":"SPM001.002 2x S0ix suspend cycle (Battery) (Windows)","text":"<p>Test description</p> <p>This test aims to verify the stability of the S0ix / Modern Standby sleep state.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Enter the setup menu.</li> <li>Ensure that the sleep mode option is set to <code>Suspend to Idle (S0ix)</code></li> <li>Save and exit the setup menu.</li> <li>Boot into OS.</li> <li>Log into the system.</li> <li>Put the DUT to sleep using the OS's UI</li> <li>Ensure the sleep mode has been entered (i.e. power LED blinking or    \"breathing\", depending on platform)</li> <li>Wait at least 60 seconds</li> <li>Wake up the DUT</li> <li>Verify basic functionality remains functional</li> <li>Repeat steps 7-11.</li> </ol> <p>Expected result</p> <p>Sleep mode should be entered correctly on each attempt.</p> <p>Waking up should proceed without issues on each attempt. All basic functionality (i.e. builtin keyboard, touchpad, display etc) should keep working.</p>"},{"location":"unified-test-documentation/dasharo-stability/C04-power-management/#spm002001-2x-s0ix-suspend-cycle-ac-ubuntu","title":"SPM002.001 2x S0ix suspend cycle (AC) (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify the stability of the S0ix / Modern Standby sleep state.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Enter the setup menu.</li> <li>Ensure that the sleep mode option is set to <code>Suspend to Idle (S0ix)</code></li> <li>Save and exit the setup menu.</li> <li>Boot into OS.</li> <li>Log into the system.</li> <li>Put the DUT to sleep using the OS's UI</li> <li>Ensure the sleep mode has been entered (i.e. power LED blinking or    \"breathing\", depending on platform)</li> <li>Wait at least 60 seconds</li> <li>Wake up the DUT</li> <li>Verify basic functionality remains functional</li> <li>Repeat steps 7-11.</li> </ol> <p>Expected result</p> <p>Sleep mode should be entered correctly on each attempt.</p> <p>Waking up should proceed without issues on each attempt. All basic functionality (i.e. builtin keyboard, touchpad, display etc) should keep working.</p>"},{"location":"unified-test-documentation/dasharo-stability/C04-power-management/#spm002002-2x-s0ix-suspend-cycle-ac-windows","title":"SPM002.002 2x S0ix suspend cycle (AC) (Windows)","text":"<p>Test description</p> <p>This test aims to verify the stability of the S0ix / Modern Standby sleep state.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Enter the setup menu.</li> <li>Ensure that the sleep mode option is set to <code>Suspend to Idle (S0ix)</code></li> <li>Save and exit the setup menu.</li> <li>Boot into OS.</li> <li>Log into the system.</li> <li>Put the DUT to sleep using the OS's UI</li> <li>Ensure the sleep mode has been entered (i.e. power LED blinking or    \"breathing\", depending on platform)</li> <li>Wait at least 60 seconds</li> <li>Wake up the DUT</li> <li>Verify basic functionality remains functional</li> <li>Repeat steps 7-11.</li> </ol> <p>Expected result</p> <p>Sleep mode should be entered correctly on each attempt.</p> <p>Waking up should proceed without issues on each attempt. All basic functionality (i.e. builtin keyboard, touchpad, display etc) should keep working.</p>"},{"location":"unified-test-documentation/dasharo-stability/C04-power-management/#spm003001-2x-s3-suspend-cycle-battery-ubuntu","title":"SPM003.001 2x S3 suspend cycle (Battery) (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify the stability of the S3 / sleep-to-ram state.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Enter the setup menu.</li> <li>Ensure that the sleep mode option is set to <code>Suspend to RAM (S3)</code></li> <li>Save and exit the setup menu.</li> <li>Boot into OS.</li> <li>Log into the system.</li> <li>Put the DUT to sleep using the OS's UI</li> <li>Ensure the sleep mode has been entered (i.e. power LED blinking or    \"breathing\", depending on platform)</li> <li>Wait at least 60 seconds</li> <li>Wake up the DUT</li> <li>Verify basic functionality remains functional</li> <li>Repeat steps 7-11.</li> </ol> <p>Expected result</p> <p>Sleep mode should be entered correctly on each attempt.</p> <p>Waking up should proceed without issues on each attempt. All basic functionality (i.e. builtin keyboard, touchpad, display etc) should keep working.</p>"},{"location":"unified-test-documentation/dasharo-stability/C04-power-management/#spm003002-2x-s3-suspend-cycle-battery-windows","title":"SPM003.002 2x S3 suspend cycle (Battery) (Windows)","text":"<p>Test description</p> <p>This test aims to verify the stability of the S3 / sleep-to-ram state.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Enter the setup menu.</li> <li>Ensure that the sleep mode option is set to <code>Suspend to RAM (S3)</code></li> <li>Save and exit the setup menu.</li> <li>Boot into OS.</li> <li>Log into the system.</li> <li>Put the DUT to sleep using the OS's UI</li> <li>Ensure the sleep mode has been entered (i.e. power LED blinking or    \"breathing\", depending on platform)</li> <li>Wait at least 60 seconds</li> <li>Wake up the DUT</li> <li>Verify basic functionality remains functional</li> <li>Repeat steps 7-11.</li> </ol> <p>Expected result</p> <p>Sleep mode should be entered correctly on each attempt.</p> <p>Waking up should proceed without issues on each attempt. All basic functionality (i.e. builtin keyboard, touchpad, display etc) should keep working.</p>"},{"location":"unified-test-documentation/dasharo-stability/C04-power-management/#spm004001-2x-s3-suspend-cycle-ac-ubuntu","title":"SPM004.001 2x S3 suspend cycle (AC) (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify the stability of the S3 / sleep-to-ram state.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Enter the setup menu.</li> <li>Ensure that the sleep mode option is set to <code>Suspend to RAM (S3)</code></li> <li>Save and exit the setup menu.</li> <li>Boot into OS.</li> <li>Log into the system.</li> <li>Put the DUT to sleep using the OS's UI</li> <li>Ensure the sleep mode has been entered (i.e. power LED blinking or    \"breathing\", depending on platform)</li> <li>Wait at least 60 seconds</li> <li>Wake up the DUT</li> <li>Verify basic functionality remains functional</li> <li>Repeat steps 7-11.</li> </ol> <p>Expected result</p> <p>Sleep mode should be entered correctly on each attempt.</p> <p>Waking up should proceed without issues on each attempt. All basic functionality (i.e. builtin keyboard, touchpad, display etc) should keep working.</p>"},{"location":"unified-test-documentation/dasharo-stability/C04-power-management/#spm004002-2x-s3-suspend-cycle-ac-windows","title":"SPM004.002 2x S3 suspend cycle (AC) (Windows)","text":"<p>Test description</p> <p>This test aims to verify the stability of the S3 / sleep-to-ram state.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Enter the setup menu.</li> <li>Ensure that the sleep mode option is set to <code>Suspend to RAM (S3)</code></li> <li>Save and exit the setup menu.</li> <li>Boot into OS.</li> <li>Log into the system.</li> <li>Put the DUT to sleep using the OS's UI</li> <li>Ensure the sleep mode has been entered (i.e. power LED blinking or    \"breathing\", depending on platform)</li> <li>Wait at least 60 seconds</li> <li>Wake up the DUT</li> <li>Verify basic functionality remains functional</li> <li>Repeat steps 7-11.</li> </ol> <p>Expected result</p> <p>Sleep mode should be entered correctly on each attempt.</p> <p>Waking up should proceed without issues on each attempt. All basic functionality (i.e. builtin keyboard, touchpad, display etc) should keep working.</p>"},{"location":"unified-test-documentation/dasharo-stability/C04-power-management/#spm005001-2x-warmboot-cycle-battery-ubuntu","title":"SPM005.001 2x warmboot cycle (Battery) (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify the stability of the warmboot.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into OS.</li> <li>Log into the system.</li> <li>Shut down the DUT via the OS's UI.</li> <li>Ensure DUT has shut down completely (i.e. Power LED turns off or changes    color)</li> <li>Wait least 60 seconds</li> <li>Power on the DUT.</li> <li>Boot into OS.</li> <li>Log into the system.</li> <li>Verify basic functionality remains functional</li> <li>Repeat steps 4-10.</li> </ol> <p>Expected result</p> <p>Shutdown should proceed correctly on each attempt.</p> <p>Powering on should proceed without issues on each attempt. All basic functionality (i.e. builtin keyboard, touchpad, display etc) should keep working.</p>"},{"location":"unified-test-documentation/dasharo-stability/C04-power-management/#spm005002-2x-warmboot-cycle-battery-windows","title":"SPM005.002 2x warmboot cycle (Battery) (Windows)","text":"<p>Test description</p> <p>This test aims to verify the stability of the warmboot.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into OS.</li> <li>Log into the system.</li> <li>Shut down the DUT via the OS's UI.</li> <li>Ensure DUT has shut down completely (i.e. Power LED turns off or changes    color)</li> <li>Wait least 60 seconds</li> <li>Power on the DUT.</li> <li>Boot into OS.</li> <li>Log into the system.</li> <li>Verify basic functionality remains functional</li> <li>Repeat steps 4-10.</li> </ol> <p>Expected result</p> <p>Shutdown should proceed correctly on each attempt.</p> <p>Powering on should proceed without issues on each attempt. All basic functionality (i.e. builtin keyboard, touchpad, display etc) should keep working.</p>"},{"location":"unified-test-documentation/dasharo-stability/C04-power-management/#spm006001-2x-warmboot-cycle-ac-ubuntu","title":"SPM006.001 2x warmboot cycle (AC) (Ubuntu)","text":"<p>Test description</p> <p>This test aims to verify the stability of the warmboot.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into OS.</li> <li>Log into the system.</li> <li>Shut down the DUT via the OS's UI.</li> <li>Ensure DUT has shut down completely (i.e. Power LED turns off or changes    color)</li> <li>Wait least 60 seconds</li> <li>Power on the DUT.</li> <li>Boot into OS.</li> <li>Log into the system.</li> <li>Verify basic functionality remains functional</li> <li>Repeat steps 4-10.</li> </ol> <p>Expected result</p> <p>Shutdown should proceed correctly on each attempt.</p> <p>Powering on should proceed without issues on each attempt. All basic functionality (i.e. builtin keyboard, touchpad, display etc) should keep working.</p>"},{"location":"unified-test-documentation/dasharo-stability/C04-power-management/#spm006002-2x-warmboot-cycle-ac-windows","title":"SPM006.002 2x warmboot cycle (AC) (Windows)","text":"<p>Test description</p> <p>This test aims to verify the stability of the warmboot.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Windows</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Boot into OS.</li> <li>Log into the system.</li> <li>Shut down the DUT via the OS's UI.</li> <li>Ensure DUT has shut down completely (i.e. Power LED turns off or changes    color)</li> <li>Wait least 60 seconds</li> <li>Power on the DUT.</li> <li>Boot into OS.</li> <li>Log into the system.</li> <li>Verify basic functionality remains functional</li> <li>Repeat steps 4-10.</li> </ol> <p>Expected result</p> <p>Shutdown should proceed correctly on each attempt.</p> <p>Powering on should proceed without issues on each attempt. All basic functionality (i.e. builtin keyboard, touchpad, display etc) should keep working.</p>"},{"location":"unified-test-documentation/dasharo-stability/capsule-update/","title":"Dasharo Stability: Capsule Update","text":""},{"location":"unified-test-documentation/dasharo-stability/capsule-update/#test-cases-common-documentation","title":"Test cases common documentation","text":"<p>Test setup</p> <ol> <li>Proceed with the    Generic test setup: firmware.</li> <li>Proceed with the    Generic test setup: OS installation.</li> <li>Proceed with the    Generic test setup: OS preparation.</li> <li>Proceed with the    Generic test setup: OS post installation steps.</li> <li>Boot into Ubuntu and note down the original<ul> <li>UUID (via <code>dmidecode</code>)</li> <li>Serial number (also via <code>dmidecode</code>)</li> <li>BGRT bootsplash logo hash (located in <code>/sys/firmware/acpi/bgrt</code>)</li> </ul> </li> </ol>"},{"location":"unified-test-documentation/dasharo-stability/capsule-update/#cup001001-capsule-update-with-wrong-keys-uefi-shell","title":"CUP001.001 Capsule Update With Wrong Keys (UEFI Shell)","text":"<p>Test description</p> <p>This test aims to verify that the Device Under Test (DUT) rejects flashing a capsule that is signed with an invalid certificate.</p> <p>Each step in this test case should be executed in accordance with the instructions given in our Capsule Update documentation.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Ensure the DUT is connected and the UEFI shell is available.</li> <li>Proceed with the common test setup steps as described in the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Obtain and save the current BIOS version as <code>${original_bios_version}</code>.</li> <li>Perform a capsule update using an invalid certificate file</li> <li>Reboot the system and select the UEFI Shell boot option.</li> <li>After the system boots, verify the BIOS version and save it as    <code>${updated_bios_version}</code>.</li> <li>Check that the BIOS version has not changed by verifying that    <code>${original_bios_version}</code> is equal to <code>${updated_bios_version}</code>.</li> <li>Verify that there is a status note about a security violation.</li> </ol> <p>Expected result</p> <ol> <li>The BIOS version should not change after attempting the capsule update.</li> <li>The status should contain a note indicating that the update was rejected due    to the invalid certificate.</li> </ol>"},{"location":"unified-test-documentation/dasharo-stability/capsule-update/#cup002001-capsule-update-with-wrong-guid-uefi-shell","title":"CUP002.001 Capsule Update With Wrong GUID (UEFI Shell)","text":"<p>Test description</p> <p>This test aims to verify that the Device Under Test (DUT) rejects flashing a capsule with an invalid GUID.</p> <p>Each step in this test case should be executed in accordance with the instructions given in our Capsule Update documentation.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Ensure the DUT is connected and the UEFI shell is available.</li> <li>Proceed with the common test setup steps as described in the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Obtain and save the BIOS version as <code>${original_bios_version}</code>.</li> <li>Perform a capsule update using an invalid GUID file.</li> <li>Reboot the system and select the UEFI Shell boot option.</li> <li>After the system boots, verify and save the BIOS version as    <code>${updated_bios_version}</code>.</li> <li>Check that the BIOS version has not changed by verifying that    <code>${original_bios_version}</code> is equal to <code>${updated_bios_version}</code>.</li> <li>Verify that the status contains a <code>Not Ready</code> indication.</li> </ol> <p>Expected result</p> <ol> <li>The BIOS version should not change after attempting the capsule update.</li> <li>The status should contain a note indicating that the update was rejected due    to the invalid GUID.</li> </ol>"},{"location":"unified-test-documentation/dasharo-stability/capsule-update/#cup130001-verifying-bios-settings-persistence-after-update-part-1","title":"CUP130.001 Verifying BIOS Settings Persistence After Update - PART 1","text":"<p>Test description</p> <p>This test aims to verify that BIOS settings persist after a Capsule Update.</p> <p>Each step in this test case should be executed in accordance with the instructions given in our Capsule Update documentation.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Ensure the DUT is connected and the UEFI shell is available.</li> <li>Proceed with the common test setup steps as described in the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Enter the Setup Menu.</li> <li>Navigate to Boot Maintenance Manager.</li> <li>Change the Auto Boot Time-out value to an arbitrary custom one, such as    32123</li> <li>Save the settings and reboot the system.</li> </ol> <p>Expected result</p> <ol> <li>The custom Auto Boot Time-out value should remain set after the reboot.</li> </ol>"},{"location":"unified-test-documentation/dasharo-stability/capsule-update/#cup150001-capsule-update","title":"CUP150.001 Capsule Update","text":"<p>Test description</p> <p>This test verifies a successful capsule update and ensures the correct user experience (UX) during the update.</p> <p>Each step in this test case should be executed in accordance with the instructions given in our Capsule Update documentation.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li>Custom logo firmware image</li> </ol> <p>Test setup</p> <ol> <li>Ensure the DUT is connected and the UEFI shell is available.</li> <li>Proceed with the common test setup steps as described in the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Obtain and save the BIOS version as <code>${original_bios_version}</code>.</li> <li>Perform a capsule update using a valid capsule.</li> <li>Verify that the update screen looks as expected.</li> <li>After the system boots, select the UEFI shell boot option.</li> <li>Verify the BIOS version and save it as <code>${updated_bios_version}</code>.</li> <li>Ensure that the BIOS version has changed.</li> <li>Verify that the status contains <code>CapsuleMax</code> and does not contain    <code>CapsuleLast</code>.</li> </ol> <p>Expected result</p> <ol> <li>The update screen should look exactly as presented in the    Capsule Update documentation.</li> <li>The BIOS version should change after the update.</li> <li>The status should contain <code>CapsuleMax</code> and should not contain <code>CapsuleLast</code>.</li> </ol>"},{"location":"unified-test-documentation/dasharo-stability/capsule-update/#cup160001-verifying-bios-settings-persistence-after-update-part-2","title":"CUP160.001 Verifying BIOS Settings Persistence After Update - PART 2","text":"<p>Test description</p> <p>This test aims to verify the persistence of BIOS settings after a capsule update.</p> <p>Each step in this test case should be executed in accordance with the instructions given in our Capsule Update documentation.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> </ol> <p>Test setup</p> <ol> <li>Ensure the DUT is connected and the UEFI shell is available.</li> <li>Proceed with the common test setup steps as described in the    Test cases common documentation section.</li> </ol> <p>Test steps</p> <ol> <li>Power on the DUT.</li> <li>Enter the Setup Menu.</li> <li>Navigate to the \"Boot Maintenance Manager\" menu.</li> <li>Check the value of the \"Auto Boot Time-out\" option.</li> </ol> <p>Expected result</p> <ol> <li>The \"Auto Boot Time-out\" option should retain the previously set value.</li> </ol>"},{"location":"unified-test-documentation/dasharo-stability/capsule-update/#cup170001-verifying-uuid-ubuntu","title":"CUP170.001 Verifying UUID (Ubuntu)","text":"<p>Test description</p> <p>This test checks if the UUID persists after a capsule update.</p> <p>Each step in this test case should be executed in accordance with the instructions given in our Capsule Update documentation.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the Test cases common documentation    section.</li> </ol> <p>Test steps</p> <ol> <li>Log in to Ubuntu.</li> <li>Check the UUID after the update.</li> </ol> <p>Expected result</p> <ol> <li>The UUID should remain unchanged after the update.</li> </ol>"},{"location":"unified-test-documentation/dasharo-stability/capsule-update/#cup180001-verifying-serial-number-ubuntu","title":"CUP180.001 Verifying Serial Number (Ubuntu)","text":"<p>Test description</p> <p>This test checks if the serial number persists after a capsule update.</p> <p>Each step in this test case should be executed in accordance with the instructions given in our Capsule Update documentation.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> </ol> <p>Test setup</p> <ol> <li>Proceed with the Test cases common documentation    section.</li> </ol> <p>Test steps</p> <ol> <li>Log in to Ubuntu.</li> <li>Check the serial number after the update.</li> </ol> <p>Expected result</p> <ol> <li>The serial number should remain unchanged after the update.</li> </ol>"},{"location":"unified-test-documentation/dasharo-stability/capsule-update/#cup190001-verifying-if-custom-logo-persists-across-updates-ubuntu","title":"CUP190.001 Verifying If Custom Logo Persists Across Updates (Ubuntu)","text":"<p>Test description</p> <p>This test checks if the custom logo persists after a capsule update.</p> <p>Each step in this test case should be executed in accordance with the instructions given in our Capsule Update documentation.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li><code>OPERATING_SYSTEM</code> = Ubuntu</li> <li>Custom logo firmware image</li> </ol> <p>Test setup</p> <ol> <li>Ensure that the DUT is running the firmware with a custom logo.</li> <li>Proceed with the Test cases common documentation    section.</li> </ol> <p>Test steps</p> <ol> <li>Log in to Ubuntu.</li> <li>After the update, verify the custom logo's SHA-256 hash.</li> </ol> <p>Expected result</p> <ol> <li>The custom logo should remain unchanged after the update.</li> </ol>"},{"location":"unified-test-documentation/dasharo-stability/capsule-update/#cup250001-capsule-update-progress-bar-default-logo","title":"CUP250.001 Capsule Update Progress Bar - Default Logo","text":"<p>Test description</p> <p>This test verifies that the Capsule Update screen displays the correct user experience (UX) when using a default logo, including the progress bar.</p> <p>Each step in this test case should be executed in accordance with the instructions given in our Capsule Update documentation.</p> <p>Test configuration data</p> <ol> <li><code>FIRMWARE</code> = Dasharo</li> <li>Default logo firmware image</li> </ol> <p>Test setup</p> <ol> <li>Ensure that the DUT is running the firmware with the default logo.</li> <li>Proceed with the Test cases common documentation    section.</li> </ol> <p>Test steps</p> <ol> <li>Perform a capsule update using a valid capsule.</li> <li>Verify that the update screen looks as expected.</li> </ol> <p>Expected result</p> <ol> <li>The update screen should look exactly as presented in the    Capsule Update documentation.</li> </ol>"},{"location":"value-prop/compatibility/","title":"Dasharo Compatibility Module","text":"<p>From communication bus standards, through industry specifications like ACPI and ending up with support for Operating Systems, each platform needs set of compatibility criteria which have to be maintained across life cycle of market availability and sometimes even after it.</p> <p>This section describes what compatibility features Dasharo offer and how it make sure their availability in every firmware release.</p>"},{"location":"value-prop/marketing/","title":"Dasharo Marketing Module","text":"<p>We think every advanced piece of software requires correct communication to all users who will interact with it. Marketing module helps in organizing and delivering information required to understand and correctly leverage software produced by Dasharo Ecosystem.</p>"},{"location":"value-prop/marketing/#key-embedded-firmware-marketing-issues","title":"Key Embedded Firmware marketing issues","text":""},{"location":"value-prop/marketing/#differentiation-through-firmware","title":"Differentiation through firmware","text":"<p>Most hardware vendors do not leverage ability to differentiate through firmware features, which is way easier then designing new hardware.</p>"},{"location":"value-prop/marketing/#products","title":"Products","text":"<ul> <li>Embedded Firmware Release<ul> <li>Website</li> <li>Newsletter</li> <li>Repository</li> </ul> </li> <li>Community and Customer Support<ul> <li>Issues repository maintenance</li> <li>Documentation repository maintenance</li> </ul> </li> <li>Conference speaking</li> <li>Technical Sales Support</li> </ul>"},{"location":"value-prop/overview/","title":"Dasharo Value Proposition","text":"<p>There are multiple reasons why you should choose Dasharo. In this section we will try to structure and present whole value that Dasharo can bring to your hardware.</p> <ul> <li>Marketing - Dasharo Marketing Module was created to resolve   problems of hardware vendors with communicating   Embedded Firmware value.</li> </ul> <p>Finally, we agree with John Hennessy and David Patterson that we enter era of New Golden Age of domain specific computing with open architectures and open-source implementations. What eventually will lead to more firmware everywhere. Addressing mentioned areas is just beginning for Dasharo we think following years would need way more firmware expertise then at any other point in time.</p>"},{"location":"value-prop/security/","title":"Dasharo Security Module","text":"<p>This module gathers all security features Dasharo Ecosystem can bring to your platform through software. No matter if this is new hardware at design stage, prototype waiting for bring up or well-established platform looking for after-market boost.</p> <p>In this section we will explain what features Dasharo provide in area of security.</p>"},{"location":"variants/overview/","title":"Supported hardware","text":"<p>Following is up to date list of hardware platforms supported by Dasharo open-source firmware distribution.</p>"},{"location":"variants/overview/#emulation","title":"Emulation","text":"<ul> <li> <p>Following emulation targets are supported under Dasharo Community Support:</p> <ul> <li>QEMU Q35</li> </ul> </li> </ul>"},{"location":"variants/overview/#network-appliance","title":"Network appliance","text":"<ul> <li> <p>Following network appliances are supported under Dasharo Support Package:</p> <ul> <li>Protectli FW6</li> <li>Protectli V1000-series</li> <li>Protectli VP2410</li> <li>Protectli VP2420</li> <li>Protectli VP46XX</li> <li>Protectli VP66XX</li> </ul> </li> <li> <p>Following network appliances are supported under Dasharo Pro Package:</p> <ul> <li>Dasharo (coreboot+UEFI) Pro Package for Network Appliance<ul> <li>PC Engines APU 2/3/4/6 platforms</li> <li>Hardkernel Odroid H4+</li> </ul> </li> <li>Dasharo (coreboot+SeaBIOS) Pro Package for Network Appliance<ul> <li>PC Engines APU 2/3/4/6 platforms</li> </ul> </li> <li>Dasharo (Slim Bootloader+UEFI) Pro Package for Network Appliance<ul> <li>Hardkernel Odroid H4+</li> </ul> </li> </ul> </li> </ul>"},{"location":"variants/overview/#laptops","title":"Laptops","text":"<ul> <li> <p>Following laptops are supported under Dasharo Support Package:</p> <ul> <li>NovaCustom V54 14th Gen</li> <li>NovaCustom V56 14th Gen</li> <li>NovaCustom NV4x 12th Gen</li> <li>NovaCustom NS5x/7x 12th Gen</li> <li>NovaCustom NV4x 11th Gen</li> <li>NovaCustom NS5x/7x 11th Gen</li> </ul> </li> <li> <p>Following laptops are supported under Dasharo Pro Package:</p> <ul> <li>Dasharo (coreboot+UEFI) transition to (coreboot+Heads) for Laptops<ul> <li>NovaCustom V540TU 14th Gen</li> <li>NovaCustom V560TU 14th Gen</li> <li>NovaCustom NV4x 12th Gen</li> </ul> </li> </ul> </li> <li> <p>Following laptops are supported under Dasharo Community Support:</p> <ul> <li>Tuxedo IBS15</li> </ul> </li> </ul>"},{"location":"variants/overview/#desktop","title":"Desktop","text":"<ul> <li> <p>Following desktops are supported under Dasharo Support Package:</p> <ul> <li>NovaCustom NUC BOX 14th Gen</li> </ul> </li> <li> <p>Following desktops are supported under Dasharo Pro Package:</p> <ul> <li>Dasharo (coreboot+UEFI) Pro Package for Desktop<ul> <li>Dell OptiPlex</li> <li>MSI PRO Z690-A</li> <li>MSI PRO Z790-P</li> </ul> </li> </ul> </li> <li> <p>Following desktops are supported under Dasharo Community Support:</p> <ul> <li>MSI PRO Z690-A</li> <li>MSI PRO Z790-P</li> </ul> </li> </ul>"},{"location":"variants/overview/#workstation","title":"Workstation","text":"<ul> <li> <p>Following workstations are supported under Dasharo Community Support:</p> <ul> <li>Asus KGPE-D16</li> <li>Raptor CS Talos II</li> </ul> </li> </ul>"},{"location":"variants/overview/#servers","title":"Servers","text":"<ul> <li> <p>Following servers are supported under Dasharo Pro Package:</p> <ul> <li>Gigabyte MZ33-AR1</li> <li>ASRock Rack SPC741D8-2L2T/BCM</li> </ul> </li> <li> <p>Following servers are supported under Dasharo Community Support:</p> <ul> <li>Supermicro X11 LGA1151 Series</li> </ul> </li> </ul>"},{"location":"variants/overview/#openness-comparison","title":"Openness comparison","text":"<p>The following table shows the comparison of binary openness between Dasharo and proprietary firmware. It was generated using the Dasharo Openness Score tool.</p> <p>The table contains the following metrics:</p> <ul> <li><code>Closed-source diff</code> (the higher negative percentage the better, ideally   -100% is fully FOSS)</li> <li><code>Data size diff</code> - (the amount of data stored in the firmware varies,   no preference here)</li> <li><code>Empty space diff</code> - (the higher positive percentage the better, more free   space means smaller TCB)</li> </ul> <p>Each metric is calculated using the formula:</p> <pre><code>(Dasharo &lt;type&gt; size - Proprietary &lt;type&gt; size) * 100 / Proprietary &lt;type&gt; size\n</code></pre> <p><code>&lt;type&gt;</code> is replaced by <code>closed-source</code>, <code>data</code> or <code>empty space</code> accordingly.</p> Platform Dasharo Firmware file Proprietary Firmware file Closed-source diff [%] Data size diff [%] Empty space diff [%] MSI MS-7D25 DDR4 msi_ms7d25_v1.1.4_ddr4.rom E7D25IMS.1L0 -27.7 153.5 -18.8 MSI MS-7D25 DDR5 msi_ms7d25_v1.1.4_ddr5.rom E7D25IMS.AL0 -27.8 153.4 -18.8 MSI MS-7E06 DDR4 msi_ms7e06_v0.9.2_ddr4.rom E7E06IMS.1F0 -27.4 153.4 -19.0 MSI MS-7E06 DDR5 msi_ms7e06_v0.9.2_ddr4.rom E7E06IMS.AH0 -27.4 149.9 -19.0 Protectli FW6 protectli_all_fw6_vault_kbl_v1.0.14.rom fw6_all_YKR6LV30.bin -47.0 2163.8 116.8 Protectli V1210 protectli_v1210_v0.9.3.rom v1210_JPL.2LAN.S4G.PCIE.6W.013.bin -28.4 3595.6 21.9 Protectli V1211 protectli_v1211_v0.9.3.rom v1211_JPL.2LAN.D8G.PCIE.6W.009.bin -28.4 3595.6 21.9 Protectli V1410 protectli_v1410_v0.9.3.rom v1410_JPL.4LAN.S8GB.PCIE.6W.007B.bin -28.4 3595.6 22.0 Protectli V1610 protectli_v1610_v0.9.3.rom v1610_JPL.6LAN.D16G.PCIE.007.bin -28.4 3595.7 21.9 Protectli VP2420 protectli_vp2420_v1.2.1.rom vp2420_YELD4L13P.bin -25.4 4805.6 -28.0 Protectli VP2430 protectli_vp2430_v0.9.0.rom vp2430_PRALNDZ4L10.bin -39.6 17376.5 2.1 Protectli VP46XX protectli_vp4600_v1.2.0.rom vp4630_v2_YW6L2318.bin -9.7 3790.8 -72.9 Protectli VP66XX protectli_vp6600_v0.9.2.rom vp6630_ADZ6L314.bin -30.8 5152.2 -28.9 Odroid H4 hardkernel_odroid_h4_v0.9.0.rom ADLN-H4_B1.07.bin -35.5 198.4 -14.3 Novacustom V540TU novacustom_v54x_mtl_v0.9.0.rom V5xxTU(32M).09 -21.9 -35.4 -17.0 Novacustom V560TU novacustom_v56x_mtl_v0.9.0.rom V5xxTU(32M).09 -21.9 -35.4 -17.0 Novacustom NV4xPZ novacustom_nv4x_adl_v1.7.2_full.rom NV4xPZ(32M).03 -27.6 -0.8 46.8 Novacustom NV4xME_MB novacustom_nv4x_tgl_v1.5.2.rom NV4XBX.05 -30.1 3.0 -24.4 Novacustom NSxxPU novacustom_ns5x_adl_v1.7.2.rom NSx0PU(32M).09 -26.3 -0.8 -7.2 Novacustom NS5xMU novacustom_ns5x_tgl_v1.5.2.rom NS50_70MU.16N -30.6 2.9 -23.4"},{"location":"variants/versions/","title":"Version matrix","text":""},{"location":"variants/versions/#about","title":"About","text":"<p>The table below contains an up to date list of all supported platforms, including latest supported coreboot and EDK2 versions and branches from which you can build firmware for your platform.</p> Platform coreboot branch Dasharo base EDK2 version EDK2 rev ASRock Rack SPC741D8-2L2T/BCM dasharo dasharo 2024.02 ac25544f92 NovaCustom NUC BOX dasharo dasharo 2024.02 ac25544f92 NovaCustom V540TU dasharo dasharo 2024.02 11b2679614 NovaCustom V540TNx dasharo dasharo 2024.02 51decd4d1f NovaCustom V560TU dasharo dasharo 2024.02 15e8a08772 NovaCustom V560TNx dasharo dasharo 2024.02 51decd4d1f NovaCustom NS5x/NS7x dasharo dasharo 2024.02 433b7a33ee NovaCustom NV4x dasharo dasharo 2024.02 433b7a33ee Protectli FW6 #444 dasharo-4.21 2020.02 1174634037 Protectli V1000 dasharo-4.21 dasharo-4.21 2020.02 f06673308f Protectli VP2410 dasharo-4.21 dasharo-4.21 2020.02 d130aececb Protectli VP2420 dasharo-4.21 dasharo-4.21 2020.02 d130aececb Protectli VP2430 dasharo-24.02.1 dasharo-24.02.1 2024.05 787234d5e5 Protectli VP2440 dasharo dasharo 2025.02 ac25544f92 Protectli VP32XX dasharo-24.02.1 dasharo-24.02.1 2024.05 c2de870a67 Protectli VP46XX dasharo-4.21 dasharo-4.21 2020.02 d130aececb Protectli VP66XX dasharo-24.02.1 dasharo-24.02.1 2024.05 c2de870a67 MSI PRO Z690-A dasharo dasharo 2024.02 5b3658c050 MSI PRO Z790-P dasharo dasharo 2024.02 5b3658c050 Raptor CS Talos II raptor-cs_talos-2/rel_v0.7.0 4.17 N/A N/A Tuxedo IBS 15 tuxedo_ibs15/release 4.16 2020.02 e0334c228c Asus KGPE-D16 asus_kgpe-d16/release 4.14 N/A N/A Dell OptiPlex 7010/9010 dasharo dasharo 2024.02 #129 PCEngines APU2/3/4/6 dasharo-4.21 dasharo-4.21 2020.02 d130aececb Qemu Q35 dasharo dasharo 2024.02 433b7a33ee"},{"location":"variants/asrock_spc741d8/building-manual/","title":"Dasharo firmware building guide","text":""},{"location":"variants/asrock_spc741d8/building-manual/#intro","title":"Intro","text":"<p>This guide shows how to build Dasharo firmware compatible with ASRock Rack SPC741D8-2L2T/BCM.</p>"},{"location":"variants/asrock_spc741d8/building-manual/#requirements","title":"Requirements","text":"<ul> <li>Docker<ul> <li>follow Install Docker Engine on Ubuntu</li> <li>follow Post-installation steps for Linux</li> </ul> </li> <li>Git<ul> <li><code>sudo apt-get install git</code></li> </ul> </li> </ul>"},{"location":"variants/asrock_spc741d8/building-manual/#building","title":"Building","text":"<p>To build Dasharo (coreboot+UEFI) firmware image, first clone the coreboot repository:</p> <pre><code>git clone https://github.com/Dasharo/coreboot.git\n</code></pre> <p>then follow the steps below:</p> <ol> <li> <p>To build a specific version checkout to the version's tag.     Skip this step otherwise.</p> <pre><code>cd coreboot\ngit checkout asrock_spc741d8_&lt;version&gt;\n</code></pre> <p>For example</p> <pre><code>git checkout asrock_spc741d8_v0.9.0\n</code></pre> </li> <li> <p>Build the firmware:</p> <pre><code>./build.sh asrock_spc741d8\n</code></pre> <p>The resulting coreboot image will be placed in the coreboot directory as <code>asrock_spc741d8_&lt;version&gt;.rom</code>.</p> </li> </ol>"},{"location":"variants/asrock_spc741d8/firmware-update/","title":"Firmware update","text":"<p>The following documentation describes the process of Dasharo open-source firmware update. If your device is currently flashed with the proprietary firmware please refer to the Initial deployment documentation.</p> <p>The update process may be different, depending on the currently installed Dasharo firmware version.</p> <p>For simplicity of the process we recommend using Dasharo Tools Suite.</p> <p>Before starting the update procedure be sure to disable Dasharo BIOS Boot medium lock and Secure Boot:</p> <ol> <li>Power on the device.</li> <li>While the device is booting, hold the <code>DELETE</code> key to enter the UEFI Setup     Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu using the arrow keys and Enter.</li> <li>Enter the Dasharo Security Options     submenu.</li> <li>Verify the state of the <code>Lock the BIOS boot medium</code> option - if the option     is chosen, press <code>Space</code> and then <code>F10</code> to save the changes.</li> <li>Go back to the main menu using the <code>ESC</code> key.</li> <li>Enter the <code>Device Manager</code> menu.</li> <li>Enter the Secure Boot Configuration     submenu.</li> <li>Verify that the <code>Current Secure Boot State</code> field says Disabled - if not,     unselect the <code>Attempt Secure Boot</code> option below then press <code>F10</code> to save     the changes.</li> <li>Reboot the device to properly apply the changes.</li> </ol> <p>The settings of all the above options can be restored after a firmware update.</p>"},{"location":"variants/asrock_spc741d8/firmware-update/#updating-dasharo-manually","title":"Updating Dasharo manually","text":"<pre><code>flashrom -p internal -w asrock_spc741d8_v&lt;version&gt;.rom\n</code></pre>"},{"location":"variants/asrock_spc741d8/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/asrock_spc741d8/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configuration used for validation of the coreboot port on the ASRock Rack SPC741D8-2L2T/BCM.</p> Component Description CPU Intel Xeon Silver 4410Y Arctic Freezer 4U-M Rev. 2 RAM Micron RDIMM DDR5 16GB 1Rx8 4800MHz PC5-38400 ECC Flash memory Winbond W25Q512FV Network Local network wired connection Attached devices 1. Goodram 16GB USB stick 2. Kingston KC3000 512GB M.2 2280 PCI-E x4 Gen4 NVMe SSD 3. Samsung 990 PRO NVMe SSD Power Supply SeaSonic Vertex GX 850W Power Control 1. Sonoff S20 switch 2. Goldpin cables (RTE &lt;-&gt; Board connection) Remote Testing Environment RTE <code>v1.1.0</code> (firmware <code>v0.7.5</code>) connected via RS232 TPM ASROCK TPM-SPI (Nuvoton NPCT750)"},{"location":"variants/asrock_spc741d8/initial-deployment/","title":"Initial deployment","text":"<p>Initial deployment of Dasharo firmware can be performed by externally flashing the BIOS SPI flash chip.</p>"},{"location":"variants/asrock_spc741d8/initial-deployment/#flashing-dasharo","title":"Flashing Dasharo","text":"<p>To flash Dasharo on the platform, it is only possible with an external programmer currently. Follow the same process as in recovery section.</p>"},{"location":"variants/asrock_spc741d8/openness_score/","title":"Dasharo Openness Score","text":"<p>This page contains the Dasharo Openness Score for ASRock Rack SPC741D8-2L2T/BCM Dasharo releases. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/asrock_spc741d8/openness_score/#v090","title":"v0.9.0","text":"<p>Openness Score for asrock_spc741d8_v0.9.0.rom</p> <p>Open-source code percentage: 3.1% Closed-source code percentage: 96.9%</p> <ul> <li>Image size: 67108864 (0x4000000)</li> <li>Number of regions: 12</li> <li>Number of CBFSes: 2</li> <li>Total open-source code size: 1765610 (0x1af0ea)</li> <li>Total closed-source code size: 55703536 (0x351f7f0)</li> <li>Total data size: 505110 (0x7b516)</li> <li>Total empty size: 9134608 (0x8b6210)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/asrock_spc741d8/openness_score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category SI_ME 0x1000 0x2fef000 closed-source SI_DESC 0x0 0x1000 data RW_MRC_CACHE 0x3000000 0x10000 data SMMSTORE 0x3010000 0x40000 data FMAP 0x3150000 0x800 data RW_VPD 0x3150800 0x4000 data RO_VPD 0x3154800 0x4000 data CONSOLE 0x3158800 0x20000 data"},{"location":"variants/asrock_spc741d8/openness_score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 1048576</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 1048548 (0xfffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 1048548 none empty"},{"location":"variants/asrock_spc741d8/openness_score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 15235072</li> <li>Number of files: 18</li> <li>Open-source files size: 1765610 (0x1af0ea)</li> <li>Closed-source files size: 5375984 (0x5207f0)</li> <li>Data size: 7418 (0x1cfa)</li> <li>Empty size: 8086060 (0x7b622c)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1497612 none open-source fallback/romstage stage 49192 none open-source fallback/ramstage stage 141656 LZMA open-source fallback/dsdt.aml raw 18414 none open-source fallback/postcar stage 30064 none open-source bootblock bootblock 28672 none open-source cpu_microcode_blob.bin microcode 1782784 none closed-source fspm.bin fsp 3375104 none closed-source fsps.bin fsp 185328 LZ4 closed-source fspt.bin fsp 32768 none closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 80 none data config raw 4515 LZMA data revision raw 855 none data build_info raw 107 none data (empty) null 3492 none empty (empty) null 8013028 none empty (empty) null 69540 none empty"},{"location":"variants/asrock_spc741d8/overview/","title":"Overview","text":""},{"location":"variants/asrock_spc741d8/overview/#asrock-rack-spc741d8-2l2tbcm","title":"ASRock Rack SPC741D8-2L2T/BCM","text":"<p>ASRock Rack SPC741D8-2L2T/BCM is a full-fledged single socket server board supporting Intel Sapphire Rapids processors.</p> <p>We gratefully acknowledge the https://os.itec.kit.edu (Operating Systems Group) at Karlsruhe Institute of Technology (Fabian Meyer, Felix Zimmer, Yussuf Khalil) for their contribution in initiating the coreboot port for this platform and supporting open-source firmware development.</p>"},{"location":"variants/asrock_spc741d8/overview/#documentation","title":"Documentation","text":"<ul> <li>Releases - Groups information about all releases.</li> <li>Building Manual - Describes how to build Dasharo   compatible with the ASRock Rack SPC741D8-2L2T/BCM.</li> <li>Initial Deployment - Describes initial Dasharo   deployment methods (i. e. flashing new firmware) compatible with ASRock Rack   SPC741D8-2L2T/BCM.</li> <li>Recovery - Gathers information on how to recover the platform     from potential failure.</li> <li>Hardware Configuration Matrix - Describes the     platform's hardware configuration used during the Dasharo firmware     validation procedure.</li> <li>Test Matrix - Describes validation scope used during     Dasharo firmware validation procedure.</li> </ul>"},{"location":"variants/asrock_spc741d8/recovery/","title":"Recovery","text":""},{"location":"variants/asrock_spc741d8/recovery/#intro","title":"Intro","text":"<p>The following documentation describes the process of recovering hardware from the brick state using an RTE and Dasharo open-source firmware.</p>"},{"location":"variants/asrock_spc741d8/recovery/#external-flashing","title":"External flashing","text":""},{"location":"variants/asrock_spc741d8/recovery/#prerequisites","title":"Prerequisites","text":"<ul> <li>Prepared RTE</li> <li>5x2 1mm pitch female header to 10x 2.54mm female DuPont connector adapter   cable</li> <li>TPM removed</li> </ul>"},{"location":"variants/asrock_spc741d8/recovery/#connections","title":"Connections","text":"<p>To prepare the stand for flashing follow the steps described in the Generic test stand setup.</p> <p>Then, follow the following steps:</p> <ol> <li>Connect the adapter cable to the <code>BIOS_PH1</code> header on the board</li> <li>Map out the BIOS pins: Using a multimeter in continuity mode, probe each    of the 2.54mm pins against each of the pins on the SOIC-16 BIOS package</li> <li>Once you have labeled each of the pins, connect them to the RTE's SPI    header</li> </ol>"},{"location":"variants/asrock_spc741d8/recovery/#firmware-flashing","title":"Firmware flashing","text":"<p>To flash firmware follow the steps described below:</p> <ol> <li>Login to RTE via <code>ssh</code> or <code>minicom</code>.</li> <li>Turn on the platform by connecting the power supply.</li> <li>Wait at least 5 seconds.</li> <li>Turn off the platform by using the power button.</li> <li>Wait at least 3 seconds.</li> <li> <p>Set the proper state of the SPI by using the following commands on RTE:</p> <pre><code># set SPI Vcc to 3.3V\necho 1 &gt; /sys/class/gpio/gpio405/value\n# SPI Vcc on\necho 1 &gt; /sys/class/gpio/gpio406/value\n# SPI lines ON\necho 1 &gt; /sys/class/gpio/gpio404/value\n</code></pre> <p>Starting with RTE distro v0.8.x the GPIOS are 517, 518, 516.</p> </li> <li> <p>Wait at least 2 seconds.</p> </li> <li>Disconnect the power supply from the platform.</li> <li>Wait at least 2 seconds.</li> <li> <p>Check if the flash chip is connected properly</p> <pre><code>flashrom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000\n</code></pre> </li> <li> <p>Flash the platform by using the following command:</p> <pre><code>flashrom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000 \\\n    -w [path_to_binary] --ifd -i bios -N\n</code></pre> </li> <li> <p>Change back the state of the SPI by using the following commands:</p> <pre><code>echo 0 &gt; /sys/class/gpio/gpio404/value\necho 0 &gt; /sys/class/gpio/gpio405/value\necho 0 &gt; /sys/class/gpio/gpio406/value\n</code></pre> <p>Starting with RTE distro v0.8.x the GPIOS are 516, 517, 518.</p> </li> <li> <p>Turn on the platform by connecting the power supply.</p> </li> </ol>"},{"location":"variants/asrock_spc741d8/releases/","title":"ASRock Rack SPC741D8-2L2T/BCM Dasharo Release Notes","text":"<p>Following Release Notes describe status of Open Source Firmware development for ASRock Rack SPC741D8-2L2T/BCM.</p> <p>For details about our release process please read Dasharo Standard Release Process.</p> <p>We gratefully acknowledge the https://os.itec.kit.edu (Operating Systems Group) at Karlsruhe Institute of Technology (Fabian Meyer, Felix Zimmer, Yussuf Khalil) for their contribution in initiating the coreboot port for this platform and supporting open-source firmware development.</p>         Subscribe to ASRock Rack SPC741D8-2L2T/BCM Dasharo Release Newsletter     <p>Motherboards with Dasharo preinstalled can be purchased here. Full server builds can be purchased here.</p>"},{"location":"variants/asrock_spc741d8/releases/#v090-2025-09-18","title":"v0.9.0 - 2025-09-18","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/asrock_spc741d8/releases/#added","title":"Added","text":"<ul> <li>Initial support for the ASRock Rack SPC741D8-2L2T/BCM platform</li> <li>UEFI compatible interface</li> <li>Support for discrete TPM</li> <li>UEFI Secure Boot support</li> <li>Boot logo customization support</li> <li>USB boot support</li> <li>NVMe boot support</li> <li>TPM Measured Boot</li> <li>Network boot</li> <li>Ubuntu LTS booting</li> <li>Serial port console redirection</li> <li>Setup menu password configuration</li> <li>SMM BIOS write protection</li> <li>USB stack disable option in setup menu</li> <li>Network stack disable option in setup menu</li> <li>SED/OPAL disk password support</li> </ul>"},{"location":"variants/asrock_spc741d8/releases/#known-issues","title":"Known issues","text":"<ul> <li>Large ME region size</li> <li>Long boot time</li> <li>STB002.001 encounters unlisted error</li> <li>Invalid PCR reconstruction</li> <li>Immediate BSOD trying to boot Windows</li> <li>Errors and unexpected messages printed during boot</li> <li>SecureBoot can't boot file signed with custom PK</li> <li>TPM PPI does not work</li> <li>DCU custom boot logo is not displayed</li> </ul>"},{"location":"variants/asrock_spc741d8/releases/#binaries","title":"Binaries","text":"<p>sha256 sha256.sig (asrock_spc741d8_v0.9.0.rom)</p> <p>This is a Dasharo Pro Package Release. To access the pre-built binaries, you need to subscribe to the Dasharo Pro Package subscriber. You can do this by purchasing a Dasharo Pro Package product from our shop. As a subscriber, you will receive access to all firmware updates for the duration of your subscription via the Dasharo Pro Package newsletter, and gain entry to the Dasharo Premier Support invite-only live chat on the Matrix network, enabling direct engagement with the Dasharo Team and fellow subscribers for personalized, priority assistance.</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/asrock_spc741d8/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 25.03 revision cee8ddf3</li> <li>Dasharo EDKII fork based on edk2-stable202502 revision 22333c9e</li> <li>Dasharo iPXE fork based on 2025.03 revision 6c7068fc<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package for Eagle Stream version 0115.D.05<ul> <li>License</li> </ul> </li> <li>Intel Server Platform Services version v6.1.4.89.0<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor version v1.0<ul> <li>License</li> </ul> </li> <li>Intel microcode version SPR-HBM 0x2c000401 08/04/2025<ul> <li>License</li> </ul> </li> <li>Intel microcode version SPR-SP 0x210002b3 15/04/2025<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/asrock_spc741d8/test-matrix/","title":"Test matrix","text":""},{"location":"variants/asrock_spc741d8/test-matrix/#about","title":"About","text":"<p>The test matrix is used to determine the scope of tests which the DUT is subjected to before the release of the new binary compatible with ASRock Rack SPC741D8-2L2T/BCM.</p> <p>Under construction</p>"},{"location":"variants/asus_kgpe_d16/building-manual/","title":"Building manual","text":""},{"location":"variants/asus_kgpe_d16/building-manual/#building-coreboot","title":"Building coreboot","text":"<p>To build coreboot image, follow the steps below:</p> <ol> <li> <p>Clone the coreboot repository:</p> <pre><code>git clone https://github.com/dasharo/coreboot.git -b asus_kgpe-d16/release\n</code></pre> </li> <li> <p>Get the submodules:</p> <pre><code>cd coreboot\ngit submodule update --init --recursive --checkout\n</code></pre> </li> <li> <p>Start docker container:</p> <pre><code>docker run --rm -it -u $UID \\\n   -v $PWD:/home/coreboot/coreboot \\\n   -w /home/coreboot/coreboot \\\n   coreboot/coreboot-sdk:0ad5fbd48d /bin/bash\n</code></pre> </li> <li> <p>Inside of the container, configure and start the build process:</p> <pre><code>(docker)cp configs/config.asus_kgpe_d16_&lt;variant&gt; .config\n(docker)make olddefconfig\n(docker)make\n</code></pre> </li> </ol> <p>This will produce a debug binary placed in <code>build/coreboot.rom</code> for a 2MB flash chip. In order to build for 8MB or 16MB chip use the <code>configs/config.asus_kgpe_d16_8M</code> and <code>configs/config.asus_kgpe_d16_16M</code> respectively.</p> <p>Dasharo v0.1.0 for KGPE-D16 supports only 8MB target with <code>configs/config.asus_kgpe_d16</code>.</p> <p>To flash coreboot refer to Flashing section in the hardware setup page.</p>"},{"location":"variants/asus_kgpe_d16/building-manual/#other-variants","title":"Other variants","text":"<p>Since the Dasharo v0.3.0 release the firmware comes in two more variatns: with TPM 1.2 and TPM 2.0 support. Now the possible confis to use are:</p> <ul> <li><code>configs/config.asus_kgpe_d16_vboot_tpm12</code> - 2MB target with vboot and TPM 1.2</li> <li><code>configs/config.asus_kgpe_d16_vboot_tpm2</code> - 2MB target with vboot and TPM 2.0</li> <li><code>configs/config.asus_kgpe_d16_8M_vboot_tpm12</code> - 8MB target with vboot and TPM 1.2</li> <li><code>configs/config.asus_kgpe_d16_8M_vboot_tpm2</code> - 8MB target with vboot and TPM  2.0</li> <li><code>configs/config.asus_kgpe_d16_16M_vboot_tpm12</code> - 16MB target with vboot and   TPM 1.2</li> <li><code>configs/config.asus_kgpe_d16_16M_vboot_tpm2</code> - 16MB target with vboot and   TPM 2.0</li> </ul>"},{"location":"variants/asus_kgpe_d16/fan-control/","title":"Automatic fan control for ASUS KGPE-D16","text":"<p>Starting from KGPE-D16 Dasharo release v0.2.0, coreboot implements automatic fan control. The feature is realized on the Nuvoton W83795 hardware monitor.</p>"},{"location":"variants/asus_kgpe_d16/fan-control/#testing-fan-control","title":"Testing fan control","text":"<p>In order to check the monitoring values of W83795, one needs to install some packages:</p> <pre><code>apt-get install lm-sensors\n</code></pre> <p>Linux kernel by default should come with <code>w83795</code> module. Load it with the following command:</p> <pre><code>modprobe w83795\n</code></pre> <p>The <code>dmesg</code> should contain the following message after loading the module:</p> <pre><code>i2c i2c-1: Found w83795g rev. B at 0x2f\nw83795 1-002f: hwmon_device_register() is deprecated.\n     Please convert the driver to use hwmon_device_register_with_info().\n</code></pre> <p>To check the monitoring values execute:</p> <pre><code>sensors\n</code></pre> <p>The output should be similar to the one below:</p> <pre><code>k10temp-pci-00cb\nAdapter: PCI adapter\ntemp1:        +36.5\u00b0C  (high = +70.0\u00b0C)\n                       (crit = +106.0\u00b0C, hyst = +101.0\u00b0C)\n\nw83795g-i2c-1-2f\nAdapter: SMBus PIIX4 adapter at 0b20\nin0:         910.00 mV (min =  +0.90 V, max =  +1.50 V)\nin1:           0.00 V  (min =  +0.90 V, max =  +1.50 V)  ALARM\nin2:           1.53 V  (min =  +1.10 V, max =  +1.61 V)\nin3:          22.00 mV (min =  +1.10 V, max =  +1.61 V)  ALARM\nin4:           1.21 V  (min =  +1.14 V, max =  +1.25 V)\nin5:           0.00 V  (min =  +1.14 V, max =  +1.25 V)  ALARM\nin6:           1.19 V  (min =  +1.05 V, max =  +1.25 V)\nin7:           1.82 V  (min =  +1.70 V, max =  +1.90 V)\nin8:           1.21 V  (min =  +1.14 V, max =  +1.25 V)\nin9:           1.09 V  (min =  +1.05 V, max =  +1.15 V)\nin10:          1.60 V  (min =  +1.50 V, max =  +1.63 V)\nin11:        752.00 mV (min =  +0.00 V, max =  +0.01 V)  ALARM\n+3.3V:         3.26 V  (min =  +2.96 V, max =  +3.63 V)\n3VSB:          3.28 V  (min =  +2.96 V, max =  +3.63 V)\nVbat:          3.16 V  (min =  +2.70 V, max =  +3.63 V)\nin15:          1.02 V  (min =  +0.91 V, max =  +1.08 V)\nin16:          1.55 V  (min =  +1.50 V, max =  +1.62 V)\nfan1:        1157 RPM  (min =  329 RPM)\nfan2:           0 RPM  (min =  329 RPM)  ALARM\nfan3:           0 RPM  (min =  329 RPM)  ALARM\nfan4:           0 RPM  (min =  329 RPM)  ALARM\nfan5:           0 RPM  (min =  329 RPM)  ALARM\nfan6:           0 RPM  (min =  329 RPM)  ALARM\nfan7:           0 RPM  (min =  329 RPM)  ALARM\nfan8:           0 RPM  (min =  329 RPM)  ALARM\ntemp1:        +37.2\u00b0C  (high = +70.0\u00b0C, hyst = +65.0\u00b0C)\n                       (crit = +90.0\u00b0C, hyst = +80.0\u00b0C)  sensor = thermal diode\ntemp2:        -62.5\u00b0C  (high =  +0.0\u00b0C, hyst =  +0.0\u00b0C)\n                       (crit =  +0.0\u00b0C, hyst =  +0.0\u00b0C)  sensor = thermistor\ntemp3:        -62.5\u00b0C  (high =  +0.0\u00b0C, hyst =  +0.0\u00b0C)\n                       (crit =  +0.0\u00b0C, hyst =  +0.0\u00b0C)  sensor = thermistor\ntemp7:        +36.8\u00b0C  (high = +70.0\u00b0C, hyst = +65.0\u00b0C)\n                       (crit = +90.0\u00b0C, hyst = +80.0\u00b0C)  sensor = AMD AMDSI\ntemp8:         +0.0\u00b0C  (high = +70.0\u00b0C, hyst = +65.0\u00b0C)\n                       (crit = +90.0\u00b0C, hyst = +80.0\u00b0C)  sensor = AMD AMDSI\nintrusion0:  ALARM\nbeep_enable: disabled\n\nfam15h_power-pci-00c4\nAdapter: PCI adapter\npower1:       49.44 W  (crit = 139.72 W)\n\nk10temp-pci-00c3\nAdapter: PCI adapter\ntemp1:        +36.8\u00b0C  (high = +70.0\u00b0C)\n                       (crit = +106.0\u00b0C, hyst = +99.0\u00b0C)\n</code></pre> <p>The CPU temperature is indicated with k10temp and w83795g temp7 inputs and the CPU fan speed is indicated by fan1.</p>"},{"location":"variants/asus_kgpe_d16/fan-control/#alternative-automatic-fan-control","title":"Alternative automatic fan control","text":"<p>If you are using a coreboot for KGPE-D16 built from 4.11 branch or earlier there is also a software option to enable automatic fan control without modifications in coreboot. In order to configure the fan control, one needs to install the following package:</p> <pre><code>apt-get install fancontrol\n</code></pre> <p>Now we need to configure the fancontrol application by generating a <code>/etc/fancontrol</code> file containing the relation of temperature inputs to fans. Be sure that w83795 module is loaded (you may also add the module to be loaded automatically with <code>echo w38795 &gt;&gt; /etc/modules</code>). Execute:</p> <pre><code>pwmconfig\n</code></pre> <p>This application will lead you through the process of identifying the relation of the fans and temperatures. Simply follow the instructions printed on the console. At the end do not select save and ext, just configure all PWMs, e.g.:</p> <pre><code>Select fan output to configure, or other action:\n1) hwmon0/device/pwm1  3) Just quit       5) Show configuration\n2) Change INTERVAL     4) Save and quit\nselect (1-n): 1\n</code></pre> <p>Then set up temperature correlation by selecting either <code>k10temp</code> or <code>hwmon0/device/temp7_input</code> as temperature source for the fan1 (they should report identical temperature). When finished, select <code>Save and quit</code>. For a single CPU - single fan configuration it should result in a file like this:</p> <pre><code>INTERVAL=10\nDEVPATH=hwmon0=devices/pci0000:00/0000:00:14.0/i2c-1/1-002f\nDEVNAME=hwmon0=w83795g\nFCTEMPS=hwmon0/device/pwm1=hwmon0/device/temp7_input\nFCFANS= hwmon0/device/pwm1=hwmon0/device/fan1_input\nMINTEMP=hwmon0/device/pwm1=20\nMAXTEMP=hwmon0/device/pwm1=80\nMINSTART=hwmon0/device/pwm1=150\nMINSTOP=hwmon0/device/pwm1=0\n</code></pre> <p>NOTE: hwmonX may be different depending on the order of loaded modules, if loaded automatically via <code>etc/modules</code> it may be hwmon0, if loaded using <code>modprobe</code> it may be hwmon3 or hwmon4.</p> <p>Now that the configuration file is ready, time to start the fancontrol service:</p> <pre><code>systemctl enable fancontrol\nsystemctl start fancontrol\nsystemctl status fancontrol\n\u25cf fancontrol.service - fan speed regulator\n     Loaded: loaded (/lib/systemd/system/fancontrol.service; enabled; vendor pr&gt;\n     Active: active (running) since Wed 2021-12-08 11:23:23 CET; 9min ago\n       Docs: man:fancontrol(8)\n             man:pwmconfig(8)\n   Main PID: 1318 (fancontrol)\n      Tasks: 2 (limit: 19153)\n     Memory: 1.3M\n        CPU: 1.340s\n     CGroup: /system.slice/fancontrol.service\n             \u251c\u25001318 /bin/bash /usr/sbin/fancontrol\n             \u2514\u25002228 sleep 10\n\nDec 08 11:23:24 debian fancontrol[1318]:   Controls hwmon0/device/fan1_input\nDec 08 11:23:24 debian fancontrol[1318]:   MINTEMP=20\nDec 08 11:23:24 debian fancontrol[1318]:   MAXTEMP=80\nDec 08 11:23:24 debian fancontrol[1318]:   MINSTART=150\nDec 08 11:23:24 debian fancontrol[1318]:   MINSTOP=0\nDec 08 11:23:24 debian fancontrol[1318]:   MINPWM=0\nDec 08 11:23:24 debian fancontrol[1318]:   MAXPWM=255\nDec 08 11:23:24 debian fancontrol[1318]:   AVERAGE=1\nDec 08 11:23:24 debian fancontrol[1318]: Enabling PWM on fans...\nDec 08 11:23:24 debian fancontrol[1318]: Starting automatic fan control...\n</code></pre> <p>It should print the service is running. Now check the fan speed with <code>sensors</code> command from <code>lm-sensors</code> package (install it if you haven't done it yet). For CPU temperature of 40 Celsius degrees the fan1 speed should be a little bit lower than 3000 RPM. Note it is advised to stop and disable the fancontrol service when using Dasharo for KGPE-D16 release v0.2.0 or newer:</p> <pre><code>systemctl disable fancontrol\nsystemctl stop fancontrol\n</code></pre>"},{"location":"variants/asus_kgpe_d16/fan-control/#verifying-fan-speed-adaptation","title":"Verifying fan speed adaptation","text":"<p>To check if the fan speed adapts to the temperature you may install <code>stress-ng</code>:</p> <pre><code>apt-get install stress-ng\n</code></pre> <p>With the following command you may cause a 2 minutes stress on the CPUs and raise its temperature (it should hit about 70 Celsius degrees with that):</p> <pre><code>stress-ng --cpu 16 --io 8 --vm 4 --vm-bytes 4G --timeout 120s --metrics\n</code></pre> <p>Simultaneously watch the fan speed with <code>sensors</code> command. Example for fancontrol service:</p> <pre><code>k10temp-pci-00cb\nAdapter: PCI adapter\ntemp1:        +52.4\u00b0C  (high = +70.0\u00b0C)\n\nw83795g-i2c-1-2f\nAdapter: SMBus PIIX4 adapter at 0b20\nin0:           1.09 V  (min =  +0.90 V, max =  +1.50 V)\nin1:           0.00 V  (min =  +0.90 V, max =  +1.50 V)  ALARM\nin2:           1.53 V  (min =  +1.10 V, max =  +1.61 V)\nin3:          22.00 mV (min =  +1.10 V, max =  +1.61 V)  ALARM\nin4:           1.21 V  (min =  +1.14 V, max =  +1.25 V)\nin5:           0.00 V  (min =  +1.14 V, max =  +1.25 V)  ALARM\nin6:           1.20 V  (min =  +1.05 V, max =  +1.25 V)\nin7:           1.82 V  (min =  +1.70 V, max =  +1.90 V)\nin8:           1.21 V  (min =  +1.14 V, max =  +1.25 V)\nin9:           1.09 V  (min =  +1.05 V, max =  +1.15 V)\nin10:          1.59 V  (min =  +1.50 V, max =  +1.63 V)\n+3.3V:         3.24 V  (min =  +2.96 V, max =  +3.63 V)\n3VSB:          3.28 V  (min =  +2.96 V, max =  +3.63 V)\nVbat:          3.06 V  (min =  +2.70 V, max =  +3.63 V)\nin15:          1.01 V  (min =  +0.91 V, max =  +1.08 V)\nin16:          1.54 V  (min =  +1.50 V, max =  +1.62 V)\nfan1:        4299 RPM  (min =  329 RPM)\nfan2:           0 RPM  (min =  329 RPM)  ALARM\nfan3:           0 RPM  (min =  329 RPM)  ALARM\nfan4:           0 RPM  (min =  329 RPM)  ALARM\nfan5:           0 RPM  (min =  329 RPM)  ALARM\nfan6:           0 RPM  (min =  329 RPM)  ALARM\nfan7:           0 RPM  (min =  329 RPM)  ALARM\nfan8:           0 RPM  (min =  329 RPM)  ALARM\ntemp1:        +52.5\u00b0C  (high = +70.0\u00b0C, hyst = +65.0\u00b0C)\n                       (crit = +85.0\u00b0C, hyst = +80.0\u00b0C)  sensor = thermal diode\ntemp7:        +52.8\u00b0C  (high = +70.0\u00b0C, hyst = +65.0\u00b0C)\n                       (crit = +85.0\u00b0C, hyst = +80.0\u00b0C)  sensor = AMD AMDSI\ntemp8:         +0.0\u00b0C  (high = +70.0\u00b0C, hyst = +65.0\u00b0C)\n                       (crit = +85.0\u00b0C, hyst = +80.0\u00b0C)  sensor = AMD AMDSI\nintrusion0:  ALARM\nbeep_enable: disabled\n\nfam15h_power-pci-00c4\nAdapter: PCI adapter\npower1:      141.35 W  (crit = 139.72 W)\n\nk10temp-pci-00c3\nAdapter: PCI adapter\ntemp1:        +52.9\u00b0C  (high = +70.0\u00b0C)\n</code></pre> <p>For the software method with fancontrol service the fan speed adapts pretty quickly, but when using the automatic fan control from Dasharo release the spin up/down time is longer. coreboot configures the W83795 in Thermal Cruise mode which automatically probes the CPU temperature via AMD SB TSI interface. The target temperature is set to 50 Celsius degrees which means the chip will try to keep the CPU temperature to be around 50 degrees by adapting the fan speed. Summing it up, the longer the CPU temperature exceeds 50 degrees the faster the fan will spin by slowly increasing the RPM. When the temperature is below 50 degrees for a long period of time the fan rotates with a speed of around 1000 RPM. The critical temperature is set to 90 Celsius degrees. When this point is reached the W83795 should spin up to fans to full speed.</p>"},{"location":"variants/asus_kgpe_d16/firmware-update/","title":"Firmware update","text":"<p>Following documentation describes the  process of Dasharo open-source firmware update.</p>"},{"location":"variants/asus_kgpe_d16/firmware-update/#build-flashrom","title":"Build flashrom","text":"<p>Install build dependencies:</p> <pre><code>apt install git build-essential debhelper pkg-config libpci-dev libusb-1.0-0-dev libftdi1-dev meson\n</code></pre> <p>Obtain source code:</p> <pre><code>git clone https://review.coreboot.org/flashrom.git\ncd flashrom\n</code></pre> <p>Build flashrom:</p> <pre><code>make\nsudo make install\n</code></pre>"},{"location":"variants/asus_kgpe_d16/firmware-update/#updating-dasharo","title":"Updating Dasharo","text":"<p>The whole <code>bios</code> region must be updated.</p> <pre><code>flashrom -p internal -w [path] --ifd -i bios\n</code></pre>"},{"location":"variants/asus_kgpe_d16/hardware-matrix/","title":"Hardware configuration matrix","text":"<p>This document describes the hardware configurations used for validation of the coreboot port on ASUS KGPE-D16 platforms.</p>"},{"location":"variants/asus_kgpe_d16/hardware-matrix/#asus-kgpe-d16-8mb","title":"ASUS KGPE-D16 8MB","text":"Component Description Board revision 1.03G CPU AMD Opteron(TM) Processor 6282 SE CPU Cooler RAM DDR3 16GB Kingston KVR16R11D4/16 Flash memory Winbond W25Q64FV 8MB Network Local network wired connection Attached devices 1. Goodram 16GB USB stick 2. ASUS TPM-L R2.0 module (chip Infineon SLB9665 TT2.0) Power Supply 700 W ATX type power supply Power Control 1. Sonoff S20 switch 2. Goldpin cables (RTE &lt;-&gt; Board connection) Remote Testing Environment 1. RTE <code>v1.0.0</code> (firmware <code>v0.5.3</code>) connected via RS232 2. Goldpin cables + qspimux (RTE &lt;-&gt; flash memory connection) TPM Infineon SLB9665 TT2.0 <p>Standard testing procedure is performed on setup without TPM module.</p>"},{"location":"variants/asus_kgpe_d16/hardware-matrix/#asus-kgpe-d16-16mb","title":"ASUS KGPE-D16 16MB","text":"Component Description Board revision 1.03G CPU AMD Opteron(TM) Processor 6282 SE CPU Cooler RAM DDR3 16GB Kingston KVR16R11D4/16 Flash memory Winbond W25Q128JV 16MB Network Local network wired connection Attached devices: 1. Goodram 16GB USB stick 2. ASUS TPM 1.2 Rev 1.02h module (chip Infineon SLB9635 TT 1.2) 3. Post Debug Card Power Supply 700 W ATX type power supply Power Control: 1. Sonoff S20 switch 2. Goldpin cables (RTE &lt;-&gt; Board connection) Remote Testing Environment 1. RTE <code>v1.0.0</code> (firmware <code>v0.5.3</code>) connected via RS232 2. POMONA Clip + DIP8/SOIC8 adapter (RTE &lt;-&gt; flash memory connection) TPM Infineon SLB9635 TT1.2 <p>Standard testing procedure is performed on setup without TPM module.</p> <p>ASUS KGPE-D16 board ports, slots, and connectors description is available in the manufacturer documentation (page 2-7).</p>"},{"location":"variants/asus_kgpe_d16/initial-deployment/","title":"Initial deployment","text":"<p>Initial deployment of Dasharo firmware on ASUS KGPE-D16 can be done:</p> <ul> <li>using DTS,</li> <li>manually.</li> </ul>"},{"location":"variants/asus_kgpe_d16/initial-deployment/#initial-deployment-using-dts","title":"Initial deployment using DTS","text":"<p>To ensure a smooth deployment process, it is recommended to use the latest version of DTS available from the releases page. Once you have obtained it, you can then proceed with following the Dasharo zero-touch initial deployment section procedure. This will help you set up Dasharo effectively and without manual intervention.</p>"},{"location":"variants/asus_kgpe_d16/initial-deployment/#initial-deployment-manually","title":"Initial deployment manually","text":"<p>Initial flashing of Dasharo firmware can be done from Linux using flashrom with the internal programmer. This document describes the process of building, installing and running flashrom on Ubuntu 20.04.</p>"},{"location":"variants/asus_kgpe_d16/initial-deployment/#build-flashrom","title":"Build flashrom","text":"<p>Please follow generic guide for Dasharo flashrom fork.</p>"},{"location":"variants/asus_kgpe_d16/initial-deployment/#reading-flash-contents","title":"Reading flash contents","text":"<p>Always prepare a backup of the current firmware image. To read from the flash and save it to a file (<code>backup.rom</code>), execute the following command:</p> <pre><code>flashrom -p internal -r backup.rom\n</code></pre>"},{"location":"variants/asus_kgpe_d16/initial-deployment/#flashing-dasharo","title":"Flashing Dasharo","text":"<p>To flash Dasharo on the platform, execute the following command - replace <code>[path]</code> with the path to the Dasharo image you want to flash, e.g. <code>asus_kgpe-d16_v0.3.0_2M_vboot_TPM1.2.rom</code>.</p> <pre><code>flashrom -p internal -w [path]\n</code></pre> <p>This will flash the full image, including the Intel ME. The operation requires a hard reset of the platform. To perform a hard reset:</p> <ol> <li>Power off the platform. Note, it may not power off completely due to flashed    ME.</li> <li>Disconnect power supply from the board when OS finishes all tasks after    power off (the screen goes dark or black).</li> <li>The platform should power on normally now. You can connect the battery back    if it was disconnected.</li> </ol>"},{"location":"variants/asus_kgpe_d16/overview/","title":"Overview","text":"<ul> <li>Releases - groups information about all releases.</li> <li>Building manual - describes how to build Dasharo for     ASUS KGPE D-16.</li> <li>Initial deployment - describes initial Dasharo     deployment methods (i. e. flashing new firmware) for ASUS KGPE D16.</li> <li>Firmware update - explains supported Dasharo     open-source firmware update methods.</li> <li>Recovery - gathers information on how to recover the platform     from potential failure.</li> <li>Hardware configuration matrix - describes the     platform's hardware configuration used during the Dasharo firmware     validation procedure.</li> <li>Test matrix - describes validation scope used during     Dasharo firmware validation procedure.</li> <li>Fan Control - describes the method of testing the     automatic fan control mechanism.</li> <li>Hardware Setup - describes the method of enabling external     flashing for ASUS KGPE-D16.</li> <li>SPI write protection - describes the method of setting     the write protection for flash chip on ASUS KGPE-D16.</li> <li>TPM measured boot - describes the measured boot behaviour     on ASUS KGPE D-16.</li> </ul>"},{"location":"variants/asus_kgpe_d16/recovery/","title":"Recovery","text":""},{"location":"variants/asus_kgpe_d16/recovery/#prequisitions","title":"Prequisitions","text":"<p>To proceed with the recovery procedurethe backup with the  vendor firmware will be necessary eg. <code>backup.rom</code>.</p> <p>Backup file should be generated before making any changes in device flash chip according to documentation in Reading flash contents section.</p>"},{"location":"variants/asus_kgpe_d16/recovery/#internal-flashing","title":"Internal flashing","text":"<p>If platform is booting properly it's possible to recover vendor firmware using procedure described in Flashing Dasharo section, setting path to file with vendor firmware as <code>[path]</code> argument.</p>"},{"location":"variants/asus_kgpe_d16/releases/","title":"Release Notes","text":"<p>Following Release Notes describe status of Open Source Firmware development for ASUS KGPE-D16.</p> <p>For details about our release process please read Dasharo Standard Release Process.</p> <p>Feel free to contact us on our Matrix Dasharo space.</p> <p>Test results for this platform can be found here.</p>"},{"location":"variants/asus_kgpe_d16/releases/#v040-2022-09-12","title":"v0.4.0 - 2022-09-12","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/asus_kgpe_d16/releases/#changed","title":"Changed","text":"<ul> <li>ACPI cleanup</li> <li>Added missing PCI bridge initialization</li> </ul>"},{"location":"variants/asus_kgpe_d16/releases/#fixed","title":"Fixed","text":"<ul> <li>KGPE-D16 can not boot with a GPU connected</li> <li>Configs for platforms without TPM</li> <li>Bugs in DQS timing (kudos to Mike Rothfuss)</li> </ul>"},{"location":"variants/asus_kgpe_d16/releases/#known-issues","title":"Known issues","text":"<ul> <li>Booting from recovery doesn't work</li> <li>Fan controller gets stuck at 100%</li> <li>FreeBSD serial output is broken</li> <li>Linux kernel panic on booting USB media</li> <li>Builds are not reproducible</li> </ul>"},{"location":"variants/asus_kgpe_d16/releases/#binaries","title":"Binaries","text":"<p>asus_kgpe-d16_v0.4.0_16M_vboot_notpm.rom sha256 sha256.sig</p> <p>asus_kgpe-d16_v0.4.0_16M_vboot_tpm12.rom sha256 sha256.sig</p> <p>asus_kgpe-d16_v0.4.0_16M_vboot_tpm2.rom sha256 sha256.sig</p> <p>asus_kgpe-d16_v0.4.0_8M_vboot_notpm.rom sha256 sha256.sig</p> <p>asus_kgpe-d16_v0.4.0_8M_vboot_tpm12.rom sha256 sha256.sig</p> <p>asus_kgpe-d16_v0.4.0_8M_vboot_tpm2.rom sha256 sha256.sig</p> <p>asus_kgpe-d16_v0.4.0_vboot_notpm.rom sha256 sha256.sig</p> <p>asus_kgpe-d16_v0.4.0_vboot_tpm12.rom sha256 sha256.sig</p> <p>asus_kgpe-d16_v0.4.0_vboot_tpm2.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/asus_kgpe_d16/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 03aef28f1613 revision cef95aaa</li> <li>SeaBIOS based on rel-1.14.0 revision 155821a1</li> </ul>"},{"location":"variants/asus_kgpe_d16/releases/#v030-2021-12-16","title":"v0.3.0 - 2021-12-16","text":""},{"location":"variants/asus_kgpe_d16/releases/#added","title":"Added","text":"<ul> <li>TPM support</li> <li>vboot support (see how to sign and protect the image here)</li> <li>build targets for vboot with measured boot using TPM 1.2 and TPM 2.0</li> </ul>"},{"location":"variants/asus_kgpe_d16/releases/#fixed_1","title":"Fixed","text":"<ul> <li>cmos.layout being incorrectly mapped from RW CBFS during coreboot tables generation</li> <li>CC6 storage area being incorrectly included in cbmem top calculations</li> <li>ACPI DSDT LPC device name which caused TPM to be undetected by OS</li> <li>SPI controller driver sometimes dropping bytes sent/received through SPI FIFO</li> </ul>"},{"location":"variants/asus_kgpe_d16/releases/#binaries_1","title":"Binaries","text":"<ul> <li>2MB vboot TPM 1.2</li> </ul> <p>asus_kgpe-d16_v0.3.0_2M_vboot_TPM1.2.rom sha256 sha256.sig</p> <ul> <li>2MB vboot TPM 2.0</li> </ul> <p>asus_kgpe-d16_v0.3.0_2M_vboot_TPM2.0.rom sha256 sha256.sig</p> <ul> <li>8MB vboot TPM 1.2</li> </ul> <p>asus_kgpe-d16_v0.3.0_8M_vboot_TPM1.2.rom sha256 sha256.sig</p> <ul> <li>8MB vboot TPM 2.0</li> </ul> <p>asus_kgpe-d16_v0.3.0_8M_vboot_TPM2.0.rom sha256 sha256.sig</p> <ul> <li>16MB vboot TPM 1.2</li> </ul> <p>asus_kgpe-d16_v0.3.0_16M_vboot_TPM1.2.rom sha256 sha256.sig</p> <ul> <li>16MB vboot TPM 2.0</li> </ul> <p>asus_kgpe-d16_v0.3.0_16M_vboot_TPM2.0.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/asus_kgpe_d16/releases/#sbom-software-bill-of-materials_1","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.14 revision 67190bf</li> <li>SeaBIOS based on rel-1.14.0 revision 155821a1</li> <li>iPXE based on 2019.3 revision ebf2eaf5</li> <li>nvramcui based on 4.14 revision f1d1309f</li> </ul>"},{"location":"variants/asus_kgpe_d16/releases/#v020-2021-12-9","title":"v0.2.0 - 2021-12-9","text":""},{"location":"variants/asus_kgpe_d16/releases/#added_1","title":"Added","text":"<ul> <li>coreboot resource allocator v4 support</li> <li>Nuvoton W83795 HW monitor driver</li> <li>automatic fan control with W83795</li> <li>platform and silicon ramstage support</li> <li>2MB, 8MB and 16MB SPI flash targets</li> <li>SeaBIOS, iPXE and nvramcui payloads</li> </ul>"},{"location":"variants/asus_kgpe_d16/releases/#binaries_2","title":"Binaries","text":"<ul> <li>2MB target</li> </ul> <p>asus_kgpe-d16_v0.2.0_2M.rom sha256 sha256.sig</p> <ul> <li>8MB target</li> </ul> <p>asus_kgpe-d16_v0.2.0_8M.rom sha256 sha256.sig</p> <ul> <li>16MB target</li> </ul> <p>asus_kgpe-d16_v0.2.0_16M.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/asus_kgpe_d16/releases/#sbom-software-bill-of-materials_2","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.14 revision 63b7cbc1</li> <li>SeaBIOS based on rel-1.14.0 revision 155821a1</li> <li>iPXE based on 2019.3 revision ebf2eaf5</li> <li>nvramcui based on 4.14 revision 63b7cbc1</li> </ul>"},{"location":"variants/asus_kgpe_d16/releases/#v010-2021-11-10","title":"v0.1.0 - 2021-11-10","text":""},{"location":"variants/asus_kgpe_d16/releases/#added_2","title":"Added","text":"<ul> <li>C bootblock support</li> <li>postcar stage and no CAR global migration support</li> <li>separated chipset and mainboard code</li> <li>put non-mainboard specific romstage initialization to northirdge</li> <li>support for relocatable ramstage with caching in CBMEM</li> </ul>"},{"location":"variants/asus_kgpe_d16/releases/#binaries_3","title":"Binaries","text":"<p>asus_kgpe-d16_v0.1.0.rom</p> <p>asus_kgpe-d16_v0.1.0.rom.sha256</p> <p>asus_kgpe-d16_v0.1.0.rom.sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/asus_kgpe_d16/releases/#sbom-software-bill-of-materials_3","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 03aef28 revision e6af2206</li> </ul>"},{"location":"variants/asus_kgpe_d16/setup/","title":"RTE v.0.5.3 with ASUS KGPE-D16 connection","text":""},{"location":"variants/asus_kgpe_d16/setup/#power-supply","title":"Power supply","text":"<p>Power to the Asus KGPE-D16 is delivered by a common PC power supply. Simply connect the power supply to ATX compatible connectors on the mainboard (SSIPWR1, SSI12V1, SSI12V2).</p>"},{"location":"variants/asus_kgpe_d16/setup/#spi","title":"SPI","text":"<p>BIOS SPI flash is a socketed DIP-8. There is no simple way to attach to it with any tools. That is why we have thought about the qspimux made by Felix Held which can attach to various SPI modules footprints and sockets. The DIP-8 adapter is put into the DIP-8 socket on the mainboard, which allows attaching the qspimux SPI multiplexer. The multiplexer is responsible for switching between the external SPI lines and the mainboard lines routed to the external SPI flash chip. The external flash chip is soldered on a SOIC8 adapter, which is connected to the qspimux. The connection of the RTE and qspimux is as follows:</p> RTE header J7 pin qspimux J101 pin 1 (VCC) 2 (VCC_PROG) 2 (GND) 7 (GND) 3 (CS) 1 (CS_PROG#) 4 (SCLK) 6 (CLK_PROG) 5 (MISO) 8 (IO0_DI_PROG) 6 (MOSI) 3 (IO1_DO_PROG) 7 (NC) Not connected 8 (NC) Not connected <p>Additionally, one has to tie the IO3_HOLD_PROG (qspimux pin 4) high, so connect it to the 3.3V permanently. Another additional GPIO is required to control the routing of SPI lines. The MUX_SEL (qspimux pin 9) decides whether the programmer is allowed to access the SPI flash or the mainboard. One more GPIO is used to control state of #WP of the flash chip by connecting GPIO to IO2_WP_PROG.</p> <p>The proposed connections used:</p> <ul> <li>RTE GPIO400 to control MUX_SEL</li> <li>RTE GPIO401 to control IO3_HOLD_PROG</li> <li>RTE GPIO402 to control IO2_WP_PROG</li> </ul> <p>Simple flashing script looks as follows:</p> <pre><code># select flash &lt;-&gt; programmer\necho \"0\" &gt; /sys/class/gpio/gpio400/value\n# deassert SPI HOLD#\necho \"1\" &gt; /sys/class/gpio/gpio401/value\n\nflashrom -w firmware.bin -p linux_spi:dev=/dev/spidev1.0,spispeed=16000\n\n# select flash &lt;-&gt; board\necho \"1\" &gt; /sys/class/gpio/gpio400/value\n</code></pre> <p>Controlling state of #WP:</p> <pre><code># configure direction of the pin\necho \"out\" &gt; /sys/class/gpio/gpio402/direction\n\n# deassert WP pin to disable hardware protection of status registers\necho \"1\" &gt; /sys/class/gpio/gpio402/value\n# assert WP pin to enable hardware protection of status registers\necho \"0\"  &gt; /sys/class/gpio/gpio402/value\n</code></pre> RTE header J10 pin qspimux J101 pin 1 (GPIO400) 9 (MUX_SEL) 2 (GPIO401) 4 (IO3_HOLD_PROG) 3 (GPIO402) 5 (IO2_WP_PROG) <p></p> <p></p> <p>qspimux schematic is available here</p>"},{"location":"variants/asus_kgpe_d16/setup/#serial","title":"Serial","text":"<p>Asus KGPE-D16 has a DB9 serial connector for the debug UART. Connect it to the RTE via RS232 DB9 cable.</p> <p></p>"},{"location":"variants/asus_kgpe_d16/setup/#tpm","title":"TPM","text":"<p>Asus KGPE-D16 has an LPC header for TPM or debugging. Since there is no other option to connect a TPM, we use the header for that purpose.</p> <p>IMPORTANT: Use only TPM modules which match their pinout with the board's header! Using a spider web connection degrades the signal quality to the point where CPU cannot properly talk to TPM via LPC bus. Tested with PC Engines TPM module and failed to succeed this way. Designing and producing proper TPM header and/or reliable adapter, could solve this problem. The TwPM project could help here in the future.</p> <p></p> <p>TPM modules that were tested and verified to work in 3mdeb lab with coreboot:</p> <ul> <li>ASUS TPM-L R2.0 module (chip Infineon SLB9665 TT 2.0)</li> <li>ASUS TPM 1.2 Rev 1.02h module (chip Infineon SLB9635 TT 1.2)</li> </ul>"},{"location":"variants/asus_kgpe_d16/setup/#power-management","title":"Power management","text":"<p>Asus KGPE-D16 provides a front panel pin header (PANEL1):</p> <p></p> RTE header J11 pin Asus KGPE-D16 8 (OC buffer output) PANEL1 pin 11 (PWR) 9 (OC buffer output) PANEL1 pin 17 (RESET) <p>Additionally, connect one of the PANEL1 ground pins to one of the ground pins on RTE.</p>"},{"location":"variants/asus_kgpe_d16/setup/#manunal","title":"Manunal","text":"<p>For more details about the KGPE-D16, refer to the manual.</p>"},{"location":"variants/asus_kgpe_d16/setup/#theory-of-operation","title":"Theory of operation","text":""},{"location":"variants/asus_kgpe_d16/setup/#flashing","title":"Flashing","text":"<p>There are two RTEs connected to two Asus KGPE-D16 boards:</p> <ul> <li>192.168.20.15</li> <li>192.168.4.111</li> </ul> <p>Both boards are equipped with the qspimux and a replaced flash chip (Winbond W25Q64FV 8MB). The flash chip is attached to the qspimux with an adapter available with qspimux. Flashing may be done via the commands shown earlier or the flash script which is present in the root directory of the RTE:</p> <p>Note: the <code>flash.sh</code> script, used in this chapter, is available only in 0.8.1 or newer RTE OS releases, check meta-rte for more inf..</p> <pre><code>./flash.sh coreboot.rom\n</code></pre> <p>The script will automatically power off the board and update flash chip contents using flashrom. After the operation is finished the routing of SPI signals is restored to the platform.</p>"},{"location":"variants/asus_kgpe_d16/setup/#the-flash-chip-adapter","title":"The flash chip adapter","text":"<p>In order to provide an easy way to protect the SPI flash chip one may use a DIP-8 to SOIC-8 adapter with a special long pin header for WP pin jumper. It allows to use a SOIC-8 packaged flash in the DIP-8 socket and easily place a jumper to protect the flash. In order to assembly the adapter you will need</p> <ul> <li>the target SPI flash chip (we use either Winbond W25Q64FV (8MB) or W25Q128JV (16MB)),</li> <li>male pin headers 2.54 mm pitch (6 pins)</li> <li>male long pin headers 2.54 mm pitch (2 pins) for the WP jumper</li> <li>SOIC-8 to DIP-8 adapter</li> <li>soldering station and the solder</li> </ul> <p>The build shall look like this:</p> <p> </p> <p>Such adapters are now available in our online shop for purchase. For more details how to enable SPI flash protection refer to SPI Flash protection page.</p>"},{"location":"variants/asus_kgpe_d16/setup/#power-management_1","title":"Power management","text":"<p>RTE can control the power of the board with the <code>RteCtrl</code> command-line application, or with the web GUI (RteCtrl) available at RTE's IP address port 8000. Possible commands are:</p> <pre><code>./RteCtrl -pon # power on the platform\n./RteCtrl -poff # force 5seconds power button power off\n./RteCtrl -reset # briefly assert platform reset pin to perform reset\n</code></pre> <p>It is also possible to control the ATX power supply by disconnecting it from the power socket. For this special purpose, Sonoff S20 is used to remotely control the power socket activity. Sonoff IP to RTE IP mapping:</p> <ul> <li>RTE IP 192.168.20.15 - Sonoff IP 192.168.4.125</li> <li>RTE IP 192.168.4.111 - Sonoff IP 192.168.4.146</li> </ul> <p>Sonoffs respond to rest API requests to enable or disable the power socket. Shell scripts have been added to RTE root directories to ease the control of power of the KGPE-D16 platform:</p> <pre><code>#!/bin/bash\n\nSONOFF_IP=192.168.4.125\n\nif [[ \"$1\" == \"off\" ]]; then\n    wget -q -O - http://$SONOFF_IP/switch/sonoff_s20_relay/turn_off --method=POST\nelif [[ \"$1\" == \"on\" ]]; then\n    wget -q -O - http://$SONOFF_IP/switch/sonoff_s20_relay/turn_on --method=POST\nelif [[ \"$1\" == \"show\" ]]; then\n    wget -q -O - http://$SONOFF_IP/switch/sonoff_s20_relay\n    echo -e '\\n'\nelse\n    echo -e \"\\$1 == on|off|show|toggle\\nEdit this script to set the sonoff ip.\"\n    echo -e 'Current state:'\n    wget -q -O - http://$SONOFF_IP/switch/sonoff_s20_relay\n    echo -e '\\n'\nfi\n</code></pre> <p>To turn off the power from the platform <code>./sonoff.sh off</code> and to turn it on <code>./sonoff.sh on</code>. Invoking the script without any argument will print the current state of the switch.</p>"},{"location":"variants/asus_kgpe_d16/setup/#serial-console-access","title":"Serial console access","text":"<p>A serial port is very useful in debugging and as a remote console of the system on the platform. The serial port of KGPE-D16 is connected to the RTE's serial port which can be accessed on RTE with <code>/dev/ttyS1</code>. One may use minicom directly or take advantage of the ser2net service running on RTE which exposes the serial port over the network. The serial port can be accessed remotely like this <code>telnet RTE_IP 13541</code>, e.g.:</p> <pre><code>telnet 192.168.20.15 13541\n</code></pre>"},{"location":"variants/asus_kgpe_d16/setup/#demo","title":"Demo","text":"<p>A short demo presenting RTE capabilities with KGPE-D16:</p>"},{"location":"variants/asus_kgpe_d16/setup/#remote-access","title":"Remote access","text":"<p>If you are interested in developing coreboot on KGPE-D16 and have some spare time, there is a possibility to obtain access to the hardware. Drop us an email to leads@3mdeb.com with a request.</p>"},{"location":"variants/asus_kgpe_d16/setup/#newsletter","title":"Newsletter","text":"<p>If you are interested in the Dasharo, you are welcome to subscribe to the Dasharo Newsletter:</p>         Subscribe to Dasharo Newsletter"},{"location":"variants/asus_kgpe_d16/setup/#gallery","title":"Gallery","text":""},{"location":"variants/asus_kgpe_d16/spi-wp/","title":"SPI hardware write protection","text":"<p>In order to from a Root of Trust in the firmware, e.g. in the immutable piece of firmware code for Static Root of Trust of Measurement one has to ensure the protection of this piece of code. One may achieve it by enabling Intel Boot Guard or AMD Platform Secure Boot. However these technologies may into always be available. In such case SPI hardware write protection becomes handy.</p> <p>Thanks to the patchset implementing write protection and OTP support in flashrom one can easily set the SPI write protection of the platform from the operating system user space. This page explain how to build the flashrom with WP and OTP support and use to to protect the coreboot's bootblock to form SRTM.</p>"},{"location":"variants/asus_kgpe_d16/spi-wp/#building-flashrom","title":"Building flashrom","text":"<p>In order to build flashrom we will need some packages and librares. For Debian based distros execute:</p> <pre><code>sudo apt-get install git make binutils build-essential ca-certificates \\\n             libpci-dev libftdi-dev libusb-1.0-0-dev\n</code></pre> <p>Now clone the flashrom repository and fetch the patchset:</p> <pre><code>git clone https://github.com/flashrom/flashrom\ncd flashrom\ngit fetch https://review.coreboot.org/flashrom refs/changes/13/59713/7 &amp;&amp; \\\n    git checkout FETCH_HEAD\n</code></pre> <p>Build flashrom:</p> <pre><code>make\n</code></pre> <p>The freshly built flashrom will be present in root directory of the repository.</p>"},{"location":"variants/asus_kgpe_d16/spi-wp/#flashrom-write-protection-cli","title":"Flashrom write protection CLI","text":"<p>Invoke the following command to see a list of available options for flashrom:</p> <pre><code>./flashrom --help\nflashrom v1.2-585-g3542afe on Linux 5.10.0-9-amd64 (x86_64)\nflashrom is free software, get the source code at https://flashrom.org\n\nUsage: ./flashrom [-h|-R|-L|\n    -p &lt;programmername&gt;[:&lt;parameters&gt;] [-c &lt;chipname&gt;]\n        (--flash-name|--flash-size|\n         [-E|-x|(-r|-w|-v) &lt;file&gt;]\n         [(-l &lt;layoutfile&gt;|--ifd| --fmap|--fmap-file &lt;file&gt;) [-i &lt;region&gt;[:&lt;file&gt;]]...]\n         [-n] [-N] [-f])]\n    [-V[V[V]]] [-o &lt;logfile&gt;]\n\n -h | --help                        print this help text\n -R | --version                     print version (release)\n -r | --read &lt;file&gt;                 read flash and save to &lt;file&gt;\n -w | --write &lt;file|-&gt;              write &lt;file&gt; or the content provided\n                                    on the standard input to flash\n -v | --verify &lt;file|-&gt;             verify flash against &lt;file&gt;\n                                    or the content provided on the standard input\n -E | --erase                       erase flash memory\n -V | --verbose                     more verbose output\n -c | --chip &lt;chipname&gt;             probe only for specified flash chip\n -f | --force                       force specific operations (see man page)\n -n | --noverify                    don't auto-verify\n -N | --noverify-all                verify included regions only (cf. -i)\n -x | --extract                     extract regions to files\n -l | --layout &lt;layoutfile&gt;         read ROM layout from &lt;layoutfile&gt;\n      --wp-disable                  disable write protection\n      --wp-enable                   enable write protection\n      --wp-list                     list supported write protection ranges\n      --wp-status                   show write protection status\n      --wp-range=&lt;start&gt;,&lt;len&gt;      set write protection range (use --wp-range=0,0\n                                    to unprotect the entire flash)\n      --wp-region &lt;region&gt;          set write protection region\n      --otp-status                  print information about OTP regions\n      --otp-region &lt;otp-region&gt;     OTP region number (base 1) to operate on\n      --otp-read &lt;file&gt;             read OTP region and save it to &lt;file&gt;\n      --otp-write &lt;file&gt;            write &lt;file&gt; to OTP region\n      --otp-erase                   erase OTP region\n      --otp-lock                    lock OTP region\n      --flash-name                  read out the detected flash name\n      --flash-size                  read out the detected flash size\n      --fmap                        read ROM layout from fmap embedded in ROM\n      --fmap-file &lt;fmapfile&gt;        read ROM layout from fmap in &lt;fmapfile&gt;\n      --ifd                         read layout from an Intel Firmware Descriptor\n -i | --image &lt;region&gt;[:&lt;file&gt;]     only read/write image &lt;region&gt; from layout\n                                    (optionally with data from &lt;file&gt;)\n -o | --output &lt;logfile&gt;            log output to &lt;logfile&gt;\n      --flash-contents &lt;ref-file&gt;   assume flash contents to be &lt;ref-file&gt;\n -L | --list-supported              print supported devices\n -p | --programmer &lt;name&gt;[:&lt;param&gt;] specify the programmer device. One of\n    internal, dummy, nic3com, nicrealtek, gfxnvidia, raiden_debug_spi, drkaiser,\n    satasii, atavia, it8212, ft2232_spi, serprog, buspirate_spi, dediprog,\n    developerbox, rayer_spi, pony_spi, nicintel, nicintel_spi, nicintel_eeprom,\n    ogp_spi, satamv, linux_mtd, linux_spi, usbblaster_spi, pickit2_spi,\n    ch341a_spi, digilent_spi, stlinkv3_spi.\n\nYou can specify one of -h, -R, -L, -E, -r, -w, -v or no operation.\nIf no operation is specified, flashrom will only probe for flash chips.\n</code></pre> <p>We will use only a few of those options to set the protection on the coreboot's bootblock. We protect the bootblock only, since it is the stage responsible for measurements and verification of next stages.</p>"},{"location":"variants/asus_kgpe_d16/spi-wp/#setting-flash-protection-using-flashrom","title":"Setting flash protection using flashrom","text":"<p>NOTE: be sure to update the firmware first before proceeding!</p>"},{"location":"variants/asus_kgpe_d16/spi-wp/#estimating-bootblock-size-and-protection-range","title":"Estimating bootblock size and protection range","text":"<p>First let's see how much space we need to protect. Take your coreboot.rom file and use cbfstool to show its contents:</p> <pre><code>cd /path/to/coreboot/build\n./cbfstool coreboot.rom print\nFMAP REGION: COREBOOT\nName                           Offset     Type           Size   Comp\ncbfs master header             0x0        cbfs header        32 none\nfallback/romstage              0x80       stage          171040 none\nfallback/ramstage              0x29d40    stage           98703 LZMA (229532 decompressed)\nconfig                         0x41f40    raw               709 none\nrevision                       0x42240    raw               723 none\nbuild_info                     0x42540    raw               101 none\nfallback/dsdt.aml              0x42600    raw              7055 none\ncmos.default                   0x441c0    cmos_default      256 none\ncmos_layout.bin                0x44300    cmos_layout      3676 none\nfallback/postcar               0x451c0    stage           21216 none\nimg/nvramcui                   0x4a500    simple elf      70630 none\nfallback/payload               0x5b940    simple elf      69936 none\npayload_config                 0x6cac0    raw              1621 none\npayload_revision               0x6d140    raw               237 none\npci8086,10d3.rom               0x6d280    raw             82944 none\netc/sercon-port                0x816c0    raw                 8 none\n(empty)                        0x81700    null          8128932 none\nbootblock                      0xffcac0   bootblock       13056 none\n</code></pre> <p>The bootblock is taking slightly more than 12KB of space on the bottom of the flash. Converting 12KB to hex would be equal to <code>0x3000</code> but we must cover a little bit more than that. Let's see what protection ranges are available for the chip (running from the target machine to be protected):</p> <pre><code>./flashrom -p internal --wp-list\n...\nAvailable write protection ranges:\n    start=0x00000000 length=0x00000000 (none)\n    start=0x00000000 length=0x00001000 (lower 1/2048)\n    start=0x007ff000 length=0x00001000 (upper 1/2048)\n    start=0x00000000 length=0x00002000 (lower 1/1024)\n    start=0x007fe000 length=0x00002000 (upper 1/1024)\n    start=0x00000000 length=0x00004000 (lower 1/512)\n    start=0x007fc000 length=0x00004000 (upper 1/512)\n    start=0x00000000 length=0x00008000 (lower 1/256)\n    start=0x007f8000 length=0x00008000 (upper 1/256)\n    start=0x00000000 length=0x00020000 (lower 1/64)\n    start=0x007e0000 length=0x00020000 (upper 1/64)\n    start=0x00000000 length=0x00040000 (lower 1/32)\n    start=0x007c0000 length=0x00040000 (upper 1/32)\n    start=0x00000000 length=0x00080000 (lower 1/16)\n    start=0x00780000 length=0x00080000 (upper 1/16)\n    start=0x00000000 length=0x00100000 (lower 1/8)\n    start=0x00700000 length=0x00100000 (upper 1/8)\n    start=0x00000000 length=0x00200000 (lower 1/4)\n    start=0x00600000 length=0x00200000 (upper 1/4)\n    start=0x00000000 length=0x00400000 (lower 1/2)\n    start=0x00400000 length=0x00400000 (upper 1/2)\n    start=0x00000000 length=0x00600000 (lower 3/4)\n    start=0x00200000 length=0x00600000 (upper 3/4)\n    start=0x00000000 length=0x00700000 (lower 7/8)\n    start=0x00100000 length=0x00700000 (upper 7/8)\n    start=0x00000000 length=0x00780000 (lower 15/16)\n    start=0x00080000 length=0x00780000 (upper 15/16)\n    start=0x00000000 length=0x007c0000 (lower 31/32)\n    start=0x00040000 length=0x007c0000 (upper 31/32)\n    start=0x00000000 length=0x007e0000 (lower 63/64)\n    start=0x00020000 length=0x007e0000 (upper 63/64)\n    start=0x00000000 length=0x007f8000 (lower 255/256)\n    start=0x00008000 length=0x007f8000 (upper 255/256)\n    start=0x00000000 length=0x007fc000 (lower 511/512)\n    start=0x00004000 length=0x007fc000 (upper 511/512)\n    start=0x00000000 length=0x007fe000 (lower 1023/1024)\n    start=0x00002000 length=0x007fe000 (upper 1023/1024)\n    start=0x00000000 length=0x007ff000 (lower 2047/2048)\n    start=0x00001000 length=0x007ff000 (upper 2047/2048)\n    start=0x00000000 length=0x00800000 (all)\n</code></pre> <p>The output abvoe comes from Winbond W25Q64FV, a 8MB chip. Bootblock is always mapped to the bottom of the flash. 1MB is equal to 0x100000 so 8MB would be 0x800000. We need at least 0x4000 (16KB) to be protected starting at the bottom of the flash. And fortunately we have found our best match: <code>start=0x007fc000 length=0x00004000 (upper 1/512)</code>.</p>"},{"location":"variants/asus_kgpe_d16/spi-wp/#clearing-spi-write-protection","title":"Clearing SPI write protection","text":"<p>Now that we have selected the desired range to protect, it is time to check the current protection status:</p> <pre><code>./flashrom -p internal --wp-status\n...\nWP config bits: SRP1=0 SRP0=0 CMP=0 SEC=0 TB=0 BP2=0 BP1=0 BP0=0\nProtection range: start=0x00000000 length=0x00000000 (none)\nProtection mode: disabled\n</code></pre> <p>The protection range should be set to zeros and all WP config bits should be cleared. If you see some bits were not cleared, ensure the WP pin jumper on the flash is not placed and invoke:</p> <pre><code>./flashrom -p internal --wp-disable\n./flashrom -p internal --wp-range=0,0\n</code></pre> <p>now that we have a clear state of the flash protection we may proceed with enabling the right range.</p>"},{"location":"variants/asus_kgpe_d16/spi-wp/#setting-protection-range","title":"Setting protection range","text":"<p>Copy the range base and length and invoke:</p> <pre><code>./flashrom -p internal --wp-range=0x007fc000,0x00004000\n</code></pre>"},{"location":"variants/asus_kgpe_d16/spi-wp/#setting-spi-status-register-protection","title":"Setting SPI status register protection","text":"<p>Flashrom should report <code>Successfully set the requested protection range.</code>. Now set the status register protection so the range protection cannot be changed:</p> <pre><code>./flashrom -p internal --wp-enable\n</code></pre> <p>Flashrom should report <code>Successfully set the requested mode.</code>.</p>"},{"location":"variants/asus_kgpe_d16/spi-wp/#verifying-spi-write-protection","title":"Verifying SPI write protection","text":"<p>To check whether the settings are desired invoke:</p> <pre><code>./flashrom -p internal --wp-status\n...\nWP config bits: SRP1=0 SRP0=1 CMP=0 SEC=1 TB=0 BP2=0 BP1=1 BP0=1\nProtection range: start=0x007fc000 length=0x00004000 (upper 1/512)\nProtection mode: hardware\n</code></pre> <p>If it matches what you have wanted to set it is time to lock the status register protection bit (SRP0) from being changed. SRP0 protects the CMP, SEC, TB and BPx bits from being changed. In order to lock the SRP0 bit you have to place the jumper on the WP pin and tie it to ground (GND). This will assert the WP pin and prevent any WP config bits from being changed. To verify it invoke:</p> <pre><code>./flashrom -p internal --wp-disable\n...\nWriting new WP configuration failed during verification:\nExpected configuration: SRP1=0 SRP0=0 CMP=0 SEC=1 TB=0 BP2=0 BP1=1 BP0=1\nActual configuration:   SRP1=0 SRP0=1 CMP=0 SEC=1 TB=0 BP2=0 BP1=1 BP0=1\n</code></pre> <p>You should get the above result.</p>"},{"location":"variants/asus_kgpe_d16/spi-wp/#changing-the-protection-range","title":"Changing the protection range","text":"<p>Now if you want to reprogram the protection range, you need to take off the jumper and invoke:</p> <pre><code>./flashrom -p internal --wp-disable\n</code></pre> <p>Now you should get <code>Successfully set the requested mode.</code> now. Check the WP status:</p> <pre><code>WP config bits: SRP1=0 SRP0=0 CMP=0 SEC=1 TB=0 BP2=0 BP1=1 BP0=1\nProtection range: start=0x007fc000 length=0x00004000 (upper 1/512)\nProtection mode: disabled\n</code></pre> <p>It must indicate <code>Protection mode: disabled</code>. Now you may reconfigure the range, e.g.</p> <pre><code>./flashrom -p internal --wp-range=0x007e0000,0x00020000\n</code></pre> <p>And proceed with enabling protection and setting back the jumper.</p>"},{"location":"variants/asus_kgpe_d16/spi-wp/#setting-flash-protection-for-vboot","title":"Setting flash protection for vboot","text":"<p>In case when vboot is enabled the protection range must be extended in order to cover other parts of the firmware. Vboot model assumes there is a read-only copy of the coreboot and payload called recovery partition. The recovery partition is supposed to be protected with a SPI write protection. The read-only region contains the bootblock, verstage (vboot stage used to verify other firmware components) and vboot keys and all other stages required to boot the platform in case of emergency. Typically the read-only partition occupies a space that matches the possible write protected regions of the flash chip. There are also read-write partitions (up to 2) that contain an updatable copies of the coreboot and payload. Unlike read-only partitions, read-write partitions are being verified using the signatures put into the read-write partitions. vboot checks the signature and decides whether read-write partition is safe to boot, otherwise it proceeds with execution of recovery firmware. The boot flow is shown on the diagram below:</p> <p></p> <p>In order to properly protect the firmware, one has to lock whole <code>WP_RO</code> region define by flashmap in coreboot. To locate the region offset and size one has to use cbfstool to retrieve layout:</p> <pre><code>cd /path/to/coreboot/build\n./cbfstool coreboot.rom layout -w\nThis image contains the following sections that can be accessed with this tool:\n\n'RW_MISC' (read-only, size 524288, offset 0)\n'UNIFIED_MRC_CACHE' (read-only, size 131072, offset 0)\n'RECOVERY_MRC_CACHE' (size 65536, offset 0)\n'RW_MRC_CACHE' (size 65536, offset 65536)\n'SMMSTORE' (preserve, size 262144, offset 131072)\n'CONSOLE' (size 131072, offset 393216)\n'RW_NVRAM' (size 16384, offset 524288)\n'RW_SECTION_A' (read-only, size 5750784, offset 540672)\n'VBLOCK_A' (size 8192, offset 540672)\n'FW_MAIN_A' (CBFS, size 5742528, offset 548864)\n'RW_FWID_A' (size 64, offset 6291392)\n'WP_RO' (read-only, size 2097152, offset 6291456)\n'RO_VPD' (preserve, size 16384, offset 6291456)\n'RO_SECTION' (read-only, size 2080768, offset 6307840)\n'FMAP' (read-only, size 2048, offset 6307840)\n'RO_FRID' (size 64, offset 6309888)\n'RO_FRID_PAD' (size 1984, offset 6309952)\n'GBB' (size 16384, offset 6311936)\n'COREBOOT' (CBFS, size 2060288, offset 6328320)\n\nIt is at least possible to perform the read action on every section listed above.\n</code></pre> <p>The above example shows the KGPE-D16 8MB target with vboot enabled. The <code>WP_RO</code> section is at offset of 6291456 bytes from the beginning of the flash and has size of 2097152 bytes. These numbers are in decimal, so one must convert them to hex. Either use an online hex converter or use the command in bash like a pro :)</p> <pre><code>printf \"0x%x\\n\" 6291456\n0x600000\nprintf \"0x%x\\n\" 2097152\n0x200000\n</code></pre> <p>So our WP range would be 2MB at 6MB offset <code>start=0x00600000 length=0x00200000 (upper 1/4)</code>. But before proceeding with setting the WP range, one may want to sign the firmware with own vboot keys. The Dasharo build come by default with Google vboot developer keys, so to take advantage of vboot, one should sign the binary before flashing and setting the WP range. Refer to vboot signing. Unfortunately the utilities support only 2 RW partitions for resiging. Otherwise a whole image must be rebuilt. After custo mkeys have been used to sign the ifmrware image and the image has been flashed proceed with enalbing the protection:</p> <pre><code>./flashrom -p internal --wp-range=0x00600000,0x00200000\n</code></pre> <p>Then proceed with Setting SPI status register protection and Verifying SPI write protection.</p> <p>At this point you should have your coreboot firmware with vboot well protected and ready to go. Place the jumper in order to prevent any changes to the configuration.</p>"},{"location":"variants/asus_kgpe_d16/test-matrix/","title":"Test matrix","text":""},{"location":"variants/asus_kgpe_d16/test-matrix/#about","title":"About","text":"<p>The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.</p>"},{"location":"variants/asus_kgpe_d16/test-matrix/#module-dasharo-compatibility","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot base port CBP All 2. SMBIOS DMI DMI001.201, DMI002.201, DMI003.201, DMI004.201 3. coreboot fan control FAN All 4. Custom boot menu key CBK All 5. Debian Stable and Ubuntu LTS support LBT LBT001.001, LBT001.002, LBT002.001, LBT002.002 6. Network boot PXE PXE007.001 7. USB detection UDT All 8. USB booting UBT All 9. Platform suspend and resume SUSP SUSP001.201 10. Flash write protection HWP All 11. Display ports and LCD support DSP DSP004.201, DSP004.301"},{"location":"variants/asus_kgpe_d16/test-matrix/#module-dasharo-security","title":"Module: Dasharo security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM TPM001.201 2. Verified Boot support VBO VBO006.001, VBO007.001, VBO008.001"},{"location":"variants/asus_kgpe_d16/test-matrix/#module-dasharo-performance","title":"Module: Dasharo performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. Fan control measure FNM All"},{"location":"variants/asus_kgpe_d16/tpm-mboot/","title":"TPM measured boot","text":"<p>Since the Dasharo release v0.3.0 for KGPE-D16 TPM and measured boot are enabled by default. The firmware comes with 2 variants for all 3 flash size targets:</p> <ul> <li>vboot and TPM 1.2 measured boot for 2MB, 8MB and 16MB flash</li> <li>vboot and TPM 2.0 measured boot for 2MB, 8MB and 16MB flash</li> </ul>"},{"location":"variants/asus_kgpe_d16/tpm-mboot/#tpm-support","title":"TPM support","text":"<p>3mdeb office validates the following setups:</p> <ol> <li>KGPE-D16 8MB flash with ASUS TPM-L R2.0    (Infineon SLB9665 TT2.0).</li> <li>KGPE-D16 16MB flash with ASUS TPM 1.2 Rev 1.02h (Infineon SLB9635 TT1.2).</li> </ol> <p>Both chips are supported by coreboot. For the time being the platforms will be tested with ASUS modules until OSHW lpnTPM with open-source TPM firmware is ready.</p>"},{"location":"variants/asus_kgpe_d16/tpm-mboot/#measured-boot-behaviour","title":"Measured boot behaviour","text":"<p>It is also possible to have builds without vboot:</p> <ul> <li>TPM 1.2 measured boot only (no vboot) for 2MB, 8MB and 16MB flash</li> <li>TPM 2.0 measured boot only (no vboot) for 2MB, 8MB and 16MB flash</li> </ul> <p>These targets are for cases where only the bootblock is intended to be locked to form Static Root of Trust for Measurement. For details how to lock flash depending on the firmware variant (with or without vboot) refer to SPI hardware write protection.</p> <p>Note the targets without vboot do not need to have any division into read-only and read-write partitions. Everything can be contained in a single COREBOOT flashmap region like in a standard coreboot build to have the largest free space for big payloads like heads.</p> <p>The variants without vboot have enabled measured boot with an additional option to initialize the TPM in bootblock in order to send the measurements directly to TPM in bootblock and other early stages. Otherwise the TPM measurements are cached in memory and sent to TPM PCRs late in ramstage during TPM setup. The downside of this approach is that the memory could be corrupted in the meantime and the measurements could be faked before they are migrated to the TPM.</p> <p>If you check the boot logs either on serial port on via cbmem utility you should see:</p> <pre><code>coreboot-asus_kgpe-d16_v0.2.0-15-g521dec6dff Wed Dec 15 11:43:34 UTC 2021 bootblock starting (log level: 8)...\nCPU INIT detected 00000000\nFound TPM SLB9665 TT 2.0 by Infineon\ntlcl_send_startup: Startup return code is 0\nTPM: Write digests cached in TCPA log to PCR\nTPM: Write digest for FMAP: FMAP into PCR 2\ntlcl_extend: response is 0\nTPM: Write digest for FMAP: COREBOOT CBFS: bootblock into PCR 2\ntlcl_extend: response is 0\nTPM: Write digest for FMAP: COREBOOT CBFS: cmos.default into PCR 3\ntlcl_extend: response is 0\nTPM: setup succeeded\nCBFS: Found 'fallback/romstage' @0x80 size 0x2d688 in mcache @0x0004962c\nFMAP: area COREBOOT found @ 200 (8388096 bytes)\nTPM: Extending digest for FMAP: COREBOOT CBFS: fallback/romstage into PCR 2\ntlcl_extend: response is 0\nTPM: Digest of FMAP: COREBOOT CBFS: fallback/romstage to PCR 2 measured\nBS: bootblock times (exec / console): total (unknown) / 62 ms\n</code></pre> <p>When vboot is enabled and the verstage is being located, the bootblock measures itself and the verstage, but the measurements are sent to the TPM PCRs not in bootblock, but in verstage:</p> <pre><code>coreboot-asus_kgpe-d16_v0.2.0-15-g521dec6dff Wed Dec 15 11:43:34 UTC 2021 bootblock starting (log level: 8)...\nCPU INIT detected 00000000\nVBOOT: Loading verstage.\nCBFS: Found 'fallback/verstage' @0x8c300 size 0xd848 in mcache @0x0004c8fc\nFMAP: area COREBOOT found @ 609000 (2060288 bytes)\nTPM: Digest of FMAP: COREBOOT CBFS: fallback/verstage to PCR 2 logged\n\ncoreboot-asus_kgpe-d16_v0.2.0-15-g521dec6dff Wed Dec 15 11:43:34 UTC 2021 verstage starting (log level: 8)...\nVBNV: CMOS invalid, restoring from flash\nFMAP: area RW_NVRAM found @ 80000 (16384 bytes)\nspi_init: SPI base fec10000\nManufacturer: ef\nSF: Detected ef 4017 with sector size 0x1000, total 0x800000\nVBNV: Restore from flash failed\nFound TPM SLB9665 TT 2.0 by Infineon\ntlcl_send_startup: Startup return code is 0\nTPM: Write digests cached in TCPA log to PCR\nTPM: Write digest for FMAP: FMAP into PCR 2\ntlcl_extend: response is 0\nTPM: Write digest for FMAP: COREBOOT CBFS: bootblock into PCR 2\ntlcl_extend: response is 0\nTPM: Write digest for FMAP: COREBOOT CBFS: cmos.default into PCR 3\ntlcl_extend: response is 0\nTPM: Write digest for FMAP: COREBOOT CBFS: fallback/verstage into PCR 2\ntlcl_extend: response is 0\nTPM: Write digest for FMAP: COREBOOT CBFS: cmos_layout.bin into PCR 2\ntlcl_extend: response is 0\nTPM: setup succeeded\n</code></pre>"},{"location":"variants/dell_optiplex/building-manual/","title":"Dell OptiPlex 7010/9010 Dasharo - building manual","text":"<p>Please read the overview page first!</p>"},{"location":"variants/dell_optiplex/building-manual/#available-variants","title":"Available variants","text":"<p>To build Dasharo compatible with Dell OptiPlex 7010/9010, you need to decide what is your desired configuration. The available options are as follows:</p> <ul> <li>Dasharo (coreboot + SeaBIOS)</li> <li>Dasharo (coreboot + edk2)</li> <li>Dasharo (coreboot + SeaBIOS) with   Intel TXT support</li> <li>Dasharo (coreboot + edk2) with   Intel TXT support</li> </ul>"},{"location":"variants/dell_optiplex/building-manual/#intel-txt","title":"Intel TXT","text":"<p>If your choice is to enable TXT support, be advised that there are proprietary ACM blobs required for the firmware to work properly. They are non-redistributable for the platform in question, which means you will need to obtain/extract them yourself and patch the result binary using <code>cbfstool</code>. The methods are covered below in the Include proprietary components section.</p> <pre><code>If in doubt, it is recommended to proceed with the non-TXT scenario.\n</code></pre>"},{"location":"variants/dell_optiplex/building-manual/#building-steps","title":"Building steps","text":"<ol> <li> <p>Clone the coreboot repository:</p> <pre><code>git clone https://github.com/dasharo/coreboot.git\ncd coreboot\n</code></pre> <p>Replace <code>vX.Y.Z</code> with a valid version, eg. <code>v0.1.1</code>:</p> <pre><code>git fetch --tags\ngit checkout optiplex_7010_9010_vX.Y.Z\n</code></pre> <p>Checkout submodules:</p> <pre><code>git submodule update --init --recursive --checkout\n</code></pre> </li> <li> <p>Start a docker container:</p> <pre><code>   docker run --rm -it \\\n      -v $PWD:/home/coreboot/coreboot \\\n      -w /home/coreboot/coreboot \\\n      coreboot/coreboot-sdk:2023-11-24_2731fa619b /bin/bash\n</code></pre> </li> <li> <p>Inside of the container, configure and start the build process:</p> <pre><code>make distclean\n</code></pre> <ul> <li>To build <code>Dasharo (coreboot+SeaBIOS) v0.1.0</code>:</li> </ul> <pre><code>   cp configs/config.dell_optiplex_9010_sff .config\n</code></pre> <ul> <li>To build <code>Dasharo (coreboot+UEFI) v0.1.0</code>:</li> </ul> <pre><code>   cp configs/config.dell_optiplex_9010_sff_uefi .config\n</code></pre> <ul> <li>To build <code>Dasharo (coreboot+SeaBIOS) v0.1.0</code> with TXT support:</li> </ul> <pre><code>   cp configs/config.dell_optiplex_9010_sff_txt .config\n</code></pre> <ul> <li>To build <code>Dasharo (coreboot+UEFI) v0.1.0</code> with TXT support:</li> </ul> <pre><code>   cp configs/config.dell_optiplex_9010_sff_uefi_txt .config\n</code></pre> <p>Finally, run:</p> <pre><code>make olddefconfig\nmake\n</code></pre> <p>or simply:</p> <pre><code>make distclean &amp;&amp; cp configs/CONFIG_NAME .config &amp;&amp; make olddefconfig &amp;&amp; make\n</code></pre> </li> </ol>"},{"location":"variants/dell_optiplex/building-manual/#result","title":"Result","text":"<p>This will produce a Dasharo binary placed in <code>build/coreboot.rom</code>, which can already be manually flashed (initial or as update). However for working fan control it's necessary to include the proprietary Embedded Controller firmware and TXT support also needs aforementioned binary blobs.</p> <p>Fan control</p> <p>Without the proprietary EC firmware the fans will always run at full speed.</p> <p>TXT support</p> <p>Without the proprietary ACM files firmware with built-in TXT support will potentially refuse to start.</p>"},{"location":"variants/dell_optiplex/building-manual/#include-proprietary-components","title":"Include proprietary components","text":"<p>To patch the Dasharo binary you need several tools. They are included in DTS but must usually be installed on other distributions:</p> <ul> <li>binwalk</li> <li>uefi-firmware version 1.9</li> <li>cbfstool</li> </ul> <p>Warning</p> <p>The version of uefi-firmware included in DTS fails while extracting. More info at issue #1226.</p> <p>Note</p> <p>In Fedora 41 for the first two it's as easy as: <pre><code>sudo dnf install binwalk python3-pip python3-devel gcc\npip install uefi-firmware==1.9\n</code></pre> cbfstool can be built with coreboot buildsystem: <pre><code>make -C util/cbfstool\n</code></pre></p>"},{"location":"variants/dell_optiplex/building-manual/#obtaining-vendor-firmware-and-patching-dasharo","title":"Obtaining vendor firmware and patching Dasharo","text":"<ol> <li> <p>For EC and BIOS ACM file the Dell firmware is needed</p> <pre><code>wget --user-agent='Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)'\\\n https://dl.dell.com/FOLDER05066036M/1/O7010A29.exe\n</code></pre> </li> <li> <p>Extract the binary</p> <pre><code>binwalk --run-as=$(whoami) -e O7010A29.exe -C .\n</code></pre> </li> <li> <p>Extract the UEFI components</p> <pre><code>uefi-firmware-parser -e \"_O7010A29.exe.extracted/65C10\" -O\n</code></pre> </li> <li> <p>Copy and patch the needed files:</p> EC supportTXT support <p>Copy the needed blob: <pre><code>cp _O7010A29.exe.extracted/65C10_output/pfsobject/\\\nsection-7ec6c2b0-3fe3-42a0-a316-22dd0517c1e8/volume-0x50000/\\\nfile-d386beb8-4b54-4e69-94f5-06091f67e0d3/section0.raw sch5545_ecfw.bin\n</code></pre> Patch the Dasharo binary <pre><code>cbfstool coreboot.rom add -f sch5545_ecfw.bin -n sch5545_ecfw.bin -t raw\n</code></pre></p> <p>Copy the needed BIOS ACM file: <pre><code>cp _O7010A29.exe.extracted/65C10_output/pfsobject/\\\nsection-7ec6c2b0-3fe3-42a0-a316-22dd0517c1e8/volume-0x500000/\\\nfile-2d27c618-7dcd-41f5-bb10-21166be7e143/object-0.raw \\\nIVB_BIOSAC_PRODUCTION.bin\n</code></pre> Get the also needed SINIT file from 3mdeb-mirror: <pre><code>wget https://dl.3mdeb.com/mirror/intel/acm/SNB_IVB_SINIT_20190708_PW.bin\n</code></pre> Patch the Dasharo binary <pre><code>cbfstool coreboot.rom add -f IVB_BIOSAC_PRODUCTION.bin -n \\\ntxt_bios_acm.bin -t raw -a 0x20000\ncbfstool coreboot.rom add -f SNB_IVB_SINIT_20190708_PW.bin -n \\\ntxt_sinit_acm.bin -t raw -c lzma\n</code></pre></p> </li> <li> <p>Install the prepared binary with the manual method:</p> <ul> <li>To flash Dasharo first time refer to initial deployment manual.</li> <li>To update Dasharo refer to firmware update.</li> </ul> </li> </ol>"},{"location":"variants/dell_optiplex/faq/","title":"FAQ","text":""},{"location":"variants/dell_optiplex/faq/#i-see-orange-led-blinking-but-no-output-is-my-board-broken","title":"I see orange LED blinking, but no output, is my board broken?","text":"<p>It means ME is broken and backup firmware would be required to recover it. Please follow additional recovery step to fix that problem.</p>"},{"location":"variants/dell_optiplex/faq/#i-see-white-led-but-no-output-is-my-board-broken","title":"I see white LED, but no output, is my board broken?","text":"<p>There maybe many reasons of this behavior.</p> <p>One may be, it boots fine but there is no visible output. It may mean firmware stuck at some point or maybe platform booting normally but all output is disabled.</p> <p>Debugging that requires rebuilding with <code>CONFIG_DEFAULT_CONSOLE_LOGLEVEL_8=y</code>. Instruction for that can be found here.</p>"},{"location":"variants/dell_optiplex/faq/#is-it-safe-to-work-without-heatsink","title":"Is it safe to work without heatsink?","text":"<p>It should be safe for debugging and recovery purposes. CPU after ~1min will reach temperature limits and will shutdown the platform.</p>"},{"location":"variants/dell_optiplex/faq/#cpu-was-replaced-warm-reset-required-loop","title":"CPU was replaced &amp; warm reset required loop","text":"<p>If serial console logs contain:</p> <pre><code>[NOTE ]  ME: Wrong mode : 15\n[NOTE ]  ME: HFS error : 15\n[NOTE ]  ME: FWS2: 0xffffffff\n[NOTE ]  ME:  Bist in progress: 0x1\n[NOTE ]  ME:  ICC Status      : 0x3\n[NOTE ]  ME:  Invoke MEBx     : 0x1\n[NOTE ]  ME:  CPU replaced    : 0x1\n[NOTE ]  ME:  MBP ready       : 0x1\n[NOTE ]  ME:  MFS failure     : 0x1\n[NOTE ]  ME:  Warm reset req  : 0x1\n[NOTE ]  ME:  CPU repl valid  : 0x1\n[NOTE ]  ME:  (Reserved)      : 0x3\n[NOTE ]  ME:  FW update req   : 0x1\n[NOTE ]  ME:  (Reserved)      : 0xf\n[NOTE ]  ME:  Current state   : 0xff\n[NOTE ]  ME:  Current PM event: 0xf\n[NOTE ]  ME:  Progress code   : 0xf\n[NOTE ]  CPU was replaced &amp; warm reset required...\n[INFO ]  system_reset() called!\n</code></pre> <p>It means ME is broken and backup firmware would be required to recover it. Please follow additional recovery step to fix that problem.</p> <p>This may happen accidentally when you flash whole 12MB BIOS binary without passing parameters about FMAP.</p>"},{"location":"variants/dell_optiplex/firmware-update/","title":"Firmware update","text":"<p>Please read the overview page first!</p> <p>Following documentation describe process of Dasharo open-source firmware distribution update.</p>"},{"location":"variants/dell_optiplex/firmware-update/#os-booting","title":"OS booting","text":"<p>For simplicity we recommend using network booted Dasharo Tools Suite.</p>"},{"location":"variants/dell_optiplex/firmware-update/#dasharo-corebootseabios-and-dasharo-corebootuefi-update","title":"Dasharo (coreboot+SeaBIOS) and Dasharo (coreboot+UEFI) update","text":"<ul> <li>Make sure a wired network cable to the device's Ethernet port</li> <li>Perform DTS network boot<ul> <li>Dasharo (coreboot+SeaBIOS)<ul> <li>While booting enter SeaBIOS menu using Esc</li> <li>Choose option <code>iPXE (PCI 00:19.0)</code></li> </ul> </li> <li>Dasharo (coreboot+UEFI)<ul> <li>Press F7 and choose iPXE Network boot</li> </ul> </li> </ul> </li> <li>In the Dasharo Network Boot Menu, select the <code>Dasharo Tools Suite</code> option</li> <li>Enter shell using option <code>S) to enter shell</code></li> <li>Download the Dell OptiPlex 7010/9010 Dasharo from   release section or   build from source.</li> <li>Flash it using:</li> </ul> <pre><code>flashrom -p internal --ifd -i bios -w &lt;dasharo_optiplex_9010_firmware&gt;\n</code></pre> <p>Please note that not using <code>-i bios</code> may lead to this issue</p>"},{"location":"variants/dell_optiplex/hardware-matrix/","title":"Hardware configuration matrix","text":"<p>Please read the overview page first!</p> <p>The tables below contain information about current components of the testing environment for Dell OptiPlex workstations available in 3mdeb testing laboratory.</p>"},{"location":"variants/dell_optiplex/hardware-matrix/#optiplex-7010","title":"OptiPlex 7010","text":"Component Description CPU Intel Core i5-3470 Stock Dell CPU Cooler GPU Integrated Intel HD Graphics RAM 4x 8GB HMT351U6CFR8C-PB HDD N/A SSD Silicon Power 120GB 2,5\" SATA SSD S55 Flash memory 12MB (8+4) dual SPI flash Network Local network wired connection Attached devices 1. SanDisk Ultra USB 3.0 Power Supply Stock Dell PSU Power Control 1. Sonoff Web Server Remote Testing Environment 1. RTE <code>v1.1.0</code> (firmware <code>v0.7.5</code>) connected via RS232"},{"location":"variants/dell_optiplex/hardware-matrix/#optiplex-9010","title":"OptiPlex 9010","text":"Component Description CPU Intel Core i7-3770 3,4GHz CPU Cooler GPU Integrated Intel HD Graphics RAM RAMAXEL 4GB RMR1870EC58E9F-1333 HDD N/A SSD Goodram SSDPR-CX400-256-G2 256GB 2.5'' : SATA III Flash memory 12MB (8+4) dual SPI flash Network Local network wired connection Attached devices None Power Supply Stock Dell PSU Power Control 1. Manual Remote Testing Environment 1. RTE not set up"},{"location":"variants/dell_optiplex/hardware-matrix/#optiplex-9010-full-miczyg","title":"OptiPlex 9010 full (miczyg)","text":"<p>This is private setup.</p> Component Description CPU Intel Core i7-3770Stock Dell CPU Cooler GPU 1. Integrated Intel HD Graphics 2. Dell Radeon HD7570 low profile, half height in PCIe x16 slot RAM SK-Hynix HMT451U6BFR8A-PB x4 HDD None SSD 1. NVMe: PLEXTOR PX-512M9PeG2. SATA SSD: SSDPR-CL100-240 3. SATA SSD: Micron_1100_MTFD Flash memory 12MB (8+4) dual SPI flash Network Local network wired connection Attached devices 1. i-tec Adapter PCI-E SATA 2x M.2 Card PCI-E/SATA in PCIe x4 slot 2. PS/2 mouse: Fujitsu M530 via USB to PS/2 adapter 3. PS/2 keyboard: Media-Tech MT122K 4. Display: Samsung SyncMaster 22335. Stock Dell DVD RW Power Supply Stock Dell PSU Power Control Manual Remote Testing Environment RTE <code>v1.0.0</code> (firmware <code>v0.5.3</code>) connected via RS232"},{"location":"variants/dell_optiplex/initial-deployment/","title":"Initial deployment","text":"<p>Please read the overview page first!</p> <p>Following documentation describe process of replacing original BIOS/UEFI firmware with Dasharo open-source firmware. Following procedure is supported for following models</p> <p> Vendor Model Dell OptiPlex 7010 SFF Dell OptiPlex 7010 DT Dell OptiPlex 9010 SFF Dell OptiPlex 9010 MT <p></p>"},{"location":"variants/dell_optiplex/initial-deployment/#hardware-preparation","title":"Hardware preparation","text":""},{"location":"variants/dell_optiplex/initial-deployment/#flash-descriptor-security-override","title":"Flash descriptor security override","text":"<p>To perform any SPI NOR flash operations in the presence of ME, we have to put it in the flash descriptor security override mode. Please follow the below steps:</p> <ol> <li> <p>Open the case by lifting the handle on the case.</p> <p></p> </li> <li> <p>Lift the whole top cover and take it off.</p> <p></p> </li> <li> <p>Now, it is time to release the disk dock. Lift the handle of the CD/DVD drive    bay.</p> <p></p> </li> <li> <p>Pull the CD/DVD drive bay to the CPU fan side.</p> <p></p> </li> <li> <p>Move the blue disk dock handle to the CPU fan side.</p> <p></p> </li> <li> <p>The screw should be at the giant hole now. Lift the whole dock to    remove it.</p> <p></p> </li> <li> <p>When the dock is removed, the service mode jumper should be visible.</p> <p></p> </li> <li> <p>Place the jumper in the place marked by the red rectangle.</p> <p></p> </li> <li> <p>It should look like this.</p> <p></p> </li> <li> <p>Power on the machine. You should see a warning that the service jumper is active. Press F1 to proceed and boot to your Linux system.</p> <p></p> </li> </ol>"},{"location":"variants/dell_optiplex/initial-deployment/#initial-deployment_1","title":"Initial deployment","text":"<p>The deployment process depends on how you get Dasharo. If you got a Pro Package please use the \"Zero Touch\" method to ensure a smooth installation. If you built yourself you have to use the manual method.</p> Zero TouchManual <p>Use the latest release of Dasharo Tools Suite and follow the Dasharo zero-touch initial deployment documentation. This will help you set up Dasharo effectively and without manual intervention.</p> <p>To flash your Dasharo binary manual it is recommended to use Flashrom on DTS like this: <pre><code>flashrom -p internal -w coreboot.rom --ifd -i bios\n</code></pre></p>"},{"location":"variants/dell_optiplex/initial-deployment/#verification","title":"Verification","text":"<ol> <li>If everything went well (flashrom has verified the flash content),</li> <li>Shut down the machine, move the jumper to the original place</li> <li>Power on the machine.</li> <li>After rebooting, you should see the Dasharo Workstation logo when booting.    When the logo appears, you may press Esc to select the boot device if    you want to reboot from another source.</li> </ol> <p>From that point you can use firmware update methods to update your firmware.</p>"},{"location":"variants/dell_optiplex/initial-deployment/#troubleshooting","title":"Troubleshooting","text":"<p>If you do not see the logo after a few seconds, something probably went wrong, or you encountered a bug. If the LED on the power button shines white, that means the platform booted correctly.</p> <p></p> <p>If the power button LED constantly shines in orange color, that means you have hit an error. The LED will start blinking soon.</p> <p> If you see the logo and after that system does not starts (black screen), please take the following steps:</p> <ol> <li>Put a bootable USB stick to the USB port.</li> <li>Restart the computer using the power button.</li> <li>Press the Esc key to enter a boot menu.</li> <li>Choose a USB drive from the list.</li> <li>Re-install the operating system.</li> </ol> <p>Common deployment problems you can find in FAQ.</p>"},{"location":"variants/dell_optiplex/initial-deployment/#ubuntu-installation","title":"Ubuntu installation","text":"<p>Ubuntu legacy installers have problems with graphical setup mode. When you see this error:</p> <pre><code>graphics initialization failed\nError setting up gfxboot\nboot:_\n</code></pre> <p>You need a workaround to proceed with the installation. To boot the installer, type <code>live-install</code> and press <code>ENTER</code>. It will boot to Ubuntu Live, and the installer will launch automatically.</p> <p>Version affected: Dasharo Workstation v0.1.</p> <p>If you see blinking yellow LED and black screen after reboot: 1. Unplug the power supply cable 2. Wait for the 30s 3. Plug in the power supply again (machine should start automatically)</p>"},{"location":"variants/dell_optiplex/initial-deployment/#bug-reporting","title":"Bug reporting","text":"<p>If you encountered an error or bug, please report it in the Dasharo Issues repo.</p>"},{"location":"variants/dell_optiplex/openness-score/","title":"Dasharo Openness Score","text":"<p>This page contains the Dasharo Openness Score for Dasharo releases compatible with Dell OptiPlex 7010/9010. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/dell_optiplex/openness-score/#v011","title":"v0.1.1","text":"<p>Openness Score for dell_optiplex_7010_9010_v0.1.1.rom</p> <p>Open-source code percentage: 24.6% Closed-source code percentage: 75.4%</p> <ul> <li>Image size: 12582912 (0xc00000)</li> <li>Number of regions: 13</li> <li>Number of CBFSes: 1</li> <li>Total open-source code size: 2056924 (0x1f62dc)</li> <li>Total closed-source code size: 6313984 (0x605800)</li> <li>Total data size: 408256 (0x63ac0)</li> <li>Total empty size: 3803748 (0x3a0a64)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/dell_optiplex/openness-score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category SI_ME 0x5000 0x5fb000 closed-source SI_DESC 0x0 0x1000 data SMMSTORE 0x800000 0x40000 data RW_MRC_CACHE 0x840000 0x10000 data RW_ELOG 0x850000 0x10000 data FMAP 0x860000 0x800 data UNUSED 0x600000 0x200000 empty"},{"location":"variants/dell_optiplex/openness-score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 3799040</li> <li>Number of files: 14</li> <li>Open-source files size: 2056924 (0x1f62dc)</li> <li>Closed-source files size: 26624 (0x6800)</li> <li>Data size: 8896 (0x22c0)</li> <li>Empty size: 1706596 (0x1a0a64)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1729914 none open-source fallback/romstage stage 105808 none open-source fallback/ramstage stage 137635 LZMA open-source fallback/dsdt.aml raw 14827 none open-source fallback/postcar stage 34820 none open-source bootblock bootblock 33920 none open-source cpu_microcode_blob.bin microcode 26624 none closed-source cbfs_master_header cbfs header 32 none data config raw 4040 LZMA data revision raw 863 none data build_info raw 114 none data vbt.bin raw 1438 LZMA data cmos_layout.bin cmos_layout 1204 none data (empty) null 1706596 none empty"},{"location":"variants/dell_optiplex/overview/","title":"Overview","text":""},{"location":"variants/dell_optiplex/overview/#dell-optiplex-70109010-sff","title":"Dell OptiPlex 7010/9010 SFF","text":"<p>OptiPlex is a computer series by Dell aimed at office workloads coming in different form factors and quality levels.</p> <p>Dasharo supports the IvyBridge equipped 7010 and 9010 SFF models which share the same board. There exists also three other versions sharing most of the internals but differ a bit regarding expansion possibilities. Additionally the Precision T1650 has essentially the same board as the MT featuring a workstation grade C216 chipset.</p> MT - Medium Tower DT - Desktop SFF - Small Form Factor USFF - Ultra Small Form Factor UDIMM 4 4 4 2 USB 2 2 Front, 4 Back, 1 Internal 2 Front, 4 Back, 1 Internal 2 Front, 4 Back 2 Back USB 3 2 Front, 2 Back 2 Front, 2 Back 2 Front, 2 Back 2 Front, 2 Back SATA 2.0 2 1 1 - SATA 3.0 2 2 2 2 Expansion Cards 4 full height 4 half height 2 half height 1 MiniPCIe half height PCI 2.3 1 1 - - PCIe 2.0 1x4, 1x1 1x4, 1x1 1x4 1x PCIe 3.0 1x16 1x16 1x16 - Height 36.00 cm 36.00 cm 29.00 cm 23.70 cm Width 17.50 cm 10.20 cm 9.30 cm 6.50 cm Depth 41.70 cm 41.00 cm 31.20 cm 24.00 cm Weight 9.40 kg 7.90 kg 6.00 kg 3.30 kg <p>Note</p> <p>There also exists the OptiPlex Tower|SFF|Micro 7010 which is based on Intel Raptor Lake and has nothing to do with this IvyBridge series from a firmware point of view.</p> <p>If you wish to build, perform initial deployment, update or recover your setup, please refer to documentation sections.</p> <p>To learn more about our process and motivation for the coreboot port and Dasharo support, see references section.</p>"},{"location":"variants/dell_optiplex/overview/#history","title":"History","text":"<p>Dasharo compatible with Dell OptiPlex 7010/9010 used to be a community-driven effort. We would work on this in our free time, since we had no sponsor for this project. To address the issue we used to host a virtual hackathon called OptiPlex Tuesday on Dasharo Matrix, almost every Tuesday.</p> <p>With the release of Dasharo firmware for this platform, the event series is concluded. We would like to thank all participants, and we hope we'll meet again at future events.</p>"},{"location":"variants/dell_optiplex/overview/#documentation","title":"Documentation","text":"<ul> <li>Releases - groups information about all releases.</li> <li>Building manual - describes how to build Dasharo   compatible with Dell OptiPlex 7010/9010.</li> <li>Initial deployment - describes initial Dasharo   deployment methods (i. e. flashing new firmware) compatible with Dell   OptiPlex 7010/9010.</li> <li>Firmware update - explains supported Dasharo   open-source firmware update methods.</li> <li>Recovery - gathers information on how to recover the platform   from potential failure.</li> <li>Hardware configuration matrix - describes the   platform's hardware configuration used during the Dasharo firmware   validation procedure.</li> <li>Test matrix - describes validation scope used during   Dasharo firmware validation procedure.</li> <li>FAQ - answers to frequently asked questions.</li> </ul>"},{"location":"variants/dell_optiplex/overview/#references","title":"References","text":"<ul> <li>Dell OptiPlex and coreboot - a story about porting cursed hardware (part 1)</li> <li>Dell OptiPlex and coreboot - a story about porting cursed hardware (part 2)</li> <li>Dasharo for Dell OptiPlex 7010 / 9010</li> <li>7010: Dell-Support,  Technical Guidebook,  3mdeb-Shop</li> <li>9010: Dell-Support,  Technical Guidebook,  3mdeb-Shop</li> </ul>"},{"location":"variants/dell_optiplex/recovery/","title":"Recovery","text":"<p>Please read the overview page first!</p> <p>Following documentation describes the process of recovering hardware from brick state with RTE and Dasharo open-source firmware. Following procedure is supported for following models</p> <p> Vendor Model Dell OptiPlex 7010 SFF Dell OptiPlex 7010 DT Dell OptiPlex 9010 SFF <p></p>"},{"location":"variants/dell_optiplex/recovery/#step-1-prepare-hardware","title":"Step 1: Prepare hardware","text":"<ol> <li>To prepare hardware please follow    hardware preparation    procedure.</li> <li>Follow instruction in the video to remove heatsink:</li> </ol>"},{"location":"variants/dell_optiplex/recovery/#step-2-find-spi_1-spi_2spi_3","title":"Step 2: Find SPI_1, SPI_2/SPI_3","text":""},{"location":"variants/dell_optiplex/recovery/#step-3-connect-soic-8-pomona-clip-between-rte-and-target","title":"Step 3: Connect SOIC-8 Pomona clip between RTE and target","text":"<p>Connect SOIC-8 Pomona according to MX25L3206E datasheet.</p> <p> </p> <p> </p> <p> RTE J7 Pomona SOIC clip CS pin 1 (upside) MISO pin 2 (upside) GND pin 4 (upside) VCC (3.3V) pin 5 (downside) SCLK pin 7 (downside) MOSI pin 8 (downside) <p></p> <p>Numbers 1-4 have to be on one side and numbers 5-8 have to be on the other side of the clip.</p> <p> </p> <p> </p> <p>Clip on the <code>SPI_1</code> chip. Match pin 1 (<code>CS</code>) of the Pomona clip with the first pin of <code>SPI_1</code> chip, marked with a small dot engraved on the chip.</p> <p></p>"},{"location":"variants/dell_optiplex/recovery/#step-4-connect-rte","title":"Step 4: Connect RTE","text":"<ol> <li>Connect J2 Orange Pi Zero system debug output</li> <li>Power the board and confirm it boots</li> <li>Please note typical convention of USB-UART converter colors is as follows<ul> <li>black - GND</li> <li>red - +5V</li> <li>green - TX</li> <li>white - RX</li> </ul> </li> <li> <p>Connect terminal to RTE and read OS version:</p> <pre><code>sudo minicom -b 115200 -D /dev/ttyUSB0 -o -C /tmp/minicom.cap\n</code></pre> <ul> <li><code>-b 115200</code> sets baudrate</li> <li><code>-D /dev/ttyUSB0</code> points to USB-UART converter device, it can be   different if you already have some devices connected or you use different   operating system</li> <li><code>-o</code> skip initialization</li> <li><code>-C /tmp/minicom.cap</code> capture serial terminal output, if you will have   problems with exercises please post this file</li> <li>Login using following credentials:</li> </ul> <pre><code>login: root\npassword: meta-rte\n</code></pre> </li> </ol>"},{"location":"variants/dell_optiplex/recovery/#step-5-prepare-recovery-binary","title":"Step 5: Prepare recovery binary","text":"<p>Following procedure assume that you use recovery binary created during backup process. Backup has 12MB, so it have to be split</p> <pre><code>split -b4M bios_backup_YYYYMMDD.bin\n</code></pre>"},{"location":"variants/dell_optiplex/recovery/#step-6-flash-4mb-bios-part","title":"Step 6: Flash 4MB (BIOS) part","text":"<pre><code>echo 1 &gt; /sys/class/gpio/gpio405/value\n</code></pre> <pre><code>echo 1 &gt; /sys/class/gpio/gpio406/value\n</code></pre> <pre><code>echo 1 &gt; /sys/class/gpio/gpio404/value\n</code></pre> <p><code>xac</code> is third file resulting from the previous binary split, so it contains Dasharo code and data which fits into 4MB and in case of Dell OptiPlex 9010/7010 should be flashed to 4MB SPI.</p> <pre><code>flashrom -w xac -p linux_spi:dev=/dev/spidev1.0,spispeed=16000 -c \"MX25L3205D/MX25L3208D\"\n</code></pre>"},{"location":"variants/dell_optiplex/recovery/#optional-step-7-flash-8mb-me-part","title":"(Optional) Step 7: Flash 8MB (ME) part","text":"<p>If a more serious problem occurs, like broken ME, or if you would like to restore Dell firmware, it may be necessary to use your firmware backup and restore content of 8MB chip.</p>"},{"location":"variants/dell_optiplex/recovery/#step-7a-connect-soic-16-pomona-clip-between-rte-and-target","title":"Step 7a: Connect SOIC-16 Pomona clip between RTE and target","text":"<p>Connect SOIC-16 Pomona according to MX25L6406E datasheet.</p> <p> </p> <p> </p> <p> RTE J7 Pomona SOIC clip VCC (3.3V) pin 2 (upside) CS pin 7 (upside) MISO pin 8 (upside) SCLK pin 16 (downside) MOSI pin 15 (downside) GND pin 10 (downside) <p></p> <p>Numbers 1-8 have to be on one side and numbers 9-16 have to be on the other side of the clip.</p> <p> </p> <p> </p> <p>Clip on the <code>SPI_2/SPI_3</code> chip. Match pin 1 (<code>HOLD#</code>) of the Pomona clip with the first pin of <code>SPI_2/SPI_3</code> chip, marked with a small dot engraved on the chip.</p> <p></p>"},{"location":"variants/dell_optiplex/recovery/#step-7b-flash-8mb-me-part","title":"Step 7b: Flash 8MB (ME) part","text":"<pre><code>echo 1 &gt; /sys/class/gpio/gpio405/value\n</code></pre> <pre><code>echo 1 &gt; /sys/class/gpio/gpio406/value\n</code></pre> <pre><code>echo 1 &gt; /sys/class/gpio/gpio404/value\n</code></pre>"},{"location":"variants/dell_optiplex/recovery/#dasharo-recovery","title":"Dasharo recovery","text":"<p>Use following procedure if your 4M flash contain Dasharo open-source firmware.</p> <pre><code>cat &gt; dell_optiplex.layout &lt;&lt;EOF\n00000000:00000fff fd\n00001000:00004fff gbe\n00005000:005fffff me\n00600000:007fffff unused\nEOF\n</code></pre> <pre><code>flashrom -w your_bios_backup.bin -p linux_spi:dev=/dev/spidev1.0,spispeed=16000 -c \"MX25L6406E/MX25L6408E\" -i fd -i me --layout dell_optiplex.layout\n</code></pre>"},{"location":"variants/dell_optiplex/recovery/#vendor-bios-recovery","title":"Vendor BIOS recovery","text":"<p>Use following procedure if your 4M flash contain vendor BIOS.</p> <pre><code>flashrom -w your_bios_backup_8M.bin -p linux_spi:dev=/dev/spidev1.0,spispeed=16000 -c \"MX25L6406E/MX25L6408E\"\n</code></pre>"},{"location":"variants/dell_optiplex/releases/","title":"Dell OptiPlex 7010/9010 Dasharo Release Notes","text":"<p>This is a Dasharo Pro Package Release. To obtain access to the pre-built binaries you will have to become the Dasharo Pro Package subscriber. You can do this by purchasing a Dasharo Pro Package product from our shop. As a subscriber, you will receive access to all firmware updates for the duration of your subscription via the Dasharo Pro Package newsletter, and gain entry to the Dasharo Premier Support invite-only live chat on the Matrix network, enabling direct engagement with the Dasharo Team and fellow subscribers for personalized, priority assistance.</p> <p>Following Release Notes describe status of open-source firmware development for Dell OptiPlex 7010/9010</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to Dell OptiPlex 7010/9010 Dasharo Release Newsletter"},{"location":"variants/dell_optiplex/releases/#v011-2024-12-17","title":"v0.1.1 - 2024-12-17","text":"<p>Test results for this release can be found here.</p> <p>Note</p> <p>This release is compatible with both the Dell OptiPlex 7010 and 9010, SFF variants as they are essentially identical. However, we have only tested it on a 7010 SFF and cannot guarantee full functionality on a 9010 SFF. It is recommended to test the release on the 9010 and report any issues. On MT and DT variants limited functionality of PCI/PCIe and SATA ports can be observed. See this issue.</p>"},{"location":"variants/dell_optiplex/releases/#added","title":"Added","text":"<ul> <li>Support for Dell OptiPlex 7010/9010</li> <li>UEFI Boot Support</li> <li>Configurable boot order</li> <li>Configurable boot options</li> <li>UEFI Secure Boot support</li> <li>Custom boot logo</li> <li>Dasharo setup menu full screen mode support</li> <li>SMM BIOS write protection</li> <li>Firmware update mode</li> <li>Setup menu password configuration</li> <li>USB stack disable option in setup menu</li> <li>Network stack disable option in setup menu</li> <li>Serial Console Redirection option</li> </ul>"},{"location":"variants/dell_optiplex/releases/#binaries","title":"Binaries","text":"<p>sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/dell_optiplex/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 24.02 revision 4631e23c<ul> <li>License</li> </ul> </li> <li>Dasharo EDKII fork based on edk2-stable202405 revision f3e18c6c<ul> <li>License</li> </ul> </li> <li>Dasharo iPXE fork based on 838611b34e revision 35d84756<ul> <li>License</li> </ul> </li> <li>Intel microcode version IVB E1/L1 0x21 13/02/2019<ul> <li>License</li> </ul> </li> <li>Intel microcode version SNB D2/G1/Q0 0x2f 17/02/2019<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/dell_optiplex/releases/#v010-non-public-engineering-release","title":"v0.1.0 - Non-public engineering release","text":""},{"location":"variants/dell_optiplex/test-matrix/","title":"Test matrix","text":""},{"location":"variants/dell_optiplex/test-matrix/#about","title":"About","text":"<p>The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.</p>"},{"location":"variants/dell_optiplex/test-matrix/#module-dasharo-compatibility","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. UEFI Shell USH All 2. Display ports and LCD support DSP DSP003.201, DSP003.003, DSP004.201, DSP004.003 3. USB HID and MSC Support USB All 4. SMBIOS DMI DMI002.201, DMI003.201, DMI004.201, DMI005.001, DMI006.001 5. Custom boot logo CLG All 6. Audio subsystem AUD AUD001.201, AUD004.201, AUD005.201, AUD006.201 7. NVMe support\u00b9 NVM NVM001.001, NVM001.201 8. Network boot PXE Without PXE007.001 9. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 13. Windows booting WBT WBT001.001 10. Custom boot menu key CBK All 15. Dasharo Tools Suite DTS DTS001.001, DTS002.001, DTS003.001, DTS004.001, DTS005.001, DTS006.001 11. PCI Express ports support PEX PEX001.001 16. CPU status CPU CPU001.201, CPU001.301 17. Platform suspend and resume SUSP All 12. EC and Super I/O initialization SIO SIO001.001, SIO002.001, SIO002.002, SIO003.001, SIO004.001, SIO004.002 13. Fan control FAN FAN001.002\u00b2 <p>1) Requires a PCIe x4 to M.2 adapter 2) Fans have to be checked manually. No support for reading the fan speed.    There is also no W83795G HWM on this machine.</p>"},{"location":"variants/dell_optiplex/test-matrix/#module-dasharo-security","title":"Module: Dasharo security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM TPM001.201 2. Measured Boot support MBO All 4. Secure Boot support SBO All 9. UEFI Setup password PSW All 10. Network stack enable/disable NBA All 11. USB stack enable/disable USS All"},{"location":"variants/dell_optiplex/test-matrix/#module-dasharo-performance","title":"Module: Dasharo performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF Without CPU003.XXX and CPU005.XXX 4. Platform stability STB All"},{"location":"variants/gigabyte_mz33-ar1/building-manual/","title":"Dasharo firmware building guide","text":""},{"location":"variants/gigabyte_mz33-ar1/building-manual/#intro","title":"Intro","text":"<p>This guide shows how to build Dasharo firmware compatible with Gigabyte MZ33-AR1.</p>"},{"location":"variants/gigabyte_mz33-ar1/building-manual/#requirements","title":"Requirements","text":"<ul> <li>Docker<ul> <li>follow Install Docker Engine on Ubuntu</li> <li>follow Post-installation steps for Linux</li> </ul> </li> <li>Git<ul> <li><code>sudo apt-get install git</code></li> </ul> </li> </ul>"},{"location":"variants/gigabyte_mz33-ar1/building-manual/#building","title":"Building","text":"<p>To build Dasharo (coreboot+UEFI) firmware image, first clone the coreboot repository:</p> <pre><code>git clone https://github.com/Dasharo/coreboot.git\n</code></pre> <p>then follow the steps below:</p> <ol> <li> <p>To build a specific version checkout to the version's tag.     Skip this step otherwise.</p> <pre><code>cd coreboot\ngit checkout gigabyte_mz33_ar1_&lt;version&gt;\n</code></pre> <p>For example</p> <pre><code>git checkout gigabyte_mz33_ar1_v0.1.0\n</code></pre> </li> <li> <p>Build the firmware:</p> <pre><code>./build.sh mz33_ar1\n</code></pre> <p>The resulting coreboot image will be placed in the coreboot directory as <code>gigabyte_mz33_ar1_&lt;version&gt;.rom</code>.</p> </li> </ol>"},{"location":"variants/gigabyte_mz33-ar1/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/gigabyte_mz33-ar1/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configuration used for validation of the coreboot port on the Gigabyte MZ33-AR1.</p> <p>Under construction</p>"},{"location":"variants/gigabyte_mz33-ar1/initial-deployment/","title":"Initial deployment","text":"<p>This document describes the process of building, installing and running flashrom on Ubuntu 24.04.</p>"},{"location":"variants/gigabyte_mz33-ar1/initial-deployment/#build-flashrom","title":"Build flashrom","text":"<p>Please follow generic guide for Dasharo flashrom fork.</p>"},{"location":"variants/gigabyte_mz33-ar1/initial-deployment/#reading-flash-contents","title":"Reading flash contents","text":"<p>Always prepare a backup of the current firmware image. To read from the flash and save it to a file (<code>dump.rom</code>), execute the following command:</p> <pre><code>flashrom -p internal -r dump.rom\n</code></pre>"},{"location":"variants/gigabyte_mz33-ar1/initial-deployment/#flashing-dasharo","title":"Flashing Dasharo","text":"<p>To flash Dasharo on the platform, it is only possible with an external programmer currently. Follow the same process as in recovery section.</p>"},{"location":"variants/gigabyte_mz33-ar1/overview/","title":"Overview","text":""},{"location":"variants/gigabyte_mz33-ar1/overview/#gigabyte-mz33-ar1","title":"Gigabyte MZ33-AR1","text":"<p>Gigabyte MZ33-AR1 is a full-fledged single socket server board supporting AMD Genoa and AMD Turin EPYC server processors.</p>"},{"location":"variants/gigabyte_mz33-ar1/overview/#documentation","title":"Documentation","text":"<ul> <li>Releases - Groups information about all releases.</li> <li>Building Manual - Describes how to build Dasharo   compatible with the Gigabyte MZ33-AR1.</li> <li>Initial Deployment - Describes initial Dasharo   deployment methods (i. e. flashing new firmware) compatible with Gigabyte   MZ33-AR1.</li> <li>Recovery - Gathers information on how to recover the platform     from potential failure.</li> <li>Hardware Configuration Matrix - Describes the     platform's hardware configuration used during the Dasharo firmware     validation procedure.</li> <li>Test Matrix - Describes validation scope used during     Dasharo firmware validation procedure.</li> </ul>"},{"location":"variants/gigabyte_mz33-ar1/recovery/","title":"Recovery","text":""},{"location":"variants/gigabyte_mz33-ar1/recovery/#intro","title":"Intro","text":"<p>The following documentation describes the process of recovering hardware from the brick state using an RTE and Dasharo open-source firmware.</p>"},{"location":"variants/gigabyte_mz33-ar1/recovery/#external-flashing","title":"External flashing","text":"<p>The external programming and recovery from bricks caused by Dasharo can be achieved by flashing only a portion of BIOS flash memory. Currently, due to various limitations of AMD firmware image assembling, Dasharo images do not incorporate the PSP firmwares and are only suitable to co-work with PSP firmware blobs present inside vendor images.</p> <p>To flash the relevant portion of the BIOS to recover, the following flashrom layout <code>layout_file</code> is needed:</p> <pre><code>00000000:01cbffff reserved\n01cc0000:01ffffff bios\n</code></pre> <p>The Dasharo image with Turin support occupies the last 0x340000 bytes of the BIOS flash, as this is the flash region being copied by PSP in the vendor image. We reuse it to copy the whole coreboot to RAM before jumping to reset vector.</p> RTECH341A"},{"location":"variants/gigabyte_mz33-ar1/recovery/#prerequisites","title":"Prerequisites","text":"<ul> <li>Prepared RTE</li> <li>6x female-female wire cables</li> <li>pomona SOIC8 clip</li> </ul>"},{"location":"variants/gigabyte_mz33-ar1/recovery/#connections","title":"Connections","text":"<p>To prepare the stand for flashing follow the steps described in the Generic test stand setup</p>"},{"location":"variants/gigabyte_mz33-ar1/recovery/#firmware-flashing","title":"Firmware flashing","text":"<p>To flash firmware follow the steps described below:</p> <ol> <li>Login to RTE via <code>ssh</code> or <code>minicom</code>.</li> <li>Turn on the platform by connecting the power supply.</li> <li>Wait at least 5 seconds.</li> <li>Turn off the platform by using the power button.</li> <li>Wait at least 3 seconds.</li> <li> <p>Set the proper state of the SPI by using the following commands on RTE:</p> <pre><code># set SPI Vcc to 3.3V\necho 1 &gt; /sys/class/gpio/gpio405/value\n# SPI Vcc on\necho 1 &gt; /sys/class/gpio/gpio406/value\n# SPI lines ON\necho 1 &gt; /sys/class/gpio/gpio404/value\n</code></pre> <p>Starting with RTE distro v0.8.x the GPIOS are 517, 518, 516.</p> </li> <li> <p>Wait at least 2 seconds.</p> </li> <li>Disconnect the power supply from the platform.</li> <li>Wait at least 2 seconds.</li> <li> <p>Check if the flash chip is connected properly</p> <pre><code>flashrom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000\n</code></pre> </li> <li> <p>Flash the platform by using the following command:</p> <pre><code>flashrom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000 \\\n    -w [path_to_binary] --layout layout_file -i bios -N\n</code></pre> <p>The board sinks too much current which results in SPI Vcc to drop below an acceptable level when writing to flash. Reads are reliable, but write often fail. When PSU is off, the voltage on SPI chip is 2.5V-2.6V only from RTE. Sometimes it happens to go smoothly, but most of the time not. Using CH341A is more reliable, but leaves VCC always connected to the board, which tends to put the board in a limbo state. Recovering from such limbo requires disconnecting all power sources from the board (both PSU and CH341A). However, with OSFV cli the writes are somehow reliable, so it is recommended to use the utility.</p> </li> <li> <p>Change back the state of the SPI by using the following commands:</p> <pre><code>echo 0 &gt; /sys/class/gpio/gpio404/value\necho 0 &gt; /sys/class/gpio/gpio405/value\necho 0 &gt; /sys/class/gpio/gpio406/value\n</code></pre> <p>Starting with RTE distro v0.8.x the GPIOS are 516, 517, 518.</p> </li> <li> <p>Turn on the platform by connecting the power supply.</p> </li> </ol> <p>The AMD board take longer to boot due to memory training happening on PSP side. Thus the first signs of life from open-source firmware may appear even after a couple of minutes (depends on amount of populated RAM).</p>"},{"location":"variants/gigabyte_mz33-ar1/recovery/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>CH341a USB to SPI programmer</li> <li>6x female-female wire cables</li> <li>pomona SOIC8 clip</li> </ul>"},{"location":"variants/gigabyte_mz33-ar1/recovery/#connections_1","title":"Connections","text":"<ol> <li>Connect pomona SOIC8 clip to the CH341a programmer.</li> <li>Clip on the BIOS flash chip on the board.</li> </ol>"},{"location":"variants/gigabyte_mz33-ar1/recovery/#firmware-flashing_1","title":"Firmware flashing","text":"<p>To flash firmware follow the steps described below:</p> <ol> <li>Disconnect the power supply from the platform.</li> <li>Wait at least 2 seconds.</li> <li> <p>Check if the flash chip is connected properly</p> <pre><code>flashrom -p ch341a_spi\n</code></pre> </li> <li> <p>Flash the platform by using the following command:</p> <pre><code>flashrom -p ch341a_spi -w [path_to_binary] \\\n    --layout layout_file -i bios -N\n</code></pre> </li> <li> <p>Take off the pomona clip from the chip.</p> </li> <li>Turn on the platform by connecting the power supply.</li> </ol> <p>The AMD board take longer to boot due to memory training happening on PSP side. Thus the first signs of life from open-source firmware may appear even after a couple of minutes (depends on amount of populated RAM).</p>"},{"location":"variants/gigabyte_mz33-ar1/releases/","title":"Gigabyte MZ33-AR1 Dasharo Release Notes","text":"<p>Following Release Notes describe status of Open Source Firmware development for Gigabyte MZ33-AR1.</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to Gigabyte MZ33-AR1 Dasharo Release Newsletter"},{"location":"variants/gigabyte_mz33-ar1/test-matrix/","title":"Test matrix","text":""},{"location":"variants/gigabyte_mz33-ar1/test-matrix/#about","title":"About","text":"<p>The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary compatible with Gigabyte MZ33-AR1.</p> <p>Under construction</p>"},{"location":"variants/hardkernel_odroid_h4/building-manual/","title":"Dasharo firmware building guide","text":""},{"location":"variants/hardkernel_odroid_h4/building-manual/#intro","title":"Intro","text":"<p>This guide shows how to build Dasharo firmware for Hardkernel devices.</p>"},{"location":"variants/hardkernel_odroid_h4/building-manual/#requirements","title":"Requirements","text":"<ul> <li>Docker<ul> <li>follow Install Docker Engine on Ubuntu</li> <li>follow Post-installation steps for Linux</li> </ul> </li> <li>Git<ul> <li><code>sudo apt-get install git</code></li> </ul> </li> </ul>"},{"location":"variants/hardkernel_odroid_h4/building-manual/#building","title":"Building","text":"<p>To build Dasharo (coreboot+UEFI) firmware image, first clone the coreboot repository:</p> <pre><code>git clone https://github.com/Dasharo/coreboot.git\n</code></pre> <p>then follow the steps below:</p> <ol> <li> <p>To build a specific version checkout to the version's tag.     Skip this step otherwise.</p> <pre><code>cd coreboot\ngit checkout hardkernel_odroid_h4_&lt;version&gt;\n</code></pre> <p>For example</p> <pre><code>git checkout hardkernel_odroid_h4_v0.9.0\n</code></pre> </li> <li> <p>Checkout submodules:</p> <pre><code>git submodule update --init --checkout\n</code></pre> </li> <li> <p>Build the firmware:</p> <pre><code>./build.sh odroid_h4\n</code></pre> <p>The resulting coreboot image will be placed in the coreboot directory as <code>hardkernel_odroid_h4_&lt;version&gt;.rom</code>.</p> </li> </ol>"},{"location":"variants/hardkernel_odroid_h4/building-manual/#building-slim-bootloader","title":"Building Slim Bootloader","text":"<p>To build Dasharo (Slim Bootloader + UEFI) firmware image, first clone and enter Slim Bootloader repository:</p> <pre><code>git clone https://github.com/Dasharo/slimbootloader.git\ncd slimbootloader\n</code></pre> <p>then follow the steps below:</p> <ol> <li> <p>To build a specific version, checkout to the version's tag.     Skip this step otherwise.</p> <pre><code>git checkout hardkernel_odroid_h4_&lt;version&gt;\n</code></pre> <p>For example</p> <pre><code>git checkout hardkernel_odroid_h4_v0.9.0\n</code></pre> </li> <li> <p>Build UEFI Payload and Slim BootLoader</p> <pre><code>./build.sh odroid_h4\n</code></pre> </li> </ol> <p>Note</p> <p>If you wish to build Slim Bootloader with your own keys, run <code>SBL_KEY_DIR=&lt;path_to_keys&gt; ./build.sh odroid_h4</code> instead, where the <code>&lt;path_to_keys&gt;</code> is the path to the directory with keys generated with <code>python BootloaderCorePkg\\Tools\\GenerateKeys.py -k &lt;path_to_keys&gt;</code> from the clone Slim Bootloader directory. <code>&lt;path_to_keys&gt;</code> may be an absolute path or path relative to Slim Bootloader repository directory.</p> <p>The resulting Slim Bootloader image will be placed in the Slim Bootloader directory as <code>Outputs/odroid_h4/ifwi-release.bin</code>.</p>"},{"location":"variants/hardkernel_odroid_h4/firmware-update/","title":"Firmware update","text":"<p>The following documentation describes the process of Dasharo open-source firmware update. If your device is currently flashed with the proprietary firmware please refer to the Initial deployment documentation.</p> <p>The update process may be different, depending on the currently installed Dasharo firmware version.</p> <p>For simplicity of the process we recommend using Dasharo Tools Suite.</p> <p>Before starting the update procedure be sure to disable Dasharo BIOS Boot medium lock and Secure Boot:</p> <ol> <li>Power on the device.</li> <li>While the device is booting, hold the <code>DELETE</code> key to enter the UEFI Setup     Menu.</li> <li>Enter the <code>Dasharo System Features</code> menu using the arrow keys and Enter.</li> <li>Enter the Dasharo Security Options     submenu.</li> <li>Verify the state of the <code>Lock the BIOS boot medium</code> option - if the option     is chosen, press <code>Space</code> and then <code>F10</code> to save the changes.</li> <li>Go back to the main menu using the <code>ESC</code> key.</li> <li>Enter the <code>Device Manager</code> menu.</li> <li>Enter the Secure Boot Configuration     submenu.</li> <li>Verify that the <code>Current Secure Boot State</code> field says Disabled - if not,     unselect the <code>Attempt Secure Boot</code> option below then press <code>F10</code> to save     the changes.</li> <li>Reboot the device to properly apply the changes.</li> </ol> <p>The settings of all the above options can be restored after a firmware update.</p>"},{"location":"variants/hardkernel_odroid_h4/firmware-update/#updating-dasharo-manually","title":"Updating Dasharo manually","text":"<pre><code>flashrom -p internal -w hardkernel_odroid_h4_v&lt;version&gt;.rom --fmap -i WP_RO -i RW_SECTION_A\n</code></pre>"},{"location":"variants/hardkernel_odroid_h4/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/hardkernel_odroid_h4/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configuration used for validation of Dasharo on the Hardkernel ODROID H4.</p>"},{"location":"variants/hardkernel_odroid_h4/hardware-matrix/#hardkernel-odroid-h4","title":"Hardkernel ODROID H4+","text":"Component Description CPU Intel(R) Processor N97 RAM Samsung M425R1GB4BB0-CWMOD SSD Samsung SSD PRO 900 1TB eMMC MMC PJ3032 Flash memory Winbond W25Q128JV USB Keyboard DELL KB216 USB Mouse None USB pendrives 1. SanDisk Ultra  Flair USB 3.0 16 GB Display HDMI 1920x1080p Ethernet controller Intel i210 (on-board) Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control RTE v1.1.0 Power supply ULLPOWER ICP65-150-4000 15V 5A KVM PiKVM based on Raspberry Pi Zero 2w"},{"location":"variants/hardkernel_odroid_h4/initial-deployment/","title":"Initial deployment","text":"<p>Initial flashing of Dasharo firmware can be done from Linux using flashrom with the internal programmer or using the Dasharo Tools Suite included in the Dasharo Pro Package subscription (formerly Dasharo Entry Subscription). An instruction on how to use the DTS can be found in the DTS documentation</p> <p>This document describes the process of building, installing and running flashrom on Ubuntu 24.04.</p>"},{"location":"variants/hardkernel_odroid_h4/initial-deployment/#build-flashrom","title":"Build flashrom","text":"<p>Please follow generic guide for Dasharo flashrom fork.</p>"},{"location":"variants/hardkernel_odroid_h4/initial-deployment/#reading-flash-contents","title":"Reading flash contents","text":"<p>Always prepare a backup of the current firmware image. To read from the flash and save it to a file (<code>dump.rom</code>), execute the following command:</p> <pre><code>flashrom -p internal -r dump.rom\n</code></pre> <p>If you forgot to do this, you can get the original, proprietary firmware from the ODROID wiki website  to restore it in case it is bricked. Using the firmware other than your own backup should be the last resort.</p>"},{"location":"variants/hardkernel_odroid_h4/initial-deployment/#flashing-dasharo","title":"Flashing Dasharo","text":"<p>To flash Dasharo on the platform, execute the following command - replace <code>[path]</code> with the path to the Dasharo image you want to flash, e.g. <code>hardkernel_odroid_h4_v0.9.0.rom</code>.</p> <pre><code>sudo flashrom -p internal -w [path] --ifd -i bios\n</code></pre> <p>For Slim Bootloader flavor the flash descriptor has to be updated as well to match Slim Bootloader requirements for Top Swap size:</p> <pre><code>sudo flashrom -p internal --ifd -i bios -i fd \\\n    -w hardkernel_odroid_h4_v0.9.0_slim_bootloader_uefi.rom\n</code></pre> <p>After successful operation reboot the platform.</p> <p>If the platforms fails to boot, try performing a CMOS reset:</p> <ol> <li>Disconnect the power supply and the CMOS battery.</li> <li>Wait for 10 seconds</li> <li>Reconnect the power supply and the CMOS battery</li> <li>Press the power button</li> </ol>"},{"location":"variants/hardkernel_odroid_h4/openness_score/","title":"Dasharo Openness Score","text":"<p>This page contains the Dasharo Openness Score for Hardkernel ODROID H4+ Dasharo releases. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/hardkernel_odroid_h4/openness_score/#v091","title":"v0.9.1","text":"<p>Openness Score for hardkernel_odroid_h4_v0.9.1.rom</p> <p>Open-source code percentage: 36.4% Closed-source code percentage: 63.6%</p> <ul> <li>Image size: 16777216 (0x1000000)</li> <li>Number of regions: 21</li> <li>Number of CBFSes: 3</li> <li>Total open-source code size: 3839802 (0x3a973a)</li> <li>Total closed-source code size: 6696358 (0x662da6)</li> <li>Total data size: 636340 (0x9b5b4)</li> <li>Total empty size: 5604716 (0x55856c)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/hardkernel_odroid_h4/openness_score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category SI_ME 0x1000 0x413000 closed-source SI_DESC 0x0 0x1000 data SMMSTORE 0x600000 0x40000 data RECOVERY_MRC_CACHE 0x640000 0x20000 data RW_MRC_CACHE 0x660000 0x20000 data RW_NVRAM 0x680000 0x1000 data VBLOCK_A 0x6c0000 0x10000 data RW_FWID_A 0xafff00 0x100 data FMAP 0xb00000 0x800 data RO_FRID 0xb00800 0x100 data RO_FRID_PAD 0xb00900 0x700 data GBB 0xb01000 0x3000 data SI_DEVICEEXT2 0x414000 0x1ec000 empty"},{"location":"variants/hardkernel_odroid_h4/openness_score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 258048</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 258020 (0x3efe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 258020 none empty"},{"location":"variants/hardkernel_odroid_h4/openness_score/#cbfs-fw_main_a","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 4390656</li> <li>Number of files: 13</li> <li>Open-source files size: 1864605 (0x1c739d)</li> <li>Closed-source files size: 1212115 (0x127ed3)</li> <li>Data size: 9168 (0x23d0)</li> <li>Empty size: 1304768 (0x13e8c0)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1508384 none open-source fallback/romstage stage 105400 none open-source fallback/ramstage stage 157804 LZMA open-source fallback/dsdt.aml raw 18165 none open-source fallback/postcar stage 74852 none open-source cpu_microcode_blob.bin microcode 139264 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 286419 LZ4 closed-source config raw 5970 LZMA data revision raw 860 none data build_info raw 108 none data vbt.bin raw 1271 LZMA data (empty) null 676 none empty"},{"location":"variants/hardkernel_odroid_h4/openness_score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 5226496</li> <li>Number of files: 19</li> <li>Open-source files size: 1975197 (0x1e239d)</li> <li>Closed-source files size: 1212115 (0x127ed3)</li> <li>Data size: 12488 (0x30c8)</li> <li>Empty size: 2026696 (0x1eecc8)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1508384 none open-source fallback/romstage stage 105400 none open-source fallback/ramstage stage 157804 LZMA open-source fallback/dsdt.aml raw 18165 none open-source fallback/postcar stage 74852 none open-source bootblock bootblock 110592 none open-source cpu_microcode_blob.bin microcode 139264 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 286419 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 272 none data boot_policy_manifest.bin raw 1536 none data key_manifest.bin raw 1024 none data config raw 5970 LZMA data revision raw 860 none data build_info raw 108 none data vbt.bin raw 1271 LZMA data (empty) null 292 none empty (empty) null 2026404 none empty"},{"location":"variants/hardkernel_odroid_h4/openness_score/#v090","title":"v0.9.0","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for hardkernel_odroid_h4_v0.9.0.rom</p> <p>Open-source code percentage: 38.3% Closed-source code percentage: 61.7%</p> <ul> <li>Image size: 16777216 (0x1000000)</li> <li>Number of regions: 21</li> <li>Number of CBFSes: 3</li> <li>Total open-source code size: 4143436 (0x3f394c)</li> <li>Total closed-source code size: 6684614 (0x65ffc6)</li> <li>Total data size: 632358 (0x9a626)</li> <li>Total empty size: 5316808 (0x5120c8)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/hardkernel_odroid_h4/openness_score/#fmap-regions_1","title":"FMAP regions","text":"FMAP region Offset Size Category SMMSTORE 0x600000 0x40000 data RECOVERY_MRC_CACHE 0x640000 0x20000 data RW_MRC_CACHE 0x660000 0x20000 data RW_NVRAM 0x680000 0x1000 data VBLOCK_A 0x6c0000 0x10000 data RW_FWID_A 0xafff00 0x100 data FMAP 0xb00000 0x800 data RO_FRID 0xb00800 0x100 data RO_FRID_PAD 0xb00900 0x700 data GBB 0xb01000 0x3000 data"},{"location":"variants/hardkernel_odroid_h4/openness_score/#ifd-regions","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00001000 0x00413fff 0x413000 closed-source Flash Descriptor 0x00000000 0x00000fff 0x1000 data Device Exp2 0x00414000 0x005fffff 0x1ec000 empty"},{"location":"variants/hardkernel_odroid_h4/openness_score/#cbfs-bootsplash_1","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 258048</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 258020 (0x3efe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 258020 none empty"},{"location":"variants/hardkernel_odroid_h4/openness_score/#cbfs-fw_main_a_1","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 4390656</li> <li>Number of files: 13</li> <li>Open-source files size: 2027238 (0x1eeee6)</li> <li>Closed-source files size: 1206243 (0x1267e3)</li> <li>Data size: 8603 (0x219b)</li> <li>Empty size: 1148572 (0x11869c)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1727490 none open-source fallback/romstage stage 98320 none open-source fallback/ramstage stage 145034 LZMA open-source fallback/dsdt.aml raw 18114 none open-source fallback/postcar stage 38280 none open-source cpu_microcode_blob.bin microcode 138240 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 281571 LZ4 closed-source config raw 5421 LZMA data revision raw 860 none data build_info raw 108 none data vbt.bin raw 1272 LZMA data (empty) null 2404 none empty"},{"location":"variants/hardkernel_odroid_h4/openness_score/#cbfs-coreboot_1","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 5226496</li> <li>Number of files: 17</li> <li>Open-source files size: 2116198 (0x204a66)</li> <li>Closed-source files size: 1206243 (0x1267e3)</li> <li>Data size: 9071 (0x236f)</li> <li>Empty size: 1894984 (0x1cea48)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1727490 none open-source fallback/romstage stage 98320 none open-source fallback/ramstage stage 145034 LZMA open-source fallback/dsdt.aml raw 18114 none open-source fallback/postcar stage 38280 none open-source bootblock bootblock 88960 none open-source cpu_microcode_blob.bin microcode 138240 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 281571 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 80 none data config raw 5421 LZMA data revision raw 860 none data build_info raw 108 none data vbt.bin raw 1272 LZMA data (empty) null 2148 none empty (empty) null 1892836 none empty"},{"location":"variants/hardkernel_odroid_h4/overview/","title":"Overview","text":""},{"location":"variants/hardkernel_odroid_h4/overview/#hardkernel-odroid-h4-plus","title":"Hardkernel ODROID-H4 PLUS","text":"<p>Hardkernel ODROID-H4 PLUS is a small single-board computer with publicly available schematics and documentation. One of it's most noteworthy features is the use of two distinct switchable BIOS flash memory chips. This makes it a perfect device for experimenting with firmware by making the recovery process after bricking the device a breeze.</p> <p>The device is described in detail on blog.3mdeb.com</p> <p>The Hardkernel ODROID-H4 PLUS is available as part of the Dasharo Pro Package. Subscribe to the Dasharo Pro Package to access exclusive pre-built binaries. For added convenience, you can also purchase a platform with a subscription directly from our shop.</p>"},{"location":"variants/hardkernel_odroid_h4/overview/#documentation","title":"Documentation","text":"<ul> <li>Releases - Groups information about all releases.</li> <li>Building Manual - Describes how to build Dasharo   compatible with the ODROID-H4 PLUS.</li> <li>Initial Deployment - Describes initial Dasharo   deployment methods (i. e. flashing new firmware) compatible with ODROID-H4   PLUS.</li> <li>Firmware Update - Explains supported Dasharo     open-source firmware update methods.</li> <li>Recovery - Gathers information on how to recover the platform     from potential failure.</li> <li>Hardware Configuration Matrix - Describes the     platform's hardware configuration used during the Dasharo firmware     validation procedure.</li> <li>Test Matrix - Describes validation scope used during     Dasharo firmware validation procedure.</li> </ul>"},{"location":"variants/hardkernel_odroid_h4/recovery/","title":"Recovery","text":""},{"location":"variants/hardkernel_odroid_h4/recovery/#intro","title":"Intro","text":"<p>The following documentation describes the process of recovering hardware from the brick state using an RTE and Dasharo open-source firmware.</p>"},{"location":"variants/hardkernel_odroid_h4/recovery/#dual-bios","title":"Dual BIOS","text":"<p>The ODROID H4+ and ODROID-H4 Ultra devices both have the Dual BIOS feature. If the device does not boot properly, the backup flash chip can be selected using the flash selector jumper.</p> <p> First bios chip selected using the flash selector</p> <ol> <li>Move the flash selector jumper to select the backup flash chip. If the    device does not boot from any of the flash chips, an external flashing    needs to be performed. In that case continue with the    External flashing section.</li> <li>If the device boots, boot to an OS.</li> <li>Move the flash selector jumper back to it's original position selecting the    previous flash chip, from which the device does not boot.</li> <li> <p>With the device working, an OS booted and the flash chip selector moved    back, the firmware can be flashed using the command:</p> <pre><code>flashrom -p internal -w [path_to_binary]\n</code></pre> </li> <li> <p>After the flashing finishes reboot the device. If the platform does not boot a CMOS reset and boot from G3 state may be needed:</p> <ol> <li>Unplug the CMOS battery and the power supply</li> <li>Wait for 10 seconds</li> <li>Plug the CMOS battery and power supply back in</li> <li>Press the power button</li> </ol> </li> </ol>"},{"location":"variants/hardkernel_odroid_h4/recovery/#additional-methods","title":"Additional methods","text":"<p>Additional methods for flashing the firmware on Windows and using the UEFI Shell can be found on the ODROID Wiki.</p>"},{"location":"variants/hardkernel_odroid_h4/recovery/#external-flashing","title":"External flashing","text":"RTECH341A <p>For instructions on how to perform a recovery using the CH341A external programmer refer to the ODROID Wiki .</p>"},{"location":"variants/hardkernel_odroid_h4/recovery/#prerequisites","title":"Prerequisites","text":"<ul> <li>Prepared RTE</li> <li>6x female-female wire cables</li> </ul>"},{"location":"variants/hardkernel_odroid_h4/recovery/#connections","title":"Connections","text":"<p>To prepare the stand for flashing follow the steps described in the Generic test stand setup</p>"},{"location":"variants/hardkernel_odroid_h4/recovery/#firmware-flashing","title":"Firmware flashing","text":"<p>To flash firmware follow the steps described below:</p> <ol> <li>Login to RTE via <code>ssh</code> or <code>minicom</code>.</li> <li>Turn on the platform by connecting the power supply.</li> <li>Wait at least 5 seconds.</li> <li>Turn off the platform by using the power button.</li> <li>Wait at least 3 seconds.</li> <li> <p>Set the proper state of the SPI by using the following commands on RTE:</p> <pre><code># set SPI Vcc to 3.3V\necho 1 &gt; /sys/class/gpio/gpio405/value\n# SPI Vcc on\necho 1 &gt; /sys/class/gpio/gpio406/value\n# SPI lines ON\necho 1 &gt; /sys/class/gpio/gpio404/value\n</code></pre> </li> <li> <p>Wait at least 2 seconds.</p> </li> <li>Disconnect the power supply from the platform.</li> <li>Wait at least 2 seconds.</li> <li> <p>Check if the flash chip is connected properly</p> <pre><code>flashrom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000\n</code></pre> </li> <li> <p>Flash the platform by using the following command:</p> <pre><code>flashrom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000 -w [path_to_binary]\n</code></pre> <p>Flashing with flashrom takes about 1 minute.</p> </li> <li> <p>Change back the state of the SPI by using the following commands:</p> <pre><code>echo 0 &gt; /sys/class/gpio/gpio404/value\necho 0 &gt; /sys/class/gpio/gpio405/value\necho 0 &gt; /sys/class/gpio/gpio406/value\n</code></pre> </li> <li> <p>Turn on the platform by connecting the power supply.</p> </li> </ol> <p>The first boot of the platform after proceeding with the above procedure can take much longer than normal.</p>"},{"location":"variants/hardkernel_odroid_h4/releases/","title":"Hardkernel ODROID H4 Dasharo Release Notes","text":"<p>This is a Dasharo Pro Package Release. o obtain access to the pre-built binaries, you need to subscribe to the Dasharo Pro Package subscriber. You can do this by purchasing a Dasharo Pro Package product from our shop. As a subscriber, you will receive access to all firmware updates for the duration of your subscription via the Dasharo Pro Package newsletter, and gain entry to the Dasharo Premier Support invite-only live chat on the Matrix network, enabling direct engagement with the Dasharo Team and fellow subscribers for personalized, priority assistance.</p> <p>Following Release Notes describe status of open-source firmware development for Hardkernel ODROID H4</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to Hardkernel ODROID H4 Dasharo Release Newsletter"},{"location":"variants/hardkernel_odroid_h4/releases/#v091-2025-09-03","title":"v0.9.1 - 2025-09-03","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/hardkernel_odroid_h4/releases/#added","title":"Added","text":"<ul> <li>Support for the Hardkernel ODROID H4 Ultra device</li> <li>Support for Net Card 2 module</li> <li>Capsule Update integration</li> <li>In-Band ECC option</li> <li>Quiet and fast boot option</li> <li>ME disable option</li> <li>Boot Guard status information to UEFI setup menu</li> <li>Improved measured boot support</li> <li>Microsoft Option ROM UEFI CA to Secure Boot DB</li> <li>Check for flash descriptor writability when exposing HAP disable option</li> </ul>"},{"location":"variants/hardkernel_odroid_h4/releases/#changed","title":"Changed","text":"<ul> <li>VBT file to fix graphical output in firmware</li> <li>Flash descriptor updated to v1.1 (see SBOM)</li> <li>Owner GUID of Secure Boot DB and KEK to Microsoft recommended values</li> <li>Updated DBX to 2025-06-13</li> </ul>"},{"location":"variants/hardkernel_odroid_h4/releases/#fixed","title":"Fixed","text":"<ul> <li>S3 sleep too short on ODROID H4 Plus</li> <li>Can't delete signature of enrolled EFI file from DB as it's not shown</li> <li>Dismissing a pop-up in UEFI payload caused instant booting</li> <li>Recovery of damaged variable storage causing random settings reset</li> </ul>"},{"location":"variants/hardkernel_odroid_h4/releases/#binaries","title":"Binaries","text":"<p>If you wish to use a Net Card module, please use the files suffixed with <code>netcard</code>. They have the proper 4x1 bifurcation in M.2 slot as explained on ODROID wiki.</p> <p>sha256 sha256.sig (hardkernel_odroid_h4_v0.9.1.cap)</p> <p>sha256 sha256.sig (hardkernel_odroid_h4_v0.9.1.rom)</p> <p>sha256 sha256.sig (hardkernel_odroid_h4_v0.9.1_dev_signed.cap)</p> <p>sha256 sha256.sig (hardkernel_odroid_h4_v0.9.1_dev_signed.rom)</p> <p>sha256 sha256.sig (hardkernel_odroid_h4_v0.9.1_netcard.cap)</p> <p>sha256 sha256.sig (hardkernel_odroid_h4_v0.9.1_netcard.rom)</p> <p>sha256 sha256.sig (hardkernel_odroid_h4_v0.9.1_netcard_dev_signed.cap)</p> <p>sha256 sha256.sig (hardkernel_odroid_h4_v0.9.1_netcard_dev_signed.rom)</p> <p>This is a Dasharo Pro Package Release. To access the pre-built binaries, you need to subscribe to the Dasharo Pro Package subscriber. You can do this by purchasing a Dasharo Pro Package product from our shop. As a subscriber, you will receive access to all firmware updates for the duration of your subscription via the Dasharo Pro Package newsletter, and gain entry to the Dasharo Premier Support invite-only live chat on the Matrix network, enabling direct engagement with the Dasharo Team and fellow subscribers for personalized, priority assistance.</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/hardkernel_odroid_h4/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 24.12 revision 7d10ea62<ul> <li>License</li> </ul> </li> <li>Dasharo EDKII fork based on edk2-stable202502 revision 91a7a092<ul> <li>License</li> </ul> </li> <li>Dasharo iPXE fork based on 2025.03 revision 6c7068fc<ul> <li>License</li> </ul> </li> <li>vboot based on f1f70f46dc revision f1f70f46<ul> <li>License</li> </ul> </li> <li>Intel Management Engine version v16.50.10.1351<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor version v1.1<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package version IoT ADL-N MR6 (6023_00)<ul> <li>License</li> </ul> </li> <li>Intel microcode version ADL-N N0 0x1d 06/12/2024<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/hardkernel_odroid_h4/releases/#v090-2025-02-20","title":"v0.9.0 - 2025-02-20","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/hardkernel_odroid_h4/releases/#added_1","title":"Added","text":"<ul> <li>Initial support for the Hardkernel ODROID H4 device, based on Intel Alder   Lake N</li> <li>UEFI compatible interface</li> <li>Support for discrete TPM</li> <li>UEFI Secure Boot support</li> <li>Boot logo customization support</li> <li>USB boot support</li> <li>NVMe boot support</li> <li>TPM Measured Boot</li> <li>UEFI Shell</li> <li>Network boot</li> <li>Windows 11 booting</li> <li>Ubuntu LTS booting</li> <li>Serial port console redirection</li> <li>Vboot Verified Boot</li> <li>BIOS flash protection for Vboot recovery region</li> <li>Setup menu password configuration</li> <li>SMM BIOS write protection</li> <li>USB stack disable option in setup menu</li> <li>Network stack disable option in setup menu</li> </ul>"},{"location":"variants/hardkernel_odroid_h4/releases/#known-issues","title":"Known issues","text":"<ul> <li>S3 sleep too short on ODROID H4 Plus</li> </ul>"},{"location":"variants/hardkernel_odroid_h4/releases/#binaries_1","title":"Binaries","text":"<p>sha256 sha256.sig</p> <p>dev_signed.sha256 dev_signed.sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/hardkernel_odroid_h4/releases/#sbom-software-bill-of-materials_1","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 24.02 revision 93eb5819<ul> <li>License</li> </ul> </li> <li>Dasharo EDKII fork based on edk2-stable202402 revision 7dbfe58b<ul> <li>License</li> </ul> </li> <li>Dasharo iPXE fork based on 2024.05 revision 35d84756<ul> <li>License</li> </ul> </li> <li>vboot based on 3d37d2aafe revision 3d37d2aa<ul> <li>License</li> </ul> </li> <li>Intel Management Engine version v16.50.10.1351<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor version v1.0<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package version IoT ADL-N MR4 (5061_00)<ul> <li>License</li> </ul> </li> <li>Intel microcode version ADL-N N0 0x17 07/12/2023<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/hardkernel_odroid_h4/releases_sbl/","title":"Hardkernel ODROID H4 Dasharo Release Notes","text":"<p>Following Release Notes describe status of open-source firmware development for Hardkernel ODROID H4</p> <p>For details about our release process please read Dasharo Standard Release Process.</p> <p>         Subscribe to Hardkernel ODROID H4 Dasharo Release Newsletter     <p></p>"},{"location":"variants/hardkernel_odroid_h4/releases_sbl/#v090-2025-08-12","title":"v0.9.0 - 2025-08-12","text":""},{"location":"variants/hardkernel_odroid_h4/releases_sbl/#added","title":"Added","text":"<ul> <li>Initial support for the Hardkernel ODROID H4 device, based on Intel Alder   Lake N</li> <li>UEFI compatible interface</li> <li>USB boot support</li> <li>NVMe boot support</li> <li>UEFI Shell</li> <li>Ubuntu LTS booting</li> <li>Serial port console redirection</li> <li>TPM Measured Boot</li> <li>Verified Boot</li> <li>Measured Boot</li> </ul>"},{"location":"variants/hardkernel_odroid_h4/releases_sbl/#known-issues","title":"Known issues","text":"<ul> <li>Universal Payload hangs when SMM and SPI variable support is enabled</li> <li>Dasharo (Slim Bootloader+UEFI) - Can't shutdown via power button in BIOS</li> <li>Dasharo (Slim Bootloader + UEFI) freezes when trying to read flash</li> </ul>"},{"location":"variants/hardkernel_odroid_h4/releases_sbl/#binaries","title":"Binaries","text":"<p>sha256 sha256.sig</p> <p>sha256 sha256.sig</p> <p>This is a Dasharo Pro Package Release. To access the pre-built binaries, you need to subscribe to the Dasharo Pro Package subscriber. You can do this by purchasing a Dasharo Pro Package product from our shop. As a subscriber, you will receive access to all firmware updates for the duration of your subscription via the Dasharo Pro Package newsletter, and gain entry to the Dasharo Premier Support invite-only live chat on the Matrix network, enabling direct engagement with the Dasharo Team and fellow subscribers for personalized, priority assistance.</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/hardkernel_odroid_h4/releases_sbl/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo Slim Bootloader fork based on d888673acdc4cf92bb5ebf4d8e73e66222654596 revision 00796934<ul> <li>License</li> </ul> </li> <li>TianoCore EDKII based on edk2-stable202505 revision 6951dfe7<ul> <li>License</li> </ul> </li> <li>Intel Management Engine version v16.50.10.1351<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor version v1.1<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package version IoT ADL-N IPU25.3 (6114_00)<ul> <li>License</li> </ul> </li> <li>Intel microcode version ADL-N 0x1d 06/12/2024<ul> <li>License</li> </ul> </li> <li>Intel microcode version ADL-S 0x3a 12/12/2024<ul> <li>License</li> </ul> </li> <li>Intel microcode version ADL-P 0x434 22/02/2024<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/hardkernel_odroid_h4/test-matrix/","title":"Test matrix","text":""},{"location":"variants/hardkernel_odroid_h4/test-matrix/#about","title":"About","text":"<p>The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary compatible with Hardkernel devices.</p>"},{"location":"variants/hardkernel_odroid_h4/test-matrix/#module-dasharo-compatibility","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Custom boot order CBO CBO001.002 2. Custom Boot Keys CBK All 3. Custom logo CLG All 4. USB HID and MSC Support USB USB001.0001, USB001.201, USB002.201, USB002.002 5. Custom network boot entries CNB CNB001.201 6. UEFI compatible interface EFI EFI001.201 7. UEFI Shell USH All 8. NVMe support NVM NVM001.001, NVM001.201 9. Network boot PXE All 10. Display ports DSP DSP002.201, DSP003.201 11. Audio subsystem AUD AUD007.201, AUD008.201 12. Sleep mode SUSP SUSP001.201, SUSP002.201, SUSP003.201, SUSP005.201 13. SMBIOS verification DMI All 14. eMMC support MMC All 15. Sign of life SOL All 16. Persistent Boot Splash LCM All 17. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 18. Power state after power fail PSF All 19. Dasharo Tools Suite DTS DTS001.001, DTS002.001, DTS003.001, DTS004.001, DTS005.001, DTS006.001 20. Reset to defaults RTD RTD001.001, RTD002.001, RTD003.001, RTD004.001, RTD006.001 21. Ethernet interface NET All 22. Dasharo Configuration Utility DCU DCU001.201, DCU002.201, DCU003.201 23. ESP scanning ESP All 24. Network Boot Utilities NBT All 25. USB detection UDT All 26. USB booting UBT All 27.   Setup Menu information SET All 28. Ubuntu booting performance test BUB All 29. CPU status CPU CPU001.201, CPU002.201, CPU003.201, CPU004.201 30. Auto boot time-out BMM All"},{"location":"variants/hardkernel_odroid_h4/test-matrix/#module-dasharo-security","title":"Module: Dasharo Security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM TPM001.201,TPM002.001,TPM002.201,TPM003.001,TPM003.201,TPM003.004, 2. Verified Boot Integration VBO All 3. BIOS lock support BLS All 4. Measured boot integration MBO All 5. UEFI Secure Boot integration SBO All 6. UEFI Setup password PSW All 8. USB stack enable/disable USS All 9. Network stack enable/disable NBA All 10. SMM BIOS write protection SMM All 11. TPM2 Commands TPMCMD All"},{"location":"variants/hardkernel_odroid_h4/test-matrix/#module-dasharo-stability","title":"Module: Dasharo Stability","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPD TPD003.001,TPD004.001 2. USB Devices Detection SUD All 3. NVMe detection SNV All"},{"location":"variants/hardkernel_odroid_h4/test-matrix/#module-dasharo-performance","title":"Module: Dasharo Performance","text":"No. Supported test suite Test suite ID Supported test cases 1. Serial Boot Measure CBMEM All 2. CPU CPT CPT001.201,CPT002.201 3. CPU CPF CPF001.201,CPF002.201,CPF004.201 4. Platform stability STB STB001.001,STB001.002,STB002.001 5. Ubuntu booting performance test BUB All"},{"location":"variants/msi_z690/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/msi_z690/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configuration used for validation of the coreboot port on the MSI PRO Z690-A workstation. For additional information, please check the FAQ section.</p>"},{"location":"variants/msi_z690/hardware-matrix/#msi-pro-z690-a-wifi-ddr4-1","title":"MSI PRO Z690-A WiFi DDR4 #1","text":"<ul> <li>Serial Number: 07D2511_LA1E012608</li> <li>Revision: v1.1</li> </ul> Component Description CPU Intel Core i5-12600K 3.7 GHz CPU Cooler Noctua NH-U12S RAM Slot 1: Kingston KF436C17BBK4/32 Slot 2: Kingston KF436C17BBK4/32 Slot 3: Kingston KF436C17BBK4/32 Slot 4: Kingston KF436C17BBK4/32 Flash memory Macronix MX25U25673G SSD Intel 670p 512 GB M26472-201 NVME USB pendrives 1. SanDisk Ultra  Flair USB 3.0 16 GB 2. Kingston DataTraveler 3.1Gen1 16 GB SD cards SanDisk Ultra microSD HC I 16 GB Wireless card Intel Wi-Fi 6 AX210 Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p 3. 1-port USB Type-C Network Local network wired connection Power Supply SeaSonic FOCUS Plus Platinum Power Control Sonoff S20 EU type E Remote Testing Environment RTE v1.1.0 KVM PiKVM based on Raspberry Pi Zero 2w"},{"location":"variants/msi_z690/hardware-matrix/#msi-pro-z690-a-wifi-ddr4-2","title":"MSI PRO Z690-A WiFi DDR4 #2","text":"<ul> <li>Serial Number: 07D2511_LA1E346864</li> <li>Revision: v1.1</li> </ul> Component Description CPU Intel Core i5-12600K 3.7 GHz CPU Cooler Noctua NH-U12S RAM Slot 1: Kingston KF436C17BBK4/32 Slot 2: Kingston KF436C17BBK4/32 Slot 3: Kingston KF436C17BBK4/32 Slot 4: Kingston KF436C17BBK4/32 Flash memory Macronix MX25U25673G SSD Intel 670p 512 GB M26472-201 NVME USB pendrives 1. SanDisk Ultra  Flair USB 3.0 16 GB 2. Kingston DataTraveler 3.1Gen1 16 GB SD cards SanDisk Ultra microSD HC I 16 GB Wireless card Intel Wi-Fi 6 AX210 Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p 3. 1-port USB Type-C Network Local network wired connection Power Supply SeaSonic FOCUS Plus Platinum Power Control Sonoff S20 EU type E Remote Testing Environment RTE v1.1.0"},{"location":"variants/msi_z690/hardware-matrix/#msi-pro-z690-a-ddr5","title":"MSI PRO Z690-A DDR5","text":"<ul> <li>Serial Number: 07D2511_LA1E360456</li> <li>Revision: v2.1</li> </ul> Component Description CPU Intel Core i5-13600K 3.5 GHz CPU Cooler Noctua NH-U12S RAM Slot 1: CRUCIAL CT8G48C40U5 Slot 2: CRUCIAL CT8G48C40U5 Slot 3: CRUCIAL CT8G48C40U5 Slot 4: CRUCIAL CT8G48C40U5 Flash memory Macronix MX25U25635F SSD Intel 670p 512 GB M26472-201 NVME USB pendrives SanDisk Ultra  Flair USB 3.0 16 GB Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p Network Local network wired connection Power Supply SeaSonic Focus PX-750 Power Control Sonoff S20 EU type E Remote Testing Environment RTE v1.1.0 KVM PiKVM based on Raspberry Pi Zero 2w"},{"location":"variants/msi_z690/hardware-matrix/#coreboot-heads","title":"coreboot + Heads","text":"<p>Generally, the same hardware configuration as for the UEFI variant applies.</p> <p>A notable addition is usage of the Nitrokey 3A Mini USB device, which is required for Heads installation and usage.</p>"},{"location":"variants/msi_z690/openness_score/","title":"Dasharo Openness Score","text":"<p>This page contains the Dasharo Openness Score for Dasharo releases compatible with MSI PRO Z690-A boards. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/msi_z690/openness_score/#v115","title":"v1.1.5","text":"<p>Openness Score for msi_ms7d25_v1.1.5_ddr5.rom</p> <p>Open-source code percentage: 38.3% Closed-source code percentage: 61.7%</p> <ul> <li>Image size: 33554432 (0x2000000)</li> <li>Number of regions: 37</li> <li>Number of CBFSes: 4</li> <li>Total open-source code size: 5739911 (0x579587)</li> <li>Total closed-source code size: 9233747 (0x8ce553)</li> <li>Total data size: 949314 (0xe7c42)</li> <li>Total empty size: 17631460 (0x10d08e4)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/msi_z690/openness_score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category SI_ME 0x1000 0x3ff000 closed-source SI_DESC 0x0 0x1000 data SMMSTORE 0x1000000 0x40000 data RECOVERY_MRC_CACHE 0x10a0000 0x20000 data RW_MRC_CACHE 0x10c0000 0x20000 data RW_ELOG 0x10e0000 0x4000 data SHARED_DATA 0x10e4000 0x2000 data VBLOCK_DEV 0x10e6000 0x2000 data RW_VPD 0x10e8000 0x2000 data RW_NVRAM 0x10ea000 0x6000 data CONSOLE 0x10f0000 0x20000 data HSPHY_FW 0x1110000 0x8000 data VBLOCK_A 0x1318000 0x10000 data RW_FWID_A 0x17bff00 0x100 data VBLOCK_B 0x17e0000 0x10000 data RW_FWID_B 0x1bfff00 0x100 data RO_VPD 0x1c00000 0x4000 data FMAP 0x1c04000 0x800 data RO_FRID 0x1c04800 0x100 data RO_FRID_PAD 0x1c04900 0x700 data GBB 0x1c05000 0x3000 data UNUSED 0x400000 0xc00000 empty"},{"location":"variants/msi_z690/openness_score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 2097152</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 2097124 (0x1fffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 2097124 none empty"},{"location":"variants/msi_z690/openness_score/#cbfs-fw_main_a","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 4816640</li> <li>Number of files: 13</li> <li>Open-source files size: 1881901 (0x1cb72d)</li> <li>Closed-source files size: 1506417 (0x16fc71)</li> <li>Data size: 8902 (0x22c6)</li> <li>Empty size: 1419420 (0x15a89c)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1538002 none open-source fallback/romstage stage 106504 none open-source fallback/ramstage stage 157445 LZMA open-source fallback/dsdt.aml raw 11398 none open-source fallback/postcar stage 68552 none open-source cpu_microcode_blob.bin microcode 436224 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 283761 LZ4 closed-source config raw 5818 LZMA data revision raw 850 none data build_info raw 138 none data vbt.bin raw 1257 LZMA data (empty) null 2596 none empty"},{"location":"variants/msi_z690/openness_score/#cbfs-fw_main_b","title":"CBFS FW_MAIN_B","text":"<ul> <li>CBFS size: 4259584</li> <li>Number of files: 13</li> <li>Open-source files size: 1881901 (0x1cb72d)</li> <li>Closed-source files size: 1506417 (0x16fc71)</li> <li>Data size: 8902 (0x22c6)</li> <li>Empty size: 862364 (0xd289c)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1538002 none open-source fallback/romstage stage 106504 none open-source fallback/ramstage stage 157445 LZMA open-source fallback/dsdt.aml raw 11398 none open-source fallback/postcar stage 68552 none open-source cpu_microcode_blob.bin microcode 436224 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 283761 LZ4 closed-source config raw 5818 LZMA data revision raw 850 none data build_info raw 138 none data vbt.bin raw 1257 LZMA data (empty) null 2596 none empty"},{"location":"variants/msi_z690/openness_score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 4161536</li> <li>Number of files: 17</li> <li>Open-source files size: 1976109 (0x1e272d)</li> <li>Closed-source files size: 1506417 (0x16fc71)</li> <li>Data size: 9370 (0x249a)</li> <li>Empty size: 669640 (0xa37c8)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1538002 none open-source fallback/romstage stage 106504 none open-source fallback/ramstage stage 157445 LZMA open-source fallback/dsdt.aml raw 11398 none open-source fallback/postcar stage 68552 none open-source bootblock bootblock 94208 none open-source cpu_microcode_blob.bin microcode 436224 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 283761 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 80 none data config raw 5818 LZMA data revision raw 850 none data build_info raw 138 none data vbt.bin raw 1257 LZMA data (empty) null 2340 none empty (empty) null 667300 none empty"},{"location":"variants/msi_z690/openness_score/#v090-heads","title":"v0.9.0 heads","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for msi_ms7d25_v0.9.0_ddr5_heads.rom</p> <p>Open-source code percentage: 61.3% Closed-source code percentage: 38.7%</p> <ul> <li>Image size: 33554432 (0x2000000)</li> <li>Number of regions: 7</li> <li>Number of CBFSes: 1</li> <li>Total open-source code size: 9101448 (0x8ae088)</li> <li>Total closed-source code size: 5749077 (0x57b955)</li> <li>Total data size: 105639 (0x19ca7)</li> <li>Total empty size: 18598268 (0x11bc97c)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/msi_z690/openness_score/#fmap-regions_1","title":"FMAP regions","text":"FMAP region Offset Size Category RW_MRC_CACHE 0x400000 0x10000 data FMAP 0x418000 0x200 data"},{"location":"variants/msi_z690/openness_score/#ifd-regions","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00001000 0x003d8fff 0x3d8000 closed-source Flash Descriptor 0x00000000 0x00000fff 0x1000 data Device Exp2 0x003d9000 0x003fffff 0x27000 empty"},{"location":"variants/msi_z690/openness_score/#cbfs-coreboot_1","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 29261312</li> <li>Number of files: 25</li> <li>Open-source files size: 9101448 (0x8ae088)</li> <li>Closed-source files size: 1685845 (0x19b955)</li> <li>Data size: 35495 (0x8aa7)</li> <li>Empty size: 18438524 (0x119597c)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 8784701 none open-source fallback/romstage stage 95448 none open-source fallback/ramstage stage 141303 LZMA open-source fallback/dsdt.aml raw 11268 none open-source fallback/postcar stage 31288 none open-source bootblock bootblock 37440 none open-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 283692 LZ4 closed-source cpu_microcode_blob.bin microcode 431104 none closed-source cbfs_master_header cbfs header 28 none data config raw 4515 LZMA data revision raw 867 none data bootsplash.jpg bootsplash 26784 none data vbt.bin raw 1257 LZMA data build_info raw 141 none data intel_fit intel_fit 80 none data (empty) null 868 none empty (empty) null 2314468 none empty (empty) null 523940 none empty (empty) null 7536548 none empty (empty) null 142948 none empty (empty) null 7695268 none empty (empty) null 224484 none empty"},{"location":"variants/msi_z690/openness_score/#v113","title":"v1.1.3","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for msi_ms7d25_v1.1.3_ddr5.rom</p> <p>Open-source code percentage: 44.9% Closed-source code percentage: 55.1%</p> <ul> <li>Image size: 33554432 (0x2000000)</li> <li>Number of regions: 37</li> <li>Number of CBFSes: 4</li> <li>Total open-source code size: 6949213 (0x6a095d)</li> <li>Total closed-source code size: 8534148 (0x823884)</li> <li>Total data size: 1472645 (0x167885)</li> <li>Total empty size: 29181338 (0x1bd459a)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/msi_z690/openness_score/#fmap-regions_2","title":"FMAP regions","text":"FMAP region Offset Size Category SMMSTORE 0x1000000 0x40000 data RESERVED 0x1040000 0x40000 data BPA 0x1080000 0x20000 data RECOVERY_MRC_CACHE 0x10a0000 0x20000 data RW_MRC_CACHE 0x10c0000 0x20000 data RW_ELOG 0x10e0000 0x4000 data SHARED_DATA 0x10e4000 0x2000 data VBLOCK_DEV 0x10e6000 0x2000 data RW_VPD 0x10e8000 0x2000 data RW_NVRAM 0x10ea000 0x6000 data CONSOLE 0x10f0000 0x20000 data HSPHY_FW 0x1110000 0x8000 data VBLOCK_A 0x1318000 0x10000 data RW_FWID_A 0x17bff00 0x100 data ROMHOLE 0x17c0000 0x20000 data VBLOCK_B 0x17e0000 0x10000 data RW_FWID_B 0x1bfff00 0x100 data RO_VPD 0x1c00000 0x4000 data FMAP 0x1c04000 0x800 data RO_FRID 0x1c04800 0x100 data RO_FRID_PAD 0x1c04900 0x700 data GBB 0x1c05000 0x3000 data UNUSED 0x400000 0xc00000 empty"},{"location":"variants/msi_z690/openness_score/#ifd-regions_1","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00001000 0x003d8fff 0x3d8000 closed-source Flash Descriptor 0x00000000 0x00000fff 0x1000 data Device Exp2 0x003d9000 0x00ffffff 0xc27000 empty"},{"location":"variants/msi_z690/openness_score/#cbfs-bootsplash_1","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 2097152</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 2097124 (0x1fffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 2097124 none empty"},{"location":"variants/msi_z690/openness_score/#cbfs-fw_main_a_1","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 4816640</li> <li>Number of files: 13</li> <li>Open-source files size: 2286687 (0x22e45f)</li> <li>Closed-source files size: 1501228 (0x16e82c)</li> <li>Data size: 8606 (0x219e)</li> <li>Empty size: 1020119 (0xf90d7)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/romstage stage 103280 none open-source fallback/ramstage stage 149834 LZMA open-source fallback/dsdt.aml raw 11264 none open-source fallback/postcar stage 34328 none open-source fallback/payload simple elf 1987981 none open-source cpu_microcode_blob.bin microcode 431104 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 283692 LZ4 closed-source config raw 5395 LZMA data revision raw 850 none data build_info raw 138 none data vbt.bin raw 1257 LZMA data (empty) null 612 none empty"},{"location":"variants/msi_z690/openness_score/#cbfs-fw_main_b_1","title":"CBFS FW_MAIN_B","text":"<ul> <li>CBFS size: 4259584</li> <li>Number of files: 13</li> <li>Open-source files size: 2286687 (0x22e45f)</li> <li>Closed-source files size: 1501228 (0x16e82c)</li> <li>Data size: 8606 (0x219e)</li> <li>Empty size: 463063 (0x710d7)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/romstage stage 103280 none open-source fallback/ramstage stage 149834 LZMA open-source fallback/dsdt.aml raw 11264 none open-source fallback/postcar stage 34328 none open-source fallback/payload simple elf 1987981 none open-source cpu_microcode_blob.bin microcode 431104 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 283692 LZ4 closed-source config raw 5395 LZMA data revision raw 850 none data build_info raw 138 none data vbt.bin raw 1257 LZMA data (empty) null 612 none empty"},{"location":"variants/msi_z690/openness_score/#cbfs-coreboot_2","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 4161536</li> <li>Number of files: 17</li> <li>Open-source files size: 2375839 (0x24409f)</li> <li>Closed-source files size: 1501228 (0x16e82c)</li> <li>Data size: 9005 (0x232d)</li> <li>Empty size: 275464 (0x43408)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/romstage stage 103280 none open-source fallback/ramstage stage 149834 LZMA open-source fallback/dsdt.aml raw 11264 none open-source fallback/postcar stage 34328 none open-source fallback/payload simple elf 1987981 none open-source bootblock bootblock 89152 none open-source cpu_microcode_blob.bin microcode 431104 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 283692 LZ4 closed-source cbfs_master_header cbfs header 28 none data intel_fit intel_fit 80 none data config raw 5395 LZMA data revision raw 850 none data build_info raw 138 none data vbt.bin raw 1257 LZMA data (empty) null 356 none empty (empty) null 275108 none empty"},{"location":"variants/msi_z690/openness_score/#v114","title":"v1.1.4","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for msi_ms7d25_v1.1.4_ddr5.rom</p> <p>Open-source code percentage: 42.7% Closed-source code percentage: 57.3%</p> <ul> <li>Image size: 33554432 (0x2000000)</li> <li>Number of regions: 37</li> <li>Number of CBFSes: 4</li> <li>Total open-source code size: 6370750 (0x6135be)</li> <li>Total closed-source code size: 8549715 (0x827553)</li> <li>Total data size: 1473083 (0x167a3b)</li> <li>Total empty size: 17160884 (0x105dab4)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/msi_z690/openness_score/#fmap-regions_3","title":"FMAP regions","text":"FMAP region Offset Size Category SMMSTORE 0x1000000 0x40000 data RESERVED 0x1040000 0x40000 data BPA 0x1080000 0x20000 data RECOVERY_MRC_CACHE 0x10a0000 0x20000 data RW_MRC_CACHE 0x10c0000 0x20000 data RW_ELOG 0x10e0000 0x4000 data SHARED_DATA 0x10e4000 0x2000 data VBLOCK_DEV 0x10e6000 0x2000 data RW_VPD 0x10e8000 0x2000 data RW_NVRAM 0x10ea000 0x6000 data CONSOLE 0x10f0000 0x20000 data HSPHY_FW 0x1110000 0x8000 data VBLOCK_A 0x1318000 0x10000 data RW_FWID_A 0x17bff00 0x100 data ROMHOLE 0x17c0000 0x20000 data VBLOCK_B 0x17e0000 0x10000 data RW_FWID_B 0x1bfff00 0x100 data RO_VPD 0x1c00000 0x4000 data FMAP 0x1c04000 0x800 data RO_FRID 0x1c04800 0x100 data RO_FRID_PAD 0x1c04900 0x700 data GBB 0x1c05000 0x3000 data UNUSED 0x400000 0xc00000 empty"},{"location":"variants/msi_z690/openness_score/#ifd-regions_2","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00001000 0x003d8fff 0x3d8000 closed-source Flash Descriptor 0x00000000 0x00000fff 0x1000 data Device Exp2 0x003d9000 0x003fffff 0x27000 empty"},{"location":"variants/msi_z690/openness_score/#cbfs-bootsplash_2","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 2097152</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 2097124 (0x1fffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 2097124 none empty"},{"location":"variants/msi_z690/openness_score/#cbfs-fw_main_a_2","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 4816640</li> <li>Number of files: 13</li> <li>Open-source files size: 2091754 (0x1feaea)</li> <li>Closed-source files size: 1506417 (0x16fc71)</li> <li>Data size: 8737 (0x2221)</li> <li>Empty size: 1209732 (0x127584)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1773739 none open-source fallback/romstage stage 110688 none open-source fallback/ramstage stage 154988 LZMA open-source fallback/dsdt.aml raw 11347 none open-source fallback/postcar stage 40992 none open-source cpu_microcode_blob.bin microcode 436224 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 283761 LZ4 closed-source config raw 5624 LZMA data revision raw 850 none data build_info raw 138 none data vbt.bin raw 1257 LZMA data (empty) null 164 none empty"},{"location":"variants/msi_z690/openness_score/#cbfs-fw_main_b_2","title":"CBFS FW_MAIN_B","text":"<ul> <li>CBFS size: 4259584</li> <li>Number of files: 13</li> <li>Open-source files size: 2091754 (0x1feaea)</li> <li>Closed-source files size: 1506417 (0x16fc71)</li> <li>Data size: 8737 (0x2221)</li> <li>Empty size: 652676 (0x9f584)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1773739 none open-source fallback/romstage stage 110688 none open-source fallback/ramstage stage 154988 LZMA open-source fallback/dsdt.aml raw 11347 none open-source fallback/postcar stage 40992 none open-source cpu_microcode_blob.bin microcode 436224 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 283761 LZ4 closed-source config raw 5624 LZMA data revision raw 850 none data build_info raw 138 none data vbt.bin raw 1257 LZMA data (empty) null 164 none empty"},{"location":"variants/msi_z690/openness_score/#cbfs-coreboot_3","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 4161536</li> <li>Number of files: 17</li> <li>Open-source files size: 2187242 (0x215fea)</li> <li>Closed-source files size: 1506417 (0x16fc71)</li> <li>Data size: 9181 (0x23dd)</li> <li>Empty size: 458696 (0x6ffc8)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1773739 none open-source fallback/romstage stage 110688 none open-source fallback/ramstage stage 154988 LZMA open-source fallback/dsdt.aml raw 11347 none open-source fallback/postcar stage 40992 none open-source bootblock bootblock 95488 none open-source cpu_microcode_blob.bin microcode 436224 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 283761 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 80 none data config raw 5624 LZMA data revision raw 850 none data build_info raw 138 none data vbt.bin raw 1257 LZMA data (empty) null 2660 none empty (empty) null 456036 none empty"},{"location":"variants/msi_z690/releases/","title":"MSI PRO Z690-A (WIFI) (DDR4) Dasharo Release Notes","text":"<p>This is a Dasharo Pro Package Release. o obtain access to the pre-built binaries, you need to subscribe to the Dasharo Pro Package subscriber. You can do this by purchasing a Dasharo Pro Package product from our shop. As a subscriber, you will receive access to all firmware updates for the duration of your subscription via the Dasharo Pro Package newsletter, and gain entry to the Dasharo Premier Support invite-only live chat on the Matrix network, enabling direct engagement with the Dasharo Team and fellow subscribers for personalized, priority assistance.</p> <p>Following Release Notes describe status of Open Source Firmware development for MSI PRO Z690-A (WIFI) DDR4 and MSI PRO Z690-A (WIFI).</p> <p>For detailed information on our validation setup, please refer to the Hardware Configuration Matrix. To gain a deeper understanding of the nomenclature reasons behind the Z690/Z790 boards, we recommend seeing our FAQ.</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to Dasharo compatible with MSI PRO Z690-A Newsletter"},{"location":"variants/msi_z690/releases/#v115-2025-09-18","title":"v1.1.5 - 2025-09-18","text":"<p>This is a non-LTS release and has a reduced scope of tests.</p> <p>Test results for this release can be found here.</p>"},{"location":"variants/msi_z690/releases/#added","title":"Added","text":"<ul> <li>Improved measured boot support</li> <li>Microsoft Option ROM UEFI CA to Secure Boot DB</li> <li>Check for flash descriptor writability when exposing HAP disable option</li> </ul>"},{"location":"variants/msi_z690/releases/#changed","title":"Changed","text":"<ul> <li>Rebased coreboot repository to 24.12 (see SBOM)</li> <li>Rebased edk2 repository to edk2-stable202502 (see SBOM)</li> <li>Owner GUID of Secure Boot DB and KEK to Microsoft recommended values</li> <li>Updated DBX to 2025-06-13</li> </ul>"},{"location":"variants/msi_z690/releases/#known-issues","title":"Known issues","text":"<ul> <li>XMP1 profile does not boot in combination with some DDR5 configurations</li> <li>Windows 11 installer unable to detect i225 Ethernet NIC</li> <li>Cannot wake from suspend via RTC on QubesOS</li> <li>Windows 11 VBS (Virtualization-based Security) appears Not enabled on System Information</li> <li>Capsule update signing is not enforced</li> </ul>"},{"location":"variants/msi_z690/releases/#binaries","title":"Binaries","text":"<p>sha256 sha256.sig (msi_ms7d25_v1.1.5_ddr4.cap)</p> <p>sha256 sha256.sig (msi_ms7d25_v1.1.5_ddr4.rom)</p> <p>sha256 sha256.sig (msi_ms7d25_v1.1.5_ddr4_dev_signed.cap)</p> <p>sha256 sha256.sig (msi_ms7d25_v1.1.5_ddr4_dev_signed.rom)</p> <p>sha256 sha256.sig (msi_ms7d25_v1.1.5_ddr5.cap)</p> <p>sha256 sha256.sig (msi_ms7d25_v1.1.5_ddr5.rom)</p> <p>sha256 sha256.sig (msi_ms7d25_v1.1.5_ddr5_dev_signed.cap)</p> <p>sha256 sha256.sig (msi_ms7d25_v1.1.5_ddr5_dev_signed.rom)</p> <p>This is a Dasharo Pro Package Release. To access the pre-built binaries, you need to subscribe to the Dasharo Pro Package subscriber. You can do this by purchasing a Dasharo Pro Package product from our shop. As a subscriber, you will receive access to all firmware updates for the duration of your subscription via the Dasharo Pro Package newsletter, and gain entry to the Dasharo Premier Support invite-only live chat on the Matrix network, enabling direct engagement with the Dasharo Team and fellow subscribers for personalized, priority assistance.</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/msi_z690/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 24.12 revision 635c4732<ul> <li>License</li> </ul> </li> <li>Dasharo EDKII fork based on edk2-stable202502 revision 1c50dad8<ul> <li>License</li> </ul> </li> <li>Dasharo EDK2-platforms fork based on v0.9.0 revision 1002a596<ul> <li>License</li> </ul> </li> <li>iPXE based on 2025.03 revision 6c7068fc<ul> <li>License</li> </ul> </li> <li>vboot based on f1f70f46dc revision f1f70f46<ul> <li>License</li> </ul> </li> <li>Intel Management Engine version v16.1.30.2307<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor version v1.1<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package version RPL-S C.0.C8.50<ul> <li>License</li> </ul> </li> <li>Intel microcode version ADL/RPL C0/H0 0x3a 12/12/2024<ul> <li>License</li> </ul> </li> <li>Intel microcode version RPL B0 0x12f 17/03/2025<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/msi_z690/releases/#v114-2024-12-10","title":"v1.1.4 - 2024-12-10","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/msi_z690/releases/#added_1","title":"Added","text":"<ul> <li>Introduce updates via UEFI capsules (from this firmware onward)</li> <li>Preserve user data during a capsule update</li> <li>CPU configuration menu</li> <li>Update to a much newer EDKII revision</li> <li>Dual TPM feature in coreboot. When ME is disabled, fTPM becomes inactive as well and chipset will route the TPM traffic to SPI bus. coreboot will now probe for all possible TPMs and initialize the one that is currently active.</li> <li>Expose ESRT entry for firmware updates</li> </ul>"},{"location":"variants/msi_z690/releases/#changed_1","title":"Changed","text":"<ul> <li>Use a constant value for major BIOS version number in ROMHOLES (used by FlashBIOS)</li> <li>Updated Intel CPU microcode to 0x12B version</li> <li>Raptor Lake FSP is used instead of deprecated Alder Lake FSP</li> <li>Updated Flash Descriptor to enlarge BIOS region; refer to SBOM section below</li> </ul>"},{"location":"variants/msi_z690/releases/#fixed","title":"Fixed","text":"<ul> <li>No ability to change active PCR banks with TPM PPI in FW</li> <li>Fix the problem where a disk with a meaningful name would appear as Non-Block Boot Device in the created OS boot options from ESP</li> <li>Improve resource detection above 4 GiB</li> </ul>"},{"location":"variants/msi_z690/releases/#known-issues_1","title":"Known issues","text":"<ul> <li>XMP1 profile does not boot in combination with some DDR5 configurations</li> <li>Windows 11 installer unable to detect i225 Ethernet NIC</li> <li>Cannot wake from suspend via RTC on QubesOS</li> <li>Windows 11 VBS (Virtualization-based Security) appears Not enabled on System Information</li> <li>Capsule update signing is not enforced</li> </ul>"},{"location":"variants/msi_z690/releases/#binaries_1","title":"Binaries","text":"<p>sha256 sha256.sig (msi_ms7d25_v1.1.4_ddr4.cap)</p> <p>sha256 sha256.sig (msi_ms7d25_v1.1.4_ddr4_dev_signed.cap)</p> <p>sha256 sha256.sig (msi_ms7d25_v1.1.4_ddr4.rom)</p> <p>sha256 sha256.sig (msi_ms7d25_v1.1.4_ddr4_dev_signed.rom)</p> <p>sha256 sha256.sig (msi_ms7d25_v1.1.4_ddr5.cap)</p> <p>sha256 sha256.sig (msi_ms7d25_v1.1.4_ddr5_dev_signed.cap)</p> <p>sha256 sha256.sig (msi_ms7d25_v1.1.4_ddr5.rom)</p> <p>sha256 sha256.sig (msi_ms7d25_v1.1.4_ddr5_dev_signed.rom)</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/msi_z690/releases/#sbom-software-bill-of-materials_1","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 24.02.01 revision b9d6d8c7<ul> <li>License</li> </ul> </li> <li>Dasharo EDKII fork based on edk2-stable202402 revision 5b3658c0<ul> <li>License</li> </ul> </li> <li>Dasharo EDK2-platforms fork based on v0.9.0 revision 3323ed48<ul> <li>License</li> </ul> </li> <li>iPXE based on 2023.12 revision 35d84756<ul> <li>License</li> </ul> </li> <li>vboot based on 3d37d2aafe revision 3d37d2aa<ul> <li>License</li> </ul> </li> <li>Intel Management Engine based on v16.1.30.2307 revision 4f6e917d<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor based on v1.1 revision 4f6e917d<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package based on RPL-S C.0.C8.50 revision 3819544e<ul> <li>License</li> </ul> </li> <li>Intel microcode based on 0x36 (for CPUIDs 00090672, 00090675, 000b06f2, 000b06f5), 0x12B (for CPUID 000b0671) revision 4f6e917d<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/msi_z690/releases/#v113-2024-01-22","title":"v1.1.3 - 2024-01-22","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/msi_z690/releases/#added_2","title":"Added","text":"<ul> <li>Automatic fan control</li> <li>RAM Disk support (EXPERIMENTAL)</li> <li>Memory overclocking support with XMP profiles</li> <li>Compatibility with Raptor Lake Refresh CPUs</li> <li>Selective Option ROM loading</li> <li>Serial Console Redirection option</li> <li>Power state after power fail option</li> <li>Option for Resizable BARs enabling</li> <li>ESP partition scanning in look for grubx64.efi or shimx64.efi or Windows bootmgr</li> <li>Memory speed is displayed in the firmware setup main page</li> <li>Support for taking screenshots in the firmware</li> <li>Microsoft and Windows 2023 UEFI Secure Boot certificates</li> <li>Disabling ME and unlocking descriptor with HMRFPO command on FUM flow</li> </ul>"},{"location":"variants/msi_z690/releases/#changed_2","title":"Changed","text":"<ul> <li>This is a Dasharo Pro Package release</li> <li>Updated microcode to the newer version; refer to SBOM section below</li> <li>Updated ME to the newer version; refer to SBOM section below</li> <li>Switched to the Raptor Lake-S Client FSP; refer to SBOM section below</li> <li>Get SMBIOS serial number and UUID from ROMHOLE region instead of CBFS   (ROMHOLE is preserved during FlashBIOS and updates via DTS)</li> <li>Rebased coreboot on 4.21 tag</li> <li>Reduced the amount of microcode blobs included in the build, due to   redundancy (some blobs had the same shasum and supported the same CPUIDs)</li> <li>Enroll default UEFI Secure Boot keys on the first boot</li> <li>Improved UEFI Secure Boot menu user experience</li> <li>Scope of reset to default hotkey to global in firmware setup</li> <li>Booting DTS over iPXE via HTTPS</li> <li>Removed the i225/i226 EFI driver from the builds in favor of native iPXE   driver</li> <li>Switched iPXE repository to Dasharo fork for the native iPXE driver for   i225/i226</li> </ul>"},{"location":"variants/msi_z690/releases/#fixed_1","title":"Fixed","text":"<ul> <li>No audio playback via headset</li> <li>Auto Boot Time-out is reset to 0 when F9 is pressed</li> <li>Some RPL-S CPUs ( 0xB06F2 (RPL-S C0) or 0xB06F5 (RPL-S H0)) have a problem with booting on v1.1.2</li> <li>Change boot order menu is confusing</li> <li>The setup menu does not issue a reset, resulting in saved but unapplied settings</li> <li>PCI Express Resizable BAR programming</li> <li>PCI Express resource allocation for Intel ARC A750</li> <li>CPU frequency not displayed on setup front page</li> <li>P2SB BAR not properly reserved in ACPI</li> <li>Power LED not blinking during S3 sleep</li> <li>PS/2 controller not enabled at first boot after flashing</li> <li>Incorrect C-states reported in ACPI unsupported by HW</li> <li>Incorrect first timestamp format in ACPI FPDT</li> </ul>"},{"location":"variants/msi_z690/releases/#known-issues_2","title":"Known issues","text":"<ul> <li>XMP1 profile does not boot in combination with some DDR5 configurations</li> <li>Windows 11 installer unable to detect i225 Ethernet NIC</li> <li>Cannot wake from suspend via RTC on QubesOS</li> <li>Windows 11 VBS (Virtualization-based Security) appears Not enabled on System Information</li> <li>No ability to change active PCR banks with TPM PPI in FW</li> </ul>"},{"location":"variants/msi_z690/releases/#binaries_2","title":"Binaries","text":"<p>sha256 sha256.sig (msi_ms7d25_v1.1.3_ddr4)</p> <p>sha256 sha256.sig (msi_ms7d25_v1.1.3_ddr4_dev_signed)</p> <p>sha256 sha256.sig (msi_ms7d25_v1.1.3_ddr5)</p> <p>sha256 sha256.sig (msi_ms7d25_v1.1.3_ddr5_dev_signed)</p> <p>This is a Dasharo Pro Package Release. To obtain access to the pre-built binaries you will have to become the Dasharo Pro Package subscriber. You will get the access to all of the firmware updates for the duration of the subscription via Dasharo Pro Package newsletter.</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/msi_z690/releases/#sbom-software-bill-of-materials_2","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 4.21 revision 2c5426c3</li> <li>Dasharo EDKII fork based on edk2-stable202002 revision 11746340</li> <li>iPXE based on 2023.12 revision 838611b3</li> <li>vboot based on 0c11187c75 revision 0c11187c</li> <li>Intel Management Engine based on v16.1.30.2307 revision 18aab76c</li> <li>Intel Flash Descriptor based on v1.0 revision 18aab76c</li> <li>Intel Firmware Support Package based on RPL-S C.0.BD.40 revision 481ea7cf</li> <li>Intel microcode based on ADL/RPL C0/H0 0x0000002e revision microcode-20230808</li> <li>Intel microcode based on RPL B0 0x00000119 revision microcode-20230808</li> </ul>"},{"location":"variants/msi_z690/releases/#v112-2023-09-06","title":"v1.1.2 - 2023-09-06","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/msi_z690/releases/#added_3","title":"Added","text":"<ul> <li>MSI FLASHBIOS recovery support</li> <li>Raptor Lake-S CPU support</li> <li>MSI ACPI device that triggers automatic driver and utility installation manager</li> <li>Support for logo customization</li> <li>UEFI 2.8 errata C compliance in EDKII fork</li> <li>Firmware Update Mode feature</li> </ul>"},{"location":"variants/msi_z690/releases/#changed_3","title":"Changed","text":"<ul> <li>This is a Dasharo Pro Package release</li> <li>Updated microcode to newer version, refer to SBOM</li> <li>Updated ME to newer version, refer to SBOM</li> </ul>"},{"location":"variants/msi_z690/releases/#fixed_2","title":"Fixed","text":"<ul> <li>NVIDIA RTX 3060 does not spawn HD Audio device in Device Manager</li> <li>MSI FLASHBIOS feature is not working</li> <li>Reset to defaults with F9 causes the wrong settings to be restored</li> <li>Popup with information about recovery mode is displayed after flashing with a valid binary</li> <li>Too low watchdog timeout value causing reset loops on DDR5 boards with   bigger amount of RAM</li> <li>Chipset Watchdog timeout value does not change actual watchdog trigger time</li> <li>Missing ACPI objects errors in Linux dmesg</li> <li>Missing Setup Password option</li> </ul>"},{"location":"variants/msi_z690/releases/#known-issues_3","title":"Known issues","text":"<ul> <li>Windows 11 installer unable to detect i225 Ethernet NIC</li> <li>No audio playback via headset</li> <li>Cannot wake from suspend via RTC on QubesOS</li> </ul>"},{"location":"variants/msi_z690/releases/#binaries_3","title":"Binaries","text":"<p>This is a Dasharo Pro Package Release. To obtain access to the pre-built binaries you will have to become the Dasharo Pro Package subscriber. You will get the access to all of the firmware updates for the duration of the subscription via Dasharo Pro Package newsletter.</p>"},{"location":"variants/msi_z690/releases/#sbom-software-bill-of-materials_3","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 4.18 revision 197229de</li> <li>Dasharo EDKII fork based on edk2-stable202002 revision 94f562a7</li> <li>iPXE based on 6ba671acd9 revision 6ba671ac</li> <li>vboot based on b76cd8c806 revision b76cd8c8</li> <li>Intel Management Engine based on v16.1.30.2255 revision 2a8875ec</li> <li>Intel Flash Descriptor based on v1.0 revision 2a8875ec</li> <li>Intel Firmware Support Package based on ADL-S C.0.75.10 revision 2fea9a2f</li> <li>Intel microcode based on ADL C0 0x0000002c revision microcode-20230613</li> <li>Intel microcode based on ADL H0 0x0000002c revision microcode-20230613</li> <li>Intel microcode based on RPL B0 0x00000113 revision microcode-20230613</li> </ul>"},{"location":"variants/msi_z690/releases/#v111-2023-02-23","title":"v1.1.1 - 2023-02-23","text":"<p>Test results for this release can be found here.</p> <p>To get more details about the changes one may read the Dasharo v1.1.1 release blog post</p>"},{"location":"variants/msi_z690/releases/#added_4","title":"Added","text":"<ul> <li>Early boot DMA protection menu option</li> <li>ACPI PCI interrupt routing for CPU PCIe Root Ports</li> <li>OC Watchdog ACPI device as in MSI firmware</li> </ul>"},{"location":"variants/msi_z690/releases/#changed_4","title":"Changed","text":"<ul> <li>Updated SMMSTORE driver to upstream version in UEFI Payload</li> <li>Improved visual comfort in the boot manager</li> </ul>"},{"location":"variants/msi_z690/releases/#fixed_3","title":"Fixed","text":"<ul> <li>MSI PRO Z690-A WIFI DDR4 doesn't initialize IGP on certain Processors models</li> <li>MSI PRO Z690-A WIFI DDR4 with two Video Cards (2x Radeon 5600XT) has issues related to MMIO resource allocation</li> <li>Suspend doesn't work in Qubes OS with v1.1.0</li> <li>Intel XTU on Windows reports \"The platform does not support overclocking\" on the MSI PRO Z690-A WIFI DDR4 with a K-series Processor</li> <li>SATA ports malfunction or Hot-Plug function disabled</li> <li>Platform sometimes automatically powers on after power off</li> <li>GPIO controller ACPI device yellow bang in Windows device manager</li> <li>Resource conflicts with chipset internal P2SB PCI device being incorrectly   defined and initialized in coreboot</li> <li>Reset button hanging the platform for up to 2 minutes due to watchdog bug</li> </ul>"},{"location":"variants/msi_z690/releases/#known-issues_4","title":"Known issues","text":"<ul> <li>MSI FLASHBIOS feature is not working</li> <li>Reset to defaults with F9 causes the wrong settings to be restored</li> </ul>"},{"location":"variants/msi_z690/releases/#binaries_4","title":"Binaries","text":"<p>msi_ms7d25_v1.1.1_ddr4.rom sha256 sha256.sig</p> <p>msi_ms7d25_v1.1.1_ddr5.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/msi_z690/releases/#sbom-software-bill-of-materials_4","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 912a262b7bf revision aa4701cd</li> <li>Dasharo EDKII fork based on dd7523b5b1 revision a913e338</li> </ul>"},{"location":"variants/msi_z690/releases/#v110-2022-11-22","title":"v1.1.0 - 2022-11-22","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/msi_z690/releases/#added_5","title":"Added","text":"<ul> <li>Vboot recovery popup informing that platform has booted in recovery mode</li> <li>TCG2 TPM Physical Presence Interface support</li> <li>Support for DDR5 board variant</li> <li>PS/2 Controller enable/disable option</li> <li>Chipset watchdog support during boot and watchdog configuration menu</li> <li>Early boot DMA protection</li> <li>Option to reset Secure Boot keys to defaults</li> <li>Intel ME disable support and menu options</li> <li>Dasharo setup password</li> <li>SED/OPAL disk password support</li> <li>SATA disk password</li> <li>Firmware performance reporting</li> <li>USB stack and mass storage enable/disable option</li> <li>Network Boot enable/disable option</li> <li>SMM BIOS Write Protection support and enable/disable option</li> <li>AcpiView command to UEFI Shell</li> <li>Platform will beep 12 times and blink HDD led on critical firmware errors,   e.g. if memory training failed</li> <li>PCIe 5.0 firmware caching in flash which allows to disable ME without losing   PCIe 5.0 port functionality</li> <li>cbmem logging from UEFI Payload is now supported and one can check complete   firmware logs from OS using coreboot's cbmem utility</li> <li>Added Intel default settings for missing Alder Lake S CPUs</li> </ul>"},{"location":"variants/msi_z690/releases/#changed_5","title":"Changed","text":"<ul> <li>Added new ACPI Platform driver that installs coreboot exposed ACPI tables and   all allows native EDK2 ACPI table protocol to install new tables, e.g.   Firmware Performance Data Table, BGRT (Boot Logo) of VFCT (AMD GPU ACPI   table)</li> <li>Secure Boot is now disabled by default with all keys erased</li> <li>iPXE is now built from source using coreboot-sdk and   included externally into UEFI Payload</li> <li>Dasharo setup menu full screen mode support</li> <li>Disabled PCIe ASPM and Clock PM for better PCIe device compatibility</li> <li>Disabled GPIO programming by FSP, coreboot handles the GPIO completely. This   additionally fixes a bug in FSP which did not enable SATA DEVSLP properly.</li> <li>Changed Super I/O pin for PECI mode to reflect vendor firmware setting</li> <li>Switched from IOT FSP to public ADL Client FSP</li> <li>Switched to include microcode from public Intel microcode repository</li> <li>Disabled PCIe hotplug</li> <li>Network boot disabled by default, now configurable via menu option</li> </ul>"},{"location":"variants/msi_z690/releases/#fixed_4","title":"Fixed","text":"<ul> <li>Vboot recovery popup is displayed before logo, so that logo do not disappear   after popup is displayed</li> <li>Wrong Tau values from Turbo Boost</li> <li>PCI Express OptionROM loading causing certain dGPU cards to not work during   POST</li> <li>PS/2 keyboard detection and inclusion to platform Console Input   causing long delays in Ventoy or lockups in USB enumeration</li> <li>Incorrect USB2 PHY tuning values for USB-C ports causing hard USB controller   lockups during USB enumeration and resulting in firmware hangs as long as USB   Type-C devices were plugged or devices being unable to detect and enumerate   in OS</li> <li>Broken PCI resource parsing above 4G</li> <li>Incorrect SMBIOS product name for non-WiFi variants</li> <li>USB storage devices disappear after reboot/power failure</li> </ul>"},{"location":"variants/msi_z690/releases/#known-issues_5","title":"Known issues","text":"<ul> <li>MSI FLASHBIOS feature is not working</li> <li>MMIO resource allocation issues with two Video Cards</li> <li>Slow video performance with Radeon 5600XT</li> <li>Reset to defaults with F9 causes the wrong settings to be restored</li> </ul>"},{"location":"variants/msi_z690/releases/#binaries_5","title":"Binaries","text":"<p>msi_ms7d25_v1.1.0_ddr4.rom sha256 sha256.sig</p> <p>msi_ms7d25_v1.1.0_ddr5.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p> <p>Commands snippet:</p> <pre><code>gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/keys/master-key/3mdeb-master-key.asc\ngpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/3mdeb-dasharo-master-key.asc\ngpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/msi_ms7d25/dasharo-release-1.x-compatible-with-msi-ms-7d25-signing-key.asc\ngpg --list-sigs \"3mdeb Master Key\" \"3mdeb Dasharo Master Key\" \"Dasharo release 1.x compatible with MSI MS-7D25 signing key\"\n# DDR4\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.0/msi_ms7d25_v1.1.0_ddr4.rom\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.0/msi_ms7d25_v1.1.0_ddr4.rom.sha256\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.0/msi_ms7d25_v1.1.0_ddr4.rom.sha256.sig\nsha256sum -c msi_ms7d25_v1.1.0_ddr4.rom.sha256\ngpg --verify msi_ms7d25_v1.1.0_ddr4.rom.sha256.sig msi_ms7d25_v1.1.0_ddr4.rom.sha256\n# DDR5\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.0/msi_ms7d25_v1.1.0_ddr5.rom\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.0/msi_ms7d25_v1.1.0_ddr5.rom.sha256\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.0/msi_ms7d25_v1.1.0_ddr5.rom.sha256.sig\nsha256sum -c msi_ms7d25_v1.1.0_ddr5.rom.sha256\ngpg --verify msi_ms7d25_v1.1.0_ddr5.rom.sha256.sig msi_ms7d25_v1.1.0_ddr5.rom.sha256\n</code></pre>"},{"location":"variants/msi_z690/releases/#sbom-software-bill-of-materials_5","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 912a262b7bf revision b76a1467</li> <li>Dasharo EDKII fork based on dd7523b5b1 revision 5738f9e8</li> </ul>"},{"location":"variants/msi_z690/releases/#v100-2022-05-27","title":"v1.0.0 - 2022-05-27","text":""},{"location":"variants/msi_z690/releases/#added_6","title":"Added","text":"<ul> <li>Serial number and UUID in CBFS support</li> <li>TPM Physical Presence Interface support</li> </ul>"},{"location":"variants/msi_z690/releases/#changed_6","title":"Changed","text":"<ul> <li>Updated i225 EFI driver to version 0.10.04 to reduce the POST time</li> <li>Vboot submodule revision to fix recovery mode loop</li> </ul>"},{"location":"variants/msi_z690/releases/#fixed_5","title":"Fixed","text":"<ul> <li>fTPM is not working</li> </ul>"},{"location":"variants/msi_z690/releases/#known-issues_6","title":"Known issues","text":"<ul> <li>USB storage devices disappear after reboot/power failure</li> </ul>"},{"location":"variants/msi_z690/releases/#binaries_6","title":"Binaries","text":"<p>MSI PRO Z690-A WIFI DDR4 v1.0.0 sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p> <p>Commands snippet:</p> <pre><code>gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/keys/master-key/3mdeb-master-key.asc\ngpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/3mdeb-dasharo-master-key.asc\ngpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/msi_ms7d25/dasharo-release-1.x-compatible-with-msi-ms-7d25-signing-key.asc\ngpg --list-sigs \"3mdeb Master Key\" \"3mdeb Dasharo Master Key\" \"Dasharo release 1.x compatible with MSI MS-7D25 signing key\"\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.0.0/msi_ms7d25_v1.0.0.rom\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.0.0/msi_ms7d25_v1.0.0.rom.sha256\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.0.0/msi_ms7d25_v1.0.0.rom.sha256.sig\nsha256sum -c msi_ms7d25_v1.0.0.rom.sha256\ngpg --verify msi_ms7d25_v1.0.0.rom.sha256.sig msi_ms7d25_v1.0.0.rom.sha256\n</code></pre>"},{"location":"variants/msi_z690/releases/#sbom-software-bill-of-materials_6","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on a552cfc9 revision d22caaa0a</li> <li>edk2 based on 4d2846ba revision 0c94299b</li> </ul>"},{"location":"variants/msi_z690/releases/#v040-2022-05-13","title":"v0.4.0 - 2022-05-13","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/msi_z690/releases/#added_7","title":"Added","text":"<ul> <li>Verified boot support</li> </ul>"},{"location":"variants/msi_z690/releases/#fixed_6","title":"Fixed","text":"<ul> <li>Some PCIe ports are not working</li> </ul>"},{"location":"variants/msi_z690/releases/#known-issues_7","title":"Known issues","text":"<ul> <li>USB storage devices disappear after reboot/power failure</li> <li>fTPM is not working</li> </ul>"},{"location":"variants/msi_z690/releases/#binaries_7","title":"Binaries","text":"<p>MSI PRO Z690-A WIFI DDR4 v0.4.0 sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p> <p>Commands snippet:</p> <pre><code>gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/keys/master-key/3mdeb-master-key.asc\ngpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/3mdeb-dasharo-master-key.asc\ngpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/msi_ms7d25/dasharo-release-0.x-compatible-with-msi-ms-7d25-signing-key.asc\ngpg --list-sigs \"3mdeb Master Key\" \"3mdeb Dasharo Master Key\" \"Dasharo release 0.x compatible with MSI MS-7D25 signing key\"\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v0.4.0/msi_ms7d25_v0.4.0.rom\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v0.4.0/msi_ms7d25_v0.4.0.rom.sha256\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v0.4.0/msi_ms7d25_v0.4.0.rom.sha256.sig\nsha256sum -c msi_ms7d25_v0.4.0.rom.sha256\ngpg --verify msi_ms7d25_v0.4.0.rom.sha256.sig msi_ms7d25_v0.4.0.rom.sha256\n</code></pre>"},{"location":"variants/msi_z690/releases/#sbom-software-bill-of-materials_7","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on a552cfc9 revision 31c1da6b</li> <li>edk2 based on 4d2846ba revision 5494c8e2</li> </ul>"},{"location":"variants/msi_z690/releases/#v030-2022-05-05","title":"v0.3.0 - 2022-05-05","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/msi_z690/releases/#added_8","title":"Added","text":"<ul> <li>Mainboard-specific SMBIOS data for slots and ports</li> <li>PCI Subsystem ID configuration</li> <li>CPU VR and PCH FIVR configuration</li> <li>Memory HCL</li> <li>UEFI Secure Boot</li> <li>TPM Support</li> <li>Measured Boot</li> <li>Custom boot menu keys</li> </ul>"},{"location":"variants/msi_z690/releases/#known-issues_8","title":"Known issues","text":"<ul> <li>USB storage devices disappear after reboot/power failure</li> <li>Some PCIe ports are not working</li> <li>fTPM is not working</li> </ul>"},{"location":"variants/msi_z690/releases/#binaries_8","title":"Binaries","text":"<p>MSI PRO Z690-A WIFI DDR4 v0.3.0 sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p> <p>Commands snippet:</p> <pre><code>gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/keys/master-key/3mdeb-master-key.asc\ngpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/3mdeb-dasharo-master-key.asc\ngpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/msi_ms7d25/dasharo-release-0.x-compatible-with-msi-ms-7d25-signing-key.asc\ngpg --list-sigs \"3mdeb Master Key\" \"3mdeb Dasharo Master Key\" \"Dasharo release 0.x compatible with MSI MS-7D25 signing key\"\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v0.3.0/msi_ms7d25_v0.3.0.rom\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v0.3.0/msi_ms7d25_v0.3.0.rom.sha256\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v0.3.0/msi_ms7d25_v0.3.0.rom.sha256.sig\nsha256sum -c msi_ms7d25_v0.3.0.rom.sha256\ngpg --verify msi_ms7d25_v0.3.0.rom.sha256.sig msi_ms7d25_v0.3.0.rom.sha256\n</code></pre>"},{"location":"variants/msi_z690/releases/#sbom-software-bill-of-materials_8","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on a552cfc9 revision b45173e9</li> <li>edk2 based on 4d2846ba revision 5494c8e2</li> </ul>"},{"location":"variants/msi_z690/releases/#v020-2022-04-22","title":"v0.2.0 - 2022-04-22","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/msi_z690/releases/#added_9","title":"Added","text":"<ul> <li>Configurable boot order</li> <li>Configurable boot options</li> <li>NVMe support</li> <li>Integrated WiFi and BT support</li> <li>PCIe support</li> <li>Network boot with integrated Ethernet</li> <li>Audio support</li> </ul>"},{"location":"variants/msi_z690/releases/#known-issues_9","title":"Known issues","text":"<ul> <li>USB storage devices disappear after reboot/power failure</li> <li>Some PCIe ports are not working</li> </ul>"},{"location":"variants/msi_z690/releases/#binaries_9","title":"Binaries","text":"<p>MSI PRO Z690-A WIFI DDR4 v0.2.0 sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p> <p>Commands snippet:</p> <pre><code>gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/keys/master-key/3mdeb-master-key.asc\ngpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/3mdeb-dasharo-master-key.asc\ngpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/msi_ms7d25/dasharo-release-0.x-compatible-with-msi-ms-7d25-signing-key.asc\ngpg --list-sigs \"3mdeb Master Key\" \"3mdeb Dasharo Master Key\" \"Dasharo release 0.x compatible with MSI MS-7D25 signing key\"\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v0.2.0/msi_ms7d25_v0.2.0.rom\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v0.2.0/msi_ms7d25_v0.2.0.rom.sha256\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v0.2.0/msi_ms7d25_v0.2.0.rom.sha256.sig\nsha256sum -c msi_ms7d25_v0.2.0.rom.sha256\ngpg --verify msi_ms7d25_v0.2.0.rom.sha256.sig msi_ms7d25_v0.2.0.rom.sha256\n</code></pre>"},{"location":"variants/msi_z690/releases/#sbom-software-bill-of-materials_9","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on a552cfc9 revision 83fbdcf1</li> <li>edk2 based on 4d2846ba revision 0a188758</li> </ul>"},{"location":"variants/msi_z690/releases/#v010-2022-04-13","title":"v0.1.0 - 2022-04-13","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/msi_z690/releases/#added_10","title":"Added","text":"<ul> <li>Initial support for the MSI PRO Z690-A WIFI DDR4 platform</li> <li>Dasharo boot logo</li> <li>Dasharo SMBIOS compatibility</li> <li>UEFI compatibility</li> <li>UEFI shell</li> <li>One-time boot feature</li> <li>External HDMI and Display Port rear panel display support</li> <li>USB support</li> </ul>"},{"location":"variants/msi_z690/releases/#known-issues_10","title":"Known issues","text":"<ul> <li>USB storage devices disappear after reboot/power failure</li> </ul>"},{"location":"variants/msi_z690/releases/#binaries_10","title":"Binaries","text":"<p>MSI PRO Z690-A WIFI DDR4 v0.1.0 sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p> <p>Commands snippet:</p> <pre><code>gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/keys/master-key/3mdeb-master-key.asc\ngpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/3mdeb-dasharo-master-key.asc\ngpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/msi_ms7d25/dasharo-release-0.x-compatible-with-msi-ms-7d25-signing-key.asc\ngpg --list-sigs \"3mdeb Master Key\" \"3mdeb Dasharo Master Key\" \"Dasharo release 0.x compatible with MSI MS-7D25 signing key\"\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/msi_ms7d25_v0.1.0.rom\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/msi_ms7d25_v0.1.0.rom.sha256\nwget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/msi_ms7d25_v0.1.0.rom.sha256.sig\nsha256sum -c msi_ms7d25_v0.1.0.rom.sha256\ngpg --verify msi_ms7d25_v0.1.0.rom.sha256.sig msi_ms7d25_v0.1.0.rom.sha256\n</code></pre>"},{"location":"variants/msi_z690/releases/#sbom-software-bill-of-materials_10","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on a552cfc9 revision 53948cd8</li> <li>edk2 based on 4d2846ba revision 4d2846ba</li> </ul>"},{"location":"variants/msi_z690/releases_heads/","title":"MSI PRO Z690-A (WIFI) (DDR4) Dasharo (coreboot + Heads) Release Notes","text":"<p>This is a Dasharo Pro Package Release. To obtain access to the pre-built binaries you will have to become the Dasharo Pro Package subscriber. You can do this by purchasing a Dasharo Pro Package product from our shop. As a subscriber, you will receive access to all firmware updates for the duration of your subscription via the Dasharo Pro Package newsletter, and gain entry to the Dasharo Premier Support invite-only live chat on the Matrix network, enabling direct engagement with the Dasharo Team and fellow subscribers for personalized, priority assistance.</p> <p>Following Release Notes describe status of Dasharo (coreboot + Heads) firmware development compatible with MSI PRO Z690-A boards.</p>"},{"location":"variants/msi_z690/releases_heads/#v090-2024-03-21","title":"v0.9.0 - 2024-03-21","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/msi_z690/releases_heads/#added","title":"Added","text":"<ul> <li>Initial support for the MSI PRO Z690-A WIFI DDR4 platform</li> <li>External HDMI and Display Port rear panel display support</li> <li>USB support</li> <li>Dual TPM feature in coreboot. When ME is disabled, fTPM becomes inactive as well and chipset will route the TPM traffic to SPI bus. coreboot will now probe for all possible TPMs and initialize the one that is currently active.</li> <li>This is a Dasharo Pro Package release</li> <li>Heads Linux is used as a payload</li> <li>Flash Descriptor with larger BIOS region; refer to SBOM section below</li> <li>ME hardcoded to be HAP disabled for heads builds. Discrete SPI TPM in JTPM1   header is required to provide TPM functionality.</li> </ul>"},{"location":"variants/msi_z690/releases_heads/#known-issues","title":"Known issues","text":"<ul> <li>Cannot wake from suspend via RTC on QubesOS</li> <li>Builds are not fully reproducible</li> </ul>"},{"location":"variants/msi_z690/releases_heads/#binaries","title":"Binaries","text":"<p>sha256 sha256.sig</p> <p>sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/msi_z690/releases_heads/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo heads fork based on v0.2.0 revision 13aa08ce</li> <li>Dasharo coreboot fork based on 4.21 revision 38215f5a</li> <li>Intel Management Engine based on v16.1.30.2307 revision d0b63476</li> <li>Intel Flash Descriptor based on v1.2 revision d0b63476</li> <li>Intel Firmware Support Package based on RPL-S C.0.BD.40 revision 481ea7cf</li> <li>Intel microcode based on ADL/RPL C0/H0 0x0000002e revision microcode-20230808</li> <li>Intel microcode based on RPL B0 0x00000119 revision microcode-20230808</li> </ul>"},{"location":"variants/msi_z690/test-matrix/","title":"Test matrix","text":""},{"location":"variants/msi_z690/test-matrix/#about","title":"About","text":"<p>The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.</p> <p>An up-to date test matrix used since release v1.1.3 is available here</p> <p>Note that the test scope is used during Dasharo Certification Procedure for both tested platforms: <code>MSI PRO Z690-A WiFi DDR4</code> and <code>MSI PRO Z690-A DDR5</code>.</p> <p>Following portion of the document contains the test matrix for releases older than v1.1.3 and is preserved for historical purposes.</p>"},{"location":"variants/msi_z690/test-matrix/#module-dasharo-compatibility","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. UEFI Shell USH All 4. Display ports and LCD support DSP DSP002.201, DSP002.301, DSP002.003, DSP003.201, DSP003.301, DSP003.003 5. USB HID and MSC Support USB USB001.001, USB001.201, USB001.301, USB002.201, USB002.002 USB002.301 6. SMBIOS DMI All 7. Custom boot logo CLG All 8. M.2 WiFi/Bluetooth WLE All 9. Audio subsystem AUD AUD001.201, AUD001.301, AUD004.201, AUD004.301 AUD005.201, AUD005.301 AUD006.201, AUD006.301 10. NVMe support NVM All 11. Network boot PXE Without PXE007.001 12. Debian Stable and Ubuntu LTS support LBT LBT004.001, LBT004.002 13. Windows booting WBT WBT001.001 14. Custom Boot Keys CBK All 15. Dasharo Tools Suite DTS DTS001.001, DTS002.001, DTS003.001, DTS004.001, DTS005.001, DTS006.001 16. CPU status CPU CPU001.201, CPU001.301 17. Platform suspend and resume SUSP All 18. Device power control operations DPC All"},{"location":"variants/msi_z690/test-matrix/#module-dasharo-security","title":"Module: Dasharo security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO Without VBO006.001, VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO All 5. ME disable/neuter support MNE without MNE004.201 6. BIOS lock support BLS All 7. SMM BIOS write protection SMM All 8. Early boot DMA protection EDP All 9. UEFI Setup password PSW All 10. Network stack enable/disable NBA All 11. USB stack enable/disable USS All"},{"location":"variants/msi_z690/test-matrix/#module-dasharo-performance","title":"Module: Dasharo performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All"},{"location":"variants/msi_z690/test-matrix/#coreboot-heads","title":"coreboot + Heads","text":"<p>Please refer to the tests results spreadsheet.</p>"},{"location":"variants/msi_z790/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/msi_z790/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configuration used for validation of the coreboot port on the MSI PRO Z790-P workstation. For additional information, please check the FAQ section.</p>"},{"location":"variants/msi_z790/hardware-matrix/#msi-pro-z790-p","title":"MSI PRO Z790-P","text":"<ul> <li>Serial number: 601-7E06-030B2210001398</li> <li>Revision: v2.1</li> </ul> Component Description CPU Intel Core i5-13600K 3.5 GHz CPU cooler Noctua NH-U12S CPU Cooler RAM Slot 1: Kingston KF556C40BB-8 Slot 1: Kingston KF556C40BB-8 Slot 1: Kingston KF556C40BB-8 Slot 1: Kingston KF556C40BB-8 Flash memory Macronix MX25U25635F SSD Intel 670p 512 GB M26472-201 NVME USB pendrives 1. Adata C008 USB 2.0 16 GB 2. Kingston DataTraveler USB 3.2 16 GB SD cards SanDisk Ultra microSD HC I 16 GB Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p 3. 1-port USB Type-C Network Local network wired connection Power Supply SeaSonic FOCUS Plus Platinum Power Control Sonoff S20 EU type E Remote Testing Environment RTE v1.1.0 KVM PiKVM based on Raspberry Pi 4"},{"location":"variants/msi_z790/hardware-matrix/#coreboot-heads","title":"coreboot + Heads","text":"<p>Generally, the same hardware configuration as for the UEFI variant applies.</p> <p>A notable addition is usage of the Nitrokey 3A Mini USB device, which is required for Heads installation and usage.</p>"},{"location":"variants/msi_z790/openness_score/","title":"Dasharo Openness Score","text":"<p>This page contains the Dasharo Openness Score for Dasharo releases compatible with MSI PRO Z790-P boards. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/msi_z790/openness_score/#v093","title":"v0.9.3","text":"<p>Openness Score for msi_ms7e06_v0.9.3_ddr5.rom</p> <p>Open-source code percentage: 38.3% Closed-source code percentage: 61.7%</p> <ul> <li>Image size: 33554432 (0x2000000)</li> <li>Number of regions: 37</li> <li>Number of CBFSes: 4</li> <li>Total open-source code size: 5740100 (0x579644)</li> <li>Total closed-source code size: 9233747 (0x8ce553)</li> <li>Total data size: 949317 (0xe7c45)</li> <li>Total empty size: 17631268 (0x10d0824)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/msi_z790/openness_score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category SI_ME 0x1000 0x3ff000 closed-source SI_DESC 0x0 0x1000 data SMMSTORE 0x1000000 0x40000 data RECOVERY_MRC_CACHE 0x10a0000 0x20000 data RW_MRC_CACHE 0x10c0000 0x20000 data RW_ELOG 0x10e0000 0x4000 data SHARED_DATA 0x10e4000 0x2000 data VBLOCK_DEV 0x10e6000 0x2000 data RW_VPD 0x10e8000 0x2000 data RW_NVRAM 0x10ea000 0x6000 data CONSOLE 0x10f0000 0x20000 data HSPHY_FW 0x1110000 0x8000 data VBLOCK_A 0x1318000 0x10000 data RW_FWID_A 0x17bff00 0x100 data VBLOCK_B 0x17e0000 0x10000 data RW_FWID_B 0x1bfff00 0x100 data RO_VPD 0x1c00000 0x4000 data FMAP 0x1c04000 0x800 data RO_FRID 0x1c04800 0x100 data RO_FRID_PAD 0x1c04900 0x700 data GBB 0x1c05000 0x3000 data UNUSED 0x400000 0xc00000 empty"},{"location":"variants/msi_z790/openness_score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 2097152</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 2097124 (0x1fffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 2097124 none empty"},{"location":"variants/msi_z790/openness_score/#cbfs-fw_main_a","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 4816640</li> <li>Number of files: 13</li> <li>Open-source files size: 1881964 (0x1cb76c)</li> <li>Closed-source files size: 1506417 (0x16fc71)</li> <li>Data size: 8903 (0x22c7)</li> <li>Empty size: 1419356 (0x15a85c)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1538090 none open-source fallback/romstage stage 106504 none open-source fallback/ramstage stage 157420 LZMA open-source fallback/dsdt.aml raw 11398 none open-source fallback/postcar stage 68552 none open-source cpu_microcode_blob.bin microcode 436224 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 283761 LZ4 closed-source config raw 5830 LZMA data revision raw 850 none data build_info raw 138 none data vbt.bin raw 1258 LZMA data (empty) null 2532 none empty"},{"location":"variants/msi_z790/openness_score/#cbfs-fw_main_b","title":"CBFS FW_MAIN_B","text":"<ul> <li>CBFS size: 4259584</li> <li>Number of files: 13</li> <li>Open-source files size: 1881964 (0x1cb76c)</li> <li>Closed-source files size: 1506417 (0x16fc71)</li> <li>Data size: 8903 (0x22c7)</li> <li>Empty size: 862300 (0xd285c)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1538090 none open-source fallback/romstage stage 106504 none open-source fallback/ramstage stage 157420 LZMA open-source fallback/dsdt.aml raw 11398 none open-source fallback/postcar stage 68552 none open-source cpu_microcode_blob.bin microcode 436224 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 283761 LZ4 closed-source config raw 5830 LZMA data revision raw 850 none data build_info raw 138 none data vbt.bin raw 1258 LZMA data (empty) null 2532 none empty"},{"location":"variants/msi_z790/openness_score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 4161536</li> <li>Number of files: 17</li> <li>Open-source files size: 1976172 (0x1e276c)</li> <li>Closed-source files size: 1506417 (0x16fc71)</li> <li>Data size: 9371 (0x249b)</li> <li>Empty size: 669576 (0xa3788)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1538090 none open-source fallback/romstage stage 106504 none open-source fallback/ramstage stage 157420 LZMA open-source fallback/dsdt.aml raw 11398 none open-source fallback/postcar stage 68552 none open-source bootblock bootblock 94208 none open-source cpu_microcode_blob.bin microcode 436224 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 283761 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 80 none data config raw 5830 LZMA data revision raw 850 none data build_info raw 138 none data vbt.bin raw 1258 LZMA data (empty) null 2276 none empty (empty) null 667300 none empty"},{"location":"variants/msi_z790/openness_score/#v090-heads","title":"v0.9.0 heads","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for msi_ms7e06_v0.9.0_ddr5_heads.rom</p> <p>Open-source code percentage: 61.3% Closed-source code percentage: 38.7%</p> <ul> <li>Image size: 33554432 (0x2000000)</li> <li>Number of regions: 7</li> <li>Number of CBFSes: 1</li> <li>Total open-source code size: 9099383 (0x8ad877)</li> <li>Total closed-source code size: 5749077 (0x57b955)</li> <li>Total data size: 105592 (0x19c78)</li> <li>Total empty size: 18600380 (0x11bd1bc)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/msi_z790/openness_score/#fmap-regions_1","title":"FMAP regions","text":"FMAP region Offset Size Category RW_MRC_CACHE 0x400000 0x10000 data FMAP 0x418000 0x200 data"},{"location":"variants/msi_z790/openness_score/#ifd-regions","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00001000 0x003d8fff 0x3d8000 closed-source Flash Descriptor 0x00000000 0x00000fff 0x1000 data Device Exp2 0x003d9000 0x003fffff 0x27000 empty"},{"location":"variants/msi_z790/openness_score/#cbfs-coreboot_1","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 29261312</li> <li>Number of files: 25</li> <li>Open-source files size: 9099383 (0x8ad877)</li> <li>Closed-source files size: 1685845 (0x19b955)</li> <li>Data size: 35448 (0x8a78)</li> <li>Empty size: 18440636 (0x11961bc)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 8782653 none open-source fallback/romstage stage 95448 none open-source fallback/ramstage stage 141286 LZMA open-source fallback/dsdt.aml raw 11268 none open-source fallback/postcar stage 31288 none open-source bootblock bootblock 37440 none open-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 283692 LZ4 closed-source cpu_microcode_blob.bin microcode 431104 none closed-source cbfs_master_header cbfs header 28 none data config raw 4520 LZMA data revision raw 867 none data bootsplash.jpg bootsplash 26784 none data vbt.bin raw 1258 LZMA data build_info raw 141 none data intel_fit intel_fit 80 none data (empty) null 228 none empty (empty) null 2317220 none empty (empty) null 523940 none empty (empty) null 7536548 none empty (empty) null 142948 none empty (empty) null 7695268 none empty (empty) null 224484 none empty"},{"location":"variants/msi_z790/openness_score/#v091","title":"v0.9.1","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for msi_ms7e06_v0.9.1_ddr5.rom</p> <p>Open-source code percentage: 45.3% Closed-source code percentage: 54.7%</p> <ul> <li>Image size: 33554432 (0x2000000)</li> <li>Number of regions: 37</li> <li>Number of CBFSes: 4</li> <li>Total open-source code size: 7057492 (0x6bb054)</li> <li>Total closed-source code size: 8534148 (0x823884)</li> <li>Total data size: 1472654 (0x16788e)</li> <li>Total empty size: 29073050 (0x1bb9e9a)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/msi_z790/openness_score/#fmap-regions_2","title":"FMAP regions","text":"FMAP region Offset Size Category SMMSTORE 0x1000000 0x40000 data RESERVED 0x1040000 0x40000 data BPA 0x1080000 0x20000 data RECOVERY_MRC_CACHE 0x10a0000 0x20000 data RW_MRC_CACHE 0x10c0000 0x20000 data RW_ELOG 0x10e0000 0x4000 data SHARED_DATA 0x10e4000 0x2000 data VBLOCK_DEV 0x10e6000 0x2000 data RW_VPD 0x10e8000 0x2000 data RW_NVRAM 0x10ea000 0x6000 data CONSOLE 0x10f0000 0x20000 data HSPHY_FW 0x1110000 0x8000 data VBLOCK_A 0x1318000 0x10000 data RW_FWID_A 0x17bff00 0x100 data ROMHOLE 0x17c0000 0x20000 data VBLOCK_B 0x17e0000 0x10000 data RW_FWID_B 0x1bfff00 0x100 data RO_VPD 0x1c00000 0x4000 data FMAP 0x1c04000 0x800 data RO_FRID 0x1c04800 0x100 data RO_FRID_PAD 0x1c04900 0x700 data GBB 0x1c05000 0x3000 data UNUSED 0x400000 0xc00000 empty"},{"location":"variants/msi_z790/openness_score/#ifd-regions_1","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00001000 0x003d8fff 0x3d8000 closed-source Flash Descriptor 0x00000000 0x00000fff 0x1000 data Device Exp2 0x003d9000 0x00ffffff 0xc27000 empty"},{"location":"variants/msi_z790/openness_score/#cbfs-bootsplash_1","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 2097152</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 2097124 (0x1fffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 2097124 none empty"},{"location":"variants/msi_z790/openness_score/#cbfs-fw_main_a_1","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 4816640</li> <li>Number of files: 13</li> <li>Open-source files size: 2322780 (0x23715c)</li> <li>Closed-source files size: 1501228 (0x16e82c)</li> <li>Data size: 8609 (0x21a1)</li> <li>Empty size: 984023 (0xf03d7)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/romstage stage 103440 none open-source fallback/ramstage stage 150907 LZMA open-source fallback/dsdt.aml raw 11264 none open-source fallback/postcar stage 69188 none open-source fallback/payload simple elf 1987981 none open-source cpu_microcode_blob.bin microcode 431104 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 283692 LZ4 closed-source config raw 5379 LZMA data revision raw 850 none data build_info raw 138 none data vbt.bin raw 1258 LZMA data (empty) null 740 none empty"},{"location":"variants/msi_z790/openness_score/#cbfs-fw_main_b_1","title":"CBFS FW_MAIN_B","text":"<ul> <li>CBFS size: 4259584</li> <li>Number of files: 13</li> <li>Open-source files size: 2322780 (0x23715c)</li> <li>Closed-source files size: 1501228 (0x16e82c)</li> <li>Data size: 8609 (0x21a1)</li> <li>Empty size: 426967 (0x683d7)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/romstage stage 103440 none open-source fallback/ramstage stage 150907 LZMA open-source fallback/dsdt.aml raw 11264 none open-source fallback/postcar stage 69188 none open-source fallback/payload simple elf 1987981 none open-source cpu_microcode_blob.bin microcode 431104 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 283692 LZ4 closed-source config raw 5379 LZMA data revision raw 850 none data build_info raw 138 none data vbt.bin raw 1258 LZMA data (empty) null 740 none empty"},{"location":"variants/msi_z790/openness_score/#cbfs-coreboot_2","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 4161536</li> <li>Number of files: 17</li> <li>Open-source files size: 2411932 (0x24cd9c)</li> <li>Closed-source files size: 1501228 (0x16e82c)</li> <li>Data size: 9008 (0x2330)</li> <li>Empty size: 239368 (0x3a708)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/romstage stage 103440 none open-source fallback/ramstage stage 150907 LZMA open-source fallback/dsdt.aml raw 11264 none open-source fallback/postcar stage 69188 none open-source fallback/payload simple elf 1987981 none open-source bootblock bootblock 89152 none open-source cpu_microcode_blob.bin microcode 431104 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 283692 LZ4 closed-source cbfs_master_header cbfs header 28 none data intel_fit intel_fit 80 none data config raw 5379 LZMA data revision raw 850 none data build_info raw 138 none data vbt.bin raw 1258 LZMA data (empty) null 484 none empty (empty) null 238884 none empty"},{"location":"variants/msi_z790/openness_score/#v092","title":"v0.9.2","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for msi_ms7e06_v0.9.2_ddr5.rom</p> <p>Open-source code percentage: 42.7% Closed-source code percentage: 57.3%</p> <ul> <li>Image size: 33554432 (0x2000000)</li> <li>Number of regions: 37</li> <li>Number of CBFSes: 4</li> <li>Total open-source code size: 6370867 (0x613633)</li> <li>Total closed-source code size: 8549715 (0x827553)</li> <li>Total data size: 1473158 (0x167a86)</li> <li>Total empty size: 17160692 (0x105d9f4)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/msi_z790/openness_score/#fmap-regions_3","title":"FMAP regions","text":"FMAP region Offset Size Category SMMSTORE 0x1000000 0x40000 data RESERVED 0x1040000 0x40000 data BPA 0x1080000 0x20000 data RECOVERY_MRC_CACHE 0x10a0000 0x20000 data RW_MRC_CACHE 0x10c0000 0x20000 data RW_ELOG 0x10e0000 0x4000 data SHARED_DATA 0x10e4000 0x2000 data VBLOCK_DEV 0x10e6000 0x2000 data RW_VPD 0x10e8000 0x2000 data RW_NVRAM 0x10ea000 0x6000 data CONSOLE 0x10f0000 0x20000 data HSPHY_FW 0x1110000 0x8000 data VBLOCK_A 0x1318000 0x10000 data RW_FWID_A 0x17bff00 0x100 data ROMHOLE 0x17c0000 0x20000 data VBLOCK_B 0x17e0000 0x10000 data RW_FWID_B 0x1bfff00 0x100 data RO_VPD 0x1c00000 0x4000 data FMAP 0x1c04000 0x800 data RO_FRID 0x1c04800 0x100 data RO_FRID_PAD 0x1c04900 0x700 data GBB 0x1c05000 0x3000 data UNUSED 0x400000 0xc00000 empty"},{"location":"variants/msi_z790/openness_score/#ifd-regions_2","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00001000 0x003d8fff 0x3d8000 closed-source Flash Descriptor 0x00000000 0x00000fff 0x1000 data Device Exp2 0x003d9000 0x003fffff 0x27000 empty"},{"location":"variants/msi_z790/openness_score/#cbfs-bootsplash_2","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 2097152</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 2097124 (0x1fffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 2097124 none empty"},{"location":"variants/msi_z790/openness_score/#cbfs-fw_main_a_2","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 4816640</li> <li>Number of files: 13</li> <li>Open-source files size: 2091793 (0x1feb11)</li> <li>Closed-source files size: 1506417 (0x16fc71)</li> <li>Data size: 8762 (0x223a)</li> <li>Empty size: 1209668 (0x127544)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1773739 none open-source fallback/romstage stage 110688 none open-source fallback/ramstage stage 155027 LZMA open-source fallback/dsdt.aml raw 11347 none open-source fallback/postcar stage 40992 none open-source cpu_microcode_blob.bin microcode 436224 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 283761 LZ4 closed-source config raw 5634 LZMA data revision raw 850 none data build_info raw 138 none data vbt.bin raw 1258 LZMA data (empty) null 100 none empty"},{"location":"variants/msi_z790/openness_score/#cbfs-fw_main_b_2","title":"CBFS FW_MAIN_B","text":"<ul> <li>CBFS size: 4259584</li> <li>Number of files: 13</li> <li>Open-source files size: 2091793 (0x1feb11)</li> <li>Closed-source files size: 1506417 (0x16fc71)</li> <li>Data size: 8762 (0x223a)</li> <li>Empty size: 652612 (0x9f544)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1773739 none open-source fallback/romstage stage 110688 none open-source fallback/ramstage stage 155027 LZMA open-source fallback/dsdt.aml raw 11347 none open-source fallback/postcar stage 40992 none open-source cpu_microcode_blob.bin microcode 436224 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 283761 LZ4 closed-source config raw 5634 LZMA data revision raw 850 none data build_info raw 138 none data vbt.bin raw 1258 LZMA data (empty) null 100 none empty"},{"location":"variants/msi_z790/openness_score/#cbfs-coreboot_3","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 4161536</li> <li>Number of files: 17</li> <li>Open-source files size: 2187281 (0x216011)</li> <li>Closed-source files size: 1506417 (0x16fc71)</li> <li>Data size: 9206 (0x23f6)</li> <li>Empty size: 458632 (0x6ff88)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1773739 none open-source fallback/romstage stage 110688 none open-source fallback/ramstage stage 155027 LZMA open-source fallback/dsdt.aml raw 11347 none open-source fallback/postcar stage 40992 none open-source bootblock bootblock 95488 none open-source cpu_microcode_blob.bin microcode 436224 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 283761 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 80 none data config raw 5634 LZMA data revision raw 850 none data build_info raw 138 none data vbt.bin raw 1258 LZMA data (empty) null 2596 none empty (empty) null 456036 none empty"},{"location":"variants/msi_z790/releases/","title":"MSI PRO Z790-P (WIFI) (DDR5) Dasharo Release Notes","text":"<p>This is a Dasharo Pro Package Release. o obtain access to the pre-built binaries, you need to subscribe to the Dasharo Pro Package subscriber. You can do this by purchasing a Dasharo Pro Package product from our shop. As a subscriber, you will receive access to all firmware updates for the duration of your subscription via the Dasharo Pro Package newsletter, and gain entry to the Dasharo Premier Support invite-only live chat on the Matrix network, enabling direct engagement with the Dasharo Team and fellow subscribers for personalized, priority assistance.</p> <p>Following Release Notes describe status of open-source firmware development for MSI PRO Z790-P (WIFI) (DDR5)</p> <p>For details about our release process please read Dasharo Standard Release Process.</p> <p>For detailed information on our validation setup, please refer to the Hardware Configuration Matrix. To gain a deeper understanding of the nomenclature reasons behind the Z690/Z790 boards, we recommend seeing our FAQ.</p>         Subscribe to MSI PRO Z790-P (WIFI) (DDR5) Dasharo Release Newsletter"},{"location":"variants/msi_z790/releases/#v093-2025-09-18","title":"v0.9.3 - 2025-09-18","text":"<p>This is a non-LTS release and has a reduced scope of tests.</p> <p>Test results for this release can be found here.</p>"},{"location":"variants/msi_z790/releases/#added","title":"Added","text":"<ul> <li>Improved measured boot support</li> <li>Microsoft Option ROM UEFI CA to Secure Boot DB</li> <li>Check for flash descriptor writability when exposing HAP disable option</li> </ul>"},{"location":"variants/msi_z790/releases/#changed","title":"Changed","text":"<ul> <li>Rebased coreboot repository to 24.12 (see SBOM)</li> <li>Rebased edk2 repository to edk2-stable202502 (see SBOM)</li> <li>Owner GUID of Secure Boot DB and KEK to Microsoft recommended values</li> <li>Updated DBX to 2025-06-13</li> </ul>"},{"location":"variants/msi_z790/releases/#known-issues","title":"Known issues","text":"<ul> <li>XMP1 profile does not boot in combination with some DDR5 configurations</li> <li>Windows 11 installer unable to detect i225 Ethernet NIC</li> <li>Cannot wake from suspend via RTC on QubesOS</li> <li>Windows 11 VBS (Virtualization-based Security) appears Not enabled on System Information</li> <li>Capsule update signing is not enforced</li> </ul>"},{"location":"variants/msi_z790/releases/#binaries","title":"Binaries","text":"<p>sha256 sha256.sig (msi_ms7e06_v0.9.3_ddr4.cap)</p> <p>sha256 sha256.sig (msi_ms7e06_v0.9.3_ddr4.rom)</p> <p>sha256 sha256.sig (msi_ms7e06_v0.9.3_ddr4_dev_signed.cap)</p> <p>sha256 sha256.sig (msi_ms7e06_v0.9.3_ddr4_dev_signed.rom)</p> <p>sha256 sha256.sig (msi_ms7e06_v0.9.3_ddr5.cap)</p> <p>sha256 sha256.sig (msi_ms7e06_v0.9.3_ddr5.rom)</p> <p>sha256 sha256.sig (msi_ms7e06_v0.9.3_ddr5_dev_signed.cap)</p> <p>sha256 sha256.sig (msi_ms7e06_v0.9.3_ddr5_dev_signed.rom)</p> <p>This is a Dasharo Pro Package Release. To access the pre-built binaries, you need to subscribe to the Dasharo Pro Package subscriber. You can do this by purchasing a Dasharo Pro Package product from our shop. As a subscriber, you will receive access to all firmware updates for the duration of your subscription via the Dasharo Pro Package newsletter, and gain entry to the Dasharo Premier Support invite-only live chat on the Matrix network, enabling direct engagement with the Dasharo Team and fellow subscribers for personalized, priority assistance.</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/msi_z790/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 24.12 revision fecb8be2<ul> <li>License</li> </ul> </li> <li>Dasharo EDKII fork based on edk2-stable202502 revision 1c50dad8<ul> <li>License</li> </ul> </li> <li>Dasharo EDK2-platforms fork based on v0.9.0 revision 1002a596<ul> <li>License</li> </ul> </li> <li>iPXE based on 2025.03 revision 6c7068fc<ul> <li>License</li> </ul> </li> <li>vboot based on f1f70f46dc revision f1f70f46<ul> <li>License</li> </ul> </li> <li>Intel Management Engine version v16.1.30.2307<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor version v1.2<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package version RPL-S C.0.C8.50<ul> <li>License</li> </ul> </li> <li>Intel microcode version ADL/RPL C0/H0 0x3a 12/12/2024<ul> <li>License</li> </ul> </li> <li>Intel microcode version RPL B0 0x12f 17/03/2025<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/msi_z790/releases/#v092-2024-12-10","title":"v0.9.2 - 2024-12-10","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/msi_z790/releases/#added_1","title":"Added","text":"<ul> <li>Introduce updates via UEFI capsules (from this firmware onward)</li> <li>Preserve user data during a capsule update</li> <li>CPU configuration menu</li> <li>Update to a much newer EDKII revision</li> <li>Dual TPM feature in coreboot. When ME is disabled, fTPM becomes inactive as well and chipset will route the TPM traffic to SPI bus. coreboot will now probe for all possible TPMs and initialize the one that is currently active.</li> <li>Expose ESRT entry for firmware updates</li> </ul>"},{"location":"variants/msi_z790/releases/#changed_1","title":"Changed","text":"<ul> <li>Use a constant value for major BIOS version number in ROMHOLES (used by FlashBIOS)</li> <li>Updated Intel CPU microcode to 0x12B version</li> <li>Updated Flash Descriptor to enlarge BIOS region; refer to SBOM section below</li> </ul>"},{"location":"variants/msi_z790/releases/#fixed","title":"Fixed","text":"<ul> <li>No ability to change active PCR banks with TPM PPI in FW</li> <li>Fix the problem where a disk with a meaningful name would appear as Non-Block Boot Device in the created OS boot options from ESP</li> <li>Improve resource detection above 4 GiB</li> </ul>"},{"location":"variants/msi_z790/releases/#known-issues_1","title":"Known issues","text":"<ul> <li>XMP1 profile does not boot in combination with some DDR5 configurations</li> <li>Windows 11 installer unable to detect i225 Ethernet NIC</li> <li>Cannot wake from suspend via RTC on QubesOS</li> <li>Windows 11 VBS (Virtualization-based Security) appears Not enabled on System Information</li> <li>Capsule update signing is not enforced</li> </ul>"},{"location":"variants/msi_z790/releases/#binaries_1","title":"Binaries","text":"<p>sha256 sha256.sig (msi_ms7e06_v0.9.2_ddr4.cap)</p> <p>sha256 sha256.sig (msi_ms7e06_v0.9.2_ddr4_dev_signed.cap)</p> <p>sha256 sha256.sig (msi_ms7e06_v0.9.2_ddr4.rom)</p> <p>sha256 sha256.sig (msi_ms7e06_v0.9.2_ddr4_dev_signed.rom)</p> <p>sha256 sha256.sig (msi_ms7e06_v0.9.2_ddr5.cap)</p> <p>sha256 sha256.sig (msi_ms7e06_v0.9.2_ddr5_dev_signed.cap)</p> <p>sha256 sha256.sig (msi_ms7e06_v0.9.2_ddr5.rom)</p> <p>sha256 sha256.sig (msi_ms7e06_v0.9.2_ddr5_dev_signed.rom)</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/msi_z790/releases/#sbom-software-bill-of-materials_1","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 24.02.01 revision b9d6d8c7<ul> <li>License</li> </ul> </li> <li>Dasharo EDKII fork based on edk2-stable202402 revision 5b3658c0<ul> <li>License</li> </ul> </li> <li>Dasharo EDK2-platforms fork based on v0.9.0 revision 3323ed48<ul> <li>License</li> </ul> </li> <li>iPXE based on 2023.12 revision 35d84756<ul> <li>License</li> </ul> </li> <li>vboot based on 3d37d2aafe revision 3d37d2aa<ul> <li>License</li> </ul> </li> <li>Intel Management Engine based on v16.1.30.2307 revision 4f6e917d<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor based on v1.2 revision 4f6e917d<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package based on RPL-S C.0.C8.50 revision 3819544e<ul> <li>License</li> </ul> </li> <li>Intel microcode based on 0x36 (for CPUIDs 00090672, 00090675, 000b06f2, 000b06f5), 0x12B (for CPUID 000b0671) revision 4f6e917d<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/msi_z790/releases/#v091-2024-01-22","title":"v0.9.1 - 2024-01-22","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/msi_z790/releases/#added_2","title":"Added","text":"<ul> <li>Automatic fan control</li> <li>RAM Disk support (EXPERIMENTAL)</li> <li>Memory overclocking support with XMP profiles</li> <li>Compatibility with Raptor Lake Refresh CPUs</li> <li>Selective Option ROM loading</li> <li>Serial Console Redirection option</li> <li>Power state after power fail option</li> <li>Option for Resizable BARs enabling</li> <li>ESP partition scanning in look for grubx64.efi or shimx64.efi or Windows bootmgr</li> <li>Memory speed is displayed in the firmware setup main page</li> <li>Added support for taking screenshots in the firmware</li> <li>Microsoft and Windows 2023 UEFI Secure Boot certificates</li> <li>Disabling ME and unlocking descriptor with HMRFPO command on FUM flow</li> </ul>"},{"location":"variants/msi_z790/releases/#changed_2","title":"Changed","text":"<ul> <li>This is a Dasharo Pro Package release</li> <li>Updated microcode to the newer version; refer to SBOM section below</li> <li>Updated ME to the newer version; refer to SBOM section below</li> <li>Updated Flash Descriptor to unlock regions; refer to SBOM section below</li> <li>Switched to the Raptor Lake-S Client FSP; refer to SBOM section below</li> <li>Get SMBIOS serial number and UUID from ROMHOLE region instead of CBFS   (ROMHOLE is preserved during FlashBIOS and updates via DTS)</li> <li>Rebased coreboot on 4.21 tag</li> <li>Reduced the amount of microcode blobs included in the build, due to   redundancy (some blobs had the same shasum and supported the same CPUIDs)</li> <li>Enroll default UEFI Secure Boot keys on the first boot</li> <li>Improved UEFI Secure Boot menu user experience</li> <li>DDR4 variant SMBIOS product name to reflect MSI naming</li> <li>Scope of reset to default hotkey to global in firmware setup</li> <li>Booting DTS over iPXE via HTTPS</li> <li>Removed the i225/i226 EFI driver from the builds in favor of native iPXE   driver</li> <li>Switched iPXE repository to Dasharo fork for the native iPXE driver for   i225/i226</li> </ul>"},{"location":"variants/msi_z790/releases/#fixed_1","title":"Fixed","text":"<ul> <li>No audio playback via headset</li> <li>Auto Boot Time-out is reset to 0 when F9 is pressed</li> <li>Some RPL-S CPUs ( 0xB06F2 (RPL-S C0) or 0xB06F5 (RPL-S H0)) have a problem with booting on v0.9.0</li> <li>Change boot order menu is confusing</li> <li>The setup menu does not issue a reset, resulting in saved but unapplied settings</li> <li>PCI Express Resizable BAR programming</li> <li>PCI Express resource allocation for Intel ARC A750</li> <li>CPU frequency not displayed on setup front page</li> <li>P2SB BAR not properly reserved in ACPI</li> <li>Power LED not blinking during S3 sleep</li> <li>PS/2 controller not enabled at first boot after flashing</li> <li>Incorrect C-states reported in ACPI unsupported by HW</li> <li>Incorrect first timestamp format in ACPI FPDT</li> </ul>"},{"location":"variants/msi_z790/releases/#known-issues_2","title":"Known issues","text":"<ul> <li>XMP1 profile does not boot in combination with some DDR5 configurations</li> <li>Windows 11 installer unable to detect i225 Ethernet NIC</li> <li>Cannot wake from suspend via RTC on QubesOS</li> <li>Windows 11 VBS (Virtualization-based Security) appears Not enabled on System Information</li> <li>No ability to change active PCR banks with TPM PPI in FW</li> </ul>"},{"location":"variants/msi_z790/releases/#binaries_2","title":"Binaries","text":"<p>sha256 sha256.sig (msi_ms7e06_v0.9.1_ddr4)</p> <p>sha256 sha256.sig (msi_ms7e06_v0.9.1_ddr4_dev_signed)</p> <p>sha256 sha256.sig (msi_ms7e06_v0.9.1_ddr5)</p> <p>sha256 sha256.sig (msi_ms7e06_v0.9.1_ddr5_dev_signed)</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/msi_z790/releases/#sbom-software-bill-of-materials_2","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 4.21 revision 2c5426c3</li> <li>Dasharo EDKII fork based on edk2-stable202002 revision 11746340</li> <li>iPXE based on 2023.12 revision 838611b3</li> <li>vboot based on 0c11187c75 revision 0c11187c</li> <li>Intel Management Engine based on v16.1.30.2307 revision 18aab76c</li> <li>Intel Flash Descriptor based on v1.1 revision 18aab76c</li> <li>Intel Firmware Support Package based on RPL-S C.0.BD.40 revision 481ea7cf</li> <li>Intel microcode based on ADL/RPL C0/H0 0x0000002e revision microcode-20230808</li> <li>Intel microcode based on RPL B0 0x00000119 revision microcode-20230808</li> </ul>"},{"location":"variants/msi_z790/releases/#v090-2023-08-31","title":"v0.9.0 - 2023-08-31","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/msi_z790/releases/#added_3","title":"Added","text":"<ul> <li>MSI FLASHBIOS recovery support</li> <li>Raptor Lake-S CPU support</li> <li>MSI PRO Z790-P board support with the same feature set as PRO Z690-A</li> <li>MSI ACPI device that triggers automatic driver and utility installation manager</li> <li>Support for logo customization</li> <li>UEFI 2.8 errata C compliance in EDKII fork</li> <li>Firmware Update Mode feature</li> <li>This is a Dasharo Pro Package release</li> <li>Use new microcode version, refer to SBOM</li> <li>Use new ME version, refer to SBOM</li> <li>Make NVIDIA RTX 3060 spawn HD Audio device in Device Manager</li> <li>Reset to defaults with F9 causes the right settings to be restored</li> <li>Popup with information about recovery mode is not displayed after flashing with a valid binary</li> <li>Proper watchdog timeout value to avoid reset loops on DDR5 boards   with bigger amount of RAM</li> <li>Chipset Watchdog timeout value changes actual watchdog trigger time</li> <li>No missing ACPI objects errors in Linux dmesg</li> <li>Setup Password option</li> </ul>"},{"location":"variants/msi_z790/releases/#binaries_3","title":"Binaries","text":"<p>This is a Dasharo Pro Package Release. To obtain access to the pre-built binaries you will have to become the Dasharo Pro Package subscriber. You will get the access to all of the firmware updates for the duration of the subscription via Dasharo Pro Package newsletter.</p>"},{"location":"variants/msi_z790/releases/#sbom-software-bill-of-materials_3","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 4.18 revision 197229de</li> <li>Dasharo EDKII fork based on edk2-stable202002 revision 94f562a7</li> <li>iPXE based on 6ba671acd9 revision 6ba671ac</li> <li>vboot based on b76cd8c806 revision b76cd8c8</li> <li>Intel Management Engine based on v16.1.30.2255 revision 2a8875ec</li> <li>Intel Flash Descriptor based on v1.0 revision 2a8875ec</li> <li>Intel Firmware Support Package based on IoT RPL-S PV 3492_03 revision 2fea9a2f</li> <li>Intel microcode based on ADL C0 0x0000002c revision microcode-20230613</li> <li>Intel microcode based on ADL H0 0x0000002c revision microcode-20230613</li> <li>Intel microcode based on RPL B0 0x00000113 revision microcode-20230613</li> </ul>"},{"location":"variants/msi_z790/releases_heads/","title":"MSI PRO Z790-P (WIFI) (DDR4) Dasharo (coreboot + Heads) Release Notes","text":"<p>This is a Dasharo Pro Package Release. Following Release Notes describe status of Dasharo (coreboot + Heads) firmware development compatible with MSI PRO Z790-P boards.</p> <p>Please note that in order for the Heads to work correctly with the MSI motherboard, two additional components are required:</p> <ol> <li>TPM 2.0 MSI MS-4462, available at our store.</li> <li>Nitrokey 3A Mini, also available for purchase at our store.</li> </ol> <p>The Heads currently supports only integrated graphics (a non-F CPU). Discrete graphics is NOT supported by the standard build.</p>"},{"location":"variants/msi_z790/releases_heads/#v090-2024-03-21","title":"v0.9.0 - 2024-03-21","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/msi_z790/releases_heads/#added","title":"Added","text":"<ul> <li>MSI PRO Z790-P board support with the same feature set as PRO Z690-A</li> <li>MSI FLASHBIOS recovery support</li> <li>Raptor Lake-S CPU support</li> <li>Dual TPM feature in coreboot. When ME is disabled, fTPM becomes inactive as well and chipset will route the TPM traffic to SPI bus. coreboot will now probe for all possible TPMs and initialize the one that is currently active.</li> <li>This is a Dasharo Pro Package release</li> <li>Use new microcode version, refer to SBOM</li> <li>Use new ME version, refer to SBOM</li> <li>Make NVIDIA RTX 3060 spawn HD Audio device in Device Manager</li> <li>Heads Linux is used as a payload</li> <li>Flash Descriptor with larger BIOS region; refer to SBOM section below</li> <li>ME hardcoded to be HAP disabled for heads builds. Discrete SPI TPM in JTPM1   header is required to provide TPM functionality.</li> </ul>"},{"location":"variants/msi_z790/releases_heads/#known-issues","title":"Known issues","text":"<ul> <li>Cannot wake from suspend via RTC on QubesOS</li> <li>Builds are not fully reproducible</li> </ul>"},{"location":"variants/msi_z790/releases_heads/#binaries","title":"Binaries","text":"<p>sha256 sha256.sig</p> <p>sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/msi_z790/releases_heads/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo heads fork based on v0.2.0 revision 13aa08ce</li> <li>Dasharo coreboot fork based on 4.21 revision 38215f5a</li> <li>Intel Management Engine based on v16.1.30.2307 revision d0b63476</li> <li>Intel Flash Descriptor based on v1.2 revision d0b63476</li> <li>Intel Firmware Support Package based on RPL-S C.0.BD.40 revision 481ea7cf</li> <li>Intel microcode based on ADL/RPL C0/H0 0x0000002e revision microcode-20230808</li> <li>Intel microcode based on RPL B0 0x00000119 revision microcode-20230808</li> </ul>"},{"location":"variants/msi_z790/test-matrix/","title":"Test matrix","text":""},{"location":"variants/msi_z790/test-matrix/#about","title":"About","text":"<p>The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.</p> <p>An up-to date test matrix used since release v0.9.1 is available here</p> <p>Note that the test scope is used during Dasharo Certification Procedure for for <code>MSI PRO Z790-P</code> platform.</p> <p>Following portion of the document contains the test matrix for releases older than v0.9.1 and is preserved for historical purposes.</p>"},{"location":"variants/msi_z790/test-matrix/#module-dasharo-compatibility","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. UEFI Shell USH All 4. Display ports and LCD support DSP DSP002.201, DSP002.301, DSP002.003, DSP003.201, DSP003.301, DSP003.003 5. USB HID and MSC Support USB USB001.001, USB001.201, USB001.301, USB002.201, USB002.002 USB002.301 6. SMBIOS DMI All 7. Custom boot logo CLG All 8. M.2 WiFi/Bluetooth WLE All 9. Audio subsystem AUD AUD001.201, AUD001.301, AUD004.201, AUD004.301 AUD005.201, AUD005.301 AUD006.201, AUD006.301 10. NVMe support NVM All 11. Network boot PXE Without PXE007.001 12. Debian Stable and Ubuntu LTS support LBT LBT004.001, LBT004.002 13. Windows booting WBT WBT001.001 14. Custom Boot Keys CBK All 15. Dasharo Tools Suite DTS DTS001.001, DTS002.001, DTS003.001, DTS004.001, DTS005.001, DTS006.001 16. CPU status CPU CPU001.201, CPU001.301 17. Platform suspend and resume SUSP SUSP001.201, SUSP002.201, SUSP003.201, SUSP005.201"},{"location":"variants/msi_z790/test-matrix/#module-dasharo-security","title":"Module: Dasharo security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO Without VBO006.001, VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO All 5. ME disable/neuter support MNE without MNE004.201 6. BIOS lock support BLS All 7. SMM BIOS write protection SMM All 8. Early boot DMA protection EDP All 9. UEFI Setup password PSW All 10. Network stack enable/disable NBA All 11. USB stack enable/disable USS All"},{"location":"variants/msi_z790/test-matrix/#module-dasharo-performance","title":"Module: Dasharo performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All"},{"location":"variants/msi_z790/test-matrix/#coreboot-heads","title":"coreboot + Heads","text":"<p>Please refer to the tests results spreadsheet.</p>"},{"location":"variants/novacustom_ns5x_adl/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/novacustom_ns5x_adl/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configurations used for validation of the coreboot port on the NovaCustom NS5x/7x laptops.</p>"},{"location":"variants/novacustom_ns5x_adl/hardware-matrix/#ports-specification","title":"Ports specification","text":""},{"location":"variants/novacustom_ns5x_adl/hardware-matrix/#right-side-view","title":"Right side view","text":"No. Description 1. Speaker 2. 2-In-1 Audio Jack (Headphone / Microphone) 3. MicroSD Card Reader 4. USB 2.0 Port 5. LED Indicator 6. Power Button 7. RJ-45 LAN Jack 8. Security Lock Slot"},{"location":"variants/novacustom_ns5x_adl/hardware-matrix/#left-side-view","title":"Left side view","text":"No. Description 1. DC-In Jack 2. HDMI-Out Port 3. USB 3.2 Gen 2 Type-A Port 4. USB 3.2 Gen 2 Type-A Port with Always On USB 5. Thunderbolt 4 Port with Power Delivery (DC-IN) 6. Speaker <p>The graphics used are from pages 17-18 of the official service manual for the NS51/70 platforms.</p>"},{"location":"variants/novacustom_ns5x_adl/hardware-matrix/#ns5xpu","title":"NS5xPU","text":"Component Description CPU Intel(R) Core(TM) i5-1240P Internal Cooling RAM Slot 1: KVR32S22S8/8 Slot 2: KVR32S22S8/8 SSD Samsung SSD 990 PRO 1 TB Flash memory GigaDevice 25B1256EYIG 32 MB USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card Intel Wi-Fi 6 AX201 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 15.6 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices The platform is tested with every docking station/hub listed in HCL Power Supply Chicony 19V, 4.74A, 90 W"},{"location":"variants/novacustom_ns5x_adl/hardware-matrix/#ns7xpu","title":"NS7xPU","text":"Component Description CPU Intel(R) Core(TM) i7-1260P Internal Cooling RAM Slot 1: KVR32S22S8/8 Slot 2: KVR32S22S8/8 SSD Samsung SSD 980 PRO 250 GB Flash memory GigaDevice 25B1256EYIG 32 MB USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card Intel Wi-Fi 6 AX201 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 17 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices The platform is tested with every docking station/hub listed in HCL Power Supply Chicony 19V, 4.74A, 90 W"},{"location":"variants/novacustom_ns5x_adl/openness-score/","title":"Dasharo Openness Score","text":"<p>This page contains the Dasharo Openness Score for NovaCustom NS5XPU/NS7XPU Dasharo releases. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/novacustom_ns5x_adl/openness-score/#v172","title":"v1.7.2","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for novacustom_ns5x_adl_v1.7.2.rom</p> <p>Open-source code percentage: 35.1% Closed-source code percentage: 64.9%</p> <ul> <li>Image size: 33554432 (0x2000000)</li> <li>Number of regions: 27</li> <li>Number of CBFSes: 3</li> <li>Total open-source code size: 4588518 (0x4603e6)</li> <li>Total closed-source code size: 8497434 (0x81a91a)</li> <li>Total data size: 686310 (0xa78e6)</li> <li>Total empty size: 19782170 (0x12dda1a)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/novacustom_ns5x_adl/openness-score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category SI_ME 0x1000 0x4ff000 closed-source SI_DESC 0x0 0x1000 data RECOVERY_MRC_CACHE 0x1000000 0x10000 data RW_MRC_CACHE 0x1010000 0x10000 data SMMSTORE 0x1020000 0x40000 data SHARED_DATA 0x1060000 0x2000 data VBLOCK_DEV 0x1062000 0x2000 data RW_NVRAM 0x1064000 0x6000 data CONSOLE 0x106a000 0x20000 data VBLOCK_A 0x118a000 0x10000 data RW_FWID_A 0x1bfffc0 0x40 data RO_VPD 0x1c00000 0x4000 data FMAP 0x1c04000 0x800 data RO_FRID 0x1c04800 0x40 data RO_FRID_PAD 0x1c04840 0x7c0 data GBB 0x1c05000 0x3000 data UNUSED 0x500000 0xb00000 empty"},{"location":"variants/novacustom_ns5x_adl/openness-score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 1048576</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 1048548 (0xfffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 1048548 none empty"},{"location":"variants/novacustom_ns5x_adl/openness-score/#cbfs-fw_main_a","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 10903488</li> <li>Number of files: 13</li> <li>Open-source files size: 2244371 (0x223f13)</li> <li>Closed-source files size: 1629325 (0x18dc8d)</li> <li>Data size: 8626 (0x21b2)</li> <li>Empty size: 7021166 (0x6b226e)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/romstage stage 95808 none open-source fallback/ramstage stage 152932 LZMA open-source fallback/dsdt.aml raw 22545 none open-source fallback/postcar stage 42408 none open-source fallback/payload simple elf 1930678 none open-source cpu_microcode_blob.bin microcode 546816 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 296077 LZ4 closed-source config raw 5482 LZMA data revision raw 856 none data build_info raw 98 none data vbt.bin raw 1290 LZMA data (empty) null 868 none empty"},{"location":"variants/novacustom_ns5x_adl/openness-score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 4161536</li> <li>Number of files: 18</li> <li>Open-source files size: 2344147 (0x23c4d3)</li> <li>Closed-source files size: 1629325 (0x18dc8d)</li> <li>Data size: 9944 (0x26d8)</li> <li>Empty size: 178120 (0x2b7c8)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/romstage stage 95808 none open-source fallback/ramstage stage 152932 LZMA open-source fallback/dsdt.aml raw 22545 none open-source fallback/postcar stage 42408 none open-source fallback/payload simple elf 1930678 none open-source bootblock bootblock 99776 none open-source cpu_microcode_blob.bin microcode 546816 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 296077 LZ4 closed-source cbfs_master_header cbfs header 28 none data intel_fit intel_fit 80 none data config raw 5482 LZMA data revision raw 856 none data build_info raw 98 none data vbt.bin raw 1290 LZMA data cmos_layout.bin cmos_layout 800 none data (empty) null 612 none empty (empty) null 177508 none empty"},{"location":"variants/novacustom_ns5x_adl/releases/","title":"NovaCustom NS5x/7x 12th Gen Dasharo Release Notes","text":"<p>Following Release Notes describe status of open-source firmware development for NovaCustom NS5x/7x 12th Gen</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to NovaCustom NS5x/7x 12th Gen Dasharo Release Newsletter"},{"location":"variants/novacustom_ns5x_adl/releases/#v172-2024-01-03","title":"v1.7.2 - 2024-01-03","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_ns5x_adl/releases/#added","title":"Added","text":"<ul> <li>Added Microsoft 2023 keys for UEFI Secure Boot and DBX from 2023.05.9</li> </ul>"},{"location":"variants/novacustom_ns5x_adl/releases/#changed","title":"Changed","text":"<ul> <li>Changed throttling temperature to 80 degrees</li> <li>Enabled HTTPS for Dasharo Tools Suite network boot option</li> </ul>"},{"location":"variants/novacustom_ns5x_adl/releases/#fixed","title":"Fixed","text":"<ul> <li>Low performance when booting on battery power only</li> <li>Regression charging via dell usb-c dock</li> <li>Video on USB-C docks sometimes fails to initialize</li> <li>USB-C chargers may be overloaded in certain scenarios</li> <li>Hybrid Power Boost mode of battery charger is not functional</li> <li>Laptop may shut down when disconnecting power supply</li> <li>Input current limits are set too high</li> <li>Keyboard backlight does not turn off immediately when going to sleep</li> <li>Power LED blinks erratically in HPB mode</li> <li>EC applying power limits may sometimes fail</li> <li>Wrong power limits are applied on AC attach / detach</li> <li>USB-PD controller may hang in glitched state on shutdown</li> <li>Yellow bangs in device manager</li> <li>Random freezes in Windows 11</li> <li>Low level interfering crackling/popping of the speakers while playing no sound</li> <li>ACPI error during boot (system76_acpi::kbd_backlight)</li> <li>Thunderbolt may not work after wakeup from sleep</li> <li>Unnecessary security warning after firmware update</li> <li>Early boot DMA protection setting in UEFI does not work correctly</li> <li>Power state after power failure option does not work as intended</li> </ul>"},{"location":"variants/novacustom_ns5x_adl/releases/#known-issues","title":"Known issues","text":"<ul> <li>Poor Package C-state residency at idle after first s2idle cycle</li> <li>Some commands in dasharo_ectool fail</li> <li>Incomplete serial console output</li> <li>Some devices on dock are not detected after warmboot or reboot</li> <li>Function Lock setting is not saved after cold boot</li> <li>No ability to change active PCR banks with TPM PPI in FW</li> <li>Turning wifi/bt off inside BIOS leads to an ACPI error message while system start on Gentoo Linux</li> <li>The laptop does not automatically wake up from hibernation using rtcwake</li> </ul>"},{"location":"variants/novacustom_ns5x_adl/releases/#binaries","title":"Binaries","text":"<p>novacustom_ns5x_adl_ec_v1.7.2.rom sha256 sha256.sig</p> <p>novacustom_ns5x_adl_v1.7.2.rom sha256 sha256.sig</p> <p>novacustom_ns5x_adl_v1.7.2_dev_signed.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_ns5x_adl/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 4.21 revision cb6ef1b9</li> <li>Dasharo EDKII fork based on edk2-stable202002 revision b7274c98</li> </ul>"},{"location":"variants/novacustom_ns5x_adl/releases/#v171-2023-11-06","title":"v1.7.1 - 2023-11-06","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_ns5x_adl/releases/#added_1","title":"Added","text":"<ul> <li>Firmware update mode</li> <li>BIOS boot medium write-protection</li> <li>SMM BIOS write protection</li> <li>Early boot DMA protection</li> <li>Early Sign of Life display output</li> <li>Current limiting for USB-PD power supplies</li> <li>Setup menu password configuration</li> <li>Wi-Fi / Bluetooth module disable option in setup menu</li> <li>Built-in webcam disable option in setup menu</li> <li>USB stack disable option in setup menu</li> <li>Network stack disable option in setup menu</li> <li>Battery threshold options in setup menu</li> <li>Block boot when battery is too low</li> <li>Power on AC option in setup menu</li> <li>Firmware display on external monitor when lid is closed</li> </ul>"},{"location":"variants/novacustom_ns5x_adl/releases/#changed_1","title":"Changed","text":"<ul> <li>Rebased on coreboot release 4.21</li> <li>Removed software keyboard backlight controls for improved backlight reliability</li> <li>Disabled EC debug logging for improved security</li> <li>Set throttling temperature to 75 degrees C</li> <li>UEFI 2.8 specification compliance</li> <li>Improved battery charging logic</li> <li>Improved USB-C docking station compatibility</li> </ul>"},{"location":"variants/novacustom_ns5x_adl/releases/#fixed_1","title":"Fixed","text":"<ul> <li>Low performance when booting on battery power only</li> <li>Firmware defaults to maximum CD clock, preventing flicker-free booting</li> <li>Power delivery compatibility</li> <li>Better support for USB-PD power supplies</li> <li>After changing the Intel ME mode the Reset option in the setup menu turns off the device</li> <li>Laptops randomly go into suspend mode from which they can not wake up.</li> <li>Reset to defaults with F9 causes the wrong settings to be restored</li> <li>Keyboard backlight not working after restart</li> <li>Warning sign in device manager under the touchpad device</li> <li>Popup with information about recovery mode is displayed after flashing with a valid binary</li> <li>The power LED is not always blinking while in sleep mode on Windows 11</li> <li>Internal keyboard stops working randomly in firmware</li> <li>DTS on network boot fails to boot</li> <li>Firmware Update Mode does not automatically boot into DTS</li> <li>Permanent keyboard illumination after cold boot fails: keyboard light level is not saved correctly</li> <li>Controlling keyboard illumination (brightess and on/off) does not work</li> <li>Permanent keyboard illumination not working in Ubuntu 22.04</li> <li>Controlling brightness and turning off RGB keyboard illumination does not work (Ubuntu 22.04)</li> <li>Wi-Fi card is not recognized on Windows 11</li> <li>No HDMI audio on Windows 11</li> <li>No HDMI display output on Windows 11</li> <li>No USB-C display output on Windows 11</li> <li>Keyboard backlight is disabled after suspend (Windows 11)</li> <li>Reset by F9 sets battery thresholds to 0</li> <li>The docking station is not detected after cold-boot, warm-boot and reboot</li> </ul>"},{"location":"variants/novacustom_ns5x_adl/releases/#known-issues_1","title":"Known issues","text":"<ul> <li>Docking station may fail to be initialized if connected before booting and connected to multiple monitors</li> <li>Connecting and immediately disconnecting the charger, sets the battery status in OS to 'charging' for about 2 minutes</li> <li>Power state after power failure option does not work as intended</li> <li>No ability to change active PCR banks with TPM PPI in FW</li> </ul>"},{"location":"variants/novacustom_ns5x_adl/releases/#binaries_1","title":"Binaries","text":"<p>novacustom_ns5x_adl_ec_v1.7.1.rom sha256 sha256.sig</p> <p>novacustom_ns5x_adl_v1.7.1.rom sha256 sha256.sig</p> <p>novacustom_ns5x_adl_v1.7.1_dev_signed.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_ns5x_adl/releases/#sbom-software-bill-of-materials_1","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 4.21 revision 36032e55</li> <li>Dasharo EDKII fork based on edk2-stable202002 revision b68e46b0</li> </ul>"},{"location":"variants/novacustom_ns5x_adl/releases/#v170-non-public-engineering-release","title":"v1.7.0 - Non-public engineering release","text":""},{"location":"variants/novacustom_ns5x_adl/releases/#v160-2023-04-07","title":"v1.6.0 - 2023-04-07","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_ns5x_adl/releases/#added_2","title":"Added","text":"<ul> <li>Intel Management Engine Disable</li> <li>The same keyboard illumination setting is restored after suspend or poweroff</li> <li>One of the two fan profiles can now be selected in Setup Menu</li> <li>Fn lock hotkey feature</li> <li>Setup menu option for switching between S0ix and S3 suspend mode</li> </ul>"},{"location":"variants/novacustom_ns5x_adl/releases/#changed_2","title":"Changed","text":"<ul> <li>Keys must be provisioned prior enabling Secure Boot</li> <li>The function keys responsible for entering the setup and boot menu in BIOS   have been changed from ESC/F12 to F2/F7</li> </ul>"},{"location":"variants/novacustom_ns5x_adl/releases/#fixed_2","title":"Fixed","text":"<ul> <li>Waking up from sleep on Ubuntu 22.04 is not 100% reliable (Dasharo issue #205)</li> <li>The connected RJ45 cable to the Ethernet socket causes a hardware error on Windows 11 (Dasharo issue #264)</li> <li>Laptop not starting after fully discharging (NS70PU) (Dasharo issue #287)</li> <li>The Auto Boot time-out value is not respected (Dasharo issue #292)</li> <li>ACPI boot errors during booting Ubuntu 22.04 (Dasharo issue #293)</li> <li>Windows update KB5012170 cannot be installed (Dasharo issue #294)</li> <li>Internal keyboard sometimes does not work in firmware (Dasharo issue #295)</li> <li>SMMStore sometimes gets wiped out by UEFI payload on NovaCustom ADL laptops (Dasharo issue #298)</li> </ul>"},{"location":"variants/novacustom_ns5x_adl/releases/#known-issues_2","title":"Known issues","text":"<ul> <li>The power LED is not always blinking while in sleep mode on Windows 11 (Dasharo issue #182)</li> <li>Suspend does not work correctly while a SATA disk is installed (Dasharo issue #230)</li> <li>Touchpad isn't work on Debian 11.3 (Dasharo issue #240)</li> <li>Sleep sometimes not working (Dasharo issue #261)</li> <li>Popup with information about recovery mode is displayed after flashing with a valid binary (Dasharo issue #269)</li> <li>Missing information about cache  (Dasharo issue #343)</li> <li>Keyboard backlight not working after restart (Dasharo issue #349)</li> <li>Connecting and immediately disconnecting the charger, sets the battery status in OS to charging for about 2 minutes  (Dasharo issue #350)</li> <li>Reset to defaults with F9 causes the wrong settings to be restored (Dasharo issue #355)</li> <li>Laptop not suspending while connected to a USB-C docking station (Dasharo issue #368)</li> <li>Keyboard backlight brightness is not properly restored after cold-boot (Dasharo issue #402)</li> <li>After changing the Intel ME mode the Reset option in the setup menu turns off the device (Dasharo issue #403)</li> <li>The docking station is not detected after cold-boot and warm-boot (Dasharo issue #404)</li> </ul>"},{"location":"variants/novacustom_ns5x_adl/releases/#binaries_2","title":"Binaries","text":"<p>novacustom_ns5x_adl_ec_v1.6.0.rom sha256 sha256.sig</p> <p>novacustom_ns5x_adl_v1.6.0.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_ns5x_adl/releases/#sbom-software-bill-of-materials_2","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 1a8eb6c02103727431ac1ea23f4f507e49f3cde7 revision ae10b20f</li> <li>Dasharo EDKII fork based on e0334c228ce4ba51f47ff79a118f214031d4650f revision bd421b40</li> <li>Intel ME version 16.1.25.1865</li> </ul>"},{"location":"variants/novacustom_ns5x_adl/releases/#v150-non-public-engineering-release","title":"v1.5.0 - Non-public engineering release","text":""},{"location":"variants/novacustom_ns5x_adl/releases/#v140-2022-11-06","title":"v1.4.0 - 2022-11-06","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_ns5x_adl/releases/#added_3","title":"Added","text":"<ul> <li>Support for NovaCustom NS5x/NS7x 12th Gen</li> <li>UEFI Boot Support</li> <li>Configurable boot order</li> <li>Configurable boot options</li> <li>UEFI Secure Boot support</li> <li>NovaCustom boot logo</li> <li>Vboot Verified Boot</li> <li>Vboot recovery mode information popup</li> <li>Dasharo setup menu full screen mode support</li> <li>Support for RGB backlit keyboard</li> <li>Support for open-source EC   firmware</li> </ul>"},{"location":"variants/novacustom_ns5x_adl/releases/#known-issues_3","title":"Known issues","text":"<ul> <li>The power LED is not always blinking while in sleep mode on Windows 11 (Dasharo issue #182)</li> <li>Suspend does not work correctly while a SATA disk is installed (Dasharo issue #230)</li> </ul>"},{"location":"variants/novacustom_ns5x_adl/releases/#binaries_3","title":"Binaries","text":"<p>novacustom_ns5x_adl_ec_v1.4.0.rom sha256 sha256.sig</p> <p>novacustom_ns5x_adl_v1.4.0.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_ns5x_adl/releases/#sbom-software-bill-of-materials_3","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 1a8eb6c02103 revision cf81af26</li> <li>Dasharo EDKII fork based on dd7523b5b123 revision abfdef40</li> </ul>"},{"location":"variants/novacustom_ns5x_adl/test-matrix/","title":"Test matrix","text":""},{"location":"variants/novacustom_ns5x_adl/test-matrix/#about","title":"About","text":"<p>The test matrix is used to determine the scope of tests to which the DUT is subjected before the release of the new binary.</p>"},{"location":"variants/novacustom_ns5x_adl/test-matrix/#module-dasharo-compatibility","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports and LCD support DSP DSP001.001, DSP001.201, DSP001.301, DSP002.201, DSP002.301 4. Embedded Controller and Super I/O initialization ECR All 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot keys CBK All 8. USB HID and MSC Support USB All 9. Debian Stable and Ubuntu LTS support LBT LBT004.001, LBT004.002 10. UEFI Shell USH All 11. Windows booting WBT WBT001.001 12. Audio subsystem AUD All 13. USB-C support UTC All 14. Network boot PXE Without PXE007.001 15. M.2 WiFi/Bluetooth WLE All 16. SD card support SDC All 17. USB Camera verification CAM All 18. Fan speed measure FAN FAN001.001 19. SMBIOS DMI Without DMI001.201 20. Firmware update using fwupd FFW All 21. Dasharo Tools Suite DTS DTS006.001, DTS007.001 22. CPU status CPU All 23. Embedded controller flashing ECF All 24. Logo customization functionality LCM LCM001.001 25. Firmware locally building and flashing FLB All 26. Custom Boot Order CBO CBO001.002 27. QubesOS support QBS All 28. Fedora support FED All 29. Platform suspend and resume SUSP Without SUSP004 and SUSP006 30. Boot blocking BBB All 31. [Reset to defaults][RTD] RTD All 32. Suspend mechanism switching (S0ix/S3) SMS All 33. [Platform hibernation and resume][HBN] HBN All 34. Sign of life SOL All 35. [Power after fail][PSF] PSF All"},{"location":"variants/novacustom_ns5x_adl/test-matrix/#module-dasharo-security","title":"Module: Dasharo security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO Without SBO006.001, SBO007.001 and SBO008.001 5. ME disable/neuter support MNE Without MNE005.201 6. USB stack USS All 7. Network boot availability PXE All 8. BIOS lock support BLS All 9. Early boot DMA protection EDP All 10. SMM BIOS write protection SMM All 11. UEFI Setup password PSW All 12. [Wi-Fi / Bluetooth switch][WBS] WBS All 13. [Camera switch][CHS] CHS All"},{"location":"variants/novacustom_ns5x_adl/test-matrix/#module-dasharo-performance","title":"Module: Dasharo performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot boot measure CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF All 4. Custom fan curve CFC All 5. Platform stability STB All"},{"location":"variants/novacustom_ns5x_adl/test-matrix/#module-dasharo-stability","title":"Module: Dasharo stability","text":"No. Supported test suite Test suite ID Supported test cases 1. USB Type-A devices detection SUD All 2. M.2 Wi-fi SMW All 3. NVMe detection SNV All 4. NET interface detection NET All 5. [TPM detection][TPD] TPD TPD003.201, TPD003.202, TPD004.201, TPD004.202"},{"location":"variants/novacustom_ns5x_tgl/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/novacustom_ns5x_tgl/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configurations used for validation of the coreboot port on the NovaCustom NS51/NS70 laptops.</p>"},{"location":"variants/novacustom_ns5x_tgl/hardware-matrix/#ports-specification","title":"Ports specification","text":""},{"location":"variants/novacustom_ns5x_tgl/hardware-matrix/#right-side-view","title":"Right side view","text":"No. Description 1. Speaker 2. 2-In-1 Audio Jack (Headphone / Microphone) 3. MicroSD Card Reader 4. USB 2.0 Port 5. LED Indicator 6. Power Button 7. RJ-45 LAN Jack 8. Security Lock Slot"},{"location":"variants/novacustom_ns5x_tgl/hardware-matrix/#left-side-view","title":"Left side view","text":"No. Description 1. DC-In Jack 2. HDMI-Out Port 3. USB 3.2 Gen 2 Type-A Port 4. USB 3.2 Gen 2 Type-A Port with Always On USB 5. Thunderbolt 4 Port with Power Delivery (DC-IN) 6. Speaker <p>The graphics used are from pages 17-18 of the official service manual for the NS51/70 platforms.</p>"},{"location":"variants/novacustom_ns5x_tgl/hardware-matrix/#ns51mu","title":"NS51MU","text":"Component Description CPU Intel(R) Core(TM) i5-1135G7 Internal Cooling RAM Slot 1: KVR32S22D8/16 Slot 2: KVR32S22D8/16 SSD 1. Samsung SSD 980 PRO 250 GB 2. Samsung SSD 980 PRO 500 GB Flash memory Winbond 25Q128JVSQ 2118 16 MB USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card Intel Wi-Fi 6 AX201 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 15.6 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices The platform is tested with every docking station/hub listed in HCL Power Supply Chicony 19V, 3.42A, 65 W"},{"location":"variants/novacustom_ns5x_tgl/hardware-matrix/#ns70mu","title":"NS70MU","text":"Component Description CPU Intel(R) Core(TM) i5-1135G7 Internal Cooling RAM Slot 1: KVR32S22S8/8 Slot 2: KVR32S22S8/8 SSD Samsung SSD 980 1 TB Flash memory GigaDevice 25B127DSIG 16 MB USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card Intel Wi-Fi 6 AX201 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 17 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices The platform is tested with every docking station/hub listed in HCL Power Supply Chicony 19V, 3.42A, 65 W"},{"location":"variants/novacustom_ns5x_tgl/openness-score/","title":"Dasharo Openness Score","text":"<p>This page contains the Dasharo Openness Score for NovaCustom NS5/7XPU Dasharo releases. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/novacustom_ns5x_tgl/openness-score/#v152","title":"v1.5.2","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for novacustom_ns5x_tgl_v1.5.2.rom</p> <p>Open-source code percentage: 37.7% Closed-source code percentage: 62.3%</p> <ul> <li>Image size: 16777216 (0x1000000)</li> <li>Number of regions: 26</li> <li>Number of CBFSes: 3</li> <li>Total open-source code size: 4540304 (0x454790)</li> <li>Total closed-source code size: 7509228 (0x7294ec)</li> <li>Total data size: 628586 (0x9976a)</li> <li>Total empty size: 4099098 (0x3e8c1a)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/novacustom_ns5x_tgl/openness-score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category SI_ME 0x1000 0x4ff000 closed-source SI_DESC 0x0 0x1000 data RECOVERY_MRC_CACHE 0x500000 0x10000 data RW_MRC_CACHE 0x510000 0x10000 data SMMSTORE 0x520000 0x40000 data SHARED_DATA 0x560000 0x2000 data VBLOCK_DEV 0x562000 0x2000 data RW_NVRAM 0x564000 0x6000 data CONSOLE 0x56a000 0x20000 data VBLOCK_A 0x68a000 0x2000 data RW_FWID_A 0xbfffc0 0x40 data RO_VPD 0xc00000 0x4000 data FMAP 0xc04000 0x800 data RO_FRID 0xc04800 0x40 data RO_FRID_PAD 0xc04840 0x7c0 data GBB 0xc05000 0x3000 data"},{"location":"variants/novacustom_ns5x_tgl/openness-score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 1048576</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 1048548 (0xfffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 1048548 none empty"},{"location":"variants/novacustom_ns5x_tgl/openness-score/#cbfs-fw_main_a","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 5717952</li> <li>Number of files: 13</li> <li>Open-source files size: 2223496 (0x21ed88)</li> <li>Closed-source files size: 1135222 (0x115276)</li> <li>Data size: 8404 (0x20d4)</li> <li>Empty size: 2350830 (0x23deee)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/romstage stage 89096 none open-source fallback/ramstage stage 140972 LZMA open-source fallback/dsdt.aml raw 22258 none open-source fallback/postcar stage 40492 none open-source fallback/payload simple elf 1930678 none open-source cpu_microcode_blob.bin microcode 207872 none closed-source fspm.bin fsp 651264 none closed-source fsps.bin fsp 276086 LZ4 closed-source config raw 5145 LZMA data revision raw 856 none data build_info raw 98 none data vbt.bin raw 1308 LZMA data (empty) null 2596 none empty"},{"location":"variants/novacustom_ns5x_tgl/openness-score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 4161536</li> <li>Number of files: 19</li> <li>Open-source files size: 2316808 (0x235a08)</li> <li>Closed-source files size: 1135222 (0x115276)</li> <li>Data size: 9786 (0x263a)</li> <li>Empty size: 699720 (0xaad48)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/romstage stage 89096 none open-source fallback/ramstage stage 140972 LZMA open-source fallback/dsdt.aml raw 22258 none open-source fallback/postcar stage 40492 none open-source fallback/payload simple elf 1930678 none open-source bootblock bootblock 93312 none open-source cpu_microcode_blob.bin microcode 207872 none closed-source fspm.bin fsp 651264 none closed-source fsps.bin fsp 276086 LZ4 closed-source cbfs_master_header cbfs header 28 none data intel_fit intel_fit 80 none data config raw 5145 LZMA data revision raw 856 none data build_info raw 98 none data vbt.bin raw 1308 LZMA data cmos_layout.bin cmos_layout 852 none data etc/ps2-keyboard-spinup raw 8 none data (empty) null 1380 none empty (empty) null 698340 none empty"},{"location":"variants/novacustom_ns5x_tgl/releases/","title":"NovaCustom NS5x/7x 11th Gen Dasharo Release Notes","text":"<p>Following Release Notes describe status of open-source firmware development for NovaCustom NS5x/7x 11th Gen</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to NovaCustom NS5x/7x 11th Gen Dasharo Release Newsletter"},{"location":"variants/novacustom_ns5x_tgl/releases/#v152-2024-01-17","title":"v1.5.2 - 2024-01-17","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_ns5x_tgl/releases/#added","title":"Added","text":"<ul> <li>Added Microsoft 2023 keys for UEFI Secure Boot and DBX from 2023.05.9</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#changed","title":"Changed","text":"<ul> <li>Changed throttling temperature to 80 degrees</li> <li>Enabled HTTPS for Dasharo Tools Suite network boot option</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#fixed","title":"Fixed","text":"<ul> <li>Low performance when booting on battery power only</li> <li>Regression charging via dell usb-c dock</li> <li>Video on USB-C docks sometimes fails to initialize</li> <li>USB-C chargers may be overloaded in certain scenarios</li> <li>Hybrid Power Boost mode of battery charger is not functional</li> <li>Laptop may shut down when disconnecting power supply</li> <li>Input current limits are set too high</li> <li>Keyboard backlight does not turn off immediately when going to sleep</li> <li>Power LED blinks erratically in HPB mode</li> <li>EC applying power limits may sometimes fail</li> <li>Wrong power limits are applied on AC attach / detach</li> <li>USB-PD controller may hang in glitched state on shutdown</li> <li>Yellow bangs in device manager</li> <li>Random freezes in Windows 11</li> <li>Low level interfering crackling/popping of the speakers while playing no sound</li> <li>ACPI error during boot (system76_acpi::kbd_backlight)</li> <li>Thunderbolt may not work after wakeup from sleep</li> <li>Unnecessary security warning after firmware update</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#known-issues","title":"Known issues","text":"<ul> <li>Poor Package C-state residency at idle after first s2idle cycle</li> <li>Some commands in dasharo_ectool fail</li> <li>Incomplete serial console output</li> <li>Some devices on dock are not detected after warmboot or reboot</li> <li>Function Lock setting is not saved after cold boot</li> <li>No ability to change active PCR banks with TPM PPI in FW</li> <li>Turning wifi/bt off inside BIOS leads to an ACPI error message while system start on Gentoo Linux</li> <li>The laptop does not automatically wake up from hibernation using rtcwake</li> <li>Power state after power failure option does not work as intended</li> <li>OS fails to resume from S3 on some board revisions</li> <li>Windows 11 fails to resume from hibernation</li> <li>No HDMI output in firmware</li> <li>Connecting and immediately disconnecting the charger, sets the battery status in OS to \"charging\" for about 2 minutes</li> <li>Platform fails to resume from S3 suspend</li> <li>Early boot DMA protection setting in UEFI does not work correctly</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#binaries","title":"Binaries","text":"<p>novacustom_ns5x_tgl_ec_v1.5.2.rom sha256 sha256.sig</p> <p>novacustom_ns5x_tgl_v1.5.2.rom sha256 sha256.sig</p> <p>novacustom_ns5x_tgl_v1.5.2_dev_signed.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_ns5x_tgl/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 4.21 revision cb6ef1b9</li> <li>Dasharo EDKII fork based on edk2-stable202002 revision b7274c98</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#v151-2023-11-06","title":"v1.5.1 - 2023-11-06","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_ns5x_tgl/releases/#added_1","title":"Added","text":"<ul> <li>Firmware update mode</li> <li>BIOS boot medium write-protection</li> <li>SMM BIOS write protection</li> <li>Early boot DMA protection</li> <li>Early Sign of Life display output</li> <li>Current limiting for USB-PD power supplies</li> <li>Setup menu password configuration</li> <li>Wi-Fi / Bluetooth module disable option in setup menu</li> <li>Built-in webcam disable option in setup menu</li> <li>USB stack disable option in setup menu</li> <li>Network stack disable option in setup menu</li> <li>Battery threshold options in setup menu</li> <li>Intel ME disable option in setup menu</li> <li>Block boot when battery is too low</li> <li>Power on AC option in setup menu</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#changed_1","title":"Changed","text":"<ul> <li>Rebased on coreboot release 4.21</li> <li>Removed software keyboard backlight controls for improved backlight reliability</li> <li>Disabled EC debug logging for improved security</li> <li>Set throttling temperature to 75 degrees C</li> <li>UEFI 2.8 specification compliance</li> <li>Improved battery charging logic</li> <li>Improved USB-C docking station compatibility</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#fixed_1","title":"Fixed","text":"<ul> <li>Low performance when booting on battery power only</li> <li>Power delivery compatibility</li> <li>Better support for USB-PD power supplies</li> <li>After changing the Intel ME mode the Reset option in the setup menu turns off the device</li> <li>Laptops randomly go into suspend mode from which they can not wake up.</li> <li>Reset to defaults with F9 causes the wrong settings to be restored</li> <li>Keyboard backlight not working after restart</li> <li>Warning sign in device manager under the touchpad device</li> <li>Popup with information about recovery mode is displayed after flashing with a valid binary</li> <li>The power LED is not always blinking while in sleep mode on Windows 11</li> <li>Internal keyboard stops working randomly in firmware</li> <li>DTS on network boot fails to boot</li> <li>Firmware Update Mode does not automatically boot into DTS</li> <li>Permanent keyboard illumination after cold boot fails: keyboard light level is not saved correctly</li> <li>Controlling keyboard illumination (brightess and on/off) does not work</li> <li>Permanent keyboard illumination not working in Ubuntu 22.04</li> <li>Controlling brightness and turning off RGB keyboard illumination does not work (Ubuntu 22.04)</li> <li>Wi-Fi card is not recognized on Windows 11</li> <li>No HDMI audio on Windows 11</li> <li>No HDMI display output on Windows 11</li> <li>No USB-C display output on Windows 11</li> <li>Keyboard backlight is disabled after suspend (Windows 11)</li> <li>Reset by F9 sets battery thresholds to 0</li> <li>The docking station is not detected after cold-boot, warm-boot and reboot</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#known-issues_1","title":"Known issues","text":"<ul> <li>Docking station may fail to be initialized if connected before booting and connected to multiple monitors</li> <li>Connecting and immediately disconnecting the charger, sets the battery status in OS to 'charging' for about 2 minutes</li> <li>Power state after power failure option does not work as intended</li> <li>No ability to change active PCR banks with TPM PPI in FW</li> <li>Windows 11 fails to resume from S3 on some board revisions</li> <li>Windows 11 fails to resume from hibernation</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#binaries_1","title":"Binaries","text":"<p>novacustom_ns5x_tgl_ec_v1.5.1.rom sha256 sha256.sig</p> <p>novacustom_ns5x_tgl_v1.5.1.rom sha256 sha256.sig</p> <p>novacustom_ns5x_tgl_v1.5.1_dev_signed.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_ns5x_tgl/releases/#sbom-software-bill-of-materials_1","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 4.21 revision 36032e55</li> <li>Dasharo EDKII fork based on edk2-stable202002 revision b68e46b0</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#v150-non-public-engineering-release","title":"v1.5.0 - Non-public engineering release","text":""},{"location":"variants/novacustom_ns5x_tgl/releases/#v140-2023-03-02","title":"v1.4.0 - 2023-03-02","text":""},{"location":"variants/novacustom_ns5x_tgl/releases/#added_2","title":"Added","text":"<ul> <li>The same keyboard illumination setting is restored after suspend or poweroff</li> <li>One of the two fan profiles can now be selected in Setup Menu</li> <li>Fn lock hotkey feature</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#changed_2","title":"Changed","text":"<ul> <li>Keys must be provisioned prior enabling Secure Boot</li> <li>Trackpad no longer working after 1.3.0 upgrade from 1.1.0 (Dasharo issue #313)</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#known-issues_2","title":"Known issues","text":"<ul> <li>Low level interfering crackling/popping of the speakers while playing no sound (Dasharo issue #224)</li> <li>The power LED is not always blinking while in sleep mode on Windows 11 (Dasharo issue #182)</li> <li>Keyboard backlight turns on after resuming from sleep mode  (Dasharo issue #332)</li> <li>The screen brightness level gets stuck when key are held or pressed too fast (Dasharo issue #341)</li> <li>Connecting and immediately disconnecting the charger, sets the battery status in OS to 'charging' for about 2 minutes (Dasharo issue #350)</li> <li>Reset to defaults with F9 causes the wrong settings to be restored (Dasharo issue #355)</li> <li>Connecting the RJ45 cable to the Gigabit Ethernet port on the docking station does not result in obtaining an Internet connection (Dasharo issue #356)</li> <li>Unable to login to Windows 11 with the docking station connected (Dasharo issue #357)</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#binaries_2","title":"Binaries","text":"<p>novacustom_ns5x_tgl_ec_v1.4.0.rom sha256 sha256.sig</p> <p>novacustom_ns5x_tgl_v1.4.0.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_ns5x_tgl/releases/#sbom-software-bill-of-materials_2","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 1a8eb6c02103727431ac1ea23f4f507e49f3cde7 revision 636f432a</li> <li>EDK2 based on e0334c228ce4ba51f47ff79a118f214031d4650f revision 2c61576a</li> <li>Intel ME version 15.0.30.1776</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#v130-2022-09-01","title":"v1.3.0 - 2022-09-01","text":""},{"location":"variants/novacustom_ns5x_tgl/releases/#ec-firmware-transition","title":"EC firmware transition","text":"<p>Please note, that version 1.3.0 of <code>Dasharo BIOS firmware</code> works correctly only with the <code>Dasharo EC firmware</code>. This is the first release when this open-source EC firmware is used, so additional steps need to be taken when upgrading.</p> <p>Please refer to the Firmware update section for more details on upgrading your firmware.</p>"},{"location":"variants/novacustom_ns5x_tgl/releases/#added_3","title":"Added","text":"<ul> <li> <p>Enabled Vboot Verified Boot</p> </li> <li> <p>Vboot Recovery Popup</p> </li> <li> <p>Fullscreen setup menu</p> </li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#changed_3","title":"Changed","text":"<ul> <li> <p>Rebased on upstream coreboot revision 1a8eb6c0</p> </li> <li> <p>Support for Open EC   Firmware</p> </li> <li> <p>Disabled UEFI Secure Boot by default</p> </li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#fixed_2","title":"Fixed","text":"<ul> <li>The touchpad ON/OFF switch Fn key is not functional</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#binaries_3","title":"Binaries","text":"<p>novacustom_ns5x_v1.3.0.rom sha256 sha256.sig novacustom_ns5x_v1.3.0_ec.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_ns5x_tgl/releases/#sbom-software-bill-of-materials_3","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 1a8eb6c02103727431ac1ea23f4f507e49f3cde7 revision 1153a18d</li> <li>EDK2 based on e0334c228ce4ba51f47ff79a118f214031d4650f revision abfdef40</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#v120-2022-05-26","title":"v1.2.0 - 2022-05-26","text":""},{"location":"variants/novacustom_ns5x_tgl/releases/#added_4","title":"Added","text":"<ul> <li>Persistent RGB keyboard settings</li> <li>Increased power limits to CPU defaults (28W PL1 / 35W PL2)</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#fixed_3","title":"Fixed","text":"<ul> <li>CVE-2022-29264 SMM loader vulnerability</li> <li>Incorrect vendor name in SMBIOS</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#known-issues_3","title":"Known issues","text":"<ul> <li>CPU not running on expected frequency and usage NS50MU</li> <li>UCM-UCSI ACPI device displays an error in Windows Device Manager</li> <li>Headsets connected to the docking station are not recognizable on NS70/50 v1.2.0</li> <li>General problem with charging the DUT via the docking station using USB Type-C slot NS70/50 v1.2.0</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#binaries_4","title":"Binaries","text":"<p>novacustom_ns5x_v1.2.0.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_ns5x_tgl/releases/#sbom-software-bill-of-materials_4","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.16 revision b087dcbd</li> <li>tianocore based on e0334c228ce4ba51f47ff79a118f214031d4650f revision 90364638</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#v110-2022-04-22","title":"v1.1.0 - 2022-04-22","text":""},{"location":"variants/novacustom_ns5x_tgl/releases/#added_5","title":"Added","text":"<ul> <li>Support for NovaCustom NS7x</li> <li>Support for RGB Keyboard</li> <li>Persistent boot logo implementation</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#changed_4","title":"Changed","text":"<ul> <li>Temporarily disable vboot due to the risk of bricinkg certain units when flashing via internal programmer</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#known-issues_4","title":"Known issues","text":"<ul> <li>CPU not running on expected frequency and usage NS50MU</li> <li>UCM-UCSI ACPI device displays an error in Windows Device Manager</li> <li>The touchpad ON/OFF switch Fn key is not functional</li> <li>Incorrect vendor name in SMBIOS</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#binaries_5","title":"Binaries","text":"<p>novacustom_ns5x_v1.1.0.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_ns5x_tgl/releases/#sbom-software-bill-of-materials_5","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.16 revision c2f031af</li> <li>tianocore based on e0334c228ce4ba51f47ff79a118f214031d4650f revision 4d2846ba</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#v100-2022-03-23","title":"v1.0.0 - 2022-03-23","text":""},{"location":"variants/novacustom_ns5x_tgl/releases/#added_6","title":"Added","text":"<ul> <li>Support for NovaCustom NS5x</li> <li>Support for EC firmware 1.07.07</li> <li>UEFI Boot Support</li> <li>Configurable boot order</li> <li>Configurable boot options</li> <li>UEFI Secure Boot support</li> <li>NovaCustom boot logo</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#known-issues_5","title":"Known issues","text":"<ul> <li>The touchpad ON/OFF switch Fn key is not functional</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/releases/#binaries_6","title":"Binaries","text":"<p>novacustom_ns5x_v1.0.0.rom sha256 sha256.sig</p>"},{"location":"variants/novacustom_ns5x_tgl/releases/#sbom-software-bill-of-materials_6","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.16 revision ecf1e9b8</li> <li>tianocore based on e0334c228ce4ba51f47ff79a118f214031d4650f revision ec6805c2</li> </ul>"},{"location":"variants/novacustom_ns5x_tgl/test-matrix/","title":"Test matrix","text":""},{"location":"variants/novacustom_ns5x_tgl/test-matrix/#about","title":"About","text":"<p>The test matrix is used to determine the scope of tests to which the DUT is subjected before the release of the new binary.</p>"},{"location":"variants/novacustom_ns5x_tgl/test-matrix/#module-dasharo-compatibility","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports and LCD support DSP DSP001.001, DSP001.201, DSP001.202, DSP001.301, DSP002.201, DSP002.202, DSP002.301 4. Embedded Controller and Super I/O initialization ECR All 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot keys CBK All 8. USB HID and MSC Support USB All 9. Debian Stable and Ubuntu LTS support LBT LBT004.001, LBT004.002 10. UEFI Shell USH All 11. Windows booting WBT WBT001.001 12. Audio subsystem AUD All 13. USB-C support UTC All 14. Network boot PXE Without PXE007.001 15. M.2 WiFi/Bluetooth WLE All 16. SD card support SDC All 17. USB Camera verification CAM All 18. Fan speed measure FAN FAN001.001 19. SMBIOS DMI Without DMI001.201 20. Firmware update using fwupd FFW All 21. Dasharo Tools Suite DTS DTS006.001, DTS007.001 22. CPU status CPU All 23. Embedded controller flashing ECF All 24. Logo customization functionality LCM LCM001.001 25. Firmware locally building and flashing FLB All 26. Custom Boot Order CBO CBO001.002 27. QubesOS support QBS All 28. Fedora support FED All 29. Platform suspend and resume SUSP Without SUSP004 and SUSP006 30. Boot blocking BBB All 31. [Reset to defaults][RTD] RTD All 32. Suspend mechanism switching (S0ix/S3) SMS All 33. [Platform hibernation and resume][HBN] HBN All 34. Sign of life SOL All 35. [Power after fail][PSF] PSF All"},{"location":"variants/novacustom_ns5x_tgl/test-matrix/#module-dasharo-security","title":"Module: Dasharo security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO Without SBO006.001, SBO007.001 and SBO008.001 5. ME disable/neuter support MNE Without MNE005.201 6. USB stack USS All 7. Network boot availability PXE All 8. BIOS lock support BLS All 9. Early boot DMA protection EDP All 10. SMM BIOS write protection SMM All 11. UEFI Setup password PSW All 12. [Wi-Fi / Bluetooth switch][WBS] WBS All 13. [Camera switch][CHS] CHS All"},{"location":"variants/novacustom_ns5x_tgl/test-matrix/#module-dasharo-performance","title":"Module: Dasharo performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot boot measure CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF All 4. Custom fan curve CFC All 5. Platform stability STB All"},{"location":"variants/novacustom_ns5x_tgl/test-matrix/#module-dasharo-stability","title":"Module: Dasharo stability","text":"No. Supported test suite Test suite ID Supported test cases 1. USB Type-A devices detection SUD All 2. M.2 Wi-fi SMW All 3. NVMe detection SNV All 4. NET interface detection NET All 5. [TPM detection][TPD] TPD TPD003.201, TPD003.202, TPD004.201, TPD004.202"},{"location":"variants/novacustom_nuc_box/hardware-matrix/","title":"Hardware Configuration Matrix","text":""},{"location":"variants/novacustom_nuc_box/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configuration used for validation of Dasharo on the NovaCustom NUC BOX-155H.</p>"},{"location":"variants/novacustom_nuc_box/hardware-matrix/#novacustom-nuc-box-155h","title":"NovaCustom NUC BOX-155H","text":"Component Description CPU Intel\u00ae Core\u2122 Ultra 7 155H (6P + 8E) RAM Slot 1: W-NM56S516G SSD Goodram PX700 1TB Flash memory Socketed WSON8 SPI (25Q256JWEQ) 1.8V USB Keyboard DELL KB216 USB pendrives 1. SanDisk Ultra  Flair USB 3.0 16 GB Display HDMI 2.1 / DP 2.1 / DP 1.4a (Quad-display capable) Ethernet controller LAN1: Intel\u00ae I226LM, LAN2: Intel\u00ae I226V (2.5GbE) Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control Sonoff Power supply 19V/120W Power Adapter"},{"location":"variants/novacustom_nuc_box/hardware-matrix/#novacustom-nuc-box-125h","title":"NovaCustom NUC BOX-125H","text":"Component Description CPU Intel\u00ae Core\u2122 Ultra Ultra 5 125H (4P+8E) RAM Slot 1: W-NM56S516G SSD Goodram PX700 1TB Flash memory Socketed WSON8 SPI (25Q256JWEQ) 1.8V USB Keyboard DELL KB216 USB pendrives 1. SanDisk Ultra  Flair USB 3.0 16 GB Display HDMI 2.1 / DP 2.1 / DP 1.4a (Quad-display capable) Ethernet controller LAN1: Intel\u00ae I226LM, LAN2: Intel\u00ae I226V (2.5GbE) Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control Sonoff Power supply 19V/120W Power Adapter"},{"location":"variants/novacustom_nuc_box/openness_score/","title":"Dasharo Openness Score","text":"<p>This page contains the Dasharo Openness Score for NovaCustom NUC BOX Dasharo releases. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/novacustom_nuc_box/openness_score/#v090","title":"v0.9.0","text":"<p>Openness Score for novacustom_nuc_box_mtl_v0.9.0.rom</p> <p>Open-source code percentage: 15.6% Closed-source code percentage: 84.4%</p> <ul> <li>Image size: 33554432 (0x2000000)</li> <li>Number of regions: 28</li> <li>Number of CBFSes: 3</li> <li>Total open-source code size: 3636140 (0x377bac)</li> <li>Total closed-source code size: 19616546 (0x12b5322)</li> <li>Total data size: 668790 (0xa3476)</li> <li>Total empty size: 9632956 (0x92fcbc)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/novacustom_nuc_box/openness_score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category SI_ME 0x4000 0x9ec000 closed-source SI_DESC 0x0 0x4000 data RECOVERY_MRC_CACHE 0x1000000 0x10000 data RW_MRC_CACHE 0x1010000 0x10000 data SMMSTORE 0x1020000 0x40000 data RW_ELOG 0x1060000 0x4000 data SHARED_DATA 0x1064000 0x2000 data VBLOCK_DEV 0x1066000 0x2000 data RW_NVRAM 0x1068000 0x6000 data CONSOLE 0x106e000 0x20000 data VBLOCK_A 0x1200000 0x2000 data RW_FWID_A 0x18fffc0 0x40 data RO_VPD 0x1900000 0x4000 data FMAP 0x1906000 0x800 data RO_FRID 0x1906800 0x40 data GBB 0x1907000 0x3000 data"},{"location":"variants/novacustom_nuc_box/openness_score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 1048576</li> <li>Number of files: 2</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 11680 (0x2da0)</li> <li>Empty size: 1036896 (0xfd260)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category logo.bmp raw 11585 LZMA data (empty) null 1036896 none empty"},{"location":"variants/novacustom_nuc_box/openness_score/#cbfs-fw_main_a","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 7331776</li> <li>Number of files: 13</li> <li>Open-source files size: 1775062 (0x1b15d6)</li> <li>Closed-source files size: 1189297 (0x1225b1)</li> <li>Data size: 9317 (0x2465)</li> <li>Empty size: 4358100 (0x427fd4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1466553 none open-source fallback/romstage stage 81368 none open-source fallback/ramstage stage 149284 LZMA open-source fallback/dsdt.aml raw 17169 none open-source fallback/postcar stage 60688 none open-source cpu_microcode_blob.bin microcode 140288 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 262577 LZ4 closed-source config raw 5804 LZMA data revision raw 858 none data build_info raw 104 none data vbt.bin raw 1724 LZ4 data (empty) null 1572 none empty"},{"location":"variants/novacustom_nuc_box/openness_score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 7299072</li> <li>Number of files: 18</li> <li>Open-source files size: 1861078 (0x1c65d6)</li> <li>Closed-source files size: 1189297 (0x1225b1)</li> <li>Data size: 10737 (0x29f1)</li> <li>Empty size: 4237960 (0x40aa88)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1466553 none open-source fallback/romstage stage 81368 none open-source fallback/ramstage stage 149284 LZMA open-source fallback/dsdt.aml raw 17169 none open-source fallback/postcar stage 60688 none open-source bootblock bootblock 86016 none open-source cpu_microcode_blob.bin microcode 140288 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 262577 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 80 none data config raw 5804 LZMA data revision raw 858 none data build_info raw 104 none data cmos_layout.bin cmos_layout 888 none data vbt.bin raw 1724 LZ4 data (empty) null 356 none empty (empty) null 4237604 none empty"},{"location":"variants/novacustom_nuc_box/releases/","title":"NovaCustom NUC BOX 14th Gen Dasharo Release Notes","text":"<p>Following Release Notes describe status of open-source firmware development for NovaCustom NUC BOX 14th Gen</p> <p>For details about our release process please read Dasharo Standard Release Process.</p> <p>         Subscribe to NovaCustom NUC BOX 14th Gen Dasharo Release Newsletter     <p></p>"},{"location":"variants/novacustom_nuc_box/releases/#v090-2025-08-27","title":"v0.9.0 - 2025-08-27","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_nuc_box/releases/#added","title":"Added","text":"<ul> <li>Support for NovaCustom NUC BOX (Meteor Lake)</li> <li>Introduce updates via UEFI capsules (from this firmware onward)</li> <li>TPM Measured Boot</li> <li>Vboot Verified Boot</li> <li>Intel ME soft disable</li> <li>Vboot recovery notification in UEFI Payload</li> <li>UEFI Secure Boot</li> <li>Firmware update mode</li> <li>BIOS boot medium write-protection</li> <li>SMM BIOS write protection</li> <li>Early Sign of Life display output</li> <li>Setup menu password configuration</li> <li>USB stack disable option in setup menu</li> <li>Network stack disable option in setup menu</li> <li>Intel ME disable option in setup menu</li> <li>Power on AC option in setup menu</li> <li>Fan profiles in setup Menu</li> <li>Quiet boot/Fast boot</li> <li>Throttling temperature adjustment in setup menu</li> </ul>"},{"location":"variants/novacustom_nuc_box/releases/#known-issues","title":"Known issues","text":"<ul> <li>S3 not supported on Windows</li> <li>Varmilo USB keyboard doesn't work in firmware menu</li> <li>Qubes OS spd5118 error in dmesg</li> <li>NUCBOX unexpected dmesg errors</li> <li>Wake by USB keyboard not working in Qubes</li> </ul>"},{"location":"variants/novacustom_nuc_box/releases/#binaries","title":"Binaries","text":"<p>novacustom_nuc_box_mtl_v0.9.0.rom sha256 sha256.sig novacustom_nuc_box_mtl_v0.9.0_dev_signed.rom sha256_dev_signed sha256.sig_dev_signed</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_nuc_box/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 25.03 revision fdea68ac</li> <li>Dasharo EDKII fork based on edk2-stable202502 revision ac25544f</li> <li>Dasharo iPXE fork based on 2025.03 revision 8b8a50a8<ul> <li>License</li> </ul> </li> <li>vboot based on f1f70f46dc revision f1f70f46<ul> <li>License</li> </ul> </li> <li>Intel Management Engine version v18.0.5.2028<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package for Meteor Lake-H version 2024/04/30 v4122_12<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor version v1.0<ul> <li>License</li> </ul> </li> <li>Intel microcode version MTL C0 0x00000020 0x25 19/03/2025<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/novacustom_nuc_box/test-matrix/","title":"Test matrix","text":""},{"location":"variants/novacustom_nuc_box/test-matrix/#about","title":"About","text":"<p>The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.</p> <p>Please refer to the tests results repository. You can preview the testing scope for upcoming releases and see the results for releases which already have been tested.</p>"},{"location":"variants/novacustom_nv4x_adl/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/novacustom_nv4x_adl/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configurations used for validation of the coreboot port on the NovaCustom NV4X laptop.</p>"},{"location":"variants/novacustom_nv4x_adl/hardware-matrix/#ports-specification","title":"Ports specification","text":""},{"location":"variants/novacustom_nv4x_adl/hardware-matrix/#right-side-view","title":"Right side view","text":"No. Description 1. Speaker 2. 2-In-1 Audio Jack (Headphone / Microphone) 3. USB 3.2 Gen 2 Type-C Port 4. USB 3.2 Gen 2 Type-A Port with Always On USB 5. HDMI-Out Port 6. Power Button 7. DC-In Jack 8. Led Indicator"},{"location":"variants/novacustom_nv4x_adl/hardware-matrix/#left-side-view","title":"Left side view","text":"No. Description 1. Security Lock Slot 2. RJ-45 LAN Jack 3. USB 3.2 Gen 2 Type-A Port 4. SD Card Reader 5. Thunderbolt 4 Port with Power Delivery (DC-IN) 6. Speaker <p>The graphics used are from pages 17-18 of the official service manual for the NV41 platforms.</p>"},{"location":"variants/novacustom_nv4x_adl/hardware-matrix/#nv41pz","title":"NV41PZ","text":"Component Description CPU Intel(R) Core(TM) i5-1240P Internal Cooling RAM Slot 1: KVR32S22S8/8 Slot 2: KVR32S22S8/8 SSD Samsung SSD 980 PRO 250 GB Flash memory Macronix MX25L25673GZ4I-08G USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card 1 Intel Wi-Fi 6 AX201 Wireless card 2 Atheros QCNFA222 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 14 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices The platform is tested with every docking station/hub listed in HCL Power Supply Chicony 19V, 4.74A, 90 W"},{"location":"variants/novacustom_nv4x_adl/hardware-matrix/#coreboot-heads","title":"coreboot + heads","text":"<p>Generally, the same hardware configuration as for the UEFI variant applies.</p> <p>A notable addition is usage of the Nitrokey 3A Mini USB device, which is required for Heads installation and usage.</p>"},{"location":"variants/novacustom_nv4x_adl/openness-score/","title":"Dasharo Openness Score","text":"<p>This page contains the Dasharo Openness Score for NovaCustom NV4XPZ Dasharo releases. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/novacustom_nv4x_adl/openness-score/#v172","title":"v1.7.2","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for novacustom_nv4x_adl_v1.7.2_full.rom</p> <p>Open-source code percentage: 35.9% Closed-source code percentage: 64.1%</p> <ul> <li>Image size: 33554432 (0x2000000)</li> <li>Number of regions: 27</li> <li>Number of CBFSes: 3</li> <li>Total open-source code size: 4587012 (0x45fe04)</li> <li>Total closed-source code size: 8198426 (0x7d191a)</li> <li>Total data size: 686385 (0xa7931)</li> <li>Total empty size: 31616945 (0x1e26fb1)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/novacustom_nv4x_adl/openness-score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category RECOVERY_MRC_CACHE 0x1000000 0x10000 data RW_MRC_CACHE 0x1010000 0x10000 data SMMSTORE 0x1020000 0x40000 data SHARED_DATA 0x1060000 0x2000 data VBLOCK_DEV 0x1062000 0x2000 data RW_NVRAM 0x1064000 0x6000 data CONSOLE 0x106a000 0x20000 data VBLOCK_A 0x118a000 0x10000 data RW_FWID_A 0x1bfffc0 0x40 data RO_VPD 0x1c00000 0x4000 data FMAP 0x1c04000 0x800 data RO_FRID 0x1c04800 0x40 data RO_FRID_PAD 0x1c04840 0x7c0 data GBB 0x1c05000 0x3000 data UNUSED 0x500000 0xb00000 empty"},{"location":"variants/novacustom_nv4x_adl/openness-score/#ifd-regions","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00001000 0x004b6fff 0x4b6000 closed-source Flash Descriptor 0x00000000 0x00000fff 0x1000 data Device Exp2 0x004b7000 0x00ffffff 0xb49000 empty"},{"location":"variants/novacustom_nv4x_adl/openness-score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 1048576</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 1048548 (0xfffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 1048548 none empty"},{"location":"variants/novacustom_nv4x_adl/openness-score/#cbfs-fw_main_a","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 10903488</li> <li>Number of files: 13</li> <li>Open-source files size: 2243746 (0x223ca2)</li> <li>Closed-source files size: 1629325 (0x18dc8d)</li> <li>Data size: 8680 (0x21e8)</li> <li>Empty size: 7021737 (0x6b24a9)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/romstage stage 95456 none open-source fallback/ramstage stage 152955 LZMA open-source fallback/dsdt.aml raw 22564 none open-source fallback/postcar stage 42408 none open-source fallback/payload simple elf 1930363 none open-source cpu_microcode_blob.bin microcode 546816 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 296077 LZ4 closed-source config raw 5418 LZMA data revision raw 856 none data build_info raw 98 none data vbt.bin raw 1290 LZMA data (empty) null 1124 none empty"},{"location":"variants/novacustom_nv4x_adl/openness-score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 4161536</li> <li>Number of files: 17</li> <li>Open-source files size: 2343266 (0x23c162)</li> <li>Closed-source files size: 1629325 (0x18dc8d)</li> <li>Data size: 9965 (0x26ed)</li> <li>Empty size: 178980 (0x2bb24)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/romstage stage 95456 none open-source fallback/ramstage stage 152955 LZMA open-source fallback/dsdt.aml raw 22564 none open-source fallback/postcar stage 42408 none open-source fallback/payload simple elf 1930363 none open-source bootblock bootblock 99520 none open-source cpu_microcode_blob.bin microcode 546816 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 296077 LZ4 closed-source cbfs_master_header cbfs header 28 none data intel_fit intel_fit 80 none data config raw 5418 LZMA data revision raw 856 none data build_info raw 98 none data vbt.bin raw 1290 LZMA data cmos_layout.bin cmos_layout 800 none data (empty) null 178980 none empty"},{"location":"variants/novacustom_nv4x_adl/releases/","title":"NovaCustom NV4x 12th Gen Dasharo Release Notes","text":"<p>Following Release Notes describe status of open-source firmware development for NovaCustom NV4x 12th Gen</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to NovaCustom NV4x 12th Gen Dasharo Release Newsletter"},{"location":"variants/novacustom_nv4x_adl/releases/#v172-2024-01-03","title":"v1.7.2 - 2024-01-03","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_nv4x_adl/releases/#added","title":"Added","text":"<ul> <li>Added Microsoft 2023 keys for UEFI Secure Boot and DBX from 2023.05.9</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases/#changed","title":"Changed","text":"<ul> <li>Changed throttling temperature to 80 degrees</li> <li>Enabled HTTPS for Dasharo Tools Suite network boot option</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases/#fixed","title":"Fixed","text":"<ul> <li>Low performance when booting on battery power only</li> <li>Regression charging via dell usb-c dock</li> <li>Video on USB-C docks sometimes fails to initialize</li> <li>USB-C chargers may be overloaded in certain scenarios</li> <li>Hybrid Power Boost mode of battery charger is not functional</li> <li>Laptop may shut down when disconnecting power supply</li> <li>Input current limits are set too high</li> <li>Keyboard backlight does not turn off immediately when going to sleep</li> <li>Power LED blinks erratically in HPB mode</li> <li>EC applying power limits may sometimes fail</li> <li>Wrong power limits are applied on AC attach / detach</li> <li>USB-PD controller may hang in glitched state on shutdown</li> <li>Yellow bangs in device manager</li> <li>Random freezes in Windows 11</li> <li>Noise caused by coil whine</li> <li>Low level interfering crackling/popping of the speakers while playing no sound</li> <li>ACPI error during boot (system76_acpi::kbd_backlight)</li> <li>Thunderbolt may not work after wakeup from sleep</li> <li>Unnecessary security warning after firmware update</li> <li>Early boot DMA protection setting in UEFI does not work correctly</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases/#known-issues","title":"Known issues","text":"<ul> <li>Poor Package C-state residency at idle after first s2idle cycle</li> <li>Some commands in dasharo_ectool fail</li> <li>Incomplete serial console output</li> <li>Some devices on dock are not detected after warmboot or reboot</li> <li>Function Lock setting is not saved after cold boot</li> <li>No ability to change active PCR banks with TPM PPI in FW</li> <li>Turning wifi/bt off inside BIOS leads to an ACPI error message while system start on Gentoo Linux</li> <li>The laptop does not automatically wake up from hibernation using rtcwake</li> <li>Power state after power failure option does not work as intended</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases/#binaries","title":"Binaries","text":"<p>novacustom_nv4x_adl_ec_v1.7.2.rom sha256 sha256.sig</p> <p>novacustom_nv4x_adl_v1.7.2_full.rom sha256 sha256.sig</p> <p>Warning</p> <p>Please use the _full binaries instead of the ones listed below. The below binaries are preserved for historical purposes.</p> <p>Full binaries above contain all necessary blobs for platform operation. The binaries below don't have them and flashing them incorrectly may result in a brick.</p> <p>novacustom_nv4x_adl_v1.7.2.rom sha256 sha256.sig</p> <p>novacustom_nv4x_adl_v1.7.2_dev_signed.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_nv4x_adl/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 4.21 revision cb6ef1b9</li> <li>Dasharo EDKII fork based on edk2-stable202002 revision b7274c98</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases/#v171-2023-11-06","title":"v1.7.1 - 2023-11-06","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_nv4x_adl/releases/#added_1","title":"Added","text":"<ul> <li>Firmware update mode</li> <li>BIOS boot medium write-protection</li> <li>SMM BIOS write protection</li> <li>Early boot DMA protection</li> <li>Early Sign of Life display output</li> <li>Current limiting for USB-PD power supplies</li> <li>Setup menu password configuration</li> <li>Wi-Fi / Bluetooth module disable option in setup menu</li> <li>Built-in webcam disable option in setup menu</li> <li>USB stack disable option in setup menu</li> <li>Network stack disable option in setup menu</li> <li>Battery threshold options in setup menu</li> <li>Block boot when battery is too low</li> <li>Power on AC option in setup menu</li> <li>Firmware display on external monitor when lid is closed</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases/#changed_1","title":"Changed","text":"<ul> <li>Rebased on coreboot release 4.21</li> <li>Removed software keyboard backlight controls for improved backlight reliability</li> <li>Disabled EC debug logging for improved security</li> <li>Set throttling temperature to 75 degrees C</li> <li>UEFI 2.8 specification compliance</li> <li>Improved battery charging logic</li> <li>Improved USB-C docking station compatibility</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases/#fixed_1","title":"Fixed","text":"<ul> <li>Low performance when booting on battery power only</li> <li>Power delivery compatibility</li> <li>Better support for USB-PD power supplies</li> <li>After changing the Intel ME mode the Reset option in the setup menu turns off the device</li> <li>Laptops randomly go into suspend mode from which they can not wake up.</li> <li>Reset to defaults with F9 causes the wrong settings to be restored</li> <li>Keyboard backlight not working after restart</li> <li>Warning sign in device manager under the touchpad device</li> <li>Popup with information about recovery mode is displayed after flashing with a valid binary</li> <li>The power LED is not always blinking while in sleep mode on Windows 11</li> <li>Internal keyboard stops working randomly in firmware</li> <li>DTS on network boot fails to boot</li> <li>Firmware Update Mode does not automatically boot into DTS</li> <li>Permanent keyboard illumination after cold boot fails: keyboard light level is not saved correctly</li> <li>Controlling keyboard illumination (brightess and on/off) does not work</li> <li>Permanent keyboard illumination not working in Ubuntu 22.04</li> <li>Controlling brightness and turning off RGB keyboard illumination does not work (Ubuntu 22.04)</li> <li>Wi-Fi card is not recognized on Windows 11</li> <li>No HDMI audio on Windows 11</li> <li>No HDMI display output on Windows 11</li> <li>No USB-C display output on Windows 11</li> <li>Keyboard backlight is disabled after suspend (Windows 11)</li> <li>Reset by F9 sets battery thresholds to 0</li> <li>The docking station is not detected after cold-boot, warm-boot and reboot</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases/#known-issues_1","title":"Known issues","text":"<ul> <li>Docking station may fail to be initialized if connected before booting and connected to multiple monitors</li> <li>Connecting and immediately disconnecting the charger, sets the battery status in OS to 'charging' for about 2 minutes</li> <li>Power state after power failure option does not work as intended</li> <li>No ability to change active PCR banks with TPM PPI in FW</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases/#binaries_1","title":"Binaries","text":"<p>novacustom_nv4x_adl_ec_v1.7.1.rom sha256 sha256.sig</p> <p>novacustom_nv4x_adl_v1.7.1.rom sha256 sha256.sig</p> <p>novacustom_nv4x_adl_v1.7.1_dev_signed.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_nv4x_adl/releases/#sbom-software-bill-of-materials_1","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 4.21 revision 36032e55</li> <li>Dasharo EDKII fork based on edk2-stable202002 revision b68e46b0</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases/#v170-non-public-engineering-release","title":"v1.7.0 - Non-public engineering release","text":""},{"location":"variants/novacustom_nv4x_adl/releases/#v160-2023-04-19","title":"v1.6.0 - 2023-04-19","text":""},{"location":"variants/novacustom_nv4x_adl/releases/#added_2","title":"Added","text":"<ul> <li>Intel Management Engine Disable</li> <li>The same keyboard illumination setting is restored after suspend or poweroff</li> <li>One of the two fan profiles can now be selected in Setup Menu</li> <li>Fn lock hotkey feature</li> <li>Setup menu option for switching between S0ix and S3 suspend mode</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases/#changed_2","title":"Changed","text":"<ul> <li>Keys must be provisioned prior enabling Secure Boot</li> <li>The function keys responsible for entering the setup and boot menu in BIOS   have been changed from ESC/F12 to F2/F7</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases/#fixed_2","title":"Fixed","text":"<ul> <li>The power LED is not always blinking while in sleep mode on Ubuntu 22.04 (#260)</li> <li>Suspend mode not working under Qubes OS 4.1 (#266)</li> <li>Docking station under Qubes OS (#267)</li> <li>The Auto Boot time-out value is not respected (#292)</li> <li>ACPI boot errors during booting Ubuntu 22.04 (#293)</li> <li>Windows update KB5012170 cannot be installed (#294)</li> <li>Internal keyboard sometimes does not work in firmware (#295)</li> <li>Laptop hangs up after 20 cycles of the suspend procedure (#305)</li> <li>Keyboard backlight not working after restart (#349)</li> <li>Function key display on/off does not completely blank the screen (#354)</li> <li>Connecting the RJ45 cable to the Gigabit Ethernet port on the docking station does not result in obtaining an Internet connection (#356)</li> <li>Unable to wake up from suspend (#362)</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases/#known-issues_2","title":"Known issues","text":"<ul> <li>The power LED is not always blinking while in sleep mode on Windows 11 (#182)</li> <li>Popup with information about recovery mode is displayed after flashing with a valid binary (#269)</li> <li>Missing information about cache (#343)</li> <li>Connecting and immediately disconnecting the charger, sets the battery status in OS to charging for about 2 minutes (#350)</li> <li>Reset to defaults with F9 causes the wrong settings to be restored (#355)</li> <li>Unwanted reset of BIOS settings (#365)</li> <li>Laptop not suspending while connected to a USB-C docking station (#368)</li> <li>The docking station is not detected after cold-boot and warm-boot (#404)</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases/#binaries_2","title":"Binaries","text":"<p>novacustom_nv4x_adl_ec_v1.6.0.rom sha256 sha256.sig</p> <p>novacustom_nv4x_adl_v1.6.0.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_nv4x_adl/releases/#sbom-software-bill-of-materials_2","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 1a8eb6c02103727431ac1ea23f4f507e49f3cde7 revision a3056ac5</li> <li>Dasharo EDKII fork based on e0334c228ce4ba51f47ff79a118f214031d4650f revision bd421b40</li> <li>Intel ME version 16.1.25.1865</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases/#v150-non-public-engineering-release","title":"v1.5.0 - Non-public engineering release","text":""},{"location":"variants/novacustom_nv4x_adl/releases/#v140-2022-12-13","title":"v1.4.0 - 2022-12-13","text":""},{"location":"variants/novacustom_nv4x_adl/releases/#added_3","title":"Added","text":"<ul> <li>Support for NovaCustom NV4x 12th Gen</li> <li>UEFI Boot Support</li> <li>Configurable boot order</li> <li>Configurable boot options</li> <li>UEFI Secure Boot support</li> <li>NovaCustom boot logo</li> <li>Vboot Verified Boot</li> <li>Vboot Recovery Popup</li> <li>Fullscreen setup menu</li> <li>Open-source Embedded Controller Firmware</li> <li>The external headset connected to the jack slot works properly</li> <li>ISO keyboard works with non-US layouts NV4xMx</li> <li>Sleep working consistently</li> <li>The connected RJ45 cable to the Ethernet socket working properly in Windows 11</li> <li>Functional touchpad ON/OFF switch Fn key</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases/#known-issues_3","title":"Known issues","text":"<ul> <li>Popup with information about recovery mode is displayed after flashing with a valid binary</li> <li>The power LED is not blinking during sleep mode when the docking station is connected on Windows 11</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases/#binaries_3","title":"Binaries","text":"<p>novacustom_nv4x_adl_ec_v1.4.0.rom sha256 sha256.sig</p> <p>novacustom_nv4x_adl_v1.4.0.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_nv4x_adl/releases/#sbom-software-bill-of-materials_3","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 1a8eb6c02103727431ac1ea23f4f507e49f3cde7 revision cd975d74</li> <li>Dasharo EDKII fork based on e0334c228ce4ba51f47ff79a118f214031d4650f revision abfdef40</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases_heads/","title":"NovaCustom NV4x 12th Gen Dasharo (coreboot + heads) Release Notes","text":"<p>This is a Dasharo Pro Package Release. To access the pre-built binaries, you need to subscribe to the Dasharo Pro Package subscriber. You can do this by purchasing a Dasharo Pro Package product from our shop.</p> <p>As a subscriber, you will receive access to all firmware updates for the duration of your subscription via the Dasharo Pro Package newsletter, and gain entry to the Dasharo Premier Support invite-only live chat on the Matrix network, enabling direct engagement with the Dasharo Team and fellow subscribers for personalized, priority assistance.</p> <p>Following Release Notes describe status of development of Dasharo (coreboot + Heads) firmware for NovaCustom NV4x 12th Gen.</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to NovaCustom NV4x 12th Gen Dasharo Release Newsletter"},{"location":"variants/novacustom_nv4x_adl/releases_heads/#v092-2025-06-12","title":"v0.9.2 - 2025-06-12","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_nv4x_adl/releases_heads/#added","title":"Added","text":"<ul> <li>Introduced Quiet Mode for reduced technical output in logs</li> <li>Added TPM extend operations logging while maintaining quiet mode</li> <li>Added support for GPG Admin/User PIN output grabbing for Nitrokey HOTP verification</li> <li>Integrated EFF Diceware short wordlist v2 for easier passphrase generation</li> <li>Introduced automatic Secrets App reset logic for Nitrokey 3</li> <li>Unified and enhanced passphrase generation logic in recovery shell</li> <li>Quiet Mode now logs all technical details to /tmp/debug.log instead of   showing them in the console</li> <li>Improved TPM2 primary handle debugging and error handling</li> <li>Refactored the OEM Factory Reset process to clarify mode-based security implications</li> <li>Improved kexec boot configuration handling with enhanced security warnings</li> <li>Transitioned from <code>ash</code> shell to <code>bash</code> for improved scripting consistency</li> <li>Suppressed unnecessary grep errors for missing <code>/etc/config.user</code></li> <li>Resolved logging inconsistencies when performing TPM resets</li> <li>Fixed Secure App PIN handling during Nitrokey 3 re-ownership</li> <li>Corrected Diceware dictionary parsing and selection method for unbiased   passphrase generation</li> <li>Eliminated redundant USB Security dongle detection messages</li> <li>Add missing TPM PIRQ route for NV41</li> <li>Integrate downcoring and hyper-threading options in Alder Lake SoC</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases_heads/#fixed","title":"Fixed","text":"<ul> <li>Power button doesn't work in Qubes</li> <li>Reproducibility problems with libcrypto and libtss2</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases_heads/#known-issues","title":"Known issues","text":"<ul> <li>Hotkeys (e.g KEY_PLAYPAUSE) are not implemented in Qubes OS</li> <li>Existing Qubes installation is not found as bootable after transition back to EDK2</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases_heads/#binaries","title":"Binaries","text":"<p>sha256 sha256.sig</p> <p>This is a Dasharo Pro Package Release. To obtain access to the pre-built binaries you will have to become the Dasharo Pro Package subscriber. You will get the access to all of the firmware updates for the duration of the subscription via Dasharo Pro Package newsletter.</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_nv4x_adl/releases_heads/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo heads fork based on v0.2.1 revision da9b8ed9<ul> <li>License</li> </ul> </li> <li>Intel Management Engine version v16.1.30.2307<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor version v1.0<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package version ADL-P C.1.75.10<ul> <li>License</li> </ul> </li> <li>Intel microcode version ADL L0/R0 0x00000433<ul> <li>License</li> </ul> </li> <li>Intel microcode version RPL J0/Q0 0x00004121<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases_heads/#v091-2024-06-27","title":"v0.9.1 - 2024-06-27","text":"<p>Test results for this release can be found here .</p>"},{"location":"variants/novacustom_nv4x_adl/releases_heads/#fixed_1","title":"Fixed","text":"<ul> <li>NK3 not detected/discovered at OEM Factory Reset/Re-Ownership</li> <li>NK3 v1.7.1 firmware update compatibility</li> <li>Heads shuts down instead of rebooting</li> <li>Laptop boots when plugging in the power adapter</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases_heads/#known-issues_1","title":"Known issues","text":"<ul> <li>Power button does not work in Qubes</li> <li>Existing Qubes installation is not found as bootable after transition back to EDK2</li> <li>Builds are not fully reproducible</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases_heads/#binaries_1","title":"Binaries","text":"<p>sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_nv4x_adl/releases_heads/#sbom-software-bill-of-materials_1","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo heads fork based on v0.2.0 revision 0fb3886f</li> <li>Dasharo coreboot fork based on 4.21 revision 3a9aa3a4</li> <li>Intel Management Engine based on v16.1.30.2307 revision d0b63476</li> <li>Intel Flash Descriptor based on v1.0 revision d0b63476</li> <li>Intel Firmware Support Package based on ADL-P C.1.75.10 revision 481ea7cf</li> <li>Intel microcode based on ADL L0/R0 0x0000042c revision microcode-20230808</li> <li>Intel microcode based on RPL J0/Q0 0x00004119 revision microcode-20230808</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases_heads/#v090-2024-02-29","title":"v0.9.0 - 2024-02-29","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_nv4x_adl/releases_heads/#added_1","title":"Added","text":"<ul> <li>Support for NovaCustom NV4x 12th Gen</li> <li>Open-source Embedded Controller Firmware</li> <li>The external headset connected to the jack slot works properly</li> <li>ISO keyboard works with non-US layouts NV4xMx</li> <li>Sleep working consistently</li> <li>Functional touchpad ON/OFF switch Fn key</li> <li>This is a Dasharo Pro Package release</li> <li>Heads Linux is used as a payload</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases_heads/#known-issues_2","title":"Known issues","text":"<ul> <li>Power button does not work in Qubes</li> <li>Heads shuts down instead of rebooting</li> <li>Existing Qubes installation is not found as bootable after transition back to EDK2</li> <li>Builds are not fully reproducible</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/releases_heads/#binaries_2","title":"Binaries","text":"<p>sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_nv4x_adl/releases_heads/#sbom-software-bill-of-materials_2","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo heads fork based on v0.2.0 revision ccf49703</li> <li>Dasharo coreboot fork based on 4.21 revision 3a9aa3a4</li> <li>Intel Management Engine based on v16.1.30.2307 revision d0b63476</li> <li>Intel Flash Descriptor based on v1.0 revision d0b63476</li> <li>Intel Firmware Support Package based on ADL-P C.1.75.10 revision 481ea7cf</li> <li>Intel microcode based on ADL L0/R0 0x0000042c revision microcode-20230808</li> <li>Intel microcode based on RPL J0/Q0 0x00004119 revision microcode-20230808</li> </ul>"},{"location":"variants/novacustom_nv4x_adl/test-matrix/","title":"Test matrix","text":""},{"location":"variants/novacustom_nv4x_adl/test-matrix/#about","title":"About","text":"<p>The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.</p>"},{"location":"variants/novacustom_nv4x_adl/test-matrix/#module-dasharo-compatibility","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports and LCD support DSP DSP001.001, DSP001.201, DSP001.202, DSP001.301, DSP002.201, DSP002.202, DSP002.301 4. Embedded Controller and Super I/O initialization ECR ECR021.201, ECR021.202, ECR021.301, ECR022.201, ECR022.202, ECR022.301, ECR023.201, ECR023.202, ECR023.301, ECR024.201, ECR024.202, ECR024.301 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot keys CBK All 8. USB HID and MSC Support USB All 9. Debian Stable and Ubuntu LTS support LBT LBT004.001, LBT004.002 10. UEFI Shell USH All 11. Windows booting WBT WBT001.001 12. Audio subsystem AUD All 13. USB-C support UTC All 14. Network boot PXE Without PXE007.001 15. M.2 WiFi/Bluetooth WLE All - NOTE: Needs to be carried out for both the default network card and the Atheros QCNFA222. 16. SD card support SDC All 17. USB Camera verification CAM All 18. Fan speed measure FAN FAN001.001 19. SMBIOS DMI Without DMI001.201 20. Firmware update using fwupd FFW All 21. Dasharo Tools Suite DTS DTS006.001, DTS007.001 22. CPU status CPU All 23. Embedded controller flashing ECF All 24. Logo customization functionality LCM LCM001.001 25. Firmware locally building and flashing FLB All 26. Custom Boot Order CBO CBO001.002 27. QubesOS support QBS All 28. Fedora support FED All 29. Platform suspend and resume SUSP Without SUSP004 and SUSP006 30. Boot blocking BBB All 31. [Reset to defaults][RTD] RTD All 32. Suspend mechanism switching (S0ix/S3) SMS All 33. [Platform hibernation and resume][HBN] HBN All 34. Sign of life SOL All 35. [Power after fail][PSF] PSF All"},{"location":"variants/novacustom_nv4x_adl/test-matrix/#module-dasharo-security","title":"Module: Dasharo security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO Without SBO006.001, SBO007.001 and SBO008.001 5. ME disable/neuter support MNE Without MNE005.201 6. USB stack USS All 7. Network boot availability PXE All 8. BIOS lock support BLS All 9. Early boot DMA protection EDP All 10. SMM BIOS write protection SMM All 11. UEFI Setup password PSW All 12. [Wi-Fi / Bluetooth switch][WBS] WBS All 13. [Camera switch][CHS] CHS All"},{"location":"variants/novacustom_nv4x_adl/test-matrix/#module-dasharo-performance","title":"Module: Dasharo performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot boot measure CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF All 4. Custom fan curve CFC All 5. Platform stability STB All"},{"location":"variants/novacustom_nv4x_adl/test-matrix/#module-dasharo-stability","title":"Module: Dasharo stability","text":"No. Supported test suite Test suite ID Supported test cases 1. USB Type-A devices detection SUD All 2. M.2 Wi-fi SMW All 3. NVMe detection SNV All 4. NET interface detection NET All 5. [TPM detection][TPD] TPD TPD003.201, TPD003.202, TPD004.201, TPD004.202"},{"location":"variants/novacustom_nv4x_adl/test-matrix/#coreboot-heads","title":"coreboot + heads","text":"<p>Please refer to the tests results spreadsheet.</p>"},{"location":"variants/novacustom_nv4x_tgl/compatibility-check-results-ubuntu/","title":"Checkbox logs comparison","text":""},{"location":"variants/novacustom_nv4x_tgl/compatibility-check-results-ubuntu/#introduction","title":"Introduction","text":"<p>Checkbox is a flexible test automation software. It\u2019s the main tool used in Ubuntu Certification program.</p> <p>You can use this software without any modification to check if your system is behaving correctly or you can develop your own set of tests to check your needs.</p> <p>Checkbox optionally generates test reports in different formats (JSON, HTML, etc.) that can be used to easily share the results of a test session.</p>"},{"location":"variants/novacustom_nv4x_tgl/compatibility-check-results-ubuntu/#checkbox-comparison-vendor-firmware-vs-dasharo","title":"Checkbox comparison - vendor firmware vs Dasharo","text":""},{"location":"variants/novacustom_nv4x_tgl/compatibility-check-results-ubuntu/#testing-assumptions","title":"Testing assumptions","text":"<ol> <li>Tests have been conducted on the same OS version (Ubuntu 22.04 LTS).</li> <li>Tests have been conducted on the same device, firstly with vendor firmware and secondly with Dasharo firmware (version 1.2.1).</li> </ol>"},{"location":"variants/novacustom_nv4x_tgl/compatibility-check-results-ubuntu/#test-results","title":"Test results","text":"<ol> <li>Test results - vendor firmware:<ul> <li>PASSED: 74,</li> <li>FAILED: 80,</li> <li>NOT SUPPORTED: 25.</li> </ul> </li> <li>Test results - Dasharo firmware:<ul> <li>PASSED: 74,</li> <li>FAILED: 80,</li> <li>NOT SUPPORTED: 25.</li> </ul> </li> </ol>"},{"location":"variants/novacustom_nv4x_tgl/compatibility-check-results-ubuntu/#fails-comparison","title":"Fails comparison","text":"<p>The following table collects information about all errors detected by the certification program. In the second column test case name is described and in the third and fourth columns, the information about bug appearance on vendor/Dasharo firmware is shown.</p> No. Test case name Dasharo firmware Vendor firmware 1 graphics/1_driver_version_TigerLake-LP_GT2__Iris_Xe_Graphics_ YES YES 2 graphics/1_driver_version_TigerLake-LP_GT2__Iris_Xe_Graphics_ YES YES 3 bluetooth4/beacon_eddystone_url_hci0 YES YES 4 mediacard/storage-preinserted-disk/by-uuid/0868-01F6 YES YES 5 mediacard/storage-preinserted-disk/by-uuid/2adea2a3-f163-4d14-b6f3-b8d628611e23 YES YES 6 mediacard/storage-preinserted-disk/by-uuid/2d67f8a9-7f79-4419-b1d3-e096ca010512 YES YES 7 mediacard/storage-preinserted-disk/by-uuid/3bb6b676-1c4d-4ffb-8ede-e68f513fcdf1 YES YES 8 wireless/wireless_connection_open_ac_nm_wlp55s0 YES YES 9 wireless/wireless_connection_open_ax_nm_wlp55s0 YES YES 10 wireless/wireless_connection_open_bg_nm_wlp55s0 YES YES 11 wireless/wireless_connection_open_n_nm_wlp55s0 YES YES 12 wireless/wireless_connection_wpa_ac_nm_wlp55s0 YES YES 13 wireless/wireless_connection_wpa_ax_nm_wlp55s0 YES YES 14 wireless/wireless_connection_wpa_bg_nm_wlp55s0 YES YES 15 wireless/wireless_connection_wpa_n_nm_wlp55s0 YES YES 16 tpm2.0_4.1.1/tpm2_import YES YES 17 tpm2.0_4.1.1/tpm2_clockrateadjust YES YES 18 tpm2.0_4.1.1/tpm2_loadexternal YES YES 19 tpm2.0_4.1.1/tpm2_rsadecrypt YES YES 20 tpm2.0_4.1.1/tpm2_activecredential YES YES 21 tpm2.0_4.1.1/tpm2_attestation YES YES 22 tpm2.0_4.1.1/tpm2_certify YES YES 23 tpm2.0_4.1.1/tpm2_certifycreation YES YES 24 tpm2.0_4.1.1/tpm2_changeauth YES YES 25 tpm2.0_4.1.1/tpm2_checkquote YES YES 26 tpm2.0_4.1.1/tpm2_clear YES YES 27 tpm2.0_4.1.1/tpm2_create YES YES 28 tpm2.0_4.1.1/tpm2_createak YES YES 29 tpm2.0_4.1.1/tpm2_createek YES YES 30 tpm2.0_4.1.1/tpm2_createpolicy YES YES 31 tpm2.0_4.1.1/tpm2_createprimary YES YES 32 tpm2.0_4.1.1/tpm2_dictionarylockout YES YES 33 tpm2.0_4.1.1/tpm2_duplicate YES YES 34 tpm2.0_4.1.1/tpm2_evictcontrol YES YES 35 tpm2.0_4.1.1/tpm2_flushcontext YES YES 36 tpm2.0_4.1.1/tpm2_getcap YES YES 37 tpm2.0_4.1.1/tpm2_getekcertificate YES YES 38 tpm2.0_4.1.1/tpm2_getrandom YES YES 39 tpm2.0_4.1.1/tpm2_gettestresult YES YES 40 tpm2.0_4.1.1/tpm2_gettime YES YES 41 tpm2.0_4.1.1/tpm2_hash YES YES 42 tpm2.0_4.1.1/tpm2_hmac YES YES 43 tpm2.0_4.1.1/tpm2_import_tpm YES YES 44 tpm2.0_4.1.1/tpm2_incrementalselftest YES YES 45 tpm2.0_4.1.1/tpm2_load YES YES 46 tpm2.0_4.1.1/tpm2_makecredential YES YES 47 tpm2.0_4.1.1/tpm2_nv YES YES 48 tpm2.0_4.1.1/tpm2_nvcertify YES YES 49 tpm2.0_4.1.1/tpm2_nvinc YES YES 50 tpm2.0_4.1.1/tpm2_output_formats YES YES 51 tpm2.0_4.1.1/tpm2_pcrevent YES YES 52 tpm2.0_4.1.1/tpm2_pcrextend YES YES 53 tpm2.0_4.1.1/tpm2_pcrlist YES YES 54 tpm2.0_4.1.1/tpm2_pcrreset YES YES 55 tpm2.0_4.1.1/tpm2_print YES YES 56 tpm2.0_4.1.1/tpm2_quote YES YES 57 tpm2.0_4.1.1/tpm2_readclock YES YES 58 tpm2.0_4.1.1/tpm2_readpublic YES YES 59 tpm2.0_4.1.1/tpm2_rsaencrypt YES YES 60 tpm2.0_4.1.1/tpm2_selftest YES YES 61 tpm2.0_4.1.1/tpm2_send YES YES 62 tpm2.0_4.1.1/tpm2_setclock YES YES 63 tpm2.0_4.1.1/tpm2_setprimarypolicy YES YES 64 tpm2.0_4.1.1/tpm2_sign YES YES 65 tpm2.0_4.1.1/tpm2_startup YES YES 66 tpm2.0_4.1.1/tpm2_stirrandom YES YES 67 tpm2.0_4.1.1/tpm2_testparms YES YES 68 tpm2.0_4.1.1/tpm2_unseal YES YES 69 tpm2.0_4.1.1/tpm2_verifysignature YES YES 70 audio/detect_sinks_sources YES YES 71 suspend/1_driver_version_after_suspend_TigerLake-LP_GT2__Iris_Xe_Graphics__auto YES YES 72 suspend/2_driver_version_after_suspend_TU117M_auto YES YES 73 suspend/audio_before_suspend YES YES 74 suspend/bluetooth_obex_send_after_suspend_auto YES YES 75 suspend/bluetooth_obex_send_before_suspend YES YES 76 usb/storage-preinserted-disk/by-uuid/0868-01F6 YES YES 77 usb/storage-preinserted-disk/by-uuid/2adea2a3-f163-4d14-b6f3-b8d628611e23 YES YES 78 usb/storage-preinserted-disk/by-uuid/2d67f8a9-7f79-4419-b1d3-e096ca010512 YES YES 79 usb/storage-preinserted-disk/by-uuid/3bb6b676-1c4d-4ffb-8ede-e68f513fcdf1 YES YES 80 usb/storage-preinserted-disk/by-uuid/452E-652F YES YES"},{"location":"variants/novacustom_nv4x_tgl/compatibility-check-results-ubuntu/#logs-from-tests","title":"Logs from tests","text":"<p>Logs are available under this link.</p>"},{"location":"variants/novacustom_nv4x_tgl/compatibility-check-results-ubuntu/#summary","title":"Summary","text":"<p>Test results are the same for vendor and dasharo firmware, with no differences.</p>"},{"location":"variants/novacustom_nv4x_tgl/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/novacustom_nv4x_tgl/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configurations used for validation of the coreboot port on the NovaCustom NV4X laptop.</p>"},{"location":"variants/novacustom_nv4x_tgl/hardware-matrix/#ports-specification","title":"Ports specification","text":""},{"location":"variants/novacustom_nv4x_tgl/hardware-matrix/#right-side-view","title":"Right side view","text":"No. Description 1. Speaker 2. 2-In-1 Audio Jack (Headphone / Microphone) 3. USB 3.2 Gen 2 Type-C Port 4. USB 3.2 Gen 2 Type-A Port with Always On USB 5. HDMI-Out Port 6. Power Button 7. DC-In Jack 8. Led Indicator"},{"location":"variants/novacustom_nv4x_tgl/hardware-matrix/#left-side-view","title":"Left side view","text":"No. Description 1. Security Lock Slot 2. RJ-45 LAN Jack 3. USB 3.2 Gen 2 Type-A Port 4. SD Card Reader 5. Thunderbolt 4 Port with Power Delivery (DC-IN) 6. Speaker <p>The graphics used are from pages 17-18 of the official service manual for the NV41 platforms.</p>"},{"location":"variants/novacustom_nv4x_tgl/hardware-matrix/#nv41mz","title":"NV41MZ","text":"Component Description CPU Intel(R) Core(TM) i7-1165G7 Internal Cooling RAM Slot 1: KVR29S21S6/8 Slot 2: KVR29S21S6/8 SSD Samsung 980 PRO NVMe 500 GB Flash memory GigaDevice 25B127DSIG 16 MB USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card 1 Intel Wi-Fi 6 AX201 Wireless card 2 Atheros QCNFA222 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 14 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices The platform is tested with every docking station/hub listed in HCL Power Supply Chicony 19V, 3.42A, 65 W"},{"location":"variants/novacustom_nv4x_tgl/hardware-matrix/#nv41mb","title":"NV41MB","text":"Component Description CPU Intel(R) Core(TM) i7-1165G7 Internal Cooling GPU NVIDIA GeForce GTX1650 4 GB RAM Slot 1: KVR29S21D8/32 Slot 2: KVR29S21D8/32 SSD Samsung 980 PRO NVMe 250 GB Flash memory GigaDevice 25B127DSIG 16 MB USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card Intel Wi-Fi 6 AX201 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 14 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices The platform is tested with every docking station/hub listed in HCL Power Supply Chicony 19V, 4.74A, 90 W"},{"location":"variants/novacustom_nv4x_tgl/lvfs_report/","title":"NovaCustom fwupd/LVFS support service","text":""},{"location":"variants/novacustom_nv4x_tgl/lvfs_report/#introduction","title":"Introduction","text":"<p>This document contains the report of the discovery of the most appropriate fwupd/LVFS firmware update method, including potential risks and roadblocks.</p>"},{"location":"variants/novacustom_nv4x_tgl/lvfs_report/#device-specification","title":"Device specification","text":"<p>NovaCustom NV4x system firmware</p> <ul> <li>Intel i7-1165G7 (Tiger Lake ULV platform)</li> <li>Samsung 980PRO NVMe SSD</li> <li>2x SO-DIMM DDR4 system memory</li> <li>Optional NVIDIA discrete graphics</li> <li>Dasharo coreboot-based firmware</li> <li>Firmware stored on a SPI flash chip, flashable internally via flashrom</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/lvfs_report/#update-protocol","title":"Update protocol","text":"<ul> <li>The device is flashable internally via flashrom</li> <li>No special unlocks necessary for flashing the required BIOS flash portions   (only requirement is that UEFI Secure Boot is disabled while updating)</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/lvfs_report/#feasibility-analysis","title":"Feasibility analysis","text":"<ul> <li>Tiger Lake-U is supported in flashrom<ul> <li>Present since this commit,   not yet released to stable as of 14.01.2022</li> </ul> </li> <li>flashrom is supported in fwupd<ul> <li>flashrom plugin is enabled by default in many common desktop Linux   distributions, including Ubuntu (starting with 21.10) and Arch Linux</li> <li>enabling a device in the flashrom plugin is a matter of adding   device-specific entries to the plugin quirk list</li> </ul> </li> <li>Potential risk: vboot support in fwupd<ul> <li>flashrom supports flashing vboot rw slots, which are coreboot images   located within the BIOS partition of the flash</li> <li>however, fwupd only implements flashing the entire BIOS region of the SPI   flash, which includes other firmware components such as vboot keys,   vboot recovery partition and user settings</li> <li>the device currently has vboot partially implemented - the BIOS flash   is not protected and the binaries are signed with (public) developer keys</li> <li>this means we can currently update the BIOS using the traditional fwupd   update path</li> <li>once we decide to change the vboot keys and lock down the rest of the,   flash, proper vboot support will need to be implemented in fwupd</li> <li>until then, it will not be possible to enable vboot fully</li> </ul> </li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/lvfs_report/#further-steps-vboot-support","title":"Further steps: Vboot support","text":"<ul> <li>In case full vboot support in fwupd is desired, the following are currently   missing and need to be implemented:<ul> <li>Support reading and processing VBNV (Vboot non-volatile store) data in   fwupd:<ul> <li>this store contains information about the current vboot state,   e.g. currently booted slot (A/B/Recovery), recovery reason, firmware   signature verification status. This information is stored in CMOS, but   the exact offset varies by device - so a method for determining the offset   is also required.</li> <li>For Google Chromebooks, this offset is exposed in a Chromebook-specific   ACPI device which we cannot use in non-Chromebook device. An alternative   interface or possibly a quirk in fwupd's flashrom plugin will need to be   added (though this approach is not preferred by fwupd maintainers).</li> </ul> </li> <li>Support for flashing fmap regions in fwupd's flashrom plugin:<ul> <li>currently,   fwupd only attempts to read flash layout from the Intel Flash Descriptor   located in the flash. This only allows fwupd to flash the entire BIOS   region, while vboot requires only a portion of the BIOS partition to be   updated at a given time, with some of the BIOS partition being read-only.   This means that with vboot fully enabled, updating will fail by attempting   to write to a read-only portion of the flash.</li> <li>Vboot partitions (slots) are a subset of the bios partition and are defined   in FMAP (flashmap). Support for it will need to be implemented in fwupd   (possible by utilizing libflashrom).   Additionally, some user settings like boot order and setup options are   stored in a separate FMAP region, so implementing FMAP support in fwupd   will allow us to preserve them across firmware updates.</li> </ul> </li> <li>Vboot A/B slot support<ul> <li>In Google Chromebooks, the firmware updater   only updates one slot at a time and if it succeeds (the device reboots   into it successfully and works stably), then it will also update the other   slot to the same (now confirmed good) firmware. fwupd does not currently   support anything like this, so support for it will also need to be   implemented.</li> </ul> </li> <li>Prior work:<ul> <li>fwupd #1370</li> <li>fwupd #1481</li> <li>LKML thread</li> </ul> </li> </ul> </li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/openness-score/","title":"Dasharo Openness Score","text":"<p>This page contains the Dasharo Openness Score for NovaCustom NV4x 11th Gen Dasharo releases. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/novacustom_nv4x_tgl/openness-score/#v152","title":"v1.5.2","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for novacustom_nv4x_tgl_v1.5.2.rom</p> <p>Open-source code percentage: 37.7% Closed-source code percentage: 62.3%</p> <ul> <li>Image size: 16777216 (0x1000000)</li> <li>Number of regions: 26</li> <li>Number of CBFSes: 3</li> <li>Total open-source code size: 4538722 (0x454162)</li> <li>Total closed-source code size: 7509228 (0x7294ec)</li> <li>Total data size: 628540 (0x9973c)</li> <li>Total empty size: 4100726 (0x3e9276)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/novacustom_nv4x_tgl/openness-score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category SI_ME 0x1000 0x4ff000 closed-source SI_DESC 0x0 0x1000 data RECOVERY_MRC_CACHE 0x500000 0x10000 data RW_MRC_CACHE 0x510000 0x10000 data SMMSTORE 0x520000 0x40000 data SHARED_DATA 0x560000 0x2000 data VBLOCK_DEV 0x562000 0x2000 data RW_NVRAM 0x564000 0x6000 data CONSOLE 0x56a000 0x20000 data VBLOCK_A 0x68a000 0x2000 data RW_FWID_A 0xbfffc0 0x40 data RO_VPD 0xc00000 0x4000 data FMAP 0xc04000 0x800 data RO_FRID 0xc04800 0x40 data RO_FRID_PAD 0xc04840 0x7c0 data GBB 0xc05000 0x3000 data"},{"location":"variants/novacustom_nv4x_tgl/openness-score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 1048576</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 1048548 (0xfffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 1048548 none empty"},{"location":"variants/novacustom_nv4x_tgl/openness-score/#cbfs-fw_main_a","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 5717952</li> <li>Number of files: 13</li> <li>Open-source files size: 2223121 (0x21ec11)</li> <li>Closed-source files size: 1135222 (0x115276)</li> <li>Data size: 8395 (0x20cb)</li> <li>Empty size: 2351214 (0x23e06e)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/romstage stage 88200 none open-source fallback/ramstage stage 141474 LZMA open-source fallback/dsdt.aml raw 22277 none open-source fallback/postcar stage 40492 none open-source fallback/payload simple elf 1930678 none open-source cpu_microcode_blob.bin microcode 207872 none closed-source fspm.bin fsp 651264 none closed-source fsps.bin fsp 276086 LZ4 closed-source config raw 5155 LZMA data revision raw 856 none data build_info raw 98 none data vbt.bin raw 1308 LZMA data (empty) null 292 none empty"},{"location":"variants/novacustom_nv4x_tgl/openness-score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 4161536</li> <li>Number of files: 18</li> <li>Open-source files size: 2315601 (0x235551)</li> <li>Closed-source files size: 1135222 (0x115276)</li> <li>Data size: 9749 (0x2615)</li> <li>Empty size: 700964 (0xab224)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/romstage stage 88200 none open-source fallback/ramstage stage 141474 LZMA open-source fallback/dsdt.aml raw 22277 none open-source fallback/postcar stage 40492 none open-source fallback/payload simple elf 1930678 none open-source bootblock bootblock 92480 none open-source cpu_microcode_blob.bin microcode 207872 none closed-source fspm.bin fsp 651264 none closed-source fsps.bin fsp 276086 LZ4 closed-source cbfs_master_header cbfs header 28 none data intel_fit intel_fit 80 none data config raw 5155 LZMA data revision raw 856 none data build_info raw 98 none data etc/ps2-keyboard-spinup raw 8 none data vbt.bin raw 1308 LZMA data cmos_layout.bin cmos_layout 852 none data (empty) null 700964 none empty"},{"location":"variants/novacustom_nv4x_tgl/releases/","title":"NovaCustom NV4x 11th Gen Dasharo Release Notes","text":"<p>Following Release Notes describe status of open-source firmware development for NovaCustom NV4x 11th Gen</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to NovaCustom NV4x 11th Gen Dasharo Release Newsletter"},{"location":"variants/novacustom_nv4x_tgl/releases/#v152-2024-01-11","title":"v1.5.2 - 2024-01-11","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_nv4x_tgl/releases/#added","title":"Added","text":"<ul> <li>Added Microsoft 2023 keys for UEFI Secure Boot and DBX from 2023.05.9</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#changed","title":"Changed","text":"<ul> <li>Changed throttling temperature to 80 degrees</li> <li>Enabled HTTPS for Dasharo Tools Suite network boot option</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#fixed","title":"Fixed","text":"<ul> <li>Low performance when booting on battery power only</li> <li>Regression charging via dell usb-c dock</li> <li>Video on USB-C docks sometimes fails to initialize</li> <li>USB-C chargers may be overloaded in certain scenarios</li> <li>Hybrid Power Boost mode of battery charger is not functional</li> <li>Laptop may shut down when disconnecting power supply</li> <li>Input current limits are set too high</li> <li>Keyboard backlight does not turn off immediately when going to sleep</li> <li>Power LED blinks erratically in HPB mode</li> <li>EC applying power limits may sometimes fail</li> <li>Wrong power limits are applied on AC attach / detach</li> <li>USB-PD controller may hang in glitched state on shutdown</li> <li>Yellow bangs in device manager</li> <li>Random freezes in Windows 11</li> <li>Low level interfering crackling/popping of the speakers while playing no sound</li> <li>ACPI error during boot (system76_acpi::kbd_backlight)</li> <li>Thunderbolt may not work after wakeup from sleep</li> <li>Unnecessary security warning after firmware update</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#known-issues","title":"Known issues","text":"<ul> <li>Poor Package C-state residency at idle after first s2idle cycle</li> <li>Some commands in dasharo_ectool fail</li> <li>Incomplete serial console output</li> <li>Some devices on dock are not detected after warmboot or reboot</li> <li>Function Lock setting is not saved after cold boot</li> <li>No ability to change active PCR banks with TPM PPI in FW</li> <li>Turning wifi/bt off inside BIOS leads to an ACPI error message while system start on Gentoo Linux</li> <li>The laptop does not automatically wake up from hibernation using rtcwake</li> <li>Power state after power failure option does not work as intended</li> <li>OS fails to resume from S3 on some board revisions</li> <li>Windows 11 fails to resume from hibernation</li> <li>No HDMI output in firmware</li> <li>Connecting and immediately disconnecting the charger, sets the battery status in OS to \"charging\" for about 2 minutes</li> <li>Platform fails to resume from S3 suspend</li> <li>Early boot DMA protection setting in UEFI does not work correctly</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#binaries","title":"Binaries","text":"<p>novacustom_nv4x_tgl_ec_v1.5.2.rom sha256 sha256.sig</p> <p>novacustom_nv4x_tgl_v1.5.2.rom sha256 sha256.sig</p> <p>novacustom_nv4x_tgl_v1.5.2_dev_signed.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_nv4x_tgl/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 4.21 revision cb6ef1b9</li> <li>Dasharo EDKII fork based on edk2-stable202002 revision b7274c98</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#v151-2023-11-06","title":"v1.5.1 - 2023-11-06","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_nv4x_tgl/releases/#added_1","title":"Added","text":"<ul> <li>Firmware update mode</li> <li>BIOS boot medium write-protection</li> <li>SMM BIOS write protection</li> <li>Early boot DMA protection</li> <li>Early Sign of Life display output</li> <li>Current limiting for USB-PD power supplies</li> <li>Setup menu password configuration</li> <li>Wi-Fi / Bluetooth module disable option in setup menu</li> <li>Built-in webcam disable option in setup menu</li> <li>USB stack disable option in setup menu</li> <li>Network stack disable option in setup menu</li> <li>Battery threshold options in setup menu</li> <li>Intel ME disable option in setup menu</li> <li>Block boot when battery is too low</li> <li>Power on AC option in setup menu</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#changed_1","title":"Changed","text":"<ul> <li>Rebased on coreboot release 4.21</li> <li>Removed software keyboard backlight controls for improved backlight reliability</li> <li>Disabled EC debug logging for improved security</li> <li>Set throttling temperature to 75 degrees C</li> <li>UEFI 2.8 specification compliance</li> <li>Improved battery charging logic</li> <li>Improved USB-C docking station compatibility</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#fixed_1","title":"Fixed","text":"<ul> <li>Low performance when booting on battery power only</li> <li>Power delivery compatibility</li> <li>Better support for USB-PD power supplies</li> <li>After changing the Intel ME mode the Reset option in the setup menu turns off the device</li> <li>Laptops randomly go into suspend mode from which they can not wake up.</li> <li>Reset to defaults with F9 causes the wrong settings to be restored</li> <li>Keyboard backlight not working after restart</li> <li>Warning sign in device manager under the touchpad device</li> <li>Popup with information about recovery mode is displayed after flashing with a valid binary</li> <li>The power LED is not always blinking while in sleep mode on Windows 11</li> <li>Internal keyboard stops working randomly in firmware</li> <li>DTS on network boot fails to boot</li> <li>Firmware Update Mode does not automatically boot into DTS</li> <li>Permanent keyboard illumination after cold boot fails: keyboard light level is not saved correctly</li> <li>Controlling keyboard illumination (brightess and on/off) does not work</li> <li>Permanent keyboard illumination not working in Ubuntu 22.04</li> <li>Controlling brightness and turning off RGB keyboard illumination does not work (Ubuntu 22.04)</li> <li>Wi-Fi card is not recognized on Windows 11</li> <li>No HDMI audio on Windows 11</li> <li>No HDMI display output on Windows 11</li> <li>No USB-C display output on Windows 11</li> <li>Keyboard backlight is disabled after suspend (Windows 11)</li> <li>Reset by F9 sets battery thresholds to 0</li> <li>The docking station is not detected after cold-boot, warm-boot and reboot</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#known-issues_1","title":"Known issues","text":"<ul> <li>Docking station may fail to be initialized if connected before booting and connected to multiple monitors</li> <li>Connecting and immediately disconnecting the charger, sets the battery status in OS to 'charging' for about 2 minutes</li> <li>Power state after power failure option does not work as intended</li> <li>No ability to change active PCR banks with TPM PPI in FW</li> <li>Windows 11 fails to resume from S3 on some board revisions</li> <li>Windows 11 fails to resume from hibernation</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#binaries_1","title":"Binaries","text":"<p>novacustom_nv4x_tgl_ec_v1.5.1.rom sha256 sha256.sig</p> <p>novacustom_nv4x_tgl_v1.5.1.rom sha256 sha256.sig</p> <p>novacustom_nv4x_tgl_v1.5.1_dev_signed.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_nv4x_tgl/releases/#sbom-software-bill-of-materials_1","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 4.21 revision 36032e55</li> <li>Dasharo EDKII fork based on edk2-stable202002 revision b68e46b0</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#v150-non-public-engineering-release","title":"v1.5.0 - Non-public engineering release","text":""},{"location":"variants/novacustom_nv4x_tgl/releases/#v140-2023-02-24","title":"v1.4.0 - 2023-02-24","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_nv4x_tgl/releases/#added_2","title":"Added","text":"<ul> <li>The same keyboard illumination setting is restored after suspend or poweroff</li> <li>One of the two fan profiles can now be selected in Setup Menu</li> <li>Fn lock hotkey feature</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#changed_2","title":"Changed","text":"<ul> <li>Keys must be provisioned prior enabling Secure Boot</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#fixed_2","title":"Fixed","text":"<ul> <li>ISO keyboard issue for non-US layouts (Dasharo issue #259)</li> <li>The NVIDIA graphics power management isn't properly functional (Dasharo issue #145)</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#known-issues_2","title":"Known issues","text":"<ul> <li>Low level interfering crackling/popping of the speakers while playing no sound (Dasharo issue #224)</li> <li>Waking up from sleep on Ubuntu 22.04 is not 100% reliable (Dasharo issue #205)</li> <li>The power LED is not always blinking while in sleep mode on Windows 11 (Dasharo issue #182)</li> <li>No video output via USB-C after shutdown if PowerDelivery (PD) is active NV40MZ  (Dasharo issue #237)</li> <li>Buggy touchpad when charging via USB-C (NV40MZ)  (Dasharo issue #265)</li> <li>Keyboard backlight turns on after resuming from sleep mode  (Dasharo issue #332)</li> <li>The screen brightness level gets stuck when key are held or pressed too fast (Dasharo issue #341)</li> <li>Connecting and immediately disconnecting the charger, sets the battery status in OS to 'charging' for about 2 minutes (Dasharo issue #350)</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#binaries_2","title":"Binaries","text":"<p>novacustom_nv4x_tgl_ec_v1.4.0.rom sha256 sha256.sig</p> <p>novacustom_nv4x_tgl_v1.4.0.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_nv4x_tgl/releases/#sbom-software-bill-of-materials_2","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 1a8eb6c02103727431ac1ea23f4f507e49f3cde7 revision 636f432a</li> <li>Dasharo EDKII fork based on e0334c228ce4ba51f47ff79a118f214031d4650f revision 2c61576a</li> <li>Intel ME version 15.0.30.1776</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#v130-2022-10-18","title":"v1.3.0 - 2022-10-18","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_nv4x_tgl/releases/#ec-firmware-transition","title":"EC firmware transition","text":"<p>Please note, that version 1.3.0 of <code>Dasharo BIOS firmware</code> works correctly only with the <code>Dasharo EC firmware</code>. This is the first release when this open-source EC firmware is used, so additional steps need to be taken when upgrading.</p> <p>Please refer to the Firmware update section for more details on upgrading your firmware.</p>"},{"location":"variants/novacustom_nv4x_tgl/releases/#added_3","title":"Added","text":"<ul> <li>Vboot recovery mode information popup</li> <li>Dasharo setup menu full screen mode support</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#changed_3","title":"Changed","text":"<ul> <li>Rebased on upstream coreboot revision from 18 Aug 2022</li> <li>Support for open-source EC firmware (transition procedure is   required)</li> <li>Disabled UEFI Secure Boot by default</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#fixed_3","title":"Fixed","text":"<ul> <li>Custom fan curve is not applied after suspend (Dasharo issue #45)</li> <li>The touchpad ON/OFF switch Fn key is not functional (Dasharo issue #38)</li> <li>UCM-UCSI ACPI device displays an error in Windows Device Manager</li> <li>Laptop cannot output video via the Tunderbolt 4 USB Type-C port</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#known-issues_3","title":"Known issues","text":"<ul> <li>Low level interfering crackling/popping of the speakers while playing no sound (Dasharo issue #224)</li> <li>Waking up from sleep on Ubuntu 22.04 is not 100% reliable (Dasharo issue #205)</li> <li>After emergency shutdown, keyboard doesn't work before OS (Dasharo issue #199)</li> <li>The power LED is not always blinking while in sleep mode on Windows 11 (Dasharo issue #182)</li> <li>The NVIDIA graphics power management isn't properly functional (Dasharo issue #145)</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#binaries_3","title":"Binaries","text":"<p>novacustom_nv4x_ec_v1.3.0.rom sha256 sha256.sig</p> <p>novacustom_nv4x_v1.3.0.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_nv4x_tgl/releases/#sbom-software-bill-of-materials_3","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on bcc2fb719aaf2d466f9fb429b892f2d268bed5a7 revision a087c3e2</li> <li>Dasharo EDKII fork based on e0334c228ce4ba51f47ff79a118f214031d4650f revision abfdef40</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#v121-2022-06-23","title":"v1.2.1 - 2022-06-23","text":""},{"location":"variants/novacustom_nv4x_tgl/releases/#fixed_4","title":"Fixed","text":"<ul> <li>cbfstool logo replacement not working on NV4x v1.2.0</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#known-issues_4","title":"Known issues","text":"<ul> <li>Custom fan curve is not applied after suspend (Dasharo issue #45)</li> <li>UCM-UCSI ACPI device displays an error in Windows Device Manager</li> <li>USB4 Root Device Router device displays an error in Windows 11 Device Manager</li> <li>Windows 10 SD card reader driver needs manual installation on NV41MB</li> <li>Low level interfering crackling/popping of the speakers while playing no sound</li> <li>Laptop cannot output video via the Tunderbolt 4 USB Type-C port</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#binaries_4","title":"Binaries","text":"<p>novacustom_nv4x_v1.2.1.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_nv4x_tgl/releases/#sbom-software-bill-of-materials_4","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on e3e965b1 revision baada726</li> <li>edk2 based on 2020.03.17 revision cad23725</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#v120-2022-06-10","title":"v1.2.0 - 2022-06-10","text":""},{"location":"variants/novacustom_nv4x_tgl/releases/#added_4","title":"Added","text":"<ul> <li>Renamed device to NovaCustom NV4x</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#fixed_5","title":"Fixed","text":"<ul> <li>Wake from suspend doesn't work with certain SSDs</li> <li>CVE-2022-29264 SMM loader vulnerability</li> <li>Fix BIOS vendor name in SMBIOS</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#known-issues_5","title":"Known issues","text":"<ul> <li>Custom fan curve is not applied after suspend (Dasharo issue #45)</li> <li>UCM-UCSI ACPI device displays an error in Windows Device Manager</li> <li>USB4 Root Device Router device displays an error in Windows 11 Device Manager</li> <li>Windows 10 SD card reader driver needs manual installation on NV41MB</li> <li>Low level interfering crackling/popping of the speakers while playing no sound</li> <li>Laptop cannot output video via the Tunderbolt 4 USB Type-C port</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#binaries_5","title":"Binaries","text":"<p>novacustom_nv4x_v1.2.0.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_nv4x_tgl/releases/#sbom-software-bill-of-materials_5","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on e3e965b1 revision baada726</li> <li>edk2 based on 2020.03.17 revision cad23725</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#v110-2022-03-23","title":"v1.1.0 - 2022-03-23","text":""},{"location":"variants/novacustom_nv4x_tgl/releases/#added_5","title":"Added","text":"<ul> <li>Add Dasharo Tools Suite network boot integration</li> <li>Add a persistent bootlogo implementation</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#known-issues_6","title":"Known issues","text":"<ul> <li>UCM-UCSI ACPI device displays an error in Windows Device Manager</li> <li>USB4 Root Device Router device displays an error in Windows 11 Device Manager</li> <li>Windows 10 SD card reader driver needs manual installation on NV41MB</li> <li>Low level interfering crackling/popping of the speakers while playing no sound</li> <li>Laptop cannot output video via the Tunderbolt 4 USB Type-C port</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#binaries_6","title":"Binaries","text":"<p>clevo_nv41mz_v1.1.0.rom sha256 sha256.sig</p>"},{"location":"variants/novacustom_nv4x_tgl/releases/#sbom-software-bill-of-materials_6","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on ae9a8447 revision 0722fdf0</li> <li>edk2 based on 2020.03.17 revision ec6805c2</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#v101-2022-03-01","title":"v1.0.1 - 2022-03-01","text":""},{"location":"variants/novacustom_nv4x_tgl/releases/#added_6","title":"Added","text":"<ul> <li>Change DMI fields to match previous Insyde firmware</li> <li>Hide unknown ACPI devices</li> <li>Set correct Realtek HD Audio subsystem ID</li> <li>Set correct ACPI path for the TPM</li> <li>Set TPM IRQ in a manner understood by Windows</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#removed","title":"Removed","text":"<ul> <li>Removed proprietary blobs from built coreboot images</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#fixed_6","title":"Fixed","text":"<ul> <li>Updating firmware using fwupd</li> <li>MIC-in phone jack not working</li> <li>This PC can't run Windows 11 error while installing Windows 11 from a USB pen drive</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#known-issues_7","title":"Known issues","text":"<ul> <li>Custom fan curve is not functional after suspend</li> <li>UCM-UCSI ACPI device displays an error in Windows Device Manager</li> <li>USB4 Root Device Router device displays an error in Windows 11 Device Manager</li> <li>Windows 10 SD card reader driver needs manual installation on NV41MB</li> <li>Low level interfering crackling/popping of the speakers while playing no sound</li> <li>Laptop cannot output video via the Tunderbolt 4 USB Type-C port</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#binaries_7","title":"Binaries","text":"<p>clevo_nv41mz_v1.0.1.rom sha256 sha256.sig</p>"},{"location":"variants/novacustom_nv4x_tgl/releases/#sbom-software-bill-of-materials_7","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on ae9a8447 revision 3a3808f9</li> <li>edk2 based on 2020.03.17 revision e0334c22</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#v100-2022-01-19","title":"v1.0.0 - 2022-01-19","text":""},{"location":"variants/novacustom_nv4x_tgl/releases/#added_7","title":"Added","text":"<ul> <li>Documentation for touchpad hotkey enablement on Linux</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#removed_1","title":"Removed","text":"<ul> <li>Removed proprietary blobs from built coreboot images</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#fixed_7","title":"Fixed","text":"<ul> <li>The touchpad ON/OFF switch Fn key is not functional</li> <li>Charging indicator displays wrong state if power adapter was unplugged while   in sleep mode</li> <li>Bluetooth does not work under Windows</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#known-issues_8","title":"Known issues","text":"<ul> <li>Unable to download the system by using iPXE</li> <li>Laptop cannot output video via the Tunderbolt 4 USB Type-C port</li> <li>Windows 10 SD card reader driver needs manual installation on NV41MB</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#binaries_8","title":"Binaries","text":"<p>clevo_nv41mz_v1.0.0.rom sha256 sha256.sig</p>"},{"location":"variants/novacustom_nv4x_tgl/releases/#sbom-software-bill-of-materials_8","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on ae9a8447 revision e995fc1c</li> <li>edk2 based on 2020.03.17 revision 59ae285f</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#v050-2021-11-19","title":"v0.5.0 - 2021-11-19","text":""},{"location":"variants/novacustom_nv4x_tgl/releases/#added_8","title":"Added","text":"<ul> <li>vboot Verified Boot</li> <li>TPM Measured Boot</li> <li>Custom fan curve</li> <li>Microcode for Tiger Lake stepping 0x2</li> <li>Documentation for EC firmware update</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#changed_4","title":"Changed","text":"<ul> <li>Disabled unused DPTF device</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#fixed_8","title":"Fixed","text":"<ul> <li>Performance drop when the power adaptor is disconnected</li> <li>High NVIDIA GPU energy draw at idle in Windows</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#known-issues_9","title":"Known issues","text":"<ul> <li>Unable to download the system by using iPXE</li> <li>Laptop cannot output video via the Tunderbolt 4 USB Type-C port</li> <li>The touchpad ON/OFF switch Fn key is not functional</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#binaries_9","title":"Binaries","text":"<p>dasharo_clevo_nv41mz_v0.5.0.rom sha256 sha256.sig</p>"},{"location":"variants/novacustom_nv4x_tgl/releases/#sbom-software-bill-of-materials_9","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on ae9a8447 revision 7d439573</li> <li>EDK2 based on 2020.03.17 revision bfd3d1a2</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#v040-2021-10-26","title":"v0.4.0 - 2021-10-26","text":""},{"location":"variants/novacustom_nv4x_tgl/releases/#added_9","title":"Added","text":"<ul> <li>Added full support for sleep mode (s0ix / Modern Standby)</li> <li>Added support for NV41MB model</li> <li>Added support for nvidia discrete graphics (doesn't power off in Windows yet)</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#changed_5","title":"Changed","text":"<ul> <li>Fixed regression with non-funtional airplane mode hotkey on Windows</li> <li>Disabled legacy 8254 timer for lower power draw</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#fixed_9","title":"Fixed","text":"<ul> <li>Sleep mode is not functional</li> <li>The camera ON/OFF switch Fn key is not functional</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#known-issues_10","title":"Known issues","text":"<ul> <li>Unable to download the system by using iPXE</li> <li>Laptop cannot output video via the Tunderbolt 4 USB Type-C port</li> <li>High NVIDIA GPU energy draw at idle in Windows</li> <li>Performance drop when the power adaptor is disconnected</li> <li>The touchpad ON/OFF switch Fn key is not functional</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#binaries_10","title":"Binaries","text":"<p>dasharo_clevo_nv41mz_v0.4.0.rom sha256 sha256.sig</p>"},{"location":"variants/novacustom_nv4x_tgl/releases/#sbom-software-bill-of-materials_10","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on ae9a8447 revision 03972293</li> <li>EDK2 based on 2020.03.17 revision bfd3d1a2</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#v030-2021-10-11","title":"v0.3.0 - 2021-10-11","text":""},{"location":"variants/novacustom_nv4x_tgl/releases/#added_10","title":"Added","text":"<ul> <li>Support for discrete TPM</li> <li>USB Type-C ACPI support (UCSI)</li> <li>Improved runtime power management for SSD (reduces power usage while in sleep)</li> <li>Added partial sleep support (system saves power, but fans still spin)</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#changed_6","title":"Changed","text":"<ul> <li>Rebased on coreboot revision ae9a8447</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#known-issues_11","title":"Known issues","text":"<ul> <li>Sleep mode is not functional</li> <li>The camera ON/OFF switch Fn key is not functional</li> <li>The touchpad ON/OFF switch Fn key is not functional</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#binaries_11","title":"Binaries","text":"<p>dasharo_clevo_nv41mz_v0.3.0.rom sha256 sha256.sig</p>"},{"location":"variants/novacustom_nv4x_tgl/releases/#sbom-software-bill-of-materials_11","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on ae9a8447 revision v0.3.0</li> <li>EDK2 based on 2020.03.17 revision bfd3d1a2</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#v021-2021-9-29","title":"v0.2.1 - 2021-9-29","text":""},{"location":"variants/novacustom_nv4x_tgl/releases/#added_11","title":"Added","text":"<ul> <li>Integrated graphics backlight configuration for Windows</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#changed_7","title":"Changed","text":"<ul> <li>Updated the Video Bios Table</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#fixed_10","title":"Fixed","text":"<ul> <li>Screen brightness is stuck at 0% in the Windows Installer</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#known-issues_12","title":"Known issues","text":"<ul> <li>Sleep mode is not functional</li> <li>The camera ON/OFF switch Fn key is not functional</li> <li>The touchpad ON/OFF switch Fn key is not functional</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#binaries_12","title":"Binaries","text":"<p>dasharo_clevo_nv41mz_v0.2.1.rom sha256 sha256.sig</p>"},{"location":"variants/novacustom_nv4x_tgl/releases/#sbom-software-bill-of-materials_12","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.14 revision 43c9604b</li> <li>EDK2 based on 2020.03.17 revision bfd3d1a2</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#v020-2021-9-24","title":"v0.2.0 - 2021-9-24","text":""},{"location":"variants/novacustom_nv4x_tgl/releases/#added_12","title":"Added","text":"<ul> <li>UEFI Secure Boot support</li> <li>UEFI Shell selectable in boot menu</li> <li>iPXE selectable in boot menu</li> <li>NovaCustom boot logo</li> <li>Customized boot menu keys</li> <li>Customized setup menu keys</li> <li>Support for backlight hotkey in Windows</li> <li>Preserve boot order settings after Dasharo update</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#changed_8","title":"Changed","text":"<ul> <li>Replaced CorebootPayloadPkg with Dasharo UEFIPayloadPkg</li> <li>Changed the behavior of airplane mode to match stock firmware (now it can be   disabled in software)</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#known-issues_13","title":"Known issues","text":"<ul> <li>Screen brightness is stuck at 0% in the Windows Installer</li> <li>Sleep mode is not functional</li> <li>The camera ON/OFF switch Fn key is not functional</li> <li>The touchpad ON/OFF switch Fn key is not functional</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#binaries_13","title":"Binaries","text":"<p>dasharo_clevo_nv41mz_v0.2.0.rom sha256 sha256.sig</p>"},{"location":"variants/novacustom_nv4x_tgl/releases/#sbom-software-bill-of-materials_13","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.14 revision ff1c6572</li> <li>EDK2 based on 2020.03.17 revision bfd3d1a2</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#v012-2021-08-31","title":"v0.1.2 - 2021-08-31","text":""},{"location":"variants/novacustom_nv4x_tgl/releases/#added_13","title":"Added","text":"<ul> <li>Clevo NV41MZ platform support</li> <li>Clevo IT5570 EC support</li> <li>UEFI boot support</li> <li>configurable boot order</li> <li>configurable boot options</li> <li>Integrated graphics initialization for internal LCD (eDP) and external HDMI   port</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#binaries_14","title":"Binaries","text":"<p>clevo_nv41mz_v0.1.2.rom sha256 sha256.sig</p> <p>All in one zip</p>"},{"location":"variants/novacustom_nv4x_tgl/releases/#sbom-software-bill-of-materials_14","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot 4.14 (with additional commits for Clevo NV41MZ board support)</li> <li>EDK2</li> </ul>"},{"location":"variants/novacustom_nv4x_tgl/releases/#v010-v011-non-public-engineering-releases","title":"v0.1.0 .. v0.1.1: Non-public engineering releases","text":""},{"location":"variants/novacustom_nv4x_tgl/test-matrix/","title":"Test matrix","text":""},{"location":"variants/novacustom_nv4x_tgl/test-matrix/#about","title":"About","text":"<p>The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.</p>"},{"location":"variants/novacustom_nv4x_tgl/test-matrix/#nv41mz-test-matrix","title":"NV41MZ test matrix","text":""},{"location":"variants/novacustom_nv4x_tgl/test-matrix/#module-dasharo-compatibility","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports and LCD support DSP DSP001.001, DSP001.201, DSP001.301, DSP002.201, DSP002.301 4. Embedded Controller and Super I/O initialization ECR Without ECR021.201, ECR021.301, ECR022.201, ECR022.301, ECR023.201, ECR023.301, ECR024.201, ECR024.301 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot keys CBK All 8. USB HID and MSC Support USB All 9. Debian Stable and Ubuntu LTS support LBT LBT004.001, LBT004.002 10. UEFI Shell USH All 11. Windows booting WBT WBT001.001 12. Audio subsystem AUD All 13. USB-C support UTC All 14. Network boot PXE Without PXE007.001 15. M.2 WiFi/Bluetooth WLE All - NOTE: Needs to be carried out for both the default network card and the Atheros QCNFA222. 16. SD card support SDC All 17. USB Camera verification CAM All 18. Fan speed measure FAN FAN001.001 19. SMBIOS DMI Without DMI001.201 20. Firmware update using fwupd FFW All 21. Dasharo Tools Suite DTS DTS006.001, DTS007.001 22. CPU status CPU All 23. Embedded controller flashing ECF All 24. Logo customization functionality LCM LCM001.001 25. Firmware locally building and flashing FLB All 26. Custom Boot Order CBO CBO001.002 27. QubesOS support QBS All 28. Fedora support FED All 29. Platform suspend and resume SUSP Without SUSP004 and SUSP006 30. Boot blocking BBB All 31. [Reset to defaults][RTD] RTD All 32. Suspend mechanism switchcing (S0ix/S3) SMS All 33. [Platform hibernation and resume][HBN] HBN All 34. Sign of life SOL All 35. [Power after fail][PSF] PSF All"},{"location":"variants/novacustom_nv4x_tgl/test-matrix/#module-dasharo-security","title":"Module: Dasharo security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO Without SBO006.001, SBO007.001 and SBO008.001 5. ME disable/neuter support MNE Without MNE005.201 6. USB stack USS All 7. Network boot availability PXE All 8. BIOS lock support BLS All 9. Early boot DMA protection EDP All 10. SMM BIOS write protection SMM All 11. UEFI Setup password PSW All 12. [Wi-Fi / Bluetooth switch][WBS] WBS All 13. [Camera switch][CHS] CHS All"},{"location":"variants/novacustom_nv4x_tgl/test-matrix/#module-dasharo-performance","title":"Module: Dasharo performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot boot measure CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF All 4. Custom fan curve CFC All 5. Platform stability STB All"},{"location":"variants/novacustom_nv4x_tgl/test-matrix/#module-dasharo-stability","title":"Module: Dasharo stability","text":"No. Supported test suite Test suite ID Supported test cases 1. USB Type-A devices detection SUD All 2. M.2 Wi-fi SMW All 3. NVMe detection SNV All 4. NET interface detection NET All 5. [TPM detection][TPD] TPD TPD003.001, TPD004.001"},{"location":"variants/novacustom_nv4x_tgl/test-matrix/#nv41mb-test-matrix","title":"NV41MB test matrix","text":""},{"location":"variants/novacustom_nv4x_tgl/test-matrix/#module-dasharo-compatibility_1","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports and LCD support DSP DSP001.001, DSP001.201, DSP001.301, DSP002.201, DSP002.301 4. Embedded Controller and Super I/O initialization ECR Without ECR021.201, ECR021.301, ECR022.201, ECR022.301, ECR023.201, ECR023.301, ECR024.201, ECR024.301 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot keys CBK All 8. USB HID and MSC Support USB All 9. Debian Stable and Ubuntu LTS support LBT LBT004.001, LBT004.002 10. UEFI Shell USH All 11. Windows booting WBT WBT001.001 12. Audio subsystem AUD All 13. USB-C support UTC All 14. Network boot PXE Without PXE007.001 15. M.2 WiFi/Bluetooth WLE All 16. SD card support SDC All 17. USB Camera verification CAM All 18. Fan speed measure FAN FAN001.001 19. SMBIOS DMI Without DMI001.201 20. Firmware update using fwupd FFW All 21. Dasharo Tools Suite DTS DTS006.001, DTS007.001 22. CPU status CPU All 23. Embedded controller flashing ECF All 24. Logo customization functionality LCM LCM001.001 25. Firmware locally building and flashing FLB All 26. Custom Boot Order CBO CBO001.002 27. QubesOS support QBS All 28. Fedora support FED All 29. Platform suspend and resume SUSP Without SUSP004 and SUSP006 30. Boot blocking BBB All 31. [Reset to defaults][RTD] RTD All 32. Suspend mechanism switchcing (S0ix/S3) SMS All 33. [Platform hibernation and resume][HBN] HBN All 34. Sign of life SOL All 35. NVIDIA Graphics support NVI All 36. [Power after fail][PSF] PSF All"},{"location":"variants/novacustom_nv4x_tgl/test-matrix/#module-dasharo-security_1","title":"Module: Dasharo security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO Without SBO006.001, SBO007.001 and SBO008.001 5. ME disable/neuter support MNE Without MNE005.201 6. USB stack USS All 7. Network boot availability PXE All 8. BIOS lock support BLS All 9. Early boot DMA protection EDP All 10. SMM BIOS write protection SMM All 11. UEFI Setup password PSW All 12. [Wi-Fi / Bluetooth switch][WBS] WBS All 13. [Camera switch][CHS] CHS All"},{"location":"variants/novacustom_nv4x_tgl/test-matrix/#module-dasharo-performance_1","title":"Module: Dasharo performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot boot measure CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF All 4. Custom fan curve CFC All 5. Platform stability STB All"},{"location":"variants/novacustom_nv4x_tgl/test-matrix/#module-dasharo-stability_1","title":"Module: Dasharo stability","text":"No. Supported test suite Test suite ID Supported test cases 1. USB Type-A devices detection SUD All 2. M.2 Wi-fi SMW All 3. NVMe detection SNV All 4. NET interface detection NET All 5. [TPM detection][TPD] TPD TPD003.001, TPD004.001"},{"location":"variants/novacustom_v540tnx/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/novacustom_v540tnx/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configurations used for validation of the coreboot port on the NovaCustom V540TNx laptop.</p>"},{"location":"variants/novacustom_v540tnx/hardware-matrix/#ports-specification","title":"Ports specification","text":""},{"location":"variants/novacustom_v540tnx/hardware-matrix/#front-view","title":"Front View","text":"No. Description 1. LED Indicators"},{"location":"variants/novacustom_v540tnx/hardware-matrix/#rear-view","title":"Rear View","text":"No. Description 1. RJ-45 LAN Jack 2. HDMI-Out Port 3. Vent/Fan Intake/Outlet"},{"location":"variants/novacustom_v540tnx/hardware-matrix/#left-side-view","title":"Left side view","text":"No. Description 1. Security Lock Slot 2. MicroSD Card Reader 3. USB 3.2 Gen 1 Type A Port 4. 2-In-1 Audio Jack (Headphone and Microphone) 5. Speaker"},{"location":"variants/novacustom_v540tnx/hardware-matrix/#right-side-view","title":"Right side view","text":"No. Description 1. Speaker 2. USB 3.2 Gen 2 Port (Type C) with DP 1.4, PD DC-in and Always On USB 3. Thunderbolt\u2122 4 (Type C) with PD DC-in and Always On USB 4. USB 3.2 Gen 2 Port (Type A) with Always On USB 5. DC-In Jack <p>The graphics used are from pages 16-19 of the official end user manual for the V540TNx platforms.</p>"},{"location":"variants/novacustom_v540tnx/hardware-matrix/#v540tnd","title":"V540TND","text":"Component Description CPU Intel(R) Core(TM) Ultra 7 155H Internal Cooling GPU 1. Intel ARC Graphics Integrated GPU 2. NVIDIA GeForce RTX 4060 discrete GPU RAM Slot 1: W-NM56S516G SSD Goodram PX700 1TB Flash memory GigaDevice 25LB256FYIG USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card 1 Intel Wi-Fi 6E AX211 Wireless card 2 Intel Wi-Fi 7 BE200 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 2880x1800 14 inch screen 2. Internal ISO keyboard 3. Touchpad 4. Camera 5. Audio subsystem Attached devices The platform is tested with every docking station/hub listed in HCL Power Supply Chicony 20V, 9A, 180 W"},{"location":"variants/novacustom_v540tnx/openness-score/","title":"Dasharo Openness Score","text":"<p>This page contains the Dasharo Openness Score for NovaCustom V54xTNx Dasharo releases. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/novacustom_v540tnx/openness-score/#v091","title":"v0.9.1","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for novacustom_v54x_mtl_v0.9.1.rom</p> <p>Open-source code percentage: 32.6% Closed-source code percentage: 67.4%</p> <ul> <li>Image size: 33554432 (0x2000000)</li> <li>Number of regions: 31</li> <li>Number of CBFSes: 4</li> <li>Total open-source code size: 6341709 (0x60c44d)</li> <li>Total closed-source code size: 13088979 (0xc7b8d3)</li> <li>Total data size: 553004 (0x8702c)</li> <li>Total empty size: 13083316 (0xc7a2b4)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/novacustom_v540tnx/openness-score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category VBLOCK_A 0x900000 0x2000 data RW_FWID_A 0xffffc0 0x40 data RECOVERY_MRC_CACHE 0x1000000 0x10000 data RW_MRC_CACHE 0x1010000 0x10000 data SMMSTORE 0x1020000 0x40000 data RW_ELOG 0x1060000 0x4000 data SHARED_DATA 0x1064000 0x2000 data VBLOCK_DEV 0x1066000 0x2000 data RW_NVRAM 0x1068000 0x6000 data VBLOCK_B 0x1200000 0x2000 data RW_FWID_B 0x18fffc0 0x40 data RO_VPD 0x1900000 0x4000 data RO_GSCVD 0x1904000 0x2000 data FMAP 0x1906000 0x800 data RO_FRID 0x1906800 0x40 data GBB 0x1907000 0x3000 data"},{"location":"variants/novacustom_v540tnx/openness-score/#ifd-regions","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00004000 0x00888fff 0x885000 closed-source Flash Descriptor 0x00000000 0x00003fff 0x4000 data"},{"location":"variants/novacustom_v540tnx/openness-score/#cbfs-fw_main_a","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 7331776</li> <li>Number of files: 14</li> <li>Open-source files size: 2075735 (0x1fac57)</li> <li>Closed-source files size: 1185201 (0x1215b1)</li> <li>Data size: 9716 (0x25f4)</li> <li>Empty size: 4061124 (0x3df7c4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1752592 none open-source fallback/romstage stage 102472 none open-source fallback/ramstage stage 152871 LZMA open-source fallback/dsdt.aml raw 25200 none open-source fallback/postcar stage 42600 none open-source cpu_microcode_blob.bin microcode 136192 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 262577 LZ4 closed-source config raw 5819 LZMA data revision raw 859 none data build_info raw 103 none data vbt.bin raw 1277 LZMA data (empty) null 356 none empty (empty) null 4060768 none empty"},{"location":"variants/novacustom_v540tnx/openness-score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 1048576</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 1048548 (0xfffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 1048548 none empty"},{"location":"variants/novacustom_v540tnx/openness-score/#cbfs-fw_main_b","title":"CBFS FW_MAIN_B","text":"<ul> <li>CBFS size: 7331776</li> <li>Number of files: 14</li> <li>Open-source files size: 2075735 (0x1fac57)</li> <li>Closed-source files size: 1185201 (0x1215b1)</li> <li>Data size: 9716 (0x25f4)</li> <li>Empty size: 4061124 (0x3df7c4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1752592 none open-source fallback/romstage stage 102472 none open-source fallback/ramstage stage 152871 LZMA open-source fallback/dsdt.aml raw 25200 none open-source fallback/postcar stage 42600 none open-source cpu_microcode_blob.bin microcode 136192 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 262577 LZ4 closed-source config raw 5819 LZMA data revision raw 859 none data build_info raw 103 none data vbt.bin raw 1277 LZMA data (empty) null 356 none empty (empty) null 4060768 none empty"},{"location":"variants/novacustom_v540tnx/openness-score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 7299072</li> <li>Number of files: 19</li> <li>Open-source files size: 2190239 (0x216b9f)</li> <li>Closed-source files size: 1185201 (0x1215b1)</li> <li>Data size: 11112 (0x2b68)</li> <li>Empty size: 3912520 (0x3bb348)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1752592 none open-source fallback/romstage stage 102472 none open-source fallback/ramstage stage 152871 LZMA open-source fallback/dsdt.aml raw 25200 none open-source fallback/postcar stage 42600 none open-source fallback/verstage stage 78728 none open-source bootblock bootblock 35776 none open-source cpu_microcode_blob.bin microcode 136192 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 262577 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 80 none data config raw 5819 LZMA data revision raw 859 none data build_info raw 103 none data vbt.bin raw 1277 LZMA data cmos_layout.bin cmos_layout 800 none data (empty) null 100 none empty (empty) null 3912420 none empty"},{"location":"variants/novacustom_v540tnx/releases/","title":"NovaCustom V54xTNx 14th Gen Dasharo Release Notes","text":"<p>Following Release Notes describe status of open-source firmware development for NovaCustom V54xTNx 14th Gen</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to NovaCustom V54xTNx 14th Gen Dasharo Release Newsletter"},{"location":"variants/novacustom_v540tnx/releases/#v091-2024-11-07","title":"v0.9.1 - 2024-11-07","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_v540tnx/releases/#added","title":"Added","text":"<ul> <li>Support for NovaCustom Meteor Lake platform (discrete graphics)</li> <li>Vboot Verified Boot</li> <li>TPM Measured Boot</li> <li>Vboot recovery notification in UEFI Payload</li> <li>UEFI Shell</li> <li>UEFI Secure Boot</li> <li>Firmware update mode</li> <li>BIOS boot medium write-protection</li> <li>SMM BIOS write protection</li> <li>Current limiting for USB-PD power supplies</li> <li>Setup menu password configuration</li> <li>Wi-Fi / Bluetooth module disable option in setup menu</li> <li>Built-in webcam disable option in setup menu</li> <li>USB stack disable option in setup menu</li> <li>Network stack disable option in setup menu</li> <li>Battery threshold options in setup menu</li> <li>Intel ME disable option in setup menu</li> <li>Block boot when battery is too low</li> <li>Power on AC option in setup menu</li> <li>Keyboard backlight level is restored after suspend or poweroff</li> <li>Fan profiles in setup Menu</li> <li>Fn lock hotkey feature</li> <li>Throttling temperature adjustment in setup menu</li> </ul>"},{"location":"variants/novacustom_v540tnx/releases/#known-issues","title":"Known issues","text":"<ul> <li>No HDMI output in FW</li> <li>Artifacts in video playback in some players using HW acceleration</li> <li>Only native resolution listed for internal panel</li> <li>Microphone mute Fn key doesn't work in Windows</li> <li>CPU frequency measurements sometimes go below known minimum</li> <li>Some flash drives may not be detected after reboot</li> <li>I2C controller timeout with SPD5118 driver</li> <li>Echo11 Docking station SD Reader failure (ME Disabled)</li> <li>Spurious USB 3 disconnects with Sonnet Echo 11 Thunderbolt 4 dock</li> <li>48GB SODIMMs get hot during MemTest86+</li> </ul>"},{"location":"variants/novacustom_v540tnx/releases/#binaries","title":"Binaries","text":"<p>novacustom_v54x_mtl_ec_v0.9.1.rom sha256 sha256.sig</p> <p>novacustom_v54x_mtl_v0.9.1.rom sha256 sha256.sig</p> <p>novacustom_v54x_mtl_v0.9.1_dev_signed.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_v540tnx/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo fork of coreboot based on 24.02 revision c44f1998<ul> <li>License</li> </ul> </li> <li>Dasharo fork of EDKII based on edk2-stable202402 revision f3e18c6c<ul> <li>License</li> </ul> </li> <li>Dasharo fork of edk2-platforms based on 8ea6ec38 revision 3323ed48<ul> <li>License</li> </ul> </li> <li>Dasharo fork of System76 EC based on 485f3900 revision 3e931cf8<ul> <li>License</li> </ul> </li> <li>Dasharo fork of iPXE based on d2d194bc revision 35d84756<ul> <li>License</li> </ul> </li> <li>vboot based on 3d37d2aa revision 3d37d2aa<ul> <li>License</li> </ul> </li> <li>Intel Management Engine based on v18.0.5.2040 revision 3541ad31<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor based on v1.0 revision 3541ad31<ul> <li>License</li> </ul> </li> <li>Intel processor microcode based on MTL C0 0x0000001c revision microcode-20240531<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/novacustom_v540tu/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/novacustom_v540tu/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configurations used for validation of the coreboot port on the NovaCustom V540TU laptop.</p>"},{"location":"variants/novacustom_v540tu/hardware-matrix/#ports-specification","title":"Ports specification","text":""},{"location":"variants/novacustom_v540tu/hardware-matrix/#front-rear-views","title":"Front &amp; Rear Views","text":"No. Description 1. LED Indicators 2. RJ-45 LAN Jack 3. HDMI-Out Port 4. Vent/Fan Intake/Outlet"},{"location":"variants/novacustom_v540tu/hardware-matrix/#left-side-view","title":"Left side view","text":"No. Description 1. Security Lock Slot 2. MicroSD Push-Push Card Reader 3. USB 3.2 Gen 1 Type A Port 4. 2-In-1 Audio Jack (Headphone/Microphone) 5. Speaker"},{"location":"variants/novacustom_v540tu/hardware-matrix/#right-side-view","title":"Right side view","text":"No. Description 1. Speaker 2. USB 3.2 Gen 2 Port (Type C) with PD DC-in and Always On USB 3. Thunderbolt\u2122 4 (Type C) with PD DC-in and Always On USB 4. USB 3.2 Gen 2 Port (Type A) with Always On USB 5. DC-In Jack <p>The graphics used are from pages 43-47 of the official end user manual for the V546TU platforms.</p>"},{"location":"variants/novacustom_v540tu/hardware-matrix/#v540tu","title":"V540TU","text":"Component Description CPU Intel(R) Core(TM) Ultra 7 155H Internal Cooling RAM Slot 1: W-NM56S516G SSD Goodram PX700 1TB Flash memory GigaDevice 25LB256FYIG USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card 1 Intel Wi-Fi 6E AX211 Wireless card 2 Intel Wi-Fi 7 BE200 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 2880x1800 14 inch screen 2. Internal ISO keyboard 3. Touchpad 4. Camera 5. Audio subsystem Attached devices The platform is tested with every docking station/hub listed in HCL Power Supply Chicony 19V, 4.74A, 90 W"},{"location":"variants/novacustom_v540tu/hardware-matrix/#v540tu-f-hd","title":"V540TU F-HD+","text":"Component Description CPU Intel(R) Core(TM) Ultra 7 155H Internal Cooling RAM Slot 1: W-NM56S508G SSD Goodram PX600 250GB Flash memory GigaDevice 25LB256FYIG USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card 1 Intel Wi-Fi 6E AX211 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1200 14 inch screen 2. Internal ISO keyboard 3. Touchpad 4. Camera 5. Audio subsystem Attached devices Power Supply Chicony 19V, 4.74A, 90 W"},{"location":"variants/novacustom_v540tu/openness-score/","title":"Dasharo Openness Score","text":"<p>This page contains the Dasharo Openness Score for NovaCustom V540TU Dasharo releases. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/novacustom_v540tu/openness-score/#v100","title":"v1.0.0","text":"<p>Openness Score for novacustom_v54x_mtl_igpu_v1.0.0.rom</p> <p>Open-source code percentage: 22.5% Closed-source code percentage: 77.5%</p> <ul> <li>Image size: 33554432 (0x2000000)</li> <li>Number of regions: 29</li> <li>Number of CBFSes: 3</li> <li>Total open-source code size: 3945998 (0x3c360e)</li> <li>Total closed-source code size: 13593132 (0xcf6a2c)</li> <li>Total data size: 531862 (0x81d96)</li> <li>Total empty size: 15483440 (0xec4230)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/novacustom_v540tu/openness-score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category SI_ME 0x6000 0x9fa000 closed-source SI_DESC 0x0 0x4000 data RECOVERY_MRC_CACHE 0x1000000 0x10000 data RW_MRC_CACHE 0x1010000 0x10000 data SMMSTORE 0x1020000 0x40000 data RW_ELOG 0x1060000 0x4000 data SHARED_DATA 0x1064000 0x2000 data VBLOCK_DEV 0x1066000 0x2000 data RW_NVRAM 0x1068000 0x6000 data VBLOCK_A 0x1200000 0x2000 data RW_FWID_A 0x18fffc0 0x40 data RO_VPD 0x1900000 0x4000 data FMAP 0x1906000 0x800 data RO_FRID 0x1906800 0x40 data GBB 0x1907000 0x3000 data RW_UNUSED 0xa00000 0x600000 empty"},{"location":"variants/novacustom_v540tu/openness-score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 1048576</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 1048548 (0xfffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 1048548 none empty"},{"location":"variants/novacustom_v540tu/openness-score/#cbfs-fw_main_a","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 7331776</li> <li>Number of files: 15</li> <li>Open-source files size: 1923847 (0x1d5b07)</li> <li>Closed-source files size: 1257782 (0x133136)</li> <li>Data size: 10815 (0x2a3f)</li> <li>Empty size: 4139332 (0x3f2944)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1595877 none open-source fallback/romstage stage 114200 none open-source fallback/ramstage stage 165573 LZMA open-source fallback/dsdt.aml raw 23083 none open-source fallback/postcar stage 77504 none open-source cpu_microcode_blob.bin microcode 140288 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 262577 LZ4 closed-source config raw 6410 LZMA data revision raw 864 none data build_info raw 111 none data vbt.bin raw 1745 LZ4 data (empty) null 612 none empty (empty) null 4138720 none empty"},{"location":"variants/novacustom_v540tu/openness-score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 7299072</li> <li>Number of files: 21</li> <li>Open-source files size: 2022151 (0x1edb07)</li> <li>Closed-source files size: 1257782 (0x133136)</li> <li>Data size: 15035 (0x3abb)</li> <li>Empty size: 4004104 (0x3d1908)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1595877 none open-source fallback/romstage stage 114200 none open-source fallback/ramstage stage 165573 LZMA open-source fallback/dsdt.aml raw 23083 none open-source fallback/postcar stage 77504 none open-source bootblock bootblock 98304 none open-source cpu_microcode_blob.bin microcode 140288 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 262577 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 272 none data boot_policy_manifest.bin raw 1536 none data key_manifest.bin raw 1024 none data config raw 6410 LZMA data revision raw 864 none data build_info raw 111 none data cmos_layout.bin cmos_layout 800 none data vbt.bin raw 1745 LZ4 data (empty) null 548 none empty (empty) null 4003556 none empty"},{"location":"variants/novacustom_v540tu/openness-score/#v090-heads","title":"v0.9.0 Heads","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for novacustom_v54x_mtl_v0.9.0_heads.rom</p> <p>Open-source code percentage: 35.2% Closed-source code percentage: 64.8%</p> <ul> <li>Image size: 33554432 (0x2000000)</li> <li>Number of regions: 7</li> <li>Number of CBFSes: 1</li> <li>Total open-source code size: 9731311 (0x947cef)</li> <li>Total closed-source code size: 17937841 (0x111b5b1)</li> <li>Total data size: 127000 (0x1f018)</li> <li>Total empty size: 5758280 (0x57dd48)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/novacustom_v540tu/openness-score/#fmap-regions_1","title":"FMAP regions","text":"FMAP region Offset Size Category RW_MRC_CACHE 0x1000000 0x10000 data FMAP 0x1010000 0x200 data"},{"location":"variants/novacustom_v540tu/openness-score/#ifd-regions","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00006000 0x0088afff 0x885000 closed-source Flash Descriptor 0x00000000 0x00003fff 0x4000 data GbE 0x00004000 0x00005fff 0x2000 data"},{"location":"variants/novacustom_v540tu/openness-score/#cbfs-coreboot_1","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 16711168</li> <li>Number of files: 19</li> <li>Open-source files size: 9731311 (0x947cef)</li> <li>Closed-source files size: 1185201 (0x1215b1)</li> <li>Data size: 36376 (0x8e18)</li> <li>Empty size: 5758280 (0x57dd48)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 9387706 none open-source fallback/romstage stage 90376 none open-source fallback/ramstage stage 165976 LZMA open-source fallback/dsdt.aml raw 21829 none open-source fallback/postcar stage 34384 none open-source bootblock bootblock 31040 none open-source cpu_microcode_blob.bin microcode 136192 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 262577 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 80 none data config raw 4883 LZMA data revision raw 867 none data build_info raw 97 none data bootsplash.jpg bootsplash 26784 none data vbt.bin raw 1269 LZMA data cmos_layout.bin cmos_layout 800 none data (empty) null 804 none empty (empty) null 5757476 none empty"},{"location":"variants/novacustom_v540tu/openness-score/#v090","title":"v0.9.0","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for novacustom_v54x_mtl_v0.9.0.rom</p> <p>Open-source code percentage: 32.0% Closed-source code percentage: 68.0%</p> <ul> <li>Image size: 33554432 (0x2000000)</li> <li>Number of regions: 32</li> <li>Number of CBFSes: 4</li> <li>Total open-source code size: 6225423 (0x5efe0f)</li> <li>Total closed-source code size: 13246149 (0xca1ec5)</li> <li>Total data size: 553144 (0x870b8)</li> <li>Total empty size: 13050484 (0xc72274)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/novacustom_v540tu/openness-score/#fmap-regions_2","title":"FMAP regions","text":"FMAP region Offset Size Category VBLOCK_A 0x900000 0x2000 data RW_FWID_A 0xffffc0 0x40 data RECOVERY_MRC_CACHE 0x1000000 0x10000 data RW_MRC_CACHE 0x1010000 0x10000 data SMMSTORE 0x1020000 0x40000 data RW_ELOG 0x1060000 0x4000 data SHARED_DATA 0x1064000 0x2000 data VBLOCK_DEV 0x1066000 0x2000 data RW_NVRAM 0x1068000 0x6000 data VBLOCK_B 0x1200000 0x2000 data RW_FWID_B 0x18fffc0 0x40 data RO_VPD 0x1900000 0x4000 data RO_GSCVD 0x1904000 0x2000 data FMAP 0x1906000 0x800 data RO_FRID 0x1906800 0x40 data GBB 0x1907000 0x3000 data"},{"location":"variants/novacustom_v540tu/openness-score/#ifd-regions_1","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00006000 0x0088afff 0x885000 closed-source Flash Descriptor 0x00000000 0x00003fff 0x4000 data GbE 0x00004000 0x00005fff 0x2000 empty"},{"location":"variants/novacustom_v540tu/openness-score/#cbfs-fw_main_a_1","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 7331776</li> <li>Number of files: 15</li> <li>Open-source files size: 2036597 (0x1f1375)</li> <li>Closed-source files size: 1237591 (0x12e257)</li> <li>Data size: 9776 (0x2630)</li> <li>Empty size: 4047812 (0x3dc3c4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1757121 none open-source fallback/romstage stage 96280 none open-source fallback/ramstage stage 153503 LZMA open-source fallback/dsdt.aml raw 21837 none open-source ec.rom raw 15498 LZMA open-source fallback/postcar stage 44748 none open-source cpu_microcode_blob.bin microcode 136192 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 262577 LZ4 closed-source config raw 5787 LZMA data revision raw 879 none data build_info raw 123 none data vbt.bin raw 1287 LZMA data (empty) null 1444 none empty (empty) null 4046368 none empty"},{"location":"variants/novacustom_v540tu/openness-score/#cbfs-bootsplash_1","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 1048576</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 1048548 (0xfffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 1048548 none empty"},{"location":"variants/novacustom_v540tu/openness-score/#cbfs-fw_main_b","title":"CBFS FW_MAIN_B","text":"<ul> <li>CBFS size: 7331776</li> <li>Number of files: 15</li> <li>Open-source files size: 2036597 (0x1f1375)</li> <li>Closed-source files size: 1237591 (0x12e257)</li> <li>Data size: 9776 (0x2630)</li> <li>Empty size: 4047812 (0x3dc3c4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1757121 none open-source fallback/romstage stage 96280 none open-source fallback/ramstage stage 153503 LZMA open-source fallback/dsdt.aml raw 21837 none open-source ec.rom raw 15498 LZMA open-source fallback/postcar stage 44748 none open-source cpu_microcode_blob.bin microcode 136192 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 262577 LZ4 closed-source config raw 5787 LZMA data revision raw 879 none data build_info raw 123 none data vbt.bin raw 1287 LZMA data (empty) null 1444 none empty (empty) null 4046368 none empty"},{"location":"variants/novacustom_v540tu/openness-score/#cbfs-coreboot_2","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 7299072</li> <li>Number of files: 20</li> <li>Open-source files size: 2152229 (0x20d725)</li> <li>Closed-source files size: 1237591 (0x12e257)</li> <li>Data size: 11132 (0x2b7c)</li> <li>Empty size: 3898120 (0x3b7b08)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1757121 none open-source fallback/romstage stage 96280 none open-source fallback/ramstage stage 153503 LZMA open-source fallback/dsdt.aml raw 21837 none open-source ec.rom raw 15498 LZMA open-source fallback/postcar stage 44748 none open-source fallback/verstage stage 78320 none open-source bootblock bootblock 37312 none open-source cpu_microcode_blob.bin microcode 136192 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 262577 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 80 none data config raw 5787 LZMA data revision raw 879 none data build_info raw 123 none data vbt.bin raw 1287 LZMA data cmos_layout.bin cmos_layout 800 none data (empty) null 292 none empty (empty) null 3897828 none empty"},{"location":"variants/novacustom_v540tu/releases/","title":"NovaCustom V540TU Dasharo Release Notes","text":"<p>Following Release Notes describe status of open-source firmware development for NovaCustom V540TU</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to NovaCustom V540TU 14th Gen Dasharo Release Newsletter"},{"location":"variants/novacustom_v540tu/releases/#v100-2025-09-18","title":"v1.0.0 - 2025-09-18","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_v540tu/releases/#added","title":"Added","text":"<ul> <li>Quiet boot/Fast boot</li> <li>FTDI controller support</li> <li>Dasharo TrustRoot (Intel Boot Guard) support</li> <li>Sleep-and-charge ports</li> <li>Sleep type option</li> <li>PCR-0 reconstruction</li> <li>ACPI driver</li> <li>UEFI Capsule Update support</li> <li>Fedora support</li> </ul>"},{"location":"variants/novacustom_v540tu/releases/#changed","title":"Changed","text":"<ul> <li>coreboot rebased on 24.12</li> <li>EDK II rebased on edk2-stable202502</li> <li>UEFI DBX updated to 2025-06-13</li> <li>Owner GUID of Secure Boot DB and KEK to Microsoft recommended values</li> </ul>"},{"location":"variants/novacustom_v540tu/releases/#fixed","title":"Fixed","text":"<ul> <li>No HDMI output in FW on V540TU and V560TU</li> <li>Laggy behaviour on Manjaro (KDE) with open drivers</li> <li>Battery draining in sleep mode on Windows 11</li> <li>Small text in setup menu</li> <li>External boot file to USB flash drive not found after rebooting</li> <li>XFCE battery indicator keeps switching charge state when fully charged</li> <li>Laptop starts after shutting down if WiFi is firmware-disabled</li> <li>No HDMI output in firmware</li> <li>Integrated graphics driver does not load (Windows 11)</li> <li>Windows 11 fails to resume from hibernation</li> <li>BIOS settings are randomly reset</li> <li>Booting DTS v2.0.0 through iPXE has no internet</li> <li>Wrong serial number printed in console</li> <li>No external HDMI display (Firmware)</li> </ul>"},{"location":"variants/novacustom_v540tu/releases/#known-issues","title":"Known issues","text":"<ul> <li>Previous power state restoration doesn't work</li> <li>Artifacts in video playback in some players using HW acceleration</li> <li>Only native resolution listed for internal panel</li> <li>Early DMA protection cannot be applied to NovaCustom MTL</li> <li>Spurious USB 3 disconnects with Sonnet Echo 11 Thunderbolt 4 dock</li> <li>Logo out of proportion</li> <li>GRUB installation fails sometimes</li> <li>Capsule Updates require ME to be manually disabled</li> <li>Capsule update signing is not enforced</li> <li>Microphone mute Fn key doesn't work in Windows</li> <li>48GB SODIMMs get hot during MemTest86+</li> </ul>"},{"location":"variants/novacustom_v540tu/releases/#binaries","title":"Binaries","text":"<p>novacustom_v54x_mtl_igpu_ec_v1.0.0.rom sha256 sha256.sig</p> <p>novacustom_v54x_mtl_igpu_v1.0.0_btg_provisioned.cap sha256 sha256.sig</p> <p>novacustom_v54x_mtl_igpu_v1.0.0_btg_provisioned.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_v540tu/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 25.03 revision 91420dbc</li> <li>Dasharo EDKII fork based on edk2-stable202502 revision 1c50dad8</li> <li>Dasharo iPXE fork based on 2025.03 revision 6c7068fc<ul> <li>License</li> </ul> </li> <li>vboot based on 3d37d2aafe revision f1f70f46<ul> <li>License</li> </ul> </li> <li>Intel Management Engine version v18.0.10.2285<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package for Meteor Lake-H version 2024/04/30 v4122_12<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor version v1.0<ul> <li>License</li> </ul> </li> <li>Intel microcode version MTL C0 0x00000020 0x25 19/03/2025<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/novacustom_v540tu/releases/#v090-2024-07-18","title":"v0.9.0 - 2024-07-18","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_v540tu/releases/#added_1","title":"Added","text":"<ul> <li>Support for NovaCustom Meteor Lake platform (integrated graphics)</li> <li>Vboot Verified Boot</li> <li>TPM Measured Boot</li> <li>Vboot recovery notification in UEFI Payload</li> <li>UEFI Shell</li> <li>UEFI Secure Boot</li> <li>Firmware update mode</li> <li>BIOS boot medium write-protection</li> <li>SMM BIOS write protection</li> <li>Early boot DMA protection</li> <li>Early Sign of Life display output</li> <li>Current limiting for USB-PD power supplies</li> <li>Setup menu password configuration</li> <li>Wi-Fi / Bluetooth module disable option in setup menu</li> <li>Built-in webcam disable option in setup menu</li> <li>USB stack disable option in setup menu</li> <li>Network stack disable option in setup menu</li> <li>Battery threshold options in setup menu</li> <li>Intel ME disable option in setup menu</li> <li>Block boot when battery is too low</li> <li>Power on AC option in setup menu</li> <li>Keyboard backlight level is restored after suspend or poweroff</li> <li>Fan profiles in setup Menu</li> <li>Fn lock hotkey feature</li> <li>Throttling temperature adjustment in setup menu</li> </ul>"},{"location":"variants/novacustom_v540tu/releases/#known-issues_1","title":"Known issues","text":"<ul> <li>No HDMI output in FW on V540TU and V560TU</li> <li>Laggy behaviour on Manjaro (KDE) with open drivers</li> <li>V540TU: Option Previous power state restoration doesn't work</li> <li>Artifacts in video playback in some players using HW acceleration</li> <li>Only native resolution listed for internal panel</li> </ul>"},{"location":"variants/novacustom_v540tu/releases/#binaries_1","title":"Binaries","text":"<p>novacustom_v54x_mtl_ec_v0.9.0.rom sha256 sha256.sig</p> <p>novacustom_v54x_mtl_v0.9.0.rom sha256 sha256.sig</p> <p>novacustom_v54x_mtl_v0.9.0_dev_signed.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_v540tu/releases/#sbom-software-bill-of-materials_1","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 24.02 revision 316f964c</li> <li>Dasharo EDKII fork based on edk2-stable202402 revision cc2be228</li> </ul>"},{"location":"variants/novacustom_v540tu/releases_heads/","title":"NovaCustom V540TU 14th Gen Dasharo (coreboot + heads) Release Notes","text":"<p>This is a Dasharo Pro Package Release. To obtain access to the pre-built binaries you will have to become a Dasharo Pro Package subscriber. You can do this by purchasing a Dasharo Pro Package product from our shop. As a subscriber, you will receive access to all firmware updates for the duration of your subscription via the Dasharo Pro Package newsletter, and gain entry to the Dasharo Premier Support invite-only live chat on the Matrix network, enabling direct engagement with the Dasharo Team and fellow subscribers for personalized, priority assistance.</p> <p>This document contains the release notes for Heads firmware for NovaCustom V540TU series of laptops.</p> <p>Tests were conducted only on the Full HD  model.</p> <p>Test matrix and results will be published here.</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to NovaCustom V54x 14th Gen Dasharo Release Newsletter"},{"location":"variants/novacustom_v540tu/releases_heads/#v090-2025-03-20","title":"v0.9.0 - 2025-03-20","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_v540tu/releases_heads/#added","title":"Added","text":"<ul> <li>Configured correct clock for GbE on Clevo/MTL-H</li> <li>Fixed touchpad IRQ pin assignment on Clevo/MTL-H</li> <li>Adjusted ACPI configuration to fix missing CNVi pinmux</li> <li>Meteor Lake graphics operations integrated into SoC</li> <li>Clevo/MTL-H PCIe root port flags added</li> <li>Windows BSOD caused by missing ACPI device names</li> <li>RTC failure workaround for MRC fastboot</li> <li>SPD size correctly set for Clevo/MTL-H</li> <li>Corrected temperature control offsets in Meteor Lake</li> <li>Fixed duplicate temperature symbol in Kconfig</li> <li>Introduced Quiet Mode for reduced technical output in logs</li> <li>Added TPM extend operations logging while maintaining quiet mode</li> <li>Added support for GPG Admin/User PIN output grabbing for Nitrokey HOTP verification</li> <li>Integrated EFF Diceware short wordlist v2 for easier passphrase generation</li> <li>Introduced automatic Secrets App reset logic for Nitrokey 3</li> <li>Unified and enhanced passphrase generation logic in recovery shell</li> <li>Support for Novacustom V54 (v540tu)</li> <li>Quiet Mode now logs all technical details to /tmp/debug.log instead of   showing them in the console</li> <li>Improved TPM2 primary handle debugging and error handling</li> <li>Refactored the OEM Factory Reset process to clarify mode-based security implications</li> <li>Improved kexec boot configuration handling with enhanced security warnings</li> <li>Transitioned from <code>ash</code> shell to <code>bash</code> for improved scripting consistency</li> <li>Suppressed unnecessary grep errors for missing <code>/etc/config.user</code></li> <li>Resolved logging inconsistencies when performing TPM resets</li> <li>Fixed Secure App PIN handling during Nitrokey 3 re-ownership</li> <li>Corrected Diceware dictionary parsing and selection method for unbiased passphrase generation</li> <li>Eliminated redundant USB Security dongle detection messages</li> </ul>"},{"location":"variants/novacustom_v540tu/releases_heads/#known-issues","title":"Known issues","text":"<ul> <li>Some unexpected errors in dmesg</li> <li>Lesser performance in comparison with NVIDIA variants</li> </ul>"},{"location":"variants/novacustom_v540tu/releases_heads/#binaries","title":"Binaries","text":"<p>sha256 sha256.sig</p> <p>sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_v540tu/releases_heads/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo heads fork based on v0.2.1 revision 5383a0c3<ul> <li>License</li> </ul> </li> <li>Dasharo fork of System76 EC based on 485f3900 revision 4ae73b9d<ul> <li>License</li> </ul> </li> <li>vboot based on 3d37d2aa revision 3d37d2aa<ul> <li>License</li> </ul> </li> <li>Intel Management Engine version v18.0.5.2040<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor version v1.0<ul> <li>License</li> </ul> </li> <li>Intel microcode version MTL C0 0x0000001c 0x1c 03/01/2024<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package for Meteor Lake-H version 2024/04/30 v4122_12<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/novacustom_v540tu/test-matrix/","title":"Test matrix","text":""},{"location":"variants/novacustom_v540tu/test-matrix/#about","title":"About","text":"<p>The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.</p> <p>Please refer to the tests results spreadsheet.</p>"},{"location":"variants/novacustom_v560tnx/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/novacustom_v560tnx/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configurations used for validation of the coreboot port on the NovaCustom V560TNx laptop.</p>"},{"location":"variants/novacustom_v560tnx/hardware-matrix/#ports-specification","title":"Ports specification","text":""},{"location":"variants/novacustom_v560tnx/hardware-matrix/#front-view","title":"Front View","text":"No. Description 1. LED Indicators"},{"location":"variants/novacustom_v560tnx/hardware-matrix/#rear-view","title":"Rear View","text":"No. Description 1. RJ-45 LAN Jack 2. HDMI-Out Port 3. Vent/Fan Intake/Outlet"},{"location":"variants/novacustom_v560tnx/hardware-matrix/#left-side-view","title":"Left side view","text":"No. Description 1. Security Lock Slot 2. Vent 3. MicroSD Card Reader 4. USB 3.2 Gen 1 Type A Port 5. 2-In-1 Audio Jack (Headphone and Microphone) 6. Speaker"},{"location":"variants/novacustom_v560tnx/hardware-matrix/#right-side-view","title":"Right side view","text":"No. Description 1. Speaker 2. USB 3.2 Gen 2 Port (Type C) with DP 1.4, PD DC-in and Always On USB 3. Thunderbolt\u2122 4 (Type C) with PD DC-in and Always On USB 4. USB 3.2 Gen 2 Port (Type A) with Always On USB 5. DC-In Jack <p>The graphics used are from pages 16-19 of the official end user manual for the V540TNx platforms.</p>"},{"location":"variants/novacustom_v560tnx/hardware-matrix/#v560tnd","title":"V560TND","text":"Component Description CPU Intel(R) Core(TM) Ultra 7 155H Internal Cooling GPU 1. Intel ARC Graphics Integrated GPU 2. NVIDIA GeForce RTX 4060 discrete GPU RAM Slot 1: W-NM56S516G SSD Goodram PX700 1TB Flash memory GigaDevice 25LB256FYIG USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card 1 Intel Wi-Fi 6E AX211 Wireless card 2 Intel Wi-Fi 7 BE200 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1200 16 inch screen 2. Internal ISO keyboard 3. Touchpad 4. Camera 5. Audio subsystem Attached devices The platform is tested with every docking station/hub listed in HCL Power Supply Chicony 20V, 9A, 180 W"},{"location":"variants/novacustom_v560tnx/hardware-matrix/#v560tne","title":"V560TNE","text":"Component Description CPU Intel(R) Core(TM) Ultra 7 155H Internal Cooling GPU 1. Intel ARC Graphics Integrated GPU 2. NVIDIA GeForce RTX 4070 discrete GPU RAM Slot 1: W-NM56S516G SSD Goodram PX700 1TB Flash memory GigaDevice 25LB256FYIG USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card 1 Intel Wi-Fi 6E AX211 Wireless card 2 Intel Wi-Fi 7 BE200 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 2560x1600 16 inch screen 2. Internal ISO keyboard 3. Touchpad 4. Camera 5. Audio subsystem Attached devices The platform is tested with every docking station/hub listed in HCL Power Supply Chicony 20V, 9A, 180 W"},{"location":"variants/novacustom_v560tnx/openness-score/","title":"Dasharo Openness Score v0.2.0","text":"<p>This page contains the Dasharo Openness Score for NovaCustom V56xTNx Dasharo releases. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/novacustom_v560tnx/openness-score/#v091","title":"v0.9.1","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for novacustom_v56x_mtl_v0.9.1.rom</p> <p>Open-source code percentage: 32.6% Closed-source code percentage: 67.4%</p> <ul> <li>Image size: 33554432 (0x2000000)</li> <li>Number of regions: 31</li> <li>Number of CBFSes: 4</li> <li>Total open-source code size: 6341706 (0x60c44a)</li> <li>Total closed-source code size: 13088979 (0xc7b8d3)</li> <li>Total data size: 553007 (0x8702f)</li> <li>Total empty size: 13083316 (0xc7a2b4)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/novacustom_v560tnx/openness-score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category VBLOCK_A 0x900000 0x2000 data RW_FWID_A 0xffffc0 0x40 data RECOVERY_MRC_CACHE 0x1000000 0x10000 data RW_MRC_CACHE 0x1010000 0x10000 data SMMSTORE 0x1020000 0x40000 data RW_ELOG 0x1060000 0x4000 data SHARED_DATA 0x1064000 0x2000 data VBLOCK_DEV 0x1066000 0x2000 data RW_NVRAM 0x1068000 0x6000 data VBLOCK_B 0x1200000 0x2000 data RW_FWID_B 0x18fffc0 0x40 data RO_VPD 0x1900000 0x4000 data RO_GSCVD 0x1904000 0x2000 data FMAP 0x1906000 0x800 data RO_FRID 0x1906800 0x40 data GBB 0x1907000 0x3000 data"},{"location":"variants/novacustom_v560tnx/openness-score/#ifd-regions","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00004000 0x00888fff 0x885000 closed-source Flash Descriptor 0x00000000 0x00003fff 0x4000 data"},{"location":"variants/novacustom_v560tnx/openness-score/#cbfs-fw_main_a","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 7331776</li> <li>Number of files: 14</li> <li>Open-source files size: 2075734 (0x1fac56)</li> <li>Closed-source files size: 1185201 (0x1215b1)</li> <li>Data size: 9717 (0x25f5)</li> <li>Empty size: 4061124 (0x3df7c4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1752592 none open-source fallback/romstage stage 102472 none open-source fallback/ramstage stage 152870 LZMA open-source fallback/dsdt.aml raw 25200 none open-source fallback/postcar stage 42600 none open-source cpu_microcode_blob.bin microcode 136192 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 262577 LZ4 closed-source config raw 5823 LZMA data revision raw 859 none data build_info raw 103 none data vbt.bin raw 1277 LZMA data (empty) null 356 none empty (empty) null 4060768 none empty"},{"location":"variants/novacustom_v560tnx/openness-score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 1048576</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 1048548 (0xfffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 1048548 none empty"},{"location":"variants/novacustom_v560tnx/openness-score/#cbfs-fw_main_b","title":"CBFS FW_MAIN_B","text":"<ul> <li>CBFS size: 7331776</li> <li>Number of files: 14</li> <li>Open-source files size: 2075734 (0x1fac56)</li> <li>Closed-source files size: 1185201 (0x1215b1)</li> <li>Data size: 9717 (0x25f5)</li> <li>Empty size: 4061124 (0x3df7c4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1752592 none open-source fallback/romstage stage 102472 none open-source fallback/ramstage stage 152870 LZMA open-source fallback/dsdt.aml raw 25200 none open-source fallback/postcar stage 42600 none open-source cpu_microcode_blob.bin microcode 136192 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 262577 LZ4 closed-source config raw 5823 LZMA data revision raw 859 none data build_info raw 103 none data vbt.bin raw 1277 LZMA data (empty) null 356 none empty (empty) null 4060768 none empty"},{"location":"variants/novacustom_v560tnx/openness-score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 7299072</li> <li>Number of files: 19</li> <li>Open-source files size: 2190238 (0x216b9e)</li> <li>Closed-source files size: 1185201 (0x1215b1)</li> <li>Data size: 11113 (0x2b69)</li> <li>Empty size: 3912520 (0x3bb348)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1752592 none open-source fallback/romstage stage 102472 none open-source fallback/ramstage stage 152870 LZMA open-source fallback/dsdt.aml raw 25200 none open-source fallback/postcar stage 42600 none open-source fallback/verstage stage 78728 none open-source bootblock bootblock 35776 none open-source cpu_microcode_blob.bin microcode 136192 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 262577 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 80 none data config raw 5823 LZMA data revision raw 859 none data build_info raw 103 none data vbt.bin raw 1277 LZMA data cmos_layout.bin cmos_layout 800 none data (empty) null 100 none empty (empty) null 3912420 none empty"},{"location":"variants/novacustom_v560tnx/releases/","title":"NovaCustom V56xTNx 14th Gen Dasharo Release Notes","text":"<p>Following Release Notes describe status of open-source firmware development for NovaCustom V56xTNx 14th Gen</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to NovaCustom V56xTNx 14th Gen Dasharo Release Newsletter"},{"location":"variants/novacustom_v560tnx/releases/#v091-2024-11-07","title":"v0.9.1 - 2024-11-07","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_v560tnx/releases/#added","title":"Added","text":"<ul> <li>Support for NovaCustom Meteor Lake platform (discrete graphics)</li> <li>Vboot Verified Boot</li> <li>TPM Measured Boot</li> <li>Vboot recovery notification in UEFI Payload</li> <li>UEFI Shell</li> <li>UEFI Secure Boot</li> <li>Firmware update mode</li> <li>BIOS boot medium write-protection</li> <li>SMM BIOS write protection</li> <li>Current limiting for USB-PD power supplies</li> <li>Setup menu password configuration</li> <li>Wi-Fi / Bluetooth module disable option in setup menu</li> <li>Built-in webcam disable option in setup menu</li> <li>USB stack disable option in setup menu</li> <li>Network stack disable option in setup menu</li> <li>Battery threshold options in setup menu</li> <li>Intel ME disable option in setup menu</li> <li>Block boot when battery is too low</li> <li>Power on AC option in setup menu</li> <li>Keyboard backlight level is restored after suspend or poweroff</li> <li>Fan profiles in setup Menu</li> <li>Fn lock hotkey feature</li> <li>Throttling temperature adjustment in setup menu</li> </ul>"},{"location":"variants/novacustom_v560tnx/releases/#known-issues","title":"Known issues","text":"<ul> <li>No HDMI output in FW</li> <li>Artifacts in video playback in some players using HW acceleration</li> <li>Only native resolution listed for internal panel</li> <li>Microphone mute Fn key doesn't work in Windows</li> <li>CPU frequency measurements sometimes go below known minimum</li> <li>Some flash drives may not be detected after reboot</li> <li>I2C controller timeout with SPD5118 driver</li> <li>Echo11 Docking station SD Reader failure (ME Disabled)</li> <li>Spurious USB 3 disconnects with Sonnet Echo 11 Thunderbolt 4 dock</li> <li>48GB SODIMMs get hot during MemTest86+</li> </ul>"},{"location":"variants/novacustom_v560tnx/releases/#binaries","title":"Binaries","text":"<p>novacustom_v56x_mtl_ec_v0.9.1.rom sha256 sha256.sig</p> <p>novacustom_v56x_mtl_v0.9.1.rom sha256 sha256.sig</p> <p>novacustom_v56x_mtl_v0.9.1_dev_signed.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_v560tnx/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo fork of coreboot based on 24.02 revision c44f1998<ul> <li>License</li> </ul> </li> <li>Dasharo fork of EDKII based on edk2-stable202402 revision f3e18c6c<ul> <li>License</li> </ul> </li> <li>Dasharo fork of edk2-platforms based on 8ea6ec38 revision 3323ed48<ul> <li>License</li> </ul> </li> <li>Dasharo fork of System76 EC based on 485f3900 revision 3e931cf8<ul> <li>License</li> </ul> </li> <li>Dasharo fork of iPXE based on d2d194bc revision 35d84756<ul> <li>License</li> </ul> </li> <li>vboot based on 3d37d2aa revision 3d37d2aa<ul> <li>License</li> </ul> </li> <li>Intel Management Engine based on v18.0.5.2040 revision 3541ad31<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor based on v1.0 revision 3541ad31<ul> <li>License</li> </ul> </li> <li>Intel processor microcode based on MTL C0 0x0000001c revision microcode-20240531<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/novacustom_v560tu/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/novacustom_v560tu/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configurations used for validation of the coreboot port on the NovaCustom V560TU laptop.</p>"},{"location":"variants/novacustom_v560tu/hardware-matrix/#ports-specification","title":"Ports specification","text":""},{"location":"variants/novacustom_v560tu/hardware-matrix/#front-rear-views","title":"Front &amp; Rear Views","text":"No. Description 1. LED Indicators 2. RJ-45 LAN Jack 3. HDMI-Out Port 4. Vent/Fan Intake/Outlet"},{"location":"variants/novacustom_v560tu/hardware-matrix/#left-side-view","title":"Left side view","text":"No. Description 1. Security Lock Slot 2. MicroSD Push-Push Card Reader 3. USB 3.2 Gen 1 Type A Port 4. 2-In-1 Audio Jack (Headphone/Microphone) 5. Speaker"},{"location":"variants/novacustom_v560tu/hardware-matrix/#right-side-view","title":"Right side view","text":"No. Description 1. Speaker 2. USB 3.2 Gen 2 Port (Type C) with PD DC-in and Always On USB 3. Thunderbolt\u2122 4 (Type C) with PD DC-in and Always On USB 4. USB 3.2 Gen 2 Port (Type A) with Always On USB 5. DC-In Jack <p>The graphics used are from pages 43-47 of the official end user manual for the V546TU platforms.</p>"},{"location":"variants/novacustom_v560tu/hardware-matrix/#v560tu","title":"V560TU","text":"Component Description CPU Intel(R) Core(TM) Ultra 7 155H Internal Cooling RAM Slot 1: W-NM56S516G SSD Goodram PX700 2TB SSD Goodram PX600 250GB Flash memory XMC 25QU256CXIQ USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card 1 Intel Wi-Fi 6E AX211 Wireless card 2 Intel Wi-Fi 7 BE200 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1200 16 inch screen 2. Internal ANSI keyboard 3. Touchpad 4. Camera 5. Audio subsystem Attached devices The platform is tested with every docking station/hub listed in HCL Power Supply Chicony 19V, 4.74A, 90 W"},{"location":"variants/novacustom_v560tu/openness-score/","title":"Dasharo Openness Score v0.2.0","text":"<p>This page contains the Dasharo Openness Score for NovaCustom V540TU Dasharo releases. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/novacustom_v560tu/openness-score/#v100","title":"v1.0.0","text":"<p>Openness Score for novacustom_v56x_mtl_igpu_v1.0.0.rom</p> <p>Open-source code percentage: 22.5% Closed-source code percentage: 77.5%</p> <ul> <li>Image size: 33554432 (0x2000000)</li> <li>Number of regions: 29</li> <li>Number of CBFSes: 3</li> <li>Total open-source code size: 3946028 (0x3c362c)</li> <li>Total closed-source code size: 13593614 (0xcf6c0e)</li> <li>Total data size: 531862 (0x81d96)</li> <li>Total empty size: 15482928 (0xec4030)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/novacustom_v560tu/openness-score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category SI_ME 0x6000 0x9fa000 closed-source SI_DESC 0x0 0x4000 data RECOVERY_MRC_CACHE 0x1000000 0x10000 data RW_MRC_CACHE 0x1010000 0x10000 data SMMSTORE 0x1020000 0x40000 data RW_ELOG 0x1060000 0x4000 data SHARED_DATA 0x1064000 0x2000 data VBLOCK_DEV 0x1066000 0x2000 data RW_NVRAM 0x1068000 0x6000 data VBLOCK_A 0x1200000 0x2000 data RW_FWID_A 0x18fffc0 0x40 data RO_VPD 0x1900000 0x4000 data FMAP 0x1906000 0x800 data RO_FRID 0x1906800 0x40 data GBB 0x1907000 0x3000 data RW_UNUSED 0xa00000 0x600000 empty"},{"location":"variants/novacustom_v560tu/openness-score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 1048576</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 1048548 (0xfffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 1048548 none empty"},{"location":"variants/novacustom_v560tu/openness-score/#cbfs-fw_main_a","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 7331776</li> <li>Number of files: 15</li> <li>Open-source files size: 1923862 (0x1d5b16)</li> <li>Closed-source files size: 1258023 (0x133227)</li> <li>Data size: 10815 (0x2a3f)</li> <li>Empty size: 4139076 (0x3f2844)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1595877 none open-source fallback/romstage stage 114200 none open-source fallback/ramstage stage 165588 LZMA open-source fallback/dsdt.aml raw 23083 none open-source fallback/postcar stage 77504 none open-source cpu_microcode_blob.bin microcode 140288 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 262577 LZ4 closed-source config raw 6408 LZMA data revision raw 864 none data build_info raw 111 none data vbt.bin raw 1745 LZ4 data (empty) null 356 none empty (empty) null 4138720 none empty"},{"location":"variants/novacustom_v560tu/openness-score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 7299072</li> <li>Number of files: 21</li> <li>Open-source files size: 2022166 (0x1edb16)</li> <li>Closed-source files size: 1258023 (0x133227)</li> <li>Data size: 15035 (0x3abb)</li> <li>Empty size: 4003848 (0x3d1808)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1595877 none open-source fallback/romstage stage 114200 none open-source fallback/ramstage stage 165588 LZMA open-source fallback/dsdt.aml raw 23083 none open-source fallback/postcar stage 77504 none open-source bootblock bootblock 98304 none open-source cpu_microcode_blob.bin microcode 140288 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 262577 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 272 none data boot_policy_manifest.bin raw 1536 none data key_manifest.bin raw 1024 none data config raw 6408 LZMA data revision raw 864 none data build_info raw 111 none data cmos_layout.bin cmos_layout 800 none data vbt.bin raw 1745 LZ4 data (empty) null 292 none empty (empty) null 4003556 none empty"},{"location":"variants/novacustom_v560tu/openness-score/#v090-heads","title":"v0.9.0 Heads","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for novacustom_v56x_mtl_v0.9.0_heads.rom</p> <p>Open-source code percentage: 35.2% Closed-source code percentage: 64.8%</p> <ul> <li>Image size: 33554432 (0x2000000)</li> <li>Number of regions: 7</li> <li>Number of CBFSes: 1</li> <li>Total open-source code size: 9730808 (0x947af8)</li> <li>Total closed-source code size: 17937841 (0x111b5b1)</li> <li>Total data size: 126927 (0x1efcf)</li> <li>Total empty size: 5758856 (0x57df88)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/novacustom_v560tu/openness-score/#fmap-regions_1","title":"FMAP regions","text":"FMAP region Offset Size Category RW_MRC_CACHE 0x1000000 0x10000 data FMAP 0x1010000 0x200 data"},{"location":"variants/novacustom_v560tu/openness-score/#ifd-regions","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00006000 0x0088afff 0x885000 closed-source Flash Descriptor 0x00000000 0x00003fff 0x4000 data GbE 0x00004000 0x00005fff 0x2000 data"},{"location":"variants/novacustom_v560tu/openness-score/#cbfs-coreboot_1","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 16711168</li> <li>Number of files: 19</li> <li>Open-source files size: 9730808 (0x947af8)</li> <li>Closed-source files size: 1185201 (0x1215b1)</li> <li>Data size: 36303 (0x8dcf)</li> <li>Empty size: 5758856 (0x57df88)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 9387194 none open-source fallback/romstage stage 90376 none open-source fallback/ramstage stage 165985 LZMA open-source fallback/dsdt.aml raw 21829 none open-source fallback/postcar stage 34384 none open-source bootblock bootblock 31040 none open-source cpu_microcode_blob.bin microcode 136192 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 262577 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 80 none data config raw 4879 LZMA data revision raw 867 none data build_info raw 97 none data bootsplash.jpg bootsplash 26784 none data vbt.bin raw 1269 LZMA data cmos_layout.bin cmos_layout 800 none data (empty) null 484 none empty (empty) null 5758372 none empty"},{"location":"variants/novacustom_v560tu/openness-score/#v090","title":"v0.9.0","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for novacustom_v56x_mtl_v0.9.0.rom</p> <p>Open-source code percentage: 32.0% Closed-source code percentage: 68.0%</p> <ul> <li>Image size: 33554432 (0x2000000)</li> <li>Number of regions: 32</li> <li>Number of CBFSes: 4</li> <li>Total open-source code size: 6225987 (0x5f0043)</li> <li>Total closed-source code size: 13246149 (0xca1ec5)</li> <li>Total data size: 553156 (0x870c4)</li> <li>Total empty size: 13049908 (0xc72034)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/novacustom_v560tu/openness-score/#fmap-regions_2","title":"FMAP regions","text":"FMAP region Offset Size Category VBLOCK_A 0x900000 0x2000 data RW_FWID_A 0xffffc0 0x40 data RECOVERY_MRC_CACHE 0x1000000 0x10000 data RW_MRC_CACHE 0x1010000 0x10000 data SMMSTORE 0x1020000 0x40000 data RW_ELOG 0x1060000 0x4000 data SHARED_DATA 0x1064000 0x2000 data VBLOCK_DEV 0x1066000 0x2000 data RW_NVRAM 0x1068000 0x6000 data VBLOCK_B 0x1200000 0x2000 data RW_FWID_B 0x18fffc0 0x40 data RO_VPD 0x1900000 0x4000 data RO_GSCVD 0x1904000 0x2000 data FMAP 0x1906000 0x800 data RO_FRID 0x1906800 0x40 data GBB 0x1907000 0x3000 data"},{"location":"variants/novacustom_v560tu/openness-score/#ifd-regions_1","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00006000 0x0088afff 0x885000 closed-source Flash Descriptor 0x00000000 0x00003fff 0x4000 data GbE 0x00004000 0x00005fff 0x2000 empty"},{"location":"variants/novacustom_v560tu/openness-score/#cbfs-fw_main_a_1","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 7331776</li> <li>Number of files: 15</li> <li>Open-source files size: 2036785 (0x1f1431)</li> <li>Closed-source files size: 1237591 (0x12e257)</li> <li>Data size: 9780 (0x2634)</li> <li>Empty size: 4047620 (0x3dc304)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1757121 none open-source fallback/romstage stage 96280 none open-source fallback/ramstage stage 153488 LZMA open-source fallback/dsdt.aml raw 21837 none open-source ec.rom raw 15701 LZMA open-source fallback/postcar stage 44748 none open-source cpu_microcode_blob.bin microcode 136192 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 262577 LZ4 closed-source config raw 5786 LZMA data revision raw 879 none data build_info raw 123 none data vbt.bin raw 1287 LZMA data (empty) null 1252 none empty (empty) null 4046368 none empty"},{"location":"variants/novacustom_v560tu/openness-score/#cbfs-bootsplash_1","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 1048576</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 1048548 (0xfffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 1048548 none empty"},{"location":"variants/novacustom_v560tu/openness-score/#cbfs-fw_main_b","title":"CBFS FW_MAIN_B","text":"<ul> <li>CBFS size: 7331776</li> <li>Number of files: 15</li> <li>Open-source files size: 2036785 (0x1f1431)</li> <li>Closed-source files size: 1237591 (0x12e257)</li> <li>Data size: 9780 (0x2634)</li> <li>Empty size: 4047620 (0x3dc304)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1757121 none open-source fallback/romstage stage 96280 none open-source fallback/ramstage stage 153488 LZMA open-source fallback/dsdt.aml raw 21837 none open-source ec.rom raw 15701 LZMA open-source fallback/postcar stage 44748 none open-source cpu_microcode_blob.bin microcode 136192 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 262577 LZ4 closed-source config raw 5786 LZMA data revision raw 879 none data build_info raw 123 none data vbt.bin raw 1287 LZMA data (empty) null 1252 none empty (empty) null 4046368 none empty"},{"location":"variants/novacustom_v560tu/openness-score/#cbfs-coreboot_2","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 7299072</li> <li>Number of files: 20</li> <li>Open-source files size: 2152417 (0x20d7e1)</li> <li>Closed-source files size: 1237591 (0x12e257)</li> <li>Data size: 11136 (0x2b80)</li> <li>Empty size: 3897928 (0x3b7a48)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1757121 none open-source fallback/romstage stage 96280 none open-source fallback/ramstage stage 153488 LZMA open-source fallback/dsdt.aml raw 21837 none open-source ec.rom raw 15701 LZMA open-source fallback/postcar stage 44748 none open-source fallback/verstage stage 78320 none open-source bootblock bootblock 37312 none open-source cpu_microcode_blob.bin microcode 136192 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 262577 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 80 none data config raw 5786 LZMA data revision raw 879 none data build_info raw 123 none data vbt.bin raw 1287 LZMA data cmos_layout.bin cmos_layout 800 none data (empty) null 100 none empty (empty) null 3897828 none empty"},{"location":"variants/novacustom_v560tu/releases/","title":"NovaCustom V560TU Dasharo Release Notes","text":"<p>Following Release Notes describe status of open-source firmware development for NovaCustom V560TU</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to NovaCustom V560TU 14th Gen Dasharo Release Newsletter"},{"location":"variants/novacustom_v560tu/releases/#v100-2025-09-18","title":"v1.0.0 - 2025-09-18","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_v560tu/releases/#added","title":"Added","text":"<ul> <li>Quiet boot/Fast boot</li> <li>FTDI controller support</li> <li>Dasharo TrustRoot (Intel Boot Guard) support</li> <li>Sleep-and-charge ports</li> <li>Sleep type option</li> <li>PCR-0 reconstruction</li> <li>ACPI driver</li> <li>UEFI Capsule Update support</li> <li>Fedora support</li> </ul>"},{"location":"variants/novacustom_v560tu/releases/#changed","title":"Changed","text":"<ul> <li>coreboot rebased on 24.12</li> <li>EDK II rebased on edk2-stable202502</li> <li>UEFI DBX updated to 2025-06-13</li> <li>Owner GUID of Secure Boot DB and KEK to Microsoft recommended values</li> </ul>"},{"location":"variants/novacustom_v560tu/releases/#fixed","title":"Fixed","text":"<ul> <li>No HDMI output in FW on V540TU and V560TU</li> <li>Laggy behaviour on Manjaro (KDE) with open drivers</li> <li>Battery draining in sleep mode on Windows 11</li> <li>Small text in setup menu</li> <li>External boot file to USB flash drive not found after rebooting</li> <li>XFCE battery indicator keeps switching charge state when fully charged</li> <li>Laptop starts after shutting down if WiFi is firmware-disabled</li> <li>No HDMI output in firmware</li> <li>Integrated graphics driver does not load (Windows 11)</li> <li>Windows 11 fails to resume from hibernation</li> <li>BIOS settings are randomly reset</li> <li>Booting DTS v2.0.0 through iPXE has no internet</li> <li>Wrong serial number printed in console</li> <li>No external HDMI display (Firmware)</li> </ul>"},{"location":"variants/novacustom_v560tu/releases/#known-issues","title":"Known issues","text":"<ul> <li>Previous power state restoration doesn't work</li> <li>Artifacts in video playback in some players using HW acceleration</li> <li>Only native resolution listed for internal panel</li> <li>Early DMA protection cannot be applied to NovaCustom MTL</li> <li>Spurious USB 3 disconnects with Sonnet Echo 11 Thunderbolt 4 dock</li> <li>Logo out of proportion</li> <li>GRUB installation fails sometimes</li> <li>Capsule Updates require ME to be manually disabled</li> <li>Capsule update signing is not enforced</li> <li>Microphone mute Fn key doesn't work in Windows</li> <li>48GB SODIMMs get hot during MemTest86+</li> </ul>"},{"location":"variants/novacustom_v560tu/releases/#binaries","title":"Binaries","text":"<p>novacustom_v56x_mtl_igpu_ec_v1.0.0.rom sha256 sha256.sig</p> <p>novacustom_v56x_mtl_igpu_v1.0.0_btg_provisioned.cap sha256 sha256.sig</p> <p>novacustom_v56x_mtl_igpu_v1.0.0_btg_provisioned.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_v560tu/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 25.03 revision 91420dbc</li> <li>Dasharo EDKII fork based on edk2-stable202502 revision 1c50dad8</li> <li>Dasharo iPXE fork based on 2025.03 revision 6c7068fc<ul> <li>License</li> </ul> </li> <li>vboot based on 3d37d2aafe revision f1f70f46<ul> <li>License</li> </ul> </li> <li>Intel Management Engine version v18.0.10.2285<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package for Meteor Lake-H version 2024/04/30 v4122_12<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor version v1.0<ul> <li>License</li> </ul> </li> <li>Intel microcode version MTL C0 0x00000020 0x25 19/03/2025<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/novacustom_v560tu/releases/#v090-2024-07-18","title":"v0.9.0 - 2024-07-18","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_v560tu/releases/#added_1","title":"Added","text":"<ul> <li>Support for NovaCustom Meteor Lake platform (integrated graphics)</li> <li>Vboot Verified Boot</li> <li>TPM Measured Boot</li> <li>Vboot recovery notification in UEFI Payload</li> <li>UEFI Shell</li> <li>UEFI Secure Boot</li> <li>Firmware update mode</li> <li>BIOS boot medium write-protection</li> <li>SMM BIOS write protection</li> <li>Early boot DMA protection</li> <li>Early Sign of Life display output</li> <li>Current limiting for USB-PD power supplies</li> <li>Setup menu password configuration</li> <li>Wi-Fi / Bluetooth module disable option in setup menu</li> <li>Built-in webcam disable option in setup menu</li> <li>USB stack disable option in setup menu</li> <li>Network stack disable option in setup menu</li> <li>Battery threshold options in setup menu</li> <li>Intel ME disable option in setup menu</li> <li>Block boot when battery is too low</li> <li>Power on AC option in setup menu</li> <li>Keyboard backlight level is restored after suspend or poweroff</li> <li>Fan profiles in setup Menu</li> <li>Fn lock hotkey feature</li> <li>Throttling temperature adjustment in setup menu</li> </ul>"},{"location":"variants/novacustom_v560tu/releases/#known-issues_1","title":"Known issues","text":"<ul> <li>No HDMI output in FW on V540TU and V560TU</li> <li>Laggy behaviour on Manjaro (KDE) with open drivers</li> <li>V540TU: Option Previous power state restoration doesn't work</li> <li>Artifacts in video playback in some players using HW acceleration</li> <li>Only native resolution listed for internal panel</li> </ul>"},{"location":"variants/novacustom_v560tu/releases/#binaries_1","title":"Binaries","text":"<p>novacustom_v56x_mtl_ec_v0.9.0.rom sha256 sha256.sig</p> <p>novacustom_v56x_mtl_v0.9.0.rom sha256 sha256.sig</p> <p>novacustom_v56x_mtl_v0.9.0_dev_signed.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_v560tu/releases/#sbom-software-bill-of-materials_1","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 24.02 revision 316f964c</li> <li>Dasharo EDKII fork based on edk2-stable202402 revision cc2be228</li> </ul>"},{"location":"variants/novacustom_v560tu/releases_heads/","title":"NovaCustom V560TU 14th Gen Dasharo (coreboot + heads) Release Notes","text":"<p>This is a Dasharo Pro Package Release. To obtain access to the pre-built binaries you will have to become the Dasharo Pro Package subscriber. You can do this by purchasing a Dasharo Pro Package product from our shop. As a subscriber, you will receive access to all firmware updates for the duration of your subscription via the Dasharo Pro Package newsletter, and gain entry to the Dasharo Premier Support invite-only live chat on the Matrix network, enabling direct engagement with the Dasharo Team and fellow subscribers for personalized, priority assistance.</p> <p>This document contains the release notes for Heads firmware for NovaCustom V560TU series of laptops.</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to NovaCustom V54x 14th Gen Dasharo Release Newsletter"},{"location":"variants/novacustom_v560tu/releases_heads/#v090-2025-01-30","title":"v0.9.0 - 2025-01-30","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/novacustom_v560tu/releases_heads/#added","title":"Added","text":"<ul> <li>Support for Novacustom V56 (v560tu)</li> <li>Configured correct clock for GbE on Clevo/MTL-H</li> <li>Fixed touchpad IRQ pin assignment on Clevo/MTL-H</li> <li>Adjusted ACPI configuration to fix missing CNVi pinmux</li> <li>Meteor Lake graphics operations integrated into SoC</li> <li>Clevo/MTL-H PCIe root port flags added</li> <li>Windows BSOD caused by missing ACPI device names</li> <li>RTC failure workaround for MRC fastboot</li> <li>SPD size correctly set for Clevo/MTL-H</li> <li>Corrected temperature control offsets in Meteor Lake</li> <li>Fixed duplicate temperature symbol in Kconfig</li> <li>Introduced Quiet Mode for reduced technical output in logs</li> <li>Added TPM extend operations logging while maintaining quiet mode</li> <li>Added support for GPG Admin/User PIN output grabbing for Nitrokey HOTP verification</li> <li>Integrated EFF Diceware short wordlist v2 for easier passphrase generation</li> <li>Introduced automatic Secrets App reset logic for Nitrokey 3</li> <li>Unified and enhanced passphrase generation logic in recovery shell</li> <li>Quiet Mode now logs all technical details to /tmp/debug.log instead of   showing them in the console</li> <li>Improved TPM2 primary handle debugging and error handling</li> <li>Refactored the OEM Factory Reset process to clarify mode-based security implications</li> <li>Improved kexec boot configuration handling with enhanced security warnings</li> <li>Transitioned from <code>ash</code> shell to <code>bash</code> for improved scripting consistency</li> <li>Suppressed unnecessary grep errors for missing <code>/etc/config.user</code></li> <li>Resolved logging inconsistencies when performing TPM resets</li> <li>Fixed Secure App PIN handling during Nitrokey 3 re-ownership</li> <li>Corrected Diceware dictionary parsing and selection method for unbiased passphrase generation</li> <li>Eliminated redundant USB Security dongle detection messages</li> </ul>"},{"location":"variants/novacustom_v560tu/releases_heads/#known-issues","title":"Known issues","text":"<ul> <li>Some unexpected errors in dmesg</li> <li>Performance increase for -TU Series (comparison with NVIDIA variants) - coreboot issue</li> </ul>"},{"location":"variants/novacustom_v560tu/releases_heads/#binaries","title":"Binaries","text":"<p>sha256 sha256.sig</p> <p>sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/novacustom_v560tu/releases_heads/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo heads fork based on v0.2.1 revision bbbca5d4<ul> <li>License</li> </ul> </li> <li>Dasharo fork of System76 EC based on 485f3900 revision 368e08e0<ul> <li>License</li> </ul> </li> <li>vboot based on 3d37d2aa revision 3d37d2aa<ul> <li>License</li> </ul> </li> <li>Intel Management Engine version v18.0.5.2040<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor version v1.0<ul> <li>License</li> </ul> </li> <li>Intel microcode version MTL C0 0x1c 03/01/2024<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package for Meteor Lake-H version 2024/04/30 v4122_12<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/novacustom_v560tu/test-matrix/","title":"Test matrix","text":""},{"location":"variants/novacustom_v560tu/test-matrix/#about","title":"About","text":"<p>The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.</p> <p>Please refer to the tests results spreadsheet.</p>"},{"location":"variants/pc_engines/bios-lock/","title":"BIOS Lock","text":"<p>This document describes the firmware write protect functionality integrated into Dasharo (coreboot + UEFI) firmware for PC Engines platforms.</p>"},{"location":"variants/pc_engines/bios-lock/#implementation","title":"Implementation","text":"<p>The option <code>Lock the BIOS Boot Medium</code> controls the flash protection feature of the BIOS boot flash. If enabled, pins 1-2 on header J2 (apu2) / J3 (apu3,4,6) can be shorted to prevent writes to the BIOS bootblock and recovery regions.</p> <p>When the option is enabled and the WP header is set, firmware write protection cannot be disabled until the header is physically unshorted, even by disabling the lock in the UEFI setup menu.</p> <p>Note</p> <p>User-updatable firmware regions remain writable while BIOS Lock is enabled to support non-volatile EFI variables and other features.</p>"},{"location":"variants/pc_engines/bios-lock/#enabling-bios-write-protection","title":"Enabling BIOS Write Protection","text":"<p>To enable BIOS write protection:</p> <ul> <li>Enter UEFI Setup Menu</li> <li>Enter Dasharo System Features -&gt; Dasharo Security Options</li> <li>Set the option to enable write protection</li> <li>Save and reboot</li> <li>Power off the platform</li> <li>Bridge pins 1 and 2 on header J2 (apu2) / J3 (apu3,4,6)</li> </ul> <p>The firmware is now write protected. Protection is guaranteed as long as the jumper is set.</p>"},{"location":"variants/pc_engines/bios-lock/#disabling-bios-write-protection","title":"Disabling BIOS Write Protection","text":"<p>To disable BIOS write protection:</p> <ul> <li>Unbridge the WP pins</li> <li>Power on the platform and enter UEFI Setup Menu</li> <li>Enter Dasharo System Features -&gt; Dasharo Security Options</li> <li>Unset the option to enable write protection</li> <li>Save and reboot</li> <li> <p>Boot into a Linux OS. You can now re-flash your firmware by e.g.:</p> <pre><code>sudo flashrom -p internal -c \"W25Q64JV-.Q\" -w pcengines_apu2_v0.9.0.rom\n</code></pre> </li> </ul> <p>Note</p> <p>Firmware write protection is not disabled until you actually attempt to write to the flash. Flashrom will automatically disable block write protection when attempting to write to the flash.</p> <p>See issue #754 for more information.</p>"},{"location":"variants/pc_engines/building-manual/","title":"Building manual","text":""},{"location":"variants/pc_engines/building-manual/#intro","title":"Intro","text":"<p>This document describes the procedure for compiling Dasharo for PC Engines apu2/3/4/6 platform.</p>"},{"location":"variants/pc_engines/building-manual/#requirements","title":"Requirements","text":"<ul> <li>Docker<ul> <li>follow Install Docker Engine on Ubuntu</li> <li>follow Post-installation steps for Linux</li> </ul> </li> <li>Git</li> </ul> <p>Alternatively Fedora can be used instead of Ubuntu by following the same steps except: Install Docker Engine on Fedora</p>"},{"location":"variants/pc_engines/building-manual/#build-dasharo-firmware","title":"Build Dasharo firmware","text":"(coreboot+UEFI) firmware(coreboot+SeaBIOS) firmware <ol> <li> <p>Clone the coreboot repository:</p> <pre><code>git clone https://github.com/Dasharo/coreboot\n</code></pre> </li> <li> <p>Checkout the desired version:</p> <p>Replace VERSION with desired version number, e.g. <code>v0.9.0</code>: <code>git checkout pcengines_apu2_v0.9.0</code></p> <pre><code>cd coreboot\ngit checkout pcengines_apu2_VERSION\n</code></pre> </li> <li> <p>Checkout submodules:</p> <pre><code>git submodule update --init --checkout\n</code></pre> </li> <li> <p>Build the firmware:</p> <p>Replace X with correct apu platform, e.g. 2, 3, 4, 6 (apu5 is not supported by UEFI builds).</p> <pre><code>./build.sh apuX\n</code></pre> </li> </ol> <p>The resulting coreboot image will be placed in the coreboot directory as <code>pcengines_apuX_v0.9.rom</code>, <code>protectli_V1410.rom</code> or <code>protectli_V1610.rom</code> respectvely.</p> <p>This release is built using the Dasharo Patchqueue Initiative, which is a proof of concept of a new approach to Dasharo coreboot downstream maintenance. Please follow the dasharo-pq and pce-fw-builder documentation to build the release version of Dasharo (coreboot+SeaBIOS) for PC Engines apu2/3/4/6.</p>"},{"location":"variants/pc_engines/faq/","title":"FAQ","text":""},{"location":"variants/pc_engines/faq/#what-bios-version-can-i-install-with-my-dasharo-corebootseabios-subscription-on-an-apu2346-motherboard","title":"What BIOS Version can I install with my Dasharo (coreboot+SeaBIOS) Subscription on an apu2/3/4/6 motherboard?","text":"<p>When you subscribe to a Dasharo (coreboot+SeaBIOS) Pro Package for Network Appliance, the BIOS version updates available to you are determined by Dasharo's release cycle and testing scope.</p> <ol> <li> <p>Upcoming BIOS Version: The next BIOS version that you will be able to install will most likely be tagged as 24.08.00.01. For detailed insights into the versioning scheme, please refer to the coreboot release notes here: Coreboot Release Notes as well as discussion about Dasharo Versioning.</p> </li> <li> <p>Test Scope: While the exact test scope for the upcoming BIOS version is currently being finalized, it will offer feature parity with version 4.19.0.1. The test scope for version 4.19.0.1, which might give you an idea of what to expect, can be found in this document: Dasharo Test Scope Document.</p> </li> <li> <p>Release Information: Detailed information about the release, including the scope and enhancements, will be communicated through our release newsletter. Additionally, all release notes and relevant updates will be made available on the Dasharo documentation site at Dasharo Release Documentation.</p> </li> </ol>"},{"location":"variants/pc_engines/faq/#how-much-would-it-cost-me-to-switch-my-subscription-for-network-appliance-from-already-purchased-corebootuefi-to-corebootseabios","title":"How much would it cost me to switch my subscription for Network Appliance from already purchased (coreboot+UEFI) to (coreboot+SeaBIOS)?","text":"<p>We can switch your subscription from Dasharo (coreboot+UEFI) Pro Package for Network Appliance to the Dasharo (coreboot+SeaBIOS) Pro Package for Network Appliance at no extra cost. This change can be made until the end of May 2024, but only if the purchase was made before the official (coreboot+UEFI) release which occurred on 2024-04-02.</p> <p>If you are interested, please contact us at shopping@3mdeb.com and provide your order number.</p>"},{"location":"variants/pc_engines/faq/#the-dasharo-corebootuefi-version-is-09x-does-this-mean-it-is-still-in-beta","title":"The Dasharo (coreboot+UEFI) version is 0.9.x. Does this mean it is still in beta?","text":"<p>No, our policy for versioning is that we never release 1.x.y as a first release. We cannot validate it at the mass production readiness level. Validation results are always linked on the release page, or you can find those directly in Google Sheet. We switch to v1.x.y when volume reaches critical mass, and we can assure there is a certain level of compatibility and long enough time passed to report most critical issues.</p> <p>You should always check test results and decide if you need an updated firmware version and if provided results cover your workload. We don't know your workload, so we cannot production readiness level. Current test results can be good enough for one customer to run production workloads. It may be insufficient for others and would be considered beta. We are happy to extend our test scope to cover more cases. Let us know about your use case in dasharo-issues.</p>"},{"location":"variants/pc_engines/faq/#why-is-dasharo-corebootseabios-more-expensive-than-dasharo-corebootuefi","title":"Why is Dasharo (coreboot+SeaBIOS) more expensive than Dasharo (coreboot+UEFI)?","text":"<p>There are many reasons for that. Most importantly, more resources are needed to maintain code and releases. First, we have a fork of SeaBIOS. Second, we have sortbootorder depends on coreboot toolchain changes and libpayload. Third, tests are in legacy infrastructure with ongoing migration to OSFV; even if migrated, we have too little Dasharo (coreboot+SeaBIOS) supported hardware to benefit from the effect of scale because Dasharo (coreboot+SeaBIOS) components do not easily benefit from Dasharo (coreboot+UEFI) changes price have to be higher.</p> <p>Dasharo (coreboot+SeaBIOS) was 50% discounted for quite some time before its first release.</p> <p>We understand that it can be expensive for individual customers, so we are always open to providing discounts for those who contribute to the project meaningfully. The following tiers are eligible for discounts of up to 100%:</p> <ul> <li>Beta Testers<ul> <li>100% discount for the time of being active Beta Tester.</li> </ul> </li> <li>Top 5 active members on Dasharo Matrix and Dasharo Github Issues- 100% discount for 1 year.</li> <li>Code contributors, testers, and issue reporters - depends on severity and size of contributions.</li> </ul>"},{"location":"variants/pc_engines/firmware-update/","title":"Firmware update","text":"<p>The following documentation describes the process of Dasharo open-source firmware update. If your device is currently flashed with the original PC Engines firmware firmware please refer to the Initial deployment documentation.</p> <p>The update process may be different, depending on the currently installed Dasharo firmware version.</p> <p>We recommend Dasharo Tools Suite, but if you really want to do this manually please follow guide below.</p> <p>Before updating, ensure the SPI flash WP pin is not active - BIOS write protect pin jumper on J2 (apu2) or J3 (apu3/4/6).</p> (coreboot+UEFI) firmware(coreboot+SeaBIOS) firmware <p>Additionally, before starting the update procedure be sure to disable Secure Boot:</p> <ol> <li>Power on the device.</li> <li>While the device is booting, hold the <code>DELETE</code> key to enter the UEFI Setup    Menu.</li> <li>Enter the <code>Device Manager</code> menu.</li> <li>Enter the Secure Boot Configuration    submenu.</li> <li>Verify that the <code>Current Secure Boot State</code> field says Disabled - if not,    unselect the <code>Attempt Secure Boot</code> option below then press <code>F10</code> to save    the changes.</li> <li>Reboot the device to properly apply the changes.</li> </ol> <p>The settings of all the above options can be restored after a firmware update.</p>"},{"location":"variants/pc_engines/firmware-update/#updating-dasharo","title":"Updating Dasharo","text":"<pre><code>flashrom -p internal -w pcengines_apu&lt;variant&gt;_v&lt;version&gt;.rom --fmap -i WP_RO -i RW_SECTION_A\n</code></pre>"},{"location":"variants/pc_engines/firmware-update/#updating-automatically-using-dts","title":"Updating automatically using DTS","text":"<p>Check DTS documentation for firmware update.</p>"},{"location":"variants/pc_engines/firmware-update/#updating-dasharo-manually","title":"Updating Dasharo manually","text":"<ol> <li>Power on the device.</li> <li>While the device is booting, hold the <code>F10</code> key to enter the sortbootorder    menu.</li> <li>Ensure Firmware Write Protection</li> <li>Boot into Dasharo Tools Suite</li> <li>Enter Shell by choosing <code>9</code></li> <li>Use following command:</li> </ol> <pre><code>flashrom -p internal -w pcengines_apu&lt;variant&gt;_v&lt;version&gt;.rom --fmap -i COREBOOT\n</code></pre>"},{"location":"variants/pc_engines/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/pc_engines/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configurations used for validation of the coreboot port on the PC Engines apu2 family of mainboards.</p> apu2apu3apu4apu6 Component Description CPU AMD GX-412TC SOC Passive cooling to enclosure RAM 4 GB DDR3 non-ECC (soldered) SSD Apacer ST170 60GB Flash memory Winbond W25Q64.V USB pendrives SanDisk Ultra USB 3.0 32 GB Wireless card Compex WLE900VX Network 3x i211AT Gigabit Ethernet TPM PC Engines TPM1A module Power Supply 12V power supply Power Control RTE v1.0.0 Component Description CPU AMD GX-412TC SOC Passive cooling to enclosure RAM 2 GB DDR3 non-ECC (soldered) SSD Seagate ST500LM012 HN-M5 Flash memory Winbond W25Q64JV USB pendrives SanDisk 3.2Gen1 Wireless card Qualcomm Atheros AR928X Network 3x i211AT Gigabit Ethernet TPM PC Engines TPM.4A module Power Supply 12V power supply Power Control RTE v1.0.0 Component Description CPU AMD GX-412TC SOC Passive cooling to enclosure RAM 2 GB DDR3 non-ECC (soldered) SSD Apacer ST170 60GB Flash memory Winbond W25Q64JV USB pendrives Swissbit 8GB Wireless card Compex WLE900VX Network 4x i211AT Gigabit Ethernet TPM PC Engines TPM.4A module Power Supply 12V power supply Power Control RTE v1.0.0 Component Description CPU AMD GX-412TC SOC Passive cooling to enclosure RAM 2 GB DDR3 non-ECC (soldered) SSD Apacer ST170 60GB Flash memory Winbond W25Q64JV-.Q USB pendrives Swissbit 8GB Wireless card Compex WLE900VX Network 3x i211AT + i210is Gigabit Ethernet TPM PC Engines TPM.4A module Power Supply 12V power supply Power Control RTE v1.0.0"},{"location":"variants/pc_engines/initial-deployment/","title":"Initial deployment","text":"<p>This document describes the process of updating PC Engines coreboot firmware to Dasharo firmware based on EDK II (aka Dasharo (coreboot+UEFI)) or Dasharo (coreboot+SeaBIOS).</p>"},{"location":"variants/pc_engines/initial-deployment/#os-compatibility-for-dasharo-corebootuefi","title":"OS compatibility for Dasharo (coreboot+UEFI)","text":"<p>Switching from BIOS to UEFI-based firmware might cause compatibility issues if you already had an operating system installed on your platform. Some OSs can handle the switch without any issues, while others may need to be reinstalled. We have tested the update on several operating systems. The results are available in the test results spreadsheet and in the table below:</p> OS Can be booted from UEFI Ubuntu OPNSense pfSense OpenWrt Depends<sup>1</sup> <p>Initial flashing of Dasharo firmware can be done from Linux using flashrom with the internal programmer.</p>"},{"location":"variants/pc_engines/initial-deployment/#deploy-using-dasharo-tools-suite","title":"Deploy using Dasharo Tools Suite","text":"<p>For simplicity we recommend using Dasharo Tools Suite to omit all manual compilation and flashing steps, and deploy Dasharo seamlessly.</p> <ul> <li>Ensure Firmware Write Protection   is disabled in sortbootorder</li> <li>Boot into Dasharo Tools   Suite</li> <li>Enter your DPP subscription credentials</li> <li>Follow the instructions from Dasharo Transition documentation</li> </ul>"},{"location":"variants/pc_engines/initial-deployment/#manual-installation","title":"Manual installation","text":"<p>The steps below describe the process of manual installation of Dasharo on your apu.</p>"},{"location":"variants/pc_engines/initial-deployment/#build-flashrom","title":"Build flashrom","text":"<p>Please follow generic guide for flashrom building, or install it from the OS' package manager (minimum supported version is v1.0).</p>"},{"location":"variants/pc_engines/initial-deployment/#reading-flash-contents","title":"Reading flash contents","text":"<p>Always prepare a backup of the current firmware image. If you are using DTS, the backup will be made automatically with HCL report. When deploying manually, to read from the flash and save it to a file (<code>dump.rom</code>), execute the following command:</p> <pre><code>flashrom -p internal -r dump.rom\n</code></pre>"},{"location":"variants/pc_engines/initial-deployment/#flashing-dasharo","title":"Flashing Dasharo","text":"<p>To flash Dasharo on the platform, execute the following command - replace <code>&lt;variant&gt;</code> with the APU variant (2, 3, 4 or 6) and <code>&lt;version&gt;</code> with the Dasharo image version, e.g. <code>v0.9.0</code> or <code>v24.02.01.01</code> or <code>v4.0.34</code>.</p> <pre><code>flashrom -p internal -w pcengines_apu&lt;variant&gt;_&lt;version&gt;.rom\n</code></pre> <p>After the operation is successful, reboot the platform.</p> <ol> <li> <p>Depending on installed image, can be booted from UEFI or has to be reinstalled. The image types are listed in the OpenWrt documentation. If you used a <code>*-combined-efi</code> image, then you can boot it from UEFI. Otherwise, you need to reinstall OpenWrt using such image. If you do not remember which image you used or if you got it from another source, you should check whether your disk has an EFI system partition (ESP). You can check it by executing the <code>lsblk</code> command:</p> <pre><code>lsblk -f\n</code></pre> <p>If your disk has a small FAT16 or FAT32 partition at the beginning, then it's likely the ESP:</p> <pre><code>vda1\n   vfat   FAT16 kernel       1234-ABCD\n</code></pre> <p>If there are no FAT partitions, then you need to reinstall OpenWrt.\u00a0\u21a9</p> </li> </ol>"},{"location":"variants/pc_engines/openness_score/","title":"Dasharo Openness Score","text":"<p>This page contains the Dasharo Openness Score for PC Engines apu2 series Dasharo releases. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/pc_engines/openness_score/#v24080001","title":"v24.08.00.01","text":"<p>Openness Score for pcengines_apu2_seabios_v24.08.00.01.rom</p> <p>Open-source code percentage: 33.1% Closed-source code percentage: 66.9%</p> <ul> <li>Image size: 8388608 (0x800000)</li> <li>Number of regions: 13</li> <li>Number of CBFSes: 1</li> <li>Total open-source code size: 371320 (0x5aa78)</li> <li>Total closed-source code size: 749792 (0xb70e0)</li> <li>Total data size: 443068 (0x6c2bc)</li> <li>Total empty size: 6824428 (0x6821ec)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/pc_engines/openness_score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category BOOTORDER 0x0 0x1000 data RW_VPD 0x1000 0x4000 data SMMSTORE 0x5000 0x20000 data RO_VPD 0x200000 0x4000 data FMAP 0x204000 0x800 data RO_FRID 0x204800 0x40 data RO_FRID_PAD 0x204840 0x7c0 data GBB 0x205000 0x40000 data RW_UNUSED 0x25000 0x1db000 empty"},{"location":"variants/pc_engines/openness_score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 6008832</li> <li>Number of files: 27</li> <li>Open-source files size: 371320 (0x5aa78)</li> <li>Closed-source files size: 749792 (0xb70e0)</li> <li>Data size: 8892 (0x22bc)</li> <li>Empty size: 4878828 (0x4a71ec)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/romstage stage 24560 none open-source fallback/ramstage stage 82119 LZMA open-source fallback/dsdt.aml raw 6962 none open-source fallback/postcar stage 22184 none open-source fallback/payload simple elf 53703 none open-source img/memtest simple elf 47526 none open-source img/setup simple elf 27258 none open-source genroms/pxe.rom raw 90624 none open-source bootblock bootblock 16384 none open-source AGESA raw 504032 none closed-source apu/amdfw raw 245760 none closed-source cbfs_master_header cbfs header 32 none data config raw 3178 LZMA data revision raw 702 none data build_info raw 88 none data spd.bin spd 256 none data payload_config raw 1599 none data payload_revision raw 217 none data bootorder_map raw 153 none data bootorder_def raw 624 none data etc/boot-menu-key raw 8 none data etc/boot-menu-wait raw 8 none data etc/boot-menu-message raw 48 none data etc/sercon-port raw 8 none data (empty) null 3548068 none empty (empty) null 675492 none empty (empty) null 655268 none empty"},{"location":"variants/pc_engines/openness_score/#v090","title":"v0.9.0","text":"<p>Openness Score for pcengines_apu2_v0.9.0.rom</p> <p>Open-source code percentage: 85.3% Closed-source code percentage: 14.7%</p> <ul> <li>Image size: 8388608 (0x800000)</li> <li>Number of regions: 12</li> <li>Number of CBFSes: 2</li> <li>Total open-source code size: 4358328 (0x4280b8)</li> <li>Total closed-source code size: 749792 (0xb70e0)</li> <li>Total data size: 359260 (0x57b5c)</li> <li>Total empty size: 2921228 (0x2c930c)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/pc_engines/openness_score/#fmap-regions_1","title":"FMAP regions","text":"FMAP region Offset Size Category SMMSTORE 0x0 0x40000 data RW_NVRAM 0x40000 0x1000 data VBLOCK_A 0x41000 0x2000 data RW_FWID_A 0x3fff00 0x100 data FMAP 0x400000 0x1000 data RO_FRID 0x401000 0x100 data RO_FRID_PAD 0x401100 0x700 data GBB 0x401800 0x10000 data"},{"location":"variants/pc_engines/openness_score/#cbfs-fw_main_a","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 3919616</li> <li>Number of files: 10</li> <li>Open-source files size: 2150524 (0x20d07c)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 6180 (0x1824)</li> <li>Empty size: 1762912 (0x1ae660)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1960751 none open-source fallback/romstage stage 49464 none open-source fallback/ramstage stage 101300 LZMA open-source fallback/dsdt.aml raw 5713 none open-source fallback/postcar stage 33296 none open-source config raw 3848 LZMA data revision raw 854 none data build_info raw 97 none data spd.bin spd 256 none data (empty) null 1762912 none empty"},{"location":"variants/pc_engines/openness_score/#cbfs-coreboot_1","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 4122624</li> <li>Number of files: 16</li> <li>Open-source files size: 2207804 (0x21b03c)</li> <li>Closed-source files size: 749792 (0xb70e0)</li> <li>Data size: 6712 (0x1a38)</li> <li>Empty size: 1158316 (0x11acac)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1960751 none open-source fallback/romstage stage 49464 none open-source fallback/dsdt.aml raw 5713 none open-source fallback/ramstage stage 101300 LZMA open-source fallback/postcar stage 33296 none open-source bootblock bootblock 57280 none open-source AGESA raw 504032 none closed-source cbfs_master_header cbfs header 28 none data config raw 3848 LZMA data revision raw 854 none data build_info raw 97 none data spd.bin spd 256 none data (empty) null 3364 none empty (empty) null 1064868 none empty (empty) null 90084 none empty"},{"location":"variants/pc_engines/overview/","title":"Overview","text":"<p>PC Engines is a Swiss-based company that specializes in the design and manufacture of small form factor computer hardware, including single-board computers (SBCs), network appliances, and embedded systems. Their products are often used in networking, telecommunications, security applications, in-home automation, and other industrial applications.</p> <p>PC Engines is particularly well-known for its low-power, high-performance SBCs, including the APU (Accelerated Processing Unit) series, which feature AMD G-series embedded processors, and the ALIX series, based on the AMD Geode processor. These SBCs are commonly used as firewalls, routers, and other network appliances.</p> <p>PC Engines is a well-recognized brand in the open-source community mostly because of full schematics availability (apu2d example) and use of open-source firmware. PC Engines products are top-rated among pfSense and OPNsense users. What you can see based on the number of forum topics regarding apu platforms.</p>"},{"location":"variants/pc_engines/overview/#status","title":"Status","text":"<p>In 2016, PC Engines contracted 3mdeb to take over the maintenance of open-source firmware for PC Engines products. Development happened in PC Engines Github organization until September 2022, when PC Engines decided to discontinue its sponsorship for open-source firmware. Dasharo Team is working on creating a sustainable path forward for PC Engines.' open-source firmware through a subscription and donation model. For more details, please check Post EOL firmware announcement, contact us directly or through community chat. In 2024, the 3mdeb Dasharo Team was able to bring back PC Engines firmware in the form of Dasharo Pro/Enterprise Package (formerly known as Dasharo Pro Package) in two flavors Dasharo (coreboot+SeaBIOS) and Dasharo (coreboot+UEFI).</p>"},{"location":"variants/pc_engines/overview/#references","title":"References","text":"<ul> <li>Releases UEFI - groups information about all UEFI firmware   variant releases.</li> <li>Releases SeaBIOS - groups information about all SeaBIOS   firmware variant releases.</li> <li>Building manual - describes how to build Dasharo for   PC Engines apu2/3/4/6 platform.</li> <li>Initial deployment - describes initial Dasharo   deployment methods (i. e. flashing new firmware) for PC Engines apu2/3/4/6   platform.</li> <li>Firmware update - explains supported Dasharo   open-source firmware update methods.</li> <li>Recovery - gathers information on how to recover the platform   from potential failure.</li> <li>Hardware configuration matrix - describes the   hardware configuration of platforms used during validation.</li> <li>Test matrix   - describes the scope of firmware validation.</li> <li>Post-EOL firmware announcement</li> </ul>"},{"location":"variants/pc_engines/post-eol-fw-announcement/","title":"Post EOL firmware announcement","text":"<p>Dear valued PC Engines hardware owners,</p> <p>We apologize for the delay in our announcement. We understand that many of you have eagerly awaited the next PC Engines firmware release. Rest assured that our commitment to supporting the PC Engines firmware remains strong, and we are working hard to bring you new features through the upcoming Dasharo firmware distribution. We appreciate your patience and continued support.</p> <p>We regret to inform the community that v4.17.0.3 was the last version of the firmware sponsored by PC Engines. However, 3mdeb has since released v4.19.0.1, the final version delivered to the community using the existing model.</p> <p>As some may know, 3mdeb is a small open-source firmware consulting company based in Poland. Our team consists of passionate engineers and developers from open-source software, firmware, and hardware communities, frequent conference speakers, and people who love to tinker with bits. Every day we develop bleeding-edge low-level security solutions using top open-source frameworks. We are committed to continuing support and PC Engines hardware in the open-source firmware community but can't afford that on our dime.</p> <p>Since February 2016, we have made 87 binary releases for all PC Engines hardware platforms from apu1 through famous apu2 up to apu7. We published over 30k test results from our automated testing framework. Thanks to community feedback, we created extensive documentation. Our firmware development effort extended the lifetime value of PC Engines hardware. Most notable examples were:</p> <ul> <li>CPU Core Performance Boost feature enabling - blog</li> <li>DRAM Error Correction Code enabling - blog</li> <li>AMD Cryptographic Coprocessor enabling - issue tracker</li> <li>and many small things like a watchdog or SPI flash lockdown.</li> </ul> <p>According to PC Engines EOL statement apu2 / apu3 series availability will be: \"Based on an AMD embedded CPU, this platform should have good long term availability. This CPU should be available until 2024 according to AMD.\"</p> <p>We would like to continue support for PC Engines firmware through our Dasharo open-source firmware distribution. Further releases could include regular maintenance updates and new features such as UEFI compatibility, fwupd, Verified Boot, UEFI Setup password, DMA protection, and more. For a complete list of planned enhancements, please visit the dasharo-issues repository on GitHub.</p> <p>Your support will play a crucial role in determining the roadmap and the speed of its implementation. We hope you will support our efforts to bring these new features and improvements to the PC Engines firmware.</p> <p>We are exploring the possibility of implementing a subscription model for firmware updates. We would like to hear from you to ensure that the pricing option is fair and reasonable for our community. We have created a survey to gather your thoughts and preferences on pricing. Your feedback is important to us and will help us make informed decisions about the future of our offerings. Please take about two minutes to participate in the survey. Your input will be greatly appreciated.</p> <p>In case of any questions feel free to contact us.</p>"},{"location":"variants/pc_engines/recovery/","title":"Recovery","text":""},{"location":"variants/pc_engines/recovery/#intro","title":"Intro","text":"<p>The following documentation describes the process of recovering hardware from the brick state with RTE and Dasharo open-source firmware.</p>"},{"location":"variants/pc_engines/recovery/#prerequisites","title":"Prerequisites","text":"<ol> <li>Recovery with RTE:<ul> <li>Prepared RTE</li> <li>6x female-female wire cables</li> </ul> </li> <li>Recovery with spi1a recovery dongle:<ul> <li>spi1a</li> </ul> </li> </ol>"},{"location":"variants/pc_engines/recovery/#recovery-with-rte","title":"Recovery with RTE","text":""},{"location":"variants/pc_engines/recovery/#connections","title":"Connections","text":"<p>To prepare the stand for flashing follow the steps described below:</p> <ol> <li>Open the platform cover.</li> <li>Connect the 6-pin flash header to the    SPI header    on RTE.</li> </ol> apu2apu3/4apu6 SPI header J6 pin header Vcc pin 1 (Vcc) GND pin 2 (GND) CS pin 3 (CS) SCLK pin 4 (CLK) MISO pin 5 (MISO) MOSI pin 6 (MOSI) <pre><code>                J6\n              ______\n          &gt;  |      |\n Vcc 3.3V  ----1  2----  GND\n             |      |\n       CS  ----3  4----  CLK\n             |      |\n     MISO  ----5  6----  MOSI\n             |      |\n        X  ----7  8----  X\n             |______|\n</code></pre> SPI header J9 pin header Vcc pin 1 (Vcc) GND pin 2 (GND) CS pin 3 (CS) SCLK pin 4 (CLK) MISO pin 5 (MISO) MOSI pin 6 (MOSI) <pre><code>                J9\n              ______\n          &gt;  |      |\n Vcc 3.3V  ----1  2----  GND\n             |      |\n       CS  ----3  4----  CLK\n             |      |\n     MISO  ----5  6----  MOSI\n             |      |\n        X  ----7  8----  X\n             |______|\n</code></pre> SPI header J10 pin header Vcc pin 1 (Vcc) GND pin 2 (GND) CS pin 3 (CS) SCLK pin 4 (CLK) MISO pin 5 (MISO) MOSI pin 6 (MOSI) <pre><code>               J10\n              ______\n          &gt;  |      |\n Vcc 3.3V  ----1  2----  GND\n             |      |\n       CS  ----3  4----  CLK\n             |      |\n     MISO  ----5  6----  MOSI\n             |      |\n        X  ----7  8----  X\n             |______|\n</code></pre>"},{"location":"variants/pc_engines/recovery/#firmware-flashing","title":"Firmware flashing","text":"<p>To flash firmware follow the steps described below:</p> <ol> <li>Login to RTE via <code>ssh</code> or <code>minicom</code>.</li> <li>Turn on the platform by connecting the power supply.</li> <li>Wait at least 5 seconds.</li> <li>Turn off the platform by using the power button.</li> <li>Wait at least 3 seconds.</li> <li> <p>Set the proper state of the SPI by using the following commands on RTE:</p> <pre><code># set SPI Vcc to 3.3V\necho 1 &gt; /sys/class/gpio/gpio405/value\n# SPI Vcc on\necho 1 &gt; /sys/class/gpio/gpio406/value\n# SPI lines ON\necho 1 &gt; /sys/class/gpio/gpio404/value\n</code></pre> </li> <li> <p>Wait at least 2 seconds.</p> </li> <li>Disconnect the power supply from the platform.</li> <li>Wait at least 2 seconds.</li> <li> <p>Flash the platform by using the following command:</p> <pre><code>flashrom -p linux_spi:dev=/dev/spidev1.0,spispeed=16000 -w [path_to_binary]\n</code></pre> <p>Flashing with flashrom takes about 1 minute.</p> </li> <li> <p>Change back the state of the SPI by using the following commands:</p> <pre><code>echo 0 &gt; /sys/class/gpio/gpio404/value\necho 0 &gt; /sys/class/gpio/gpio406/value\n</code></pre> </li> <li> <p>Turn on the platform by connecting the power supply.</p> </li> </ol> <p>The first boot of the platform after proceeding with the above procedure can take much longer than standard.</p>"},{"location":"variants/pc_engines/recovery/#recovery-with-spi1a-dongle","title":"Recovery with spi1a dongle","text":"<ol> <li>Power off the platform.</li> <li>Plug the spi1a into J6 (apu2) / J9 (apu3/4) / J10 (apu6) header, so that    the thick white line on the dongle matches the thick line printed on board    near J6 (apu2) / J9 (apu3/4) / J10 (apu6) header.</li> <li>Power on the platform.</li> <li>Boot to operating system, e.g. Dasharo Tools Suite.</li> <li>Remove the dongle.</li> <li>Perform Initial Deployment with the target    firmware variant.</li> </ol> <p>Do not keep the spi1a dongle plugged while in OS</p> <p>Remove the dongle as soon as you boot the operating system to avoid accidental flashing of the dongle itself. The dongle is designed in a way that the SPI flash controller directs the SPI transactions to the dongle, instead of the on-board SPI flash. Be sure to remove the dongle, before you attempt to flash a new, working firmware image.</p>"},{"location":"variants/pc_engines/releases_seabios/","title":"Release Notes","text":"<p>This is a Dasharo Pro Package Release. o obtain access to the pre-built binaries, you need to subscribe to the Dasharo Pro Package subscriber. You can do this by purchasing a Dasharo Pro Package product from our shop. As a subscriber, you will receive access to all firmware updates for the duration of your subscription via the Dasharo Pro Package newsletter, and gain entry to the Dasharo Premier Support invite-only live chat on the Matrix network, enabling direct engagement with the Dasharo Team and fellow subscribers for personalized, priority assistance.</p> <p>Following Release Notes describe status of Dasharo (coreboot+SeaBIOS) variant of open-source firmware development for PC Engines apu2/3/4/6 platform.</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to Dasharo for PC Engines Release Notification Newsletter"},{"location":"variants/pc_engines/releases_seabios/#v24080001-2025-06-10","title":"v24.08.00.01 - 2025-06-10","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/pc_engines/releases_seabios/#added","title":"Added","text":"<ul> <li>Rebased with official coreboot repository commit 2ccbcc5 (tag 24.08)</li> </ul>"},{"location":"variants/pc_engines/releases_seabios/#changed","title":"Changed","text":"<ul> <li>SeaBIOS update to rel-1.16.3.1</li> <li>sortbootorder update to v24.08.00.01</li> </ul>"},{"location":"variants/pc_engines/releases_seabios/#known-issues","title":"Known issues","text":"<ul> <li>apuled driver doesn't work in FreeBSD. Check the GPIOs document for workaround.</li> <li>Some PCIe cards are not detected on certain OSes and/or in certain mPCIe slots. Check the mPCIe modules document for solution/workaround.</li> <li>Booting with 2 USB 3.x sticks plugged in apu4 sometimes results in detecting only 1 stick</li> <li>Certain USB 3.x sticks happen to not appear in boot menu</li> <li>Booting Xen 4.8 is unstable</li> </ul>"},{"location":"variants/pc_engines/releases_seabios/#binaries","title":"Binaries","text":"<p>sha256 sha256.sig</p> <p>sha256 sha256.sig</p> <p>sha256 sha256.sig</p> <p>sha256 sha256.sig</p> <p>This is a Dasharo Pro Package Release. To obtain access to the pre-built binaries you will have to become the Dasharo Pro Package subscriber. You will get the access to all of the firmware updates for the duration of the subscription via Dasharo Pro Package newsletter.</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/pc_engines/releases_seabios/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 24.08 revision fadbc031<ul> <li>License</li> </ul> </li> <li>Dasharo Patchqueue Initiative based on 24.08.00.01 revision d944bc39<ul> <li>License</li> </ul> </li> <li>SeaBIOS based on rel-1.16.3.1 revision ac9eb800<ul> <li>License</li> </ul> </li> <li>sortbootorder based on v24.08.00.01 revision 6188b4f4<ul> <li>License</li> </ul> </li> <li>iPXE based on 2024.08 revision 301644ab<ul> <li>License</li> </ul> </li> <li>Memtest86+ based on v002 revision 0bd34c22<ul> <li>License</li> </ul> </li> <li>AMD AGESA Binary Platform Initialization version MullinsPI 1.0.0.A<ul> <li>License</li> </ul> </li> <li>AMD Platform Security Processor bootloader version D.1.1.4D<ul> <li>License</li> </ul> </li> <li>AMD Platform Security Processor firmware public key version v1.0<ul> <li>License</li> </ul> </li> <li>AMD System Management Unit firmware version 1433<ul> <li>License</li> </ul> </li> <li>AMD System Management Unit - Software Configuration Settings binary version 1433<ul> <li>License</li> </ul> </li> <li>AMD Hudson xHCI firmware version 1.1.0.0068<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/pc_engines/releases_seabios/#v24050001-2024-06-28","title":"v24.05.00.01 - 2024-06-28","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/pc_engines/releases_seabios/#added_1","title":"Added","text":"<ul> <li>apu2, apu3, apu4 and apu6 support added</li> <li>Rebased with official coreboot repository commit 5a0207e (tag 24.05)</li> <li>coreboot 24.05: security/tpm: support compiling in multiple TPM drivers</li> <li>coreboot 24.02 and 24.02.01: lib/rtc: Fix off-by-one error in February day count in leap year</li> <li>coreboot 24.02 and 24.02.01: device: Add support for multiple PCI segment groups</li> <li>coreboot 4.22 &amp; 4.22.01 x86: Support CBFS cache for pre-memory stages and ramstage</li> <li>coreboot 4.21: libpayload/uhci: Re-write UHCI RH driver w/ generic_hub API</li> <li>coreboot 4.21: arch/x86: Don\u2019t allow hw floating point operations</li> <li>coreboot 4.21: Extracting of TPM logs using cbmem tool</li> <li>coreboot 4.21: soc/amd: read domain resource window configuration from hardware</li> <li>coreboot 4.20.1: cpu/x86/smm: Add PCI resource store functionality</li> <li>coreboot 4.20.1: drivers/usb/acpi: Add USB _DSM method to enable/disable USB LPM per port</li> <li>Code base was moved to Dasharo Patchqueue Initiative</li> <li>Sign of Life date changed to 19700101 due to making Dasharo Patchqueue Initiative based build reproducible</li> <li>toolchain updates GCC 13.2.0, CMake 3.27.7</li> <li>ACPI 6.4 specification compliance</li> <li>sortbootorder update to v24.05.00.01</li> </ul>"},{"location":"variants/pc_engines/releases_seabios/#known-issues_1","title":"Known issues","text":"<ul> <li>Limited test scope due to infrastructure recovery issues</li> <li>apuled driver doesn't work in FreeBSD. Check the  GPIOs document for workaround.</li> <li>Some PCIe cards are not detected on certain OSes and/or in certain mPCIe slots. Check the  mPCIe modules document for solution/workaround.</li> <li>Booting with 2 USB 3.x sticks plugged in apu4 sometimes results in detecting only 1 stick</li> <li>Certain USB 3.x sticks happen to not appear in boot menu</li> <li>Booting Xen 4.8 is unstable</li> </ul>"},{"location":"variants/pc_engines/releases_seabios/#binaries_1","title":"Binaries","text":"<p>sha256 sha256.sig</p> <p>sha256 sha256.sig</p> <p>sha256 sha256.sig</p> <p>sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/pc_engines/releases_seabios/#sbom-software-bill-of-materials_1","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 24.05 revision 5a0207e</li> <li>Dasharo Patchqueue Initiative based on 24.05.00.01 revision c86db36f</li> <li>sortbootorder based on v24.05.00.01 revision a7c8b665</li> <li>iPXE based on 2024.05 revision e965f179</li> <li>Memtest86+ based on v002 revision 0bd34c22</li> <li>AMD AGESA Binary Platform Initialization based on MullinsPI 1.0.0.A revision a8db7dfe</li> <li>AMD Platform Security Processor bootloader based on D.1.1.4D revision a8db7dfe</li> <li>AMD Platform Security Processor firmware public key based on v1.0 revision a8db7dfe</li> <li>AMD System Management Unit firmware based on 1433 revision a8db7dfe</li> <li>AMD System Management Unit - Software Configuration Settings binary based on 1433 revision a8db7dfe</li> <li>AMD Hudson xHCI firmware based on 1.1.0.0068 revision a8db7dfe</li> </ul>"},{"location":"variants/pc_engines/releases_uefi/","title":"Release Notes","text":"<p>This is a Dasharo Pro Package Release. o obtain access to the pre-built binaries, you need to subscribe to the Dasharo Pro Package subscriber. You can do this by purchasing a Dasharo Pro Package product from our shop. As a subscriber, you will receive access to all firmware updates for the duration of your subscription via the Dasharo Pro Package newsletter, and gain entry to the Dasharo Premier Support invite-only live chat on the Matrix network, enabling direct engagement with the Dasharo Team and fellow subscribers for personalized, priority assistance.</p> <p>Following Release Notes describe status of Dasharo (coreboot+UEFI) variant of open-source firmware development for PC Engines apu2/3/4/6 platform.</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to Dasharo for PC Engines Release Notification Newsletter     <p>Test results for this platform can be found here.</p>"},{"location":"variants/pc_engines/releases_uefi/#v090-2024-04-02","title":"v0.9.0 - 2024-04-02","text":""},{"location":"variants/pc_engines/releases_uefi/#added","title":"Added","text":"<ul> <li>Initial release supporting UEFI</li> <li>Core Performance Boost option in UEFI Setup Menu</li> <li>Watchdog options in UEFI Setup Menu</li> <li>PCI Express Power Management option in UEFI Setup Menu</li> <li>TPM 2.0 Support</li> <li>TPM Measured Boot</li> <li>Vboot Verified Boot</li> <li>UEFI Secure Boot</li> <li>UEFI Setup Password</li> <li>UEFI Shell</li> <li>Configurable Boot Order</li> <li>iPXE Network Boot with Dasharo Tools Suite and Firmware Update Mode</li> </ul>"},{"location":"variants/pc_engines/releases_uefi/#known-issues","title":"Known issues","text":"<ul> <li>TPMCMD007.002 CREATELOADED Function (Ubuntu 22.04) doesn't work</li> <li>Firmware boot time reported by systemd-analyze is too high</li> <li>BIOS Lock does not work as expected</li> <li>CBMEM buffer too small to fill full boot log</li> </ul>"},{"location":"variants/pc_engines/releases_uefi/#binaries","title":"Binaries","text":"<p>sha256 sha256.sig (pcengines_apu2_v0.9.0.rom)</p> <p>sha256 sha256.sig (pcengines_apu2_v0.9.0_dev_signed.rom)</p> <p>sha256 sha256.sig (pcengines_apu3_v0.9.0.rom)</p> <p>sha256 sha256.sig (pcengines_apu3_v0.9.0_dev_signed.rom)</p> <p>sha256 sha256.sig (pcengines_apu4_v0.9.0.rom)</p> <p>sha256 sha256.sig (pcengines_apu4_v0.9.0_dev_signed.rom)</p> <p>sha256 sha256.sig (pcengines_apu6_v0.9.0.rom)</p> <p>sha256 sha256.sig (pcengines_apu6_v0.9.0_dev_signed.rom)</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/pc_engines/releases_uefi/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 4.21 revision 4d12ba21</li> <li>Dasharo EDKII fork based on edk2-stable202002 revision ae0ce3e2</li> <li>iPXE based on 2023.12 revision 838611b3</li> <li>vboot based on 0c11187c75 revision 0c11187c</li> <li>AMD AGESA Binary Platform Initialization based on MullinsPI 1.0.0.A revision a8db7dfe</li> <li>AMD Platform Security Processor bootloader based on D.1.1.4D revision a8db7dfe</li> <li>AMD Platform Security Processor firmware public key based on v1.0 revision a8db7dfe</li> <li>AMD System Management Unit firmware based on 1433 revision a8db7dfe</li> <li>AMD System Management Unit - Software Configuration Settings binary based on 1433 revision a8db7dfe</li> <li>AMD Hudson xHCI firmware based on 1.1.0.0068 revision a8db7dfe</li> </ul>"},{"location":"variants/protectli_fw6/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/protectli_fw6/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configuration used for validation of the coreboot port on the Protectli FW6 firewall.</p>"},{"location":"variants/protectli_fw6/hardware-matrix/#protectli-fw6e-dasharo","title":"Protectli FW6E Dasharo","text":"Component Description CPU IIntel(R) Celeron(TM) 3865U SSD M.2 SSD SATA: Hoodisk SSL032GTTC7-S9A-2S external SATA 2.5 inch: Goodram SSDPR-CL100-240-G2 240GB RAM CRUCIAL CT4G4SFS824A CRUCIAL CT4G4SFS824A Wireless card Qualcomm Atheros QCA9377 LTE miniPCIe card Quectel EC-20          \u00a0 Display HDMI 1920x1080p Ethernet 6x Intel i211 (on-board) Attached devices 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. SanDisk USB 3.2Gen1 16 GB 4. USB Type-C Hub Pro UCN3286 USB Keyboard DELL KB216 Power supply Channel Well Technology 12V, 7.5A 90W"},{"location":"variants/protectli_fw6/hardware-matrix/#protectli-fw6b-dasharo","title":"Protectli FW6B Dasharo","text":"Component Description CPU Intel(R) Core(TM) i3-7100U SSD M.2 SSD SATA: Hoodisk SSL032GTTC7-S9A-2S external SATA 2.5 inch: Goodram SSDPR-CL100-240-G2 240GB RAM CRUCIAL CT4G4SFS824A CRUCIAL CT4G4SFS824A Wireless card Qualcomm Atheros QCA9377 LTE miniPCIe card Quectel EC-20          \u00a0 Display HDMI 1920x1080p Ethernet 6x Intel i211 (on-board) Attached devices 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. SanDisk USB 3.2Gen1 16 GB 4. USB Type-C Hub Pro UCN3286 USB Keyboard DELL KB216 Power supply Channel Well Technology 12V, 7.5A 90W"},{"location":"variants/protectli_fw6/hardware-matrix/#protectli-fw6c-dasharo","title":"Protectli FW6C Dasharo","text":"Component Description CPU Intel(R) Core(TM) i5-7200U SSD M.2 SSD SATA: Hoodisk SSL032GTTC7-S9A-2S external SATA 2.5 inch: Goodram SSDPR-CL100-240-G2 240GB RAM CRUCIAL CT4G4SFS824A CRUCIAL CT4G4SFS824A Wireless card Qualcomm Atheros QCA9377 LTE miniPCIe card Quectel EC-20          \u00a0 Display HDMI 1920x1080p Ethernet 6x Intel i210 (on-board) Attached devices 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. SanDisk USB 3.2Gen1 16 GB 4. USB Type-C Hub Pro UCN3286 USB Keyboard DELL KB216 Power supply Channel Well Technology 12V, 7.5A 90W"},{"location":"variants/protectli_fw6/hardware-matrix/#protectli-fw6d-dasharo","title":"Protectli FW6D Dasharo","text":"Component Description CPU Intel(R) Core(TM) i5-8250U SSD M.2 SSD SATA: Hoodisk SSL032GTTC7-S9A-2S external SATA 2.5 inch: Goodram SSDPR-CL100-240-G2 240GB RAM CRUCIAL CT4G4SFS824A CRUCIAL CT4G4SFS824A Wireless card Qualcomm Atheros QCA9377 LTE miniPCIe card Quectel EC-20          \u00a0 Display HDMI 1920x1080p Ethernet 6x Intel i210 (on-board) Attached devices 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. SanDisk USB 3.2Gen1 16 GB 4. USB Type-C Hub Pro UCN3286 USB Keyboard DELL KB216 Power supply Channel Well Technology 12V, 7.5A 90W"},{"location":"variants/protectli_fw6/hardware-matrix/#protectli-fw6e-dasharo_1","title":"Protectli FW6E Dasharo","text":"Component Description CPU Intel(R) Core(TM) i5-8250U SSD M.2 SSD SATA: Hoodisk SSL032GTTC7-S9A-2S external SATA 2.5 inch: Goodram SSDPR-CL100-240-G2 240GB RAM CRUCIAL CT4G4SFS824A CRUCIAL CT4G4SFS824A Wireless card Qualcomm Atheros QCA9377 LTE miniPCIe card Quectel EC-20          \u00a0 Display HDMI 1920x1080p Ethernet 6x Intel i210 (on-board) Attached devices 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. SanDisk USB 3.2Gen1 16 GB 4. USB Type-C Hub Pro UCN3286 USB Keyboard DELL KB216 Power supply Channel Well Technology 12V, 7.5A 90W"},{"location":"variants/protectli_fw6/releases/","title":"Protectli FW6 Dasharo Release Notes","text":"<p>Following Release Notes describe status of Open Source Firmware development for Protectli FW6.</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to Protectli Dasharo Release Newsletter     <p>Test results for this platform can be found here.</p> <p>The missing versions were assigned to different platforms interchangeably. See Protectli VP46XX releases and Protectli VP2410 releases.</p>"},{"location":"variants/protectli_fw6/releases/#v1014-2022-05-13","title":"v1.0.14 - 2022-05-13","text":""},{"location":"variants/protectli_fw6/releases/#added","title":"Added","text":"<ul> <li>Initial support for the Protectli FW6 platform</li> <li>SeaBIOS/legacy boot support</li> <li>iPXE Network Boot support</li> <li>Protectli boot logo</li> <li>Throttling temperature to 75 Celsius degrees</li> </ul>"},{"location":"variants/protectli_fw6/releases/#known-issues","title":"Known issues","text":"<ul> <li>Samsung memory modules do not work properly on older FW6A/B/C (SKU6LAV20)</li> </ul>"},{"location":"variants/protectli_fw6/releases/#binaries","title":"Binaries","text":"<p>protectli_vault_kbl_v1.0.14.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_fw6/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 87f9fc85 revision e04b0ac8</li> <li>seabios based on v1.0.6 revision 03bcdcaf</li> <li>ipxe based on 2019.3 stable revision ebf2eaf5</li> <li>memtest based on v002 revision dd5b4ff2</li> <li>Management Engine: ME 11.8.50.3399,   SHA256: e1ce735139b6d9ebb81d7f6db288b0a896c39e4b1e606324b915bec949b6aca6</li> <li>microcode:<ul> <li>CPU signature: 0x0406E3, Date: 03.10.2019, Revision: 0xD6</li> <li>CPU signature: 0x0806E9, Date: 27.04.2020, Revision: 0xD6</li> <li>CPU signature: 0x0806E9, Date: 27.04.2020, Revision: 0xD6</li> <li>CPU signature: 0x0806EA, Date: 27.04.2020, Revision: 0xD6</li> </ul> </li> <li>VBIOS:<ul> <li>VBIOS blob for FW6A/B/C, SHA256: 470d3faefb09432bea00d637ec6b3ff51854e6cff0ee56627c0773acaffa4830</li> <li>VBIOS blob for FW6D/E, SHA256: d1c746127e5288942efae65907739e18ff395fab70925b44dbafafd9e7b30cd7</li> </ul> </li> </ul>"},{"location":"variants/protectli_fw6/releases/#v1011-2021-10-13","title":"v1.0.11 - 2021-10-13","text":""},{"location":"variants/protectli_fw6/releases/#added_1","title":"Added","text":"<ul> <li>Support for IT8613 Super I/O on FW6</li> <li>iPXE support for I210 Gigabit Network Connection on FW6</li> </ul>"},{"location":"variants/protectli_fw6/releases/#changed","title":"Changed","text":"<ul> <li>Unified FW6A/B/C and FW6D/E sources</li> </ul>"},{"location":"variants/protectli_fw6/releases/#sbom-software-bill-of-materials_1","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.12 revision 87f9fc85</li> <li>SeaBIOS v1.0.6 based on rel-1.12.1 revision 171fc897</li> <li>iPXE 2019.3 stable revision ebf2eaf5</li> <li>MemTest86+ revision dd5b4ff2</li> </ul>"},{"location":"variants/protectli_fw6/releases/#v107-2021-05-12","title":"v1.0.7 - 2021-05-12","text":""},{"location":"variants/protectli_fw6/releases/#fixed","title":"Fixed","text":"<ul> <li>Platform doesn't reboot after flashing</li> <li>CPU turbo has been disabled on FW6E due to issues with Linux kernel booting   Both platform have passed extensive OS booting and stress testing.</li> </ul>"},{"location":"variants/protectli_fw6/releases/#changed_1","title":"Changed","text":"<ul> <li>CPU Turbo has been enabled on FW6E</li> </ul>"},{"location":"variants/protectli_fw6/releases/#sbom-software-bill-of-materials_2","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.12 revision 87f9fc85</li> <li>SeaBIOS v1.0.6 based on rel-1.12.1 revision 171fc897</li> <li>iPXE 2019.3 stable revision ebf2eaf5</li> <li>MemTest86+ revision dd5b4ff2</li> </ul>"},{"location":"variants/protectli_fw6/releases/#v106-2021-04-23","title":"v1.0.6 - 2021-04-23","text":""},{"location":"variants/protectli_fw6/releases/#fixed_1","title":"Fixed","text":"<ul> <li>Platform doesn't reboot after flashing</li> </ul>"},{"location":"variants/protectli_fw6/releases/#changed_2","title":"Changed","text":"<ul> <li>CPU Turbo has been enabled on FW6D</li> </ul>"},{"location":"variants/protectli_fw6/releases/#known-issues_1","title":"Known issues","text":"<ul> <li>CPU turbo has been disabled on FW6E due to issues with Linux kernel booting   The problem also reproduced with AMI BIOS. Disabling Turbo Mode is a workaround.   Tested version that were affected:<ul> <li>Ubuntu 16.04.6 desktop i386 with Linux kernel 4.15.0</li> <li>Ubuntu 20.04.1 desktop amd64 with Linux kernel 5.4.0</li> <li>Debian live 10.7.0 amd64 cinnamon with Linux kernel 4.19.0</li> </ul> </li> </ul> <p>Note that the issue may affect more kernels and distros, thus the turbo is   kept disabled temporarily on FW6E.</p>"},{"location":"variants/protectli_fw6/releases/#sbom-software-bill-of-materials_3","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.12 revision 87f9fc85</li> <li>SeaBIOS v1.0.6 based on rel-1.12.1 revision 171fc897</li> <li>iPXE 2019.3 stable revision ebf2eaf5</li> <li>MemTest86+ revision dd5b4ff2</li> </ul>"},{"location":"variants/protectli_fw6/releases/#v104-2021-04-02","title":"v1.0.4 - 2021-04-02","text":""},{"location":"variants/protectli_fw6/releases/#changed_3","title":"Changed","text":"<ul> <li>DMI BIOS version is now in format: <code>coreboot 4.X, Dasharo 1.0.Y</code></li> <li>The boot order has been changed to: mSATA, SSD, USB, iPXE</li> </ul>"},{"location":"variants/protectli_fw6/releases/#known-issues_2","title":"Known issues","text":"<ul> <li>CPU turbo has been disabled due to issues with Linux kernel booting   The problem also reproduced with AMI BIOS. Disabling Turbo Mode is a workaround.   Tested version that were affected:<ul> <li>Ubuntu 16.04.6 desktop i386 with Linux kernel 4.15.0</li> <li>Ubuntu 20.04.1 desktop amd64 with Linux kernel 5.4.0</li> <li>Debian live 10.7.0 amd64 cinnamon with Linux kernel 4.19.0</li> </ul> </li> </ul> <p>Note that the issue may affect more kernels and distros, thus the turbo is   kept disabled temporarily. - Platform doesn't reboot after flashing</p>"},{"location":"variants/protectli_fw6/releases/#sbom-software-bill-of-materials_4","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.12 revision 87f9fc85</li> <li>SeaBIOS v1.0.6 based on rel-1.12.1 revision 171fc897</li> <li>iPXE 2019.3 stable revision ebf2eaf5</li> <li>MemTest86+ revision dd5b4ff2</li> </ul>"},{"location":"variants/protectli_fw6/releases/#v102-2021-03-25","title":"v1.0.2 - 2021-03-25","text":""},{"location":"variants/protectli_fw6/releases/#fixed_2","title":"Fixed","text":"<ul> <li>MemTest86+ payload which did not work correctly on FW6D</li> </ul>"},{"location":"variants/protectli_fw6/releases/#known-issues_3","title":"Known issues","text":"<ul> <li>CPU turbo has been disabled due to issues with Linux kernel booting   The problem also reproduced with AMI BIOS. Disabling Turbo Mode is a workaround.   Tested version that were affected:<ul> <li>Ubuntu 16.04.6 desktop i386 with Linux kernel 4.15.0</li> <li>Ubuntu 20.04.1 desktop amd64 with Linux kernel 5.4.0</li> <li>Debian live 10.7.0 amd64 cinnamon with Linux kernel 4.19.0</li> </ul> </li> </ul> <p>Note that the issue may affect more kernels and distros, thus the turbo is   kept disabled temporarily.</p> <ul> <li>Platform doesn't reboot after flashing</li> </ul>"},{"location":"variants/protectli_fw6/releases/#sbom-software-bill-of-materials_5","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.12 revision 87f9fc85</li> <li>SeaBIOS v1.0.6 based on rel-1.12.1 revision 171fc897</li> <li>iPXE 2019.3 stable revision ebf2eaf5</li> <li>MemTest86+ revision dd5b4ff2</li> </ul>"},{"location":"variants/protectli_fw6/releases/#v101-2021-02-19","title":"v1.0.1 - 2021-02-19","text":""},{"location":"variants/protectli_fw6/releases/#fixed_3","title":"Fixed","text":"<ul> <li>Fixed an issue with Linux kernel booting and resetting in the middle of launching</li> <li>Issues with hangs after reboot</li> </ul>"},{"location":"variants/protectli_fw6/releases/#changed_4","title":"Changed","text":"<ul> <li>SeaBIOS displays coreboot version instead of Dasharo Firewall now</li> <li>DMI tables display the coreboot version besides the Dasharo Firewall version   in the BIOS information</li> </ul>"},{"location":"variants/protectli_fw6/releases/#removed","title":"Removed","text":"<ul> <li>MemTest86+ payload which did not work correctly on FW6D</li> </ul>"},{"location":"variants/protectli_fw6/releases/#known-issues_4","title":"Known issues","text":"<ul> <li>CPU turbo has been disabled due to issues with Linux kernel booting   The problem also reproduced with AMI BIOS. Disabling Turbo Mode is a workaround.   Tested version that were affected:<ul> <li>Ubuntu 16.04.6 desktop i386 with Linux kernel 4.15.0</li> <li>Ubuntu 20.04.1 desktop amd64 with Linux kernel 5.4.0</li> <li>Debian live 10.7.0 amd64 cinnamon with Linux kernel 4.19.0</li> </ul> </li> </ul> <p>Note that the issue may affect more kernels and distros, thus the turbo is   kept disabled temporarily.</p>"},{"location":"variants/protectli_fw6/releases/#sbom-software-bill-of-materials_6","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.12 revision 87f9fc85</li> <li>SeaBIOS v1.0.6 based on rel-1.12.1 revision 171fc897</li> <li>iPXE 2019.3 stable revision ebf2eaf5</li> </ul>"},{"location":"variants/protectli_fw6/releases/#v100-2021-02-02","title":"v1.0.0 - 2021-02-02","text":""},{"location":"variants/protectli_fw6/releases/#added_2","title":"Added","text":"<ul> <li>FW6D open source firmware support with Dasharo Firewall version 1.0.0</li> </ul>"},{"location":"variants/protectli_fw6/releases/#known-issues_5","title":"Known issues","text":"<p>None</p>"},{"location":"variants/protectli_v1000-series/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/protectli_v1000-series/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configuration used for validation of the coreboot port on the Protectli V1000 series firewall.</p>"},{"location":"variants/protectli_v1000-series/hardware-matrix/#protectli-v1210","title":"Protectli V1210","text":"Component Description CPU Intel(R) Celeron(R) N5105 @ 2.00GHz RAM Micron MT53D512M64D4RQ-046 Flash memory Winbond W25Q128.V USB Keyboard DELL KB216 USB Mouse DELL MS116p USB pendrives 1. SanDisk Ultra  Flair USB 3.0 16 GB Display HDMI 1920x1080p Ethernet controller 2x intel i226 (on-board) Internal devices Audio subsystem 4G Modem AMIT MDG200-0T001 Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control RTE v1.1.0 Power supply Power Adapter GA-0481204000V"},{"location":"variants/protectli_v1000-series/hardware-matrix/#protectli-v1211","title":"Protectli V1211","text":"Component Description CPU Intel(R) Celeron(R) N5105 @ 2.00GHz RAM Micron MT53D512M64D4RQ-046 Flash memory Winbond W25Q128.V USB Keyboard DELL KB216 USB Mouse DELL MS116p USB pendrives 1. SanDisk Ultra  Flair USB 3.0 16 GB Display HDMI 1920x1080p Ethernet controller 2x intel i226 (on-board) Internal devices Audio subsystem 4G Modem AMIT MDG200-0T001 Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control RTE v1.1.0 Power supply Power Adapter GA-0481204000V"},{"location":"variants/protectli_v1000-series/hardware-matrix/#protectli-v1410","title":"Protectli V1410","text":"Component Description CPU Intel(R) Celeron(R) N5105 @ 2.00GHz RAM Micron MT53D512M64D4RQ-046 Flash memory Winbond W25Q128.V USB Keyboard DELL KB216 USB Mouse DELL MS116p USB pendrives 1. SanDisk Ultra  Flair USB 3.0 16 GB Display HDMI 1920x1080p Ethernet controller 4x intel i226 (on-board) Internal devices Audio subsystem 4G Modem AMIT MDG200-0T001 Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control RTE v1.1.0 Power supply Power Adapter GA-0481204000V"},{"location":"variants/protectli_v1000-series/hardware-matrix/#protectli-v1610","title":"Protectli V1610","text":"Component Description CPU Intel(R) Pentium(R) Silver N6005 @ 2.00GHz RAM Micron MT53E512M32D4NQ-053 Flash memory Winbond 25Q128JVSIQ USB Keyboard DELL KB216 USB Mouse DELL MS116p USB pendrives 1. SanDisk Ultra  Flair USB 3.0 16 GB Display HDMI 1920x1080p Ethernet controller 6x intel i226 (on-board) Internal devices Audio subsystem 4G Modem AMIT MDG200-0T001 Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control RTE v1.1.0 Power supply Power Adapter GA-0481204000V"},{"location":"variants/protectli_v1000-series/openness-score/","title":"Dasharo Openness Score v0.2.0","text":"<p>This page contains the Dasharo Openness Score for Protectli V1000 series Dasharo releases. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/protectli_v1000-series/openness-score/#v093","title":"v0.9.3","text":"<p>V1410 and V1610 is very similar to V1210, thus the Openness Score for V1410 and V1610 is not generated, as is considered to be either identical or contain neglectable differences compared to V1210.</p> <p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for protectli_v1210_v0.9.3.rom</p> <p>Open-source code percentage: 20.2% Closed-source code percentage: 79.8%</p> <ul> <li>Image size: 16777216 (0x1000000)</li> <li>Number of regions: 10</li> <li>Number of CBFSes: 2</li> <li>Total open-source code size: 2321343 (0x236bbf)</li> <li>Total closed-source code size: 9190838 (0x8c3db6)</li> <li>Total data size: 475999 (0x7435f)</li> <li>Total empty size: 4789036 (0x49132c)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/protectli_v1000-series/openness-score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category SMMSTORE 0x800000 0x40000 data RW_MRC_CACHE 0x840000 0x10000 data CONSOLE 0x850000 0x20000 data FMAP 0x970000 0x1000 data"},{"location":"variants/protectli_v1000-series/openness-score/#ifd-regions","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00001000 0x007fffff 0x7ff000 closed-source Flash Descriptor 0x00000000 0x00000fff 0x1000 data"},{"location":"variants/protectli_v1000-series/openness-score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 1048576</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 1048548 (0xfffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 1048548 none empty"},{"location":"variants/protectli_v1000-series/openness-score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 6877184</li> <li>Number of files: 18</li> <li>Open-source files size: 2321343 (0x236bbf)</li> <li>Closed-source files size: 806326 (0xc4db6)</li> <li>Data size: 9027 (0x2343)</li> <li>Empty size: 3740488 (0x391348)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 2059016 none open-source fallback/romstage stage 68056 none open-source fallback/ramstage stage 124848 LZMA open-source fallback/dsdt.aml raw 8619 none open-source fallback/postcar stage 30852 none open-source bootblock bootblock 29952 none open-source cpu_microcode_blob.bin microcode 20480 none closed-source fspm.bin fsp 557056 none closed-source fsps.bin fsp 228790 LZ4 closed-source cbfs_master_header cbfs header 28 none data intel_fit intel_fit 80 none data config raw 4368 LZMA data revision raw 859 none data build_info raw 102 none data spd.bin spd 1024 none data vbt.bin raw 1209 LZMA data (empty) null 1188 none empty (empty) null 3739300 none empty"},{"location":"variants/protectli_v1000-series/releases/","title":"Protectli V1000 series Dasharo Release Notes","text":"<p>Following Release Notes describe status of Open Source Firmware development for Protectli V1000 series.</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to Protectli Dasharo Release Newsletter"},{"location":"variants/protectli_v1000-series/releases/#v093-2024-09-16","title":"v0.9.3 - 2024-09-16","text":"<p>Test results for this release can be found here:</p> <ul> <li>V1210</li> <li>V1211</li> <li>V1410</li> <li>V1610</li> </ul>"},{"location":"variants/protectli_v1000-series/releases/#added","title":"Added","text":"<ul> <li>PC speaker beep on successful boot</li> <li>Serial Console Redirection option</li> <li>Memory speed is displayed in the firmware setup main page</li> <li>Added support for taking screenshots in the firmware</li> <li>Microsoft and Windows 2023 UEFI Secure Boot certificates</li> <li>Option to customize the SMBIOS Serial Number and UUID</li> <li>UEFI 2.8 errata C compliance in EDKII fork</li> <li>Support for V1211 variant (same as V1210 but with 8GB RAM)</li> <li>SMBIOS fields and strings to reduce differences in SMBIOS between   proprietary FW and Dasharo</li> <li>Intel-specific HDA verbs, for proper audio functionality</li> <li>Disabled audio DSP</li> <li>Disabled SATA due to lack of HW support</li> <li>Rebased on official coreboot 4.21</li> <li>Updated coreboot-sdk version to 2024-02-18_732134932b</li> <li>Removed the i225/i226 EFI driver from the builds in favor of native iPXE   driver</li> <li>Switched iPXE repository to Dasharo fork for the native iPXE driver for   i225/i226</li> <li>Updated ME to v13.50.27.1987; refer to SBOM section below</li> <li>Enroll default UEFI Secure Boot keys on the first boot</li> <li>Improved UEFI Secure Boot menu user experience</li> <li>Scope of reset to default hotkey to global in firmware setup</li> <li>Disabled Intel HWP feature causing a decreased network bandwidth due to too   aggressive CPU power savings, thus not reaching the required performance.</li> <li>Auto-boot timeout default value in setup gets restored to proper value by F9 key</li> <li>All Secure Boot settings require a reset</li> <li>No errors related to WiFi L0 showing up in dmesg</li> <li>All Dasharo variables get measured at boot</li> <li>Windows default drivers probe successfully</li> </ul>"},{"location":"variants/protectli_v1000-series/releases/#binaries","title":"Binaries","text":"<p>protectli_v1210_v0.9.3.rom sha256 sha256.sig protectli_v1211_v0.9.3.rom sha256 sha256.sig protectli_v1410_v0.9.3.rom sha256 sha256.sig protectli_v1610_v0.9.3.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_v1000-series/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.21 revision ee437086<ul> <li>License</li> </ul> </li> <li>Dasharo EDKII fork based on f06673308f revision f0667330<ul> <li>License</li> </ul> </li> <li>Dasharo iPXE fork based on 838611b34e revision 838611b3<ul> <li>License</li> </ul> </li> <li>Intel Management Engine based on v13.50.27.1987 revision 9712e97a<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor based on v1.0 revision 9712e97a<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package based on JSL 2021/08/23 v2115 revision 9712e97a<ul> <li>License</li> </ul> </li> <li>Intel microcode based on JSL A0 0x24000026 revision microcode-20240312<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/protectli_v1000-series/releases/#v090-v092-non-public-engineering-releases","title":"v0.9.0 .. v0.9.2 - Non-public engineering releases","text":""},{"location":"variants/protectli_vp2410/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/protectli_vp2410/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configuration used for validation of the coreboot port on the Protectli VP2410 firewall.</p>"},{"location":"variants/protectli_vp2410/hardware-matrix/#protectli-vp2410","title":"Protectli VP2410","text":"Component Description CPU Intel Celeron J4125 @ 2.70GHz RAM CRUCIAL CT4G4SFS824A SAMSUNG M471A4G43MB1-CTD SAMSUNG M471A1K43CB1-CTD SAMSUNG M471A5244BB0-CRC KINGSTON KVR24S17S8/8 KINGSTON KVR26S19S8/16 KINGSTON KVR26S21S6/8 Flash memory Macronix MX25U6473F SSD CRUCIAL CT500MX500SSD1 MMC drive SAMSUNG 8GTF4R (on-board) USB pendrives 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. USB Type-C Hub Pro UCN3286 Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p 3. USB Type-C Hub Pro UCN3286 LTE miniPCIe card Quectel EC-20 Wireless card Intel Wi-Fi 6 AX200 Display HDMI 1920x1080p, DP 1920x1080p Ethernet 4x intel i211 (on-board) TPM PC Engines TPM1A LPC TPM Power supply Channel Well Technology 12V, 5.0A 60W <p>Note, that in RAM section all used during verification procedure modules have been listed. Device has only one RAM mounting slot.</p>"},{"location":"variants/protectli_vp2410/openness-score/","title":"Dasharo Openness Score","text":"<p>This page contains the Dasharo Openness Score for Protectli VP2410 Dasharo releases. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/protectli_vp2410/openness-score/#v111","title":"v1.1.1","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for protectli_vp2410_v1.1.1.rom</p> <p>Open-source code percentage: 30.7% Closed-source code percentage: 69.3%</p> <ul> <li>Image size: 8388608 (0x800000)</li> <li>Number of regions: 17</li> <li>Number of CBFSes: 2</li> <li>Total open-source code size: 2086013 (0x1fd47d)</li> <li>Total closed-source code size: 4714334 (0x47ef5e)</li> <li>Total data size: 413725 (0x6501d)</li> <li>Total empty size: 2227208 (0x21fc08)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/protectli_vp2410/openness-score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category IFWI 0x1000 0x2ff000 closed-source RECOVERY_MRC_CACHE 0x300000 0x10000 data RW_MRC_CACHE 0x310000 0x10000 data RW_VAR_MRC_CACHE 0x320000 0x1000 data FMAP 0x3a1000 0x1000 data SMMSTORE 0x67f000 0x40000 data BIOS_UNUSABLE 0x6bf000 0x40000 empty UNUSED_HOLE 0x7ff000 0x1000 empty"},{"location":"variants/protectli_vp2410/openness-score/#ifd-regions","title":"IFD regions","text":"IFD region Start End Size Category Flash Descriptor 0x00000000 0x00000fff 0x1000 data Device Exp1 0x006ff000 0x007fffff 0x101000 empty"},{"location":"variants/protectli_vp2410/openness-score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 524288</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 524260 (0x7ffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 524260 none empty"},{"location":"variants/protectli_vp2410/openness-score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 3002368</li> <li>Number of files: 17</li> <li>Open-source files size: 2086013 (0x1fd47d)</li> <li>Closed-source files size: 524126 (0x7ff5e)</li> <li>Data size: 8193 (0x2001)</li> <li>Empty size: 384036 (0x5dc24)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1848895 none open-source fallback/romstage stage 48672 LZ4 open-source fallback/ramstage stage 125050 LZMA open-source fallback/dsdt.aml raw 7244 none open-source pt raw 20480 none open-source pdpt raw 32 none open-source fallback/postcar stage 35640 none open-source cpu_microcode_blob.bin microcode 153600 none closed-source fspm.bin fsp 178014 LZ4 closed-source fsps.bin fsp 192512 none closed-source cbfs_master_header cbfs header 32 none data config raw 4661 LZMA data revision raw 859 none data build_info raw 103 none data vbt.bin raw 1271 LZMA data header_pointer cbfs header 4 none data (empty) null 384036 none empty"},{"location":"variants/protectli_vp2410/openness-score/#v110","title":"v1.1.0","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for protectli_vp2410_v1.1.0.rom</p> <p>Open-source code percentage: 32.9% Closed-source code percentage: 67.1%</p> <ul> <li>Image size: 8388608 (0x800000)</li> <li>Number of regions: 17</li> <li>Number of CBFSes: 2</li> <li>Total open-source code size: 2313343 (0x234c7f)</li> <li>Total closed-source code size: 4713310 (0x47eb5e)</li> <li>Total data size: 413723 (0x6501b)</li> <li>Total empty size: 2000904 (0x1e8808)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/protectli_vp2410/openness-score/#fmap-regions_1","title":"FMAP regions","text":"FMAP region Offset Size Category IFWI 0x1000 0x2ff000 closed-source RECOVERY_MRC_CACHE 0x300000 0x10000 data RW_MRC_CACHE 0x310000 0x10000 data RW_VAR_MRC_CACHE 0x320000 0x1000 data FMAP 0x3a1000 0x1000 data SMMSTORE 0x67f000 0x40000 data BIOS_UNUSABLE 0x6bf000 0x40000 empty UNUSED_HOLE 0x7ff000 0x1000 empty"},{"location":"variants/protectli_vp2410/openness-score/#ifd-regions_1","title":"IFD regions","text":"IFD region Start End Size Category Flash Descriptor 0x00000000 0x00000fff 0x1000 data Device Exp1 0x006ff000 0x007fffff 0x101000 empty"},{"location":"variants/protectli_vp2410/openness-score/#cbfs-bootsplash_1","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 524288</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 524260 (0x7ffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 524260 none empty"},{"location":"variants/protectli_vp2410/openness-score/#cbfs-coreboot_1","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 3002368</li> <li>Number of files: 17</li> <li>Open-source files size: 2313343 (0x234c7f)</li> <li>Closed-source files size: 523102 (0x7fb5e)</li> <li>Data size: 8191 (0x1fff)</li> <li>Empty size: 157732 (0x26824)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 2080815 none open-source fallback/romstage stage 47192 LZ4 open-source fallback/ramstage stage 125678 LZMA open-source fallback/dsdt.aml raw 7126 none open-source pt raw 20480 none open-source pdpt raw 32 none open-source fallback/postcar stage 32020 none open-source cpu_microcode_blob.bin microcode 152576 none closed-source fspm.bin fsp 178014 LZ4 closed-source fsps.bin fsp 192512 none closed-source cbfs_master_header cbfs header 28 none data config raw 4505 LZMA data revision raw 859 none data build_info raw 103 none data vbt.bin raw 1271 LZMA data header_pointer cbfs header 4 none data (empty) null 157732 none empty"},{"location":"variants/protectli_vp2410/releases/","title":"Protectli VP2410 Dasharo Release Notes","text":"<p>Following Release Notes describe status of open-source firmware development for Protectli VP2410.</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to Protectli Dasharo Release Newsletter     <p>Test results for this platform can be found here.</p> <p>The missing versions before v1.0.15 were assigned to different platforms interchangeably. See Protectli FW6 releases and Protectli VP46XX releases.</p>"},{"location":"variants/protectli_vp2410/releases/#v111-2025-01-23","title":"v1.1.1 - 2025-01-23","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/protectli_vp2410/releases/#added","title":"Added","text":"<ul> <li>CPU throttling option</li> <li>Power state after AC loss option</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#changed","title":"Changed","text":"<ul> <li>Rebased coreboot to 24.02</li> <li>Rebased edk2 to edk2-stable202405</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#known-issues","title":"Known issues","text":"<ul> <li>VP2410 does not power on after shutting down with power button 4s override</li> <li>USB 2.0 sticks not detected on VP2410</li> <li>S3 resume does not work in Geminilake FSP</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#binaries","title":"Binaries","text":"<p>protectli_vp2410_v1.1.1.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_vp2410/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 24.02 revision 001d6f77<ul> <li>License</li> </ul> </li> <li>Dasharo EDKII fork based on edk2-stable202405 revision 8a9fd05f<ul> <li>License</li> </ul> </li> <li>iPXE based on 2023.12 revision 35d84756<ul> <li>License</li> </ul> </li> <li>vboot based on 3d37d2aafe revision 3d37d2aa<ul> <li>License</li> </ul> </li> <li>Intel Management Engine/Trusted Execution Engine version v4.0.50.2083<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor version v1.0<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package version GLK v2.2.1.3.2<ul> <li>License</li> </ul> </li> <li>Intel microcode version GLK B0 0x42 19/04/2024<ul> <li>License</li> </ul> </li> <li>Intel microcode version GLK R0 0x24 25/08/2023<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/protectli_vp2410/releases/#v110-2024-05-16","title":"v1.1.0 - 2024-05-16","text":""},{"location":"variants/protectli_vp2410/releases/#added_1","title":"Added","text":"<ul> <li>SMM BIOS write protection</li> <li>Setup menu password configuration</li> <li>USB stack disable option in setup menu</li> <li>Serial port console redirection option in setup menu</li> <li>Customizable Serial Number and UUID via CBFS support</li> <li>Customizable boot logo support</li> <li>Support for taking screenshots in the firmware</li> <li>ESP partition scanning in look for grubx64.efi or shimx64.efi or Windows bootmgr</li> <li>Microsoft and Windows 2023 UEFI Secure Boot certificates</li> <li>UEFI 2.8 errata C compliance in EDKII fork</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#changed_1","title":"Changed","text":"<ul> <li>Rebased to coreboot 4.21</li> <li>Enroll default UEFI Secure Boot keys on the first boot</li> <li>Improved UEFI Secure Boot menu user experience</li> <li>Scope of reset to defaults hotkey to global in firmware setup</li> <li>Updated microcode to the newer version; refer to SBOM section below</li> <li>Updated ME/TXE to the newer version; refer to SBOM section below</li> <li>Updated FSP to the newer version; refer to SBOM section below</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#fixed","title":"Fixed","text":"<ul> <li>Auto Boot Time-out is reset to 0 when F9 is pressed</li> <li>Reset to defaults with F9 causes the wrong settings to be restored</li> <li>RAM memory capacity not reported in firmware Setup Menu</li> <li>RTC time and date resetting to the coreboot build date on 29th February</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#known-issues_1","title":"Known issues","text":"<ul> <li>VP2410 does not power on after shutting down with power button 4s override</li> <li>USB 2.0 sticks not detected on VP2410</li> <li>S3 resume does not work in Geminilake FSP</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#binaries_1","title":"Binaries","text":"<p>protectli_vp2410_v1.1.0.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_vp2410/releases/#sbom-software-bill-of-materials_1","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 4.21 revision 2d96eeb7</li> <li>Dasharo EDKII fork based on edk2-stable202002 revision ae0ce3e2</li> <li>iPXE based on 2023.12 revision 838611b3</li> <li>vboot based on 0c11187c75 revision 0c11187c</li> <li>Intel Management Engine/Trusted Execution Engine based on v4.0.50.2083 revision 06bbd2a0</li> <li>Intel Flash Descriptor based on v1.0 revision 06bbd2a0</li> <li>Intel Firmware Support Package based on GLK v2.2.1.3.2 revision 06bbd2a0</li> <li>Intel microcode based on GLK B0 0x0000003e revision microcode-20230808</li> <li>Intel microcode based on GLK R0 0x00000022 revision microcode-20230808</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#v1015-2022-05-31","title":"v1.0.15 - 2022-05-31","text":""},{"location":"variants/protectli_vp2410/releases/#added_2","title":"Added","text":"<ul> <li>Initial support for the Protectli VP2410 platform</li> <li>TPM2 support</li> <li>TPM Measured Boot</li> <li>UEFI compatibility</li> <li>Protectli boot logo</li> <li>UEFI shell</li> <li>Customized Network boot menu and strings</li> <li>Dasharo SMBIOS compatibility</li> <li>USB 2.0 sticks support</li> <li>S3 resume</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#binaries_2","title":"Binaries","text":"<p>protectli_VP2410_DF_v1.0.15.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_vp2410/releases/#sbom-software-bill-of-materials_2","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on b77cf229 revision f59b1ec9</li> <li>edk2 based on 7f90b9cd revision 90364638</li> <li>iPXE for EFI revision 988d2</li> <li>FSP: Custom version based on Intel GeminiLake FSP 2.2.1.3</li> <li>Management Engine: Custom image based on CSE 4.0.30.1392</li> <li>microcode:<ul> <li>CPU signature: 0x0706A8, Date: 09.06.2020, Revision: 0x18</li> <li>CPU signature: 0x0706A0, Date: 12.07.2017, Revision: 0x26</li> <li>CPU signature: 0x0706A1, Date: 09.06.2020, Revision: 0x34</li> </ul> </li> </ul>"},{"location":"variants/protectli_vp2410/releases/#v1010-2021-09-29","title":"v1.0.10 - 2021-09-29","text":""},{"location":"variants/protectli_vp2410/releases/#changed_2","title":"Changed","text":"<ul> <li>Update ME image to fix VR issues</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#sbom-software-bill-of-materials_3","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.13 revision a4cd9117</li> <li>Dasharo UEFI based on TianoCore EDK2 edk2-stable202011</li> <li>EFI iPXE 1.20.1+ (g9b25)</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#v109-2021-07-20","title":"v1.0.9 - 2021-07-20","text":""},{"location":"variants/protectli_vp2410/releases/#changed_3","title":"Changed","text":"<ul> <li>SMBIOS Product name to VP2410</li> <li>UEFI Setup key changed to DEL</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#fixed_1","title":"Fixed","text":"<ul> <li>USB detection issues</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#sbom-software-bill-of-materials_4","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.13 revision a4cd9117</li> <li>Dasharo UEFI based on TianoCore EDK2 edk2-stable202011</li> <li>EFI iPXE 1.20.1+ (g9b25)</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#v108-2021-05-28","title":"v1.0.8 - 2021-05-28","text":""},{"location":"variants/protectli_vp2410/releases/#added_3","title":"Added","text":"<ul> <li>UEFI compatible interface</li> <li>iPXE network boot</li> <li>UEFI Shell</li> <li>TPM2 menu</li> <li>UEFI Measured Boot</li> <li>Persistent boot options</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#fixed_2","title":"Fixed","text":"<ul> <li>The VGA text mode console does not work in SeaBIOS.   UEFI graphics works well.</li> <li>VT-d (IOMMU) is not being correctly configured by FSP.</li> <li>Flashrom did not support Geminilake chipset. The upstream support is already there.</li> <li>Fastboot is not yet working.   FSP fastboot has been fixed to work with coreboot</li> <li>Display does not work in FreeBSD and other BSD systems   UEFI graphics works in FreeBSD.</li> <li>Linux reports non-working TPM interrupt.</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#known-issues_2","title":"Known issues","text":"<ul> <li>USB keyboard cannot wake platform from S3 suspend. This s a limitation of the   hardware design which routes only 5V power supply available in full powered   state. Waking the platform from S3 state is only possible with power button   and Wake-on-LAN.</li> <li>S3 resume does not work in FSP.   For power saving it is recommended to use modern S0 idle states, aka s2idle   as explained in the Linux kernel documentation.   S0 idle is known to be more efficient in saving power. Additionally the   keyboard can wake the platform from s2idle state since the power is not cut   off from USB devices in this state.</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#sbom-software-bill-of-materials_5","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.13 revision a4cd9117</li> <li>Dasharo UEFI based on TianoCore EDK2 edk2-stable202011</li> <li>EFI iPXE 1.20.1+ (g9b25)</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#103-rc1-2021-03-19-engineering-release","title":"1.0.3-rc1 - 2021-03-19 (Engineering release)","text":""},{"location":"variants/protectli_vp2410/releases/#added_4","title":"Added","text":"<ul> <li>Initial support for Protectli Vault FW4 Geminilake platform</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#fixed_3","title":"Fixed","text":"<ul> <li>SeaBIOS: change handling the CBFS pointer to correctly detect CBFS location   on Apollolake and Geminilake platforms</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#known-issues_3","title":"Known issues","text":"<ul> <li>The VGA text mode console does not work in SeaBIOS.   SeaBIOS does not print boot menu prompt and boot options. Only serial console   redirection and graphical logo works.</li> <li>VT-d (IOMMU) is not being correctly configured by FSP.</li> <li>Flashrom does not support Geminilake chipset.</li> <li>Fastboot is not yet working.   It makes the boot process longer due to full memory training on each boot.</li> <li>Since VGA text mode console doesn't yet work.   FreeBSD can only be accessed on serial console.</li> <li>Linux reports non-working TPM interrupt.</li> </ul>"},{"location":"variants/protectli_vp2410/releases/#sbom-software-bill-of-materials_6","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.13 revision a4cd9117</li> <li>SeaBIOS v1.0.8 based on rel-1.12.1 revision 171fc897</li> <li>iPXE 2019.3 stable revision ebf2eaf5</li> </ul>"},{"location":"variants/protectli_vp2420/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/protectli_vp2420/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configuration used for validation of the coreboot port on the Protectli VP2420 firewall.</p>"},{"location":"variants/protectli_vp2420/hardware-matrix/#protectli-vp2420","title":"Protectli VP2420","text":"Component Description CPU Intel(R) Celeron(R) J6412 @ 2.00GHz RAM KINGSTON KVR29S21S6/8 Flash memory Macronix MX25U6435E/F SSD 1. Goodram SSDPR-CX400-256 2. Goodram SSDPR-CL100-240-g2 MMC drive SAMSUNG 8GTF4R (on-board) USB pendrives 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 32 GB 3. USB Type-C Hub Pro UCN3286 USB headers USB Expander Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p 3. USB Type-C Hub Pro UCN3286 Wireless card Qualcomm Atheros QCA6174 Display HDMI 1920x1080p, DP 1920x1080p Ethernet 4x intel i225 (on-board) Power supply Channel Well Technology 12V, 5.0A 60W <p>Note, that in RAM section all used during verification procedure modules have been listed. Device has only one RAM mounting slot.</p>"},{"location":"variants/protectli_vp2420/openness-score/","title":"Dasharo Openness Score","text":"<p>This page contains the Dasharo Openness Score for Protectli VP2420 Dasharo releases. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/protectli_vp2420/openness-score/#v121","title":"v1.2.1","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for protectli_vp2420_v1.2.1.rom</p> <p>Open-source code percentage: 30.0% Closed-source code percentage: 70.0%</p> <ul> <li>Image size: 16777216 (0x1000000)</li> <li>Number of regions: 26</li> <li>Number of CBFSes: 3</li> <li>Total open-source code size: 3768428 (0x39806c)</li> <li>Total closed-source code size: 8800938 (0x864aaa)</li> <li>Total data size: 628702 (0x997de)</li> <li>Total empty size: 3579148 (0x369d0c)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/protectli_vp2420/openness-score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category RECOVERY_MRC_CACHE 0x700000 0x10000 data RW_MRC_CACHE 0x710000 0x10000 data SMMSTORE 0x720000 0x40000 data SHARED_DATA 0x760000 0x2000 data VBLOCK_DEV 0x762000 0x2000 data RW_NVRAM 0x764000 0x6000 data CONSOLE 0x76a000 0x20000 data VBLOCK_A 0x88a000 0x2000 data RW_FWID_A 0xbfff00 0x100 data RO_VPD 0xc00000 0x4000 data FMAP 0xc04000 0x800 data RO_FRID 0xc04800 0x100 data RO_FRID_PAD 0xc04900 0x700 data GBB 0xc05000 0x3000 data"},{"location":"variants/protectli_vp2420/openness-score/#ifd-regions","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00001000 0x006fffff 0x6ff000 closed-source Flash Descriptor 0x00000000 0x00000fff 0x1000 data"},{"location":"variants/protectli_vp2420/openness-score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 1048576</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 1048548 (0xfffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 1048548 none empty"},{"location":"variants/protectli_vp2420/openness-score/#cbfs-fw_main_a","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 3620608</li> <li>Number of files: 14</li> <li>Open-source files size: 1845910 (0x1c2a96)</li> <li>Closed-source files size: 732501 (0xb2d55)</li> <li>Data size: 8913 (0x22d1)</li> <li>Empty size: 1033284 (0xfc444)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1553160 none open-source fallback/romstage stage 88528 none open-source fallback/ramstage stage 130886 LZMA open-source fallback/dsdt.aml raw 9880 none open-source fallback/postcar stage 63456 none open-source cpu_microcode_blob.bin microcode 20480 none closed-source fspm.bin fsp 495616 none closed-source fsps.bin fsp 216405 LZ4 closed-source config raw 5030 LZMA data revision raw 879 none data build_info raw 123 none data vbt.bin raw 1200 LZMA data (empty) null 228 none empty (empty) null 1033056 none empty"},{"location":"variants/protectli_vp2420/openness-score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 4161536</li> <li>Number of files: 16</li> <li>Open-source files size: 1922518 (0x1d55d6)</li> <li>Closed-source files size: 732501 (0xb2d55)</li> <li>Data size: 9201 (0x23f1)</li> <li>Empty size: 1497316 (0x16d8e4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1553160 none open-source fallback/romstage stage 88528 none open-source fallback/ramstage stage 130886 LZMA open-source fallback/dsdt.aml raw 9880 none open-source fallback/postcar stage 63456 none open-source bootblock bootblock 76608 none open-source cpu_microcode_blob.bin microcode 20480 none closed-source fspm.bin fsp 495616 none closed-source fsps.bin fsp 216405 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 80 none data config raw 5030 LZMA data revision raw 879 none data build_info raw 123 none data vbt.bin raw 1200 LZMA data (empty) null 1497316 none empty"},{"location":"variants/protectli_vp2420/openness-score/#v120","title":"v1.2.0","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for protectli_vp2420_v1.2.0.rom</p> <p>Open-source code percentage: 35.3% Closed-source code percentage: 64.7%</p> <ul> <li>Image size: 16777216 (0x1000000)</li> <li>Number of regions: 26</li> <li>Number of CBFSes: 3</li> <li>Total open-source code size: 4806882 (0x4958e2)</li> <li>Total closed-source code size: 8800924 (0x864a9c)</li> <li>Total data size: 627958 (0x994f6)</li> <li>Total empty size: 2541452 (0x26c78c)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/protectli_vp2420/openness-score/#fmap-regions_1","title":"FMAP regions","text":"FMAP region Offset Size Category RECOVERY_MRC_CACHE 0x700000 0x10000 data RW_MRC_CACHE 0x710000 0x10000 data SMMSTORE 0x720000 0x40000 data SHARED_DATA 0x760000 0x2000 data VBLOCK_DEV 0x762000 0x2000 data RW_NVRAM 0x764000 0x6000 data CONSOLE 0x76a000 0x20000 data VBLOCK_A 0x88a000 0x2000 data RW_FWID_A 0xbfff00 0x100 data RO_VPD 0xc00000 0x4000 data FMAP 0xc04000 0x800 data RO_FRID 0xc04800 0x100 data RO_FRID_PAD 0xc04900 0x700 data GBB 0xc05000 0x3000 data"},{"location":"variants/protectli_vp2420/openness-score/#ifd-regions_1","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00001000 0x006fffff 0x6ff000 closed-source Flash Descriptor 0x00000000 0x00000fff 0x1000 data"},{"location":"variants/protectli_vp2420/openness-score/#cbfs-bootsplash_1","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 1048576</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 1048548 (0xfffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 1048548 none empty"},{"location":"variants/protectli_vp2420/openness-score/#cbfs-fw_main_a_1","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 3620608</li> <li>Number of files: 13</li> <li>Open-source files size: 2365521 (0x241851)</li> <li>Closed-source files size: 732494 (0xb2d4e)</li> <li>Data size: 8513 (0x2141)</li> <li>Empty size: 514080 (0x7d820)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 2081638 none open-source fallback/romstage stage 85520 none open-source fallback/ramstage stage 129116 LZMA open-source fallback/dsdt.aml raw 9759 none open-source fallback/postcar stage 59488 none open-source cpu_microcode_blob.bin microcode 20480 none closed-source fspm.bin fsp 495616 none closed-source fsps.bin fsp 216398 LZ4 closed-source config raw 4815 LZMA data revision raw 859 none data build_info raw 103 none data vbt.bin raw 1200 LZMA data (empty) null 514080 none empty"},{"location":"variants/protectli_vp2420/openness-score/#cbfs-coreboot_1","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 4161536</li> <li>Number of files: 17</li> <li>Open-source files size: 2441361 (0x254091)</li> <li>Closed-source files size: 732494 (0xb2d4e)</li> <li>Data size: 8857 (0x2299)</li> <li>Empty size: 978824 (0xeef88)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 2081638 none open-source fallback/romstage stage 85520 none open-source fallback/ramstage stage 129116 LZMA open-source fallback/dsdt.aml raw 9759 none open-source fallback/postcar stage 59488 none open-source bootblock bootblock 75840 none open-source cpu_microcode_blob.bin microcode 20480 none closed-source fspm.bin fsp 495616 none closed-source fsps.bin fsp 216398 LZ4 closed-source cbfs_master_header cbfs header 28 none data intel_fit intel_fit 80 none data config raw 4815 LZMA data revision raw 859 none data build_info raw 103 none data vbt.bin raw 1200 LZMA data (empty) null 1060 none empty (empty) null 977764 none empty"},{"location":"variants/protectli_vp2420/releases/","title":"Protectli VP2420 Dasharo Release Notes","text":"<p>Following Release Notes describe status of open-source firmware development for Protectli VP2420.</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to Protectli Dasharo Release Newsletter     <p>Test results for this platform can be found here.</p>"},{"location":"variants/protectli_vp2420/releases/#v121-2025-03-12","title":"v1.2.1 - 2025-03-12","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/protectli_vp2420/releases/#added","title":"Added","text":"<ul> <li>Power State after AC loss feature</li> <li>Configurable CPU throttling temperature</li> <li>Human-readable certificate names in UEFI Secure Boot menu</li> </ul>"},{"location":"variants/protectli_vp2420/releases/#changed","title":"Changed","text":"<ul> <li>Updated coreboot base to 24.02. Please refer to SBOM section for details</li> <li>Updated UEFI payload base to edk2-stable202402. Please refer to SBOM section   for details</li> <li>Updated microcode blob. Please refer to SBOM section for details</li> <li>Updated FSP blob. Please refer to SBOM section for details</li> <li>Removed UEFI Shell</li> <li>Removed the autoboot timeout in the iPXE menu</li> <li>ME PCI device hidden to match the behavior of other Protectli devices with   ME disabled</li> <li>Updated UEFI Secure Boot DBX to 2025-02-24</li> <li>Simplified setup password policy</li> </ul>"},{"location":"variants/protectli_vp2420/releases/#known-issues","title":"Known issues","text":"<ul> <li>Certain PCIe WiFi cards may cause AER error</li> <li>STB002.001 encounters unlisted error</li> </ul>"},{"location":"variants/protectli_vp2420/releases/#binaries","title":"Binaries","text":"<p>protectli_vp2420_v1.2.1.rom sha256 sha256.sig</p> <p>protectli_vp2420_v1.2.1_dev_signed.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_vp2420/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 24.02 revision 832c6333<ul> <li>License</li> </ul> </li> <li>Dasharo EDKII fork based on edk2-stable202402 revision 8d06fe48<ul> <li>License</li> </ul> </li> <li>Dasharo iPXE fork based on 2024.05 revision 63ed3e35<ul> <li>License</li> </ul> </li> <li>vboot based on 3d37d2aafe revision 3d37d2aa<ul> <li>License</li> </ul> </li> <li>Intel Management Engine version v15.40.32.2910<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor version v1.0<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package version Elkhart Lake IPU2024.2<ul> <li>License</li> </ul> </li> <li>Intel microcode version EHL B1 0x1a 05/04/2024<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/protectli_vp2420/releases/#v120-2024-05-16","title":"v1.2.0 - 2024-05-16","text":""},{"location":"variants/protectli_vp2420/releases/#added_1","title":"Added","text":"<ul> <li>Setup menu password configuration</li> <li>Serial port console redirection option in setup menu</li> <li>Customizable Serial Number and UUID via CBFS support</li> <li>Customizable boot logo support</li> <li>Support for taking screenshots in the firmware</li> <li>ESP partition scanning in look for grubx64.efi or shimx64.efi or Windows bootmgr</li> <li>Microsoft and Windows 2023 UEFI Secure Boot certificates</li> <li>UEFI 2.8 errata C compliance in EDKII fork</li> </ul>"},{"location":"variants/protectli_vp2420/releases/#changed_1","title":"Changed","text":"<ul> <li>Rebased to coreboot 4.21</li> <li>Enroll default UEFI Secure Boot keys on the first boot</li> <li>Improved UEFI Secure Boot menu user experience</li> <li>Scope of reset to defaults hotkey to global in firmware setup</li> <li>Updated microcode to the newer version; refer to SBOM section below</li> <li>Updated ME to the newer version; refer to SBOM section below</li> </ul>"},{"location":"variants/protectli_vp2420/releases/#fixed","title":"Fixed","text":"<ul> <li>Auto Boot Time-out is reset to 0 when F9 is pressed</li> <li>Reset to defaults with F9 causes the wrong settings to be restored</li> <li>RTC time and date resetting to the coreboot build date on 29th February</li> <li>Cannot set custom bootsplash in firmware via DCU nor cbfstool</li> </ul>"},{"location":"variants/protectli_vp2420/releases/#binaries_1","title":"Binaries","text":"<p>protectli_vp2420_v1.2.0.rom sha256 sha256.sig</p> <p>protectli_vp2420_v1.2.0_dev_signed.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_vp2420/releases/#sbom-software-bill-of-materials_1","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 4.21 revision 7c2c79e8</li> <li>Dasharo EDKII fork based on edk2-stable202002 revision ae0ce3e2</li> <li>iPXE based on 2023.12 revision 838611b3</li> <li>vboot based on 0c11187c75 revision 0c11187c</li> <li>Intel Management Engine based on v15.40.32.2910 revision d0b63476</li> <li>Intel Flash Descriptor based on v1.0 revision d0b63476</li> <li>Intel Firmware Support Package based on Elkhart Lake MR6 revision 481ea7cf</li> <li>Intel microcode based on EHL B1 0x00000016 revision microcode-20230808</li> </ul>"},{"location":"variants/protectli_vp2420/releases/#v110-2023-04-20","title":"v1.1.0 - 2023-04-20","text":""},{"location":"variants/protectli_vp2420/releases/#added_2","title":"Added","text":"<ul> <li>USB stack and mass storage enable/disable option</li> <li>SMM BIOS write protection enable/disable option</li> </ul>"},{"location":"variants/protectli_vp2420/releases/#changed_2","title":"Changed","text":"<ul> <li>Updating from v1.0.x requires flashing the WP_RO recovery partition</li> <li>Firmware version v1.1.x are signed with a new key</li> <li>Keys must be provisioned prior enabling Secure Boot</li> </ul>"},{"location":"variants/protectli_vp2420/releases/#fixed_1","title":"Fixed","text":"<ul> <li>VP2420 memory issues and incorrectly reported memory capacity</li> <li>Popup with information about recovery mode is still displayed after flashing with a valid binary</li> </ul>"},{"location":"variants/protectli_vp2420/releases/#known-issues_1","title":"Known issues","text":"<ul> <li>pfSense boot time</li> <li>Double characters in pfSense initial boot phase</li> </ul>"},{"location":"variants/protectli_vp2420/releases/#binaries_2","title":"Binaries","text":"<p>protectli_vp2420_v1.1.0.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_vp2420/releases/#sbom-software-bill-of-materials_2","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on c86c926 revision e36a117d</li> <li>edk2 based on 7f90b9cd revision 19bf14b4</li> </ul>"},{"location":"variants/protectli_vp2420/releases/#v101-2023-02-02","title":"v1.0.1 - 2023-02-02","text":""},{"location":"variants/protectli_vp2420/releases/#added_3","title":"Added","text":"<ul> <li>TPM 2.0 support over SPI interface</li> <li>TPM Measured Boot</li> </ul>"},{"location":"variants/protectli_vp2420/releases/#changed_3","title":"Changed","text":"<ul> <li>Downgrade edk2 Secure Boot driver to achieve consistent user experience as on   the VP46XX v1.0.19 release</li> </ul>"},{"location":"variants/protectli_vp2420/releases/#fixed_2","title":"Fixed","text":"<ul> <li>Dasharo BIOS lock menu is missing</li> <li>iPXE entry doesn't occur in setup menu</li> <li>Impossibility of pfSense/OPNsense console versions installation</li> </ul>"},{"location":"variants/protectli_vp2420/releases/#known-issues_2","title":"Known issues","text":"<ul> <li>Popup with information about recovery mode is still displayed after flashing with a valid binary</li> <li>pfSense boot time</li> <li>Double characters in pfSense initial boot phase</li> </ul>"},{"location":"variants/protectli_vp2420/releases/#binaries_3","title":"Binaries","text":"<p>protectli_vp2420_v1.0.1.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_vp2420/releases/#sbom-software-bill-of-materials_3","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on c86c926 revision 54cbbc5b</li> <li>edk2 based on 7f90b9cd revision e31b7a71</li> </ul>"},{"location":"variants/protectli_vp2420/releases/#v100-2022-12-22","title":"v1.0.0 - 2022-12-22","text":""},{"location":"variants/protectli_vp2420/releases/#added_4","title":"Added","text":"<ul> <li>Support for VP2420 platform</li> <li>Vboot Verified Boot</li> <li>TPM Measured Boot</li> <li>Vboot recovery notification in UEFI Payload</li> <li>UEFI Shell</li> <li>UEFI Secure Boot</li> <li>BIOS flash protection for Vboot recovery region</li> <li>UEFI boot support</li> <li>Intel i225 controller network boot support</li> <li>Customized boot menu keys</li> <li>Customized setup menu keys</li> <li>Configurable boot order</li> <li>Configurable boot options</li> </ul>"},{"location":"variants/protectli_vp2420/releases/#binaries_4","title":"Binaries","text":"<p>protectli_VP2420_v1.0.0.rom sha256 sha256.sig</p> <p>How to verify signatures:</p> <pre><code>wget https://3mdeb.com/open-source-firmware/Dasharo/protectli_vault_ehl/v1.0.0/protectli_vp2420_v1.0.0.rom\nwget https://3mdeb.com/open-source-firmware/Dasharo/protectli_vault_ehl/v1.0.0/protectli_vp2420_v1.0.0.rom.sha256\nwget https://3mdeb.com/open-source-firmware/Dasharo/protectli_vault_ehl/v1.0.0/protectli_vp2420_v1.0.0.rom.sha256.sig\ngpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/keys/master-key/3mdeb-master-key.asc\ngpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/3mdeb-dasharo-master-key.asc\ngpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/customer-keys/protectli/release-keys/protectli-dasharo-firewall-release-1.0-key.asc\ngpg --list-sigs \"3mdeb Master Key\" \"3mdeb Dasharo Master Key\" \"Protectli Dasharo Firewall Release 1.0 Signing Key\"\nsha256sum -c protectli_vp2420_v1.0.0.rom.sha256\ngpg -v --verify protectli_vp2420_v1.0.0.rom.sha256.sig protectli_vp2420_v1.0.0.rom.sha256\n</code></pre>"},{"location":"variants/protectli_vp2420/releases/#sbom-software-bill-of-materials_4","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on c492b427 revision c86c9266</li> <li>edk2 based on e461f08 revision 7948a20</li> <li>iPXE for EFI revision 988d2</li> </ul>"},{"location":"variants/protectli_vp2430/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/protectli_vp2430/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configuration used for validation of the coreboot port on the Protectli VP2430 firewall.</p>"},{"location":"variants/protectli_vp2430/hardware-matrix/#protectli-vp2430","title":"Protectli VP2430","text":"Component Description CPU Intel(R) N150 @ 3.40GHz RAM Kingston KTC-0123456789.A00 Flash memory Macronix KH25L12835F SSD 1.KINGSTON SNV3S500G MMC drive SAMSUNG 32GB (on-board) USB pendrives 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. USB Type-C Hub Pro UCN3286 USB headers USB Expander Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p 3. USB Type-C Hub Pro UCN3286 Wireless card Qualcomm Atheros QCA61x4A Wireless Network Adapter Display HDMI 1920x1080p, DP 1920x1080p Ethernet 4x intel i226 (on-board) Power supply Channel Well Technology 12V, 5.0A 60W"},{"location":"variants/protectli_vp2430/openness-score/","title":"Dasharo Openness Score","text":"<p>This page contains the Dasharo Openness Score for Protectli VP2430 Dasharo releases. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/protectli_vp2430/openness-score/#v090","title":"v0.9.0","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for protectli_vp2430_v0.9.0.rom</p> <p>Open-source code percentage: 33.8% Closed-source code percentage: 66.2%</p> <ul> <li>Image size: 16777216 (0x1000000)</li> <li>Number of regions: 24</li> <li>Number of CBFSes: 3</li> <li>Total open-source code size: 3414850 (0x341b42)</li> <li>Total closed-source code size: 6694310 (0x6625a6)</li> <li>Total data size: 866832 (0xd3a10)</li> <li>Total empty size: 5801224 (0x588508)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/protectli_vp2430/openness-score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category SMMSTORE 0x500000 0x40000 data RECOVERY_MRC_CACHE 0x540000 0x20000 data RW_MRC_CACHE 0x560000 0x20000 data RW_VPD 0x580000 0x2000 data RW_NVRAM 0x582000 0x6000 data VBLOCK_A 0x608000 0x10000 data RW_FWID_A 0xafff00 0x100 data RO_VPD 0xb00000 0x4000 data FMAP 0xb04000 0x800 data RO_FRID 0xb04800 0x100 data RO_FRID_PAD 0xb04900 0x700 data GBB 0xb05000 0x3000 data"},{"location":"variants/protectli_vp2430/openness-score/#ifd-regions","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00001000 0x00413fff 0x413000 closed-source Flash Descriptor 0x00000000 0x00000fff 0x1000 data Device Exp2 0x00414000 0x004fffff 0xec000 empty"},{"location":"variants/protectli_vp2430/openness-score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 524288</li> <li>Number of files: 2</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 188768 (0x2e160)</li> <li>Empty size: 335520 (0x51ea0)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category logo.bmp raw 188663 LZMA data (empty) null 335520 none empty"},{"location":"variants/protectli_vp2430/openness-score/#cbfs-fw_main_a","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 5144320</li> <li>Number of files: 13</li> <li>Open-source files size: 1663265 (0x196121)</li> <li>Closed-source files size: 1211091 (0x127ad3)</li> <li>Data size: 8940 (0x22ec)</li> <li>Empty size: 2261024 (0x228020)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1362458 none open-source fallback/romstage stage 98064 none open-source fallback/ramstage stage 145019 LZMA open-source fallback/dsdt.aml raw 19448 none open-source fallback/postcar stage 38276 none open-source cpu_microcode_blob.bin microcode 138240 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 286419 LZ4 closed-source config raw 5586 LZMA data revision raw 876 none data build_info raw 120 none data vbt.bin raw 1274 LZMA data (empty) null 1508 none empty"},{"location":"variants/protectli_vp2430/openness-score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 5210112</li> <li>Number of files: 17</li> <li>Open-source files size: 1751585 (0x1aba21)</li> <li>Closed-source files size: 1211091 (0x127ad3)</li> <li>Data size: 9412 (0x24c4)</li> <li>Empty size: 2238024 (0x222648)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1362458 none open-source fallback/romstage stage 98064 none open-source fallback/ramstage stage 145019 LZMA open-source fallback/dsdt.aml raw 19448 none open-source fallback/postcar stage 38276 none open-source bootblock bootblock 88320 none open-source cpu_microcode_blob.bin microcode 138240 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 286419 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 80 none data config raw 5586 LZMA data revision raw 876 none data build_info raw 120 none data vbt.bin raw 1274 LZMA data (empty) null 1252 none empty (empty) null 2236772 none empty"},{"location":"variants/protectli_vp2430/releases/","title":"Protectli VP2430 Dasharo Release Notes","text":"<p>Following Release Notes describe status of open-source firmware development for Protectli VP2430.</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to Protectli Dasharo Release Newsletter"},{"location":"variants/protectli_vp2430/releases/#v090-2025-05-13","title":"v0.9.0 - 2025-05-13","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/protectli_vp2430/releases/#added","title":"Added","text":"<ul> <li>Initial support for Protectli Alder Lake N devices (Vault Pro 2430)</li> <li>UEFI compatible interface</li> <li>Support for discrete TPM</li> <li>UEFI Secure Boot support</li> <li>Boot logo customization support</li> <li>USB boot support</li> <li>NVMe boot support</li> <li>TPM Measured Boot</li> <li>UEFI Secure Boot</li> <li>Network boot</li> <li>Windows 11 booting</li> <li>Ubuntu LTS booting</li> <li>Serial port console redirection</li> <li>Vboot Verified Boot</li> <li>Intel ME HAP disable</li> <li>BIOS flash protection for Vboot recovery region</li> <li>Setup menu password configuration</li> <li>SMM BIOS write protection</li> <li>USB stack disable option in setup menu</li> <li>Network stack disable option in setup menu</li> </ul>"},{"location":"variants/protectli_vp2430/releases/#known-issues","title":"Known issues","text":"<ul> <li>Unexpected error in dmesg</li> </ul>"},{"location":"variants/protectli_vp2430/releases/#binaries","title":"Binaries","text":"<p>protectli_vp2430_v0.9.0.rom sha256 sha256.sig</p> <p>protectli_vp2430_v0.9.0_dev_signed.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_vp2430/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 24.02 revision feb2693f<ul> <li>License</li> </ul> </li> <li>Dasharo EDKII fork based on edk2-stable202405 revision c2de870a<ul> <li>License</li> </ul> </li> <li>Dasharo iPXE fork based on 2024.07 revision 63ed3e35<ul> <li>License</li> </ul> </li> <li>Intel Management Engine version v16.50.15.1515-v0.1<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor version v1.2<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package version 0C.02.89.30-v0.1<ul> <li>License</li> </ul> </li> <li>Intel microcode version ADL N0 0x15<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/protectli_vp2440/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/protectli_vp2440/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configuration used for validation of the coreboot port on the Protectli VP2440 firewall.</p>"},{"location":"variants/protectli_vp2440/hardware-matrix/#protectli-vp2440","title":"Protectli VP2440","text":"Component Description CPU Intel(R) N150 @ 3.40GHz RAM Kingston KTC-9905789-165.A00G Flash memory Macronix MX25L12845G SSD 1.Protectli 256GB M.2 MMC drive SAMSUNG 32GB (on-board) USB pendrives 1. SanDisk USB 3.2Gen1 32 GB 2. USB Type-C Hub Pro UCN3286 USB headers USB Expander Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p 3. USB Type-C Hub Pro UCN3286 Wireless card Qualcomm Atheros QCA61x4A Wireless Network Adapter Display HDMI 1920x1080p, DP 1920x1080p Ethernet 2x intel i226 (on-board) Power supply Channel Well Technology 12V, 5.0A 60W"},{"location":"variants/protectli_vp2440/openness_score/","title":"Dasharo Openness Score","text":"<p>This page contains the Dasharo Openness Score for Protectli VP2440 Dasharo releases. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/protectli_vp2440/openness_score/#v090","title":"v0.9.0","text":"<p>Openness Score for protectli_vp2440_v0.9.0.rom</p> <p>Open-source code percentage: 31.4% Closed-source code percentage: 68.6%</p> <ul> <li>Image size: 16777216 (0x1000000)</li> <li>Number of regions: 24</li> <li>Number of CBFSes: 3</li> <li>Total open-source code size: 3507810 (0x358662)</li> <li>Total closed-source code size: 7663014 (0x74eda6)</li> <li>Total data size: 866684 (0xd397c)</li> <li>Total empty size: 4739708 (0x48527c)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/protectli_vp2440/openness_score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category SI_ME 0x1000 0x4ff000 closed-source SI_DESC 0x0 0x1000 data SMMSTORE 0x500000 0x40000 data RECOVERY_MRC_CACHE 0x540000 0x20000 data RW_MRC_CACHE 0x560000 0x20000 data RW_VPD 0x580000 0x2000 data RW_NVRAM 0x582000 0x6000 data VBLOCK_A 0x608000 0x10000 data RW_FWID_A 0xafff00 0x100 data RO_VPD 0xb00000 0x4000 data FMAP 0xb04000 0x800 data RO_FRID 0xb04800 0x100 data RO_FRID_PAD 0xb04900 0x700 data GBB 0xb05000 0x3000 data"},{"location":"variants/protectli_vp2440/openness_score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 524288</li> <li>Number of files: 2</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 188768 (0x2e160)</li> <li>Empty size: 335520 (0x51ea0)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category logo.bmp raw 188663 LZMA data (empty) null 335520 none empty"},{"location":"variants/protectli_vp2440/openness_score/#cbfs-fw_main_a","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 5144320</li> <li>Number of files: 13</li> <li>Open-source files size: 1708849 (0x1a1331)</li> <li>Closed-source files size: 1212115 (0x127ed3)</li> <li>Data size: 8872 (0x22a8)</li> <li>Empty size: 2214484 (0x21ca54)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1415843 none open-source fallback/romstage stage 94680 none open-source fallback/ramstage stage 145510 LZMA open-source fallback/dsdt.aml raw 19456 none open-source fallback/postcar stage 33360 none open-source cpu_microcode_blob.bin microcode 139264 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 286419 LZ4 closed-source config raw 5754 LZMA data revision raw 856 none data build_info raw 100 none data vbt.bin raw 1274 LZMA data (empty) null 548 none empty"},{"location":"variants/protectli_vp2440/openness_score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 5210112</li> <li>Number of files: 17</li> <li>Open-source files size: 1798961 (0x1b7331)</li> <li>Closed-source files size: 1212115 (0x127ed3)</li> <li>Data size: 9332 (0x2474)</li> <li>Empty size: 2189704 (0x216988)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1415843 none open-source fallback/romstage stage 94680 none open-source fallback/ramstage stage 145510 LZMA open-source fallback/dsdt.aml raw 19456 none open-source fallback/postcar stage 33360 none open-source bootblock bootblock 90112 none open-source cpu_microcode_blob.bin microcode 139264 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 286419 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 80 none data config raw 5754 LZMA data revision raw 856 none data build_info raw 100 none data vbt.bin raw 1274 LZMA data (empty) null 292 none empty (empty) null 2189412 none empty"},{"location":"variants/protectli_vp2440/releases/","title":"Protectli VP2440 Dasharo Release Notes","text":"<p>Following Release Notes describe status of open-source firmware development for Protectli VP2440.</p>         Subscribe to Protectli Dasharo Release Newsletter"},{"location":"variants/protectli_vp2440/releases/#v090-2025-08-27","title":"v0.9.0 - 2025-08-27","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/protectli_vp2440/releases/#added","title":"Added","text":"<ul> <li>Initial support for Protectli Alder Lake N devices (Vault Pro 2440)</li> <li>UEFI compatible interface</li> <li>Support for discrete TPM</li> <li>UEFI Secure Boot support</li> <li>Boot logo customization support</li> <li>USB boot support</li> <li>NVMe boot support</li> <li>TPM Measured Boot</li> <li>UEFI Secure Boot</li> <li>Network boot</li> <li>Windows 11 booting</li> <li>Ubuntu LTS booting</li> <li>Serial port console redirection</li> <li>Vboot Verified Boot</li> <li>BIOS flash protection for Vboot recovery region</li> <li>Setup menu password configuration</li> <li>SMM BIOS write protection</li> <li>USB stack disable option in setup menu</li> <li>Network stack disable option in setup menu</li> </ul>"},{"location":"variants/protectli_vp2440/releases/#known-issues","title":"Known issues","text":"<ul> <li>Unexpected error in dmesg</li> <li>Protectli logo doesn't show on small displays</li> <li>Time window for boot/setup menu too short when skipping recovery popup</li> <li>Wake on LAN disabled by default on enp2s0 on VP2440</li> <li>Long booting time on Protectli VP2440</li> <li>Wake from S3 does not work on VP2440</li> <li>No network connection in DTS when LTE module plugged</li> </ul>"},{"location":"variants/protectli_vp2440/releases/#binaries","title":"Binaries","text":"<p>protectli_vp2440_v0.9.0.rom sha256 sha256.sig protectli_vp2440_v0.9.0_dev_signed.rom sha256_dev_signed sha256_dev_signed.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_vp2440/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 25.03 revision 6d163576<ul> <li>License</li> </ul> </li> <li>Dasharo EDKII fork based on edk2-stable202502 revision ac25544f<ul> <li>License</li> </ul> </li> <li>Dasharo iPXE fork based on 2025.03 revision 8b8a50a8<ul> <li>License</li> </ul> </li> <li>vboot based on f1f70f46dc revision f1f70f46<ul> <li>License</li> </ul> </li> <li>Intel Management Engine version v16.50.15.1515<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor version v1.0<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package version IoT ADL-N MR6 (6023_00)<ul> <li>License</li> </ul> </li> <li>Intel microcode version ADL-N N0 0x1d 06/12/2024<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/protectli_vp32xx/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/protectli_vp32xx/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configuration used for validation of the coreboot port on the Protectli VP32xX firewall.</p>"},{"location":"variants/protectli_vp32xx/hardware-matrix/#protectli-vp3230","title":"Protectli VP3230","text":"Component Description CPU Intel(R) Core(TM) i3-N305 @ 1.80GHz RAM Corsair CMSX32GX5M2A4800C40 Flash memory Macronix KH25L12835F MMC drive SAMSUNG BJTD4R (on-board) Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p 3. TPM2.0 Infineon SLB9670 Wireless card Qualcomm Atheros QCA6174 Display HDMI 1920x1080p, DP 1920x1080p Ethernet 2x Intel i226 (on-board) Power supply Channel Well Technology 12V, 7.5A 90W <p>Note, that in RAM section all used during verification procedure modules have been listed. Device has only one RAM mounting slot.</p>"},{"location":"variants/protectli_vp32xx/openness_score/","title":"Dasharo Openness Score","text":"<p>This page contains the Dasharo Openness Score for Protectli VP32xx Dasharo releases. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/protectli_vp32xx/openness_score/#v090","title":"v0.9.0","text":"<p>Openness Score for protectli_vp32xx_v0.9.0.rom</p> <p>Open-source code percentage: 30.8% Closed-source code percentage: 69.2%</p> <ul> <li>Image size: 16777216 (0x1000000)</li> <li>Number of regions: 24</li> <li>Number of CBFSes: 3</li> <li>Total open-source code size: 3416136 (0x342048)</li> <li>Total closed-source code size: 7660966 (0x74e5a6)</li> <li>Total data size: 677894 (0xa5806)</li> <li>Total empty size: 5022220 (0x4ca20c)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/protectli_vp32xx/openness_score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category SI_ME 0x1000 0x4ff000 closed-source SI_DESC 0x0 0x1000 data SMMSTORE 0x500000 0x40000 data RECOVERY_MRC_CACHE 0x540000 0x20000 data RW_MRC_CACHE 0x560000 0x20000 data RW_VPD 0x580000 0x2000 data RW_NVRAM 0x582000 0x6000 data VBLOCK_A 0x608000 0x10000 data RW_FWID_A 0xafff00 0x100 data RO_VPD 0xb00000 0x4000 data FMAP 0xb04000 0x800 data RO_FRID 0xb04800 0x100 data RO_FRID_PAD 0xb04900 0x700 data GBB 0xb05000 0x3000 data"},{"location":"variants/protectli_vp32xx/openness_score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 524288</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 524260 (0x7ffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 524260 none empty"},{"location":"variants/protectli_vp32xx/openness_score/#cbfs-fw_main_a","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 5144320</li> <li>Number of files: 13</li> <li>Open-source files size: 1664004 (0x196404)</li> <li>Closed-source files size: 1211091 (0x127ad3)</li> <li>Data size: 8841 (0x2289)</li> <li>Empty size: 2260384 (0x227da0)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1363582 none open-source fallback/romstage stage 97840 none open-source fallback/ramstage stage 144858 LZMA open-source fallback/dsdt.aml raw 19448 none open-source fallback/postcar stage 38276 none open-source cpu_microcode_blob.bin microcode 138240 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 286419 LZ4 closed-source config raw 5592 LZMA data revision raw 882 none data build_info raw 126 none data vbt.bin raw 1274 LZMA data (empty) null 868 none empty"},{"location":"variants/protectli_vp32xx/openness_score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 5210112</li> <li>Number of files: 17</li> <li>Open-source files size: 1752132 (0x1abc44)</li> <li>Closed-source files size: 1211091 (0x127ad3)</li> <li>Data size: 9313 (0x2461)</li> <li>Empty size: 2237576 (0x222488)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1363582 none open-source fallback/romstage stage 97840 none open-source fallback/ramstage stage 144858 LZMA open-source fallback/dsdt.aml raw 19448 none open-source fallback/postcar stage 38276 none open-source bootblock bootblock 88128 none open-source cpu_microcode_blob.bin microcode 138240 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 286419 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 80 none data config raw 5592 LZMA data revision raw 882 none data build_info raw 126 none data vbt.bin raw 1274 LZMA data (empty) null 612 none empty (empty) null 2236964 none empty"},{"location":"variants/protectli_vp32xx/releases/","title":"Protectli VP32xx Dasharo Release Notes","text":"<p>Following Release Notes describe status of open-source firmware development for Protectli VP32xx.</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to Protectli Dasharo Release Newsletter     <p></p>"},{"location":"variants/protectli_vp32xx/releases/#v090-2025-07-21","title":"v0.9.0 - 2025-07-21","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/protectli_vp32xx/releases/#added","title":"Added","text":"<ul> <li>Initial support for Protectli Alder Lake N devices VP32xx</li> <li>UEFI compatible interface</li> <li>Support for discrete TPM</li> <li>UEFI Secure Boot support</li> <li>Boot logo customization support</li> <li>USB boot support</li> <li>NVMe boot support</li> <li>TPM Measured Boot</li> <li>UEFI Secure Boot</li> <li>Network boot</li> <li>Windows 11 booting</li> <li>Ubuntu LTS booting</li> <li>Serial port console redirection</li> <li>Vboot Verified Boot</li> <li>Intel ME HAP disable</li> <li>BIOS flash protection for Vboot recovery region</li> <li>Setup menu password configuration</li> <li>SMM BIOS write protection</li> <li>USB stack disable option in setup menu</li> <li>Network stack disable option in setup menu</li> </ul>"},{"location":"variants/protectli_vp32xx/releases/#known-issues","title":"Known issues","text":"<ul> <li>M2T4SAT-AS1 M.2 Mini SAS SFF-8087 adapter increases FW boot time by aprox. 20 seconds</li> <li>ESXI TPM driver fails to load on VP3210</li> <li>Unexpected error in dmesg on VP3210</li> <li>STB002.001 encounters unlisted error</li> </ul>"},{"location":"variants/protectli_vp32xx/releases/#binaries","title":"Binaries","text":"<p>protectli_vp32xx_v0.9.0.rom sha256 sha256.sig</p> <p>protectli_vp32xx_v0.9.0_dev_signed.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_vp32xx/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 24.02 revision 92c369e2<ul> <li>License</li> </ul> </li> <li>Dasharo EDKII fork based on edk2-stable202405 revision c2de870a<ul> <li>License</li> </ul> </li> <li>Dasharo iPXE fork based on 2024.07 revision 63ed3e35<ul> <li>License</li> </ul> </li> <li>Intel Management Engine version v16.50.12.1453<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor version v1.0<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package version Iot ADL-N MR5 (5132_00)<ul> <li>License</li> </ul> </li> <li>Intel microcode version ADL N0 0x15<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/protectli_vp46xx/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/protectli_vp46xx/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configuration used for validation of the coreboot port on the Protectli VP46XX firewall.</p>"},{"location":"variants/protectli_vp46xx/hardware-matrix/#protectli-vp4630","title":"Protectli VP4630","text":"Component Description CPU Intel Core i3-10110U RAM Slot 1: Empty Slot 2: SAMSUNG M471A4G43MB1-CTD Flash memory Macronix KH25L12835F SSD Kingston NV1 250GB SNVS/250G MMC drive SAMSUNG KLM8G1GETF-B041 (on-board) USB pendrives 1. SanDisk Ultra  Flair USB 3.0 16 GB USB Keyboard DELL KB216 USB Mouse DELL MS116p Wireless card Intel Wi-Fi 6 AX200 4G Modem AMIT MDG200-0T001 Display Display 1: HDMI 1920x1080p Display 2: DP 1920x1080p Ethernet controller 6x intel i225 (on-board) Internal devices Audio subsystem TPM Protectli TPM Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control RTE v1.1.0 Power supply Channel Well Technology 12V, 5.0A 60W"},{"location":"variants/protectli_vp46xx/hardware-matrix/#protectli-vp4650","title":"Protectli VP4650","text":"Component Description CPU Intel Core i5-10210U RAM Slot 1: Kingston KVR24S17S8/8 Slot 2: Kingston KVR26S19S8/16 Flash memory Macronix KH25L12835F SSD Samsung 980 PRO NVMe 250 GB MMC drive SAMSUNG KLM8G1GETF-B041 (on-board) USB Keyboard DELL KB216 USB Mouse DELL MS116p Wireless card JJPLUS JWW6051 4G Modem AMIT MDG200-0T001 Display Display 1: HDMI 1920x1080p Display 2: DP 1920x1080p Ethernet controller 6x intel i225 (on-board) Internal devices Audio subsystem TPM Protectli TPM Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control RTE v1.1.0 Power supply Channel Well Technology 12V, 7.5A 90W"},{"location":"variants/protectli_vp46xx/hardware-matrix/#protectli-vp4651","title":"Protectli VP4651","text":"Component Description CPU Intel Core i5-10310U RAM Slot 1: Crucial CT32G4SFD832A Slot 2: Crucial CT32G4SFD832A Flash memory Macronix KH25L12835F SSD Kingston NV2 M.2 NVMe 500 GB SNV2S/500G MMC drive SAMSUNG KLM8G1GETF-B041 (on-board) USB Keyboard Logitech, Inc. Keyboard K120 USB Mouse Logitech, Inc. Mouse B100 Wireless card JJPLUS JWW6051 4G Modem AMIT MDG200-0T001 Display Display 1: HDMI 1920x1080p Display 2: DP 1920x1080p Ethernet controller 6x intel i225 (on-board) Internal devices Audio subsystem TPM Protectli TPM Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control RTE v1.1.0 Power supply Channel Well Technology 12V, 7.5A 90W"},{"location":"variants/protectli_vp46xx/hardware-matrix/#protectli-vp4670-ver1","title":"Protectli VP4670 ver1","text":"Component Description CPU Intel Core i7-10810U RAM Slot 1: CRUCIAL CT16G4SFRA32A Slot 2: CRUCIAL CT16G4SFRA32A Flash memory Macronix KH25L12835F SSD SAMSUNG 870 QVO SATA 2.5\" SSD 1TB MMC drive SAMSUNG KLM8G1GETF-B041 (on-board) USB Keyboard DELL KB216 USB Mouse DELL MS116p Wireless card JJPLUS JWW6051 4G Modem AMIT MDG200-0T001 Display Display 1: HDMI 1920x1080p Display 2: DP 1920x1080p Ethernet controller 6x intel i225 (on-board) Internal devices Audio subsystem TPM Protectli TPM Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power control Sonoff S26 Power supply Channel Well Technology 12V, 7.5A 90W"},{"location":"variants/protectli_vp46xx/hardware-matrix/#protectli-vp4670-ver2","title":"Protectli VP4670 ver2","text":"Component Description CPU Intel Core i7-10810U RAM Slot 1: CRUCIAL CT16G4SFRA32A Slot 2: CRUCIAL CT16G4SFRA32A Flash memory Macronix KH25L12835F SSD Kingston NV2 M.2 NVMe 500 GB SNV2S/500G MMC drive SAMSUNG KLM8G1GETF-B041 (on-board) USB Keyboard DELL KB216 USB Mouse DELL MS116p Wireless card JJPLUS JWW6051 4G Modem AMIT MDG200-0T001 Display Display 1: HDMI 1920x1080p Display 2: DP 1920x1080p Ethernet controller 6x intel i225 (on-board) Internal devices Audio subsystem TPM Protectli TPM Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power control Sonoff S26 Power supply Channel Well Technology 12V, 7.5A 90W"},{"location":"variants/protectli_vp46xx/openness_score/","title":"Dasharo Openness Score","text":"<p>This page contains the Dasharo Openness Score for Protectli VP46XX Dasharo releases. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/protectli_vp46xx/openness_score/#v120","title":"v1.2.0","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for protectli_vp46xx_v1.2.0.rom</p> <p>Open-source code percentage: 32.3% Closed-source code percentage: 67.7%</p> <ul> <li>Image size: 16777216 (0x1000000)</li> <li>Number of regions: 25</li> <li>Number of CBFSes: 3</li> <li>Total open-source code size: 4751528 (0x4880a8)</li> <li>Total closed-source code size: 9978470 (0x984266)</li> <li>Total data size: 497394 (0x796f2)</li> <li>Total empty size: 1549824 (0x17a600)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/protectli_vp46xx/openness_score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category RECOVERY_MRC_CACHE 0x600000 0x10000 data RW_MRC_CACHE 0x610000 0x10000 data SMMSTORE 0x620000 0x40000 data SHARED_DATA 0x660000 0x2000 data VBLOCK_DEV 0x662000 0x2000 data RW_NVRAM 0x664000 0x6000 data VBLOCK_A 0x6ea000 0x2000 data RW_FWID_A 0xb7ff00 0x100 data RO_VPD 0xb80000 0x4000 data FMAP 0xb84000 0x800 data RO_FRID 0xb84800 0x100 data RO_FRID_PAD 0xb84900 0x700 data GBB 0xb85000 0x3000 data"},{"location":"variants/protectli_vp46xx/openness_score/#ifd-regions","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00001000 0x005fffff 0x5ff000 closed-source Flash Descriptor 0x00000000 0x00000fff 0x1000 data"},{"location":"variants/protectli_vp46xx/openness_score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 524288</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 524260 (0x7ffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 524260 none empty"},{"location":"variants/protectli_vp46xx/openness_score/#cbfs-fw_main_a","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 4800256</li> <li>Number of files: 16</li> <li>Open-source files size: 2325656 (0x237c98)</li> <li>Closed-source files size: 1845555 (0x1c2933)</li> <li>Data size: 8261 (0x2045)</li> <li>Empty size: 620784 (0x978f0)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/romstage stage 71104 none open-source fallback/ramstage stage 132189 LZMA open-source fallback/dsdt.aml raw 8831 none open-source fallback/postcar stage 31588 none open-source fallback/payload simple elf 2081944 none open-source cpu_microcode_blob.bin microcode 300032 none closed-source fspm.bin fsp 581632 none closed-source fspm_2.bin fsp 581632 none closed-source fsps.bin fsp 191132 LZMA closed-source fsps_2.bin fsp 191127 LZMA closed-source config raw 4993 LZMA data revision raw 859 none data build_info raw 103 none data vbt.bin raw 1183 LZMA data (empty) null 164 none empty (empty) null 4004 none empty"},{"location":"variants/protectli_vp46xx/openness_score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 4685824</li> <li>Number of files: 22</li> <li>Open-source files size: 2425872 (0x250410)</li> <li>Closed-source files size: 1845555 (0x1c2933)</li> <li>Data size: 9617 (0x2591)</li> <li>Empty size: 404780 (0x62d2c)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/romstage stage 71104 none open-source fallback/ramstage stage 132189 LZMA open-source fallback/dsdt.aml raw 8831 none open-source fallback/postcar stage 31588 none open-source fallback/payload simple elf 2081944 none open-source fallback/verstage stage 61752 none open-source bootblock bootblock 38464 none open-source cpu_microcode_blob.bin microcode 300032 none closed-source fspm.bin fsp 581632 none closed-source fspm_2.bin fsp 581632 none closed-source fsps.bin fsp 191132 LZMA closed-source fsps_2.bin fsp 191127 LZMA closed-source cbfs_master_header cbfs header 28 none data intel_fit intel_fit 80 none data config raw 4993 LZMA data revision raw 859 none data build_info raw 103 none data cmos_layout.bin cmos_layout 708 none data vbt.bin raw 1183 LZMA data (empty) null 420 none empty (empty) null 2724 none empty (empty) null 401636 none empty"},{"location":"variants/protectli_vp46xx/releases/","title":"Protectli VP4630/VP4650/VP4670 Dasharo Release Notes","text":"<p>Following Release Notes describe status of Open Source Firmware development for Protectli VP4630/VP4650/VP4670</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to Protectli Dasharo Release Newsletter     <p>Test results for this platform can be found here.</p> <p>The missing versions before v1.0.16 were assigned to different platforms interchangeably. See Protectli FW6 releases and Protectli VP2410 releases.</p>"},{"location":"variants/protectli_vp46xx/releases/#v120-2024-03-25","title":"v1.2.0 - 2024-03-25","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/protectli_vp46xx/releases/#added","title":"Added","text":"<ul> <li>Setup menu password configuration</li> <li>Serial port console redirection option in setup menu</li> <li>Customizable Serial Number and UUID via CBFS support</li> <li>Customizable boot logo support</li> <li>Support for taking screenshots in the firmware</li> <li>ESP partition scanning in look for grubx64.efi or shimx64.efi or Windows bootmgr</li> <li>Microsoft and Windows 2023 UEFI Secure Boot certificates</li> <li>UEFI 2.8 errata C compliance in EDKII fork</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#changed","title":"Changed","text":"<ul> <li>Rebased to coreboot 4.21</li> <li>Enroll default UEFI Secure Boot keys on the first boot</li> <li>Improved UEFI Secure Boot menu user experience</li> <li>Scope of reset to defaults hotkey to global in firmware setup</li> <li>Updated microcode to the newer version; refer to SBOM section below</li> <li>Updated ME to the newer version; refer to SBOM section below</li> <li>Prepared unified support for v1 and v2 CPUs resulting in a single binary for   all 3 board variants</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#fixed","title":"Fixed","text":"<ul> <li>Auto Boot Time-out is reset to 0 when F9 is pressed</li> <li>Reset to defaults with F9 causes the wrong settings to be restored</li> <li>RTC time and date resetting to the coreboot build date on 29th February</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#known-issues","title":"Known issues","text":"<ul> <li>Unexpected errors in dmesg on VP4670 v2 with 1.2.0</li> <li>Maximum reported frequency is base frequency, not turbo frequency (Windows 11)</li> <li>No ability to change active PCR banks with TPM PPI in FW</li> <li>DisplayPort output does not work with 16:10 (1920x1200) monitors</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#binaries","title":"Binaries","text":"<p>protectli_vp46xx_v1.2.0.rom sha256 sha256.sig</p> <p>protectli_vp46xx_v1.2.0_dev_signed.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_vp46xx/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 4.21 revision add9d720</li> <li>Dasharo EDKII fork based on edk2-stable202002 revision 2a15268b</li> <li>iPXE based on 2023.12 revision 838611b3</li> <li>vboot based on 0c11187c75 revision 0c11187c</li> <li>Intel Management Engine based on v14.0.47.1558 revision d0b63476</li> <li>Intel Flash Descriptor based on v1.0 revision d0b63476</li> <li>Intel Firmware Support Package based on CometLake1 9.0.7B.20 revision 481ea7cf</li> <li>Intel Firmware Support Package based on CometLake2 9.2.7B.20 revision 481ea7cf</li> <li>Intel microcode based on CML-U42 V0 0x000000f8 revision microcode-20230808</li> <li>Intel microcode based on CML-U62 V1 A0 0x000000f8 revision microcode-20230808</li> <li>Intel microcode based on CML-U62 V2 K1 0x000000f8 revision microcode-20230808</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#v110-2023-06-05","title":"v1.1.0 - 2023-06-05","text":"<p>Release version v1.1.0 is currently only available for the VP4670 platform.</p>"},{"location":"variants/protectli_vp46xx/releases/#added_1","title":"Added","text":"<ul> <li>USB stack and mass storage enable/disable option</li> <li>SMM BIOS write protection enable/disable option</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#changed_1","title":"Changed","text":"<ul> <li>Reverted to use FSP GOP for graphics initialization as it caused problems with   Windows 11 display on VP4670</li> <li>Switched to use driver for IT8784E Super I/O, which is present on the boards</li> <li>CPU power limits increased from baseline to performance</li> <li>Updating from v1.0.x requires flashing the WP_RO recovery partition</li> <li>Firmware version v1.1.x are signed with a new key</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#fixed_1","title":"Fixed","text":"<ul> <li>Booting problems with Ubuntu 22.04</li> <li>Low CPU frequency values</li> <li>Disabled C states deeper than C1 on VP4670 to fix Proxmox booting issue</li> <li>Protectli VP4670 - windows crashes after installing updates</li> <li>The inconvenience of using external headsets VP46XX</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#known-issues_1","title":"Known issues","text":"<ul> <li>Popup with information about recovery mode is still displayed after flashing with a valid binary</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#binaries_1","title":"Binaries","text":"<p>protectli_vp4670_v1.1.0.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_vp46xx/releases/#sbom-software-bill-of-materials_1","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on c6ee1509da revision dcc5f2e2</li> <li>edk2 based on 7f90b9cd revision 19bf14b4</li> <li>iPXE based on 6ba671ac revision 6ba671ac</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#v1019-2022-12-08","title":"v1.0.19 - 2022-12-08","text":""},{"location":"variants/protectli_vp46xx/releases/#changed_2","title":"Changed","text":"<ul> <li>ME is now disabled by default (ME soft-disable)</li> <li>vboot is now run as separate verstage (previously was run inside bootblock)</li> <li>increased pre-RAM console buffer to fit more early cbmem logs</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#binaries_2","title":"Binaries","text":"<p>protectli_vp4630_vp4650_v1.0.19.rom sha256 sha256.sig</p> <p>protectli_vp4670_v1.0.19.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_vp46xx/releases/#sbom-software-bill-of-materials_2","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on c6ee1509da revision 9034fb12</li> <li>edk2 based on 7f90b9cd revision e31b7a71</li> <li>iPXE for EFI revision 988d2</li> <li>VP4670: Cometlake1 FSP 9.0.7B.20</li> <li>VP4630 and VP4650: Cometlake2 FSP 9.2.7B.20</li> <li>Intel i225 EFI driver version 0.10.4,   SHA256: 2d234ecf629fc10dc0c291a1390de3d27a05c6ecbd935628b6ff154f386d061e</li> <li>Management Engine: Custom image based on ME 14.0.47.1558,   SHA256: 7fa37e108176c9a2d0df60c93b10b3ad9c7725f1f82b87197a2991208c4cffec</li> <li>microcode:<ul> <li>CPU signature: 0x0806EC, Date: 17.11.2021, Revision: 0xF0</li> <li>CPU signature: 0x0A0660, Date: 15.11.2021, Revision: 0xF0</li> <li>CPU signature: 0x0A0661, Date: 16.11.2021, Revision: 0xF0</li> </ul> </li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#v1018-2022-11-16","title":"v1.0.18 - 2022-11-16","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/protectli_vp46xx/releases/#added_2","title":"Added","text":"<ul> <li>Support for VP4650 and VP4670 platforms</li> <li>Platform will beep 12 times and blink HDD led on critical firmware errors</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#changed_3","title":"Changed","text":"<ul> <li>Disabled Intel PTT (fTPM)</li> <li>Removed workaround for graphics power management as the issue no longer reproduces on newer revision of the hardware</li> <li>Binaries are built with coreboot-sdk 2021-09-23_b0d87f753c (was 0ad5fbd48d)</li> <li>Open-source graphics initialization with libgfxinit instead of proprietary and   closed FSP GOP driver</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#binaries_3","title":"Binaries","text":"<p>protectli_vp4630_vp4650_v1.0.18.rom sha256 sha256.sig</p> <p>protectli_vp4670_v1.0.18.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_vp46xx/releases/#sbom-software-bill-of-materials_3","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on c6ee1509da revision ed9f6fe0</li> <li>edk2 based on 7f90b9cd revision e31b7a71</li> <li>iPXE for EFI revision 988d2</li> <li>VP4670: Cometlake1 FSP 9.0.7B.20</li> <li>VP4630 and VP4650: Cometlake2 FSP 9.2.7B.20</li> <li>Intel i225 EFI driver version 0.10.4,   SHA256: 2d234ecf629fc10dc0c291a1390de3d27a05c6ecbd935628b6ff154f386d061e</li> <li>Management Engine: Custom image based on ME 14.0.47.1558,   SHA256: 7fa37e108176c9a2d0df60c93b10b3ad9c7725f1f82b87197a2991208c4cffec</li> <li>microcode:<ul> <li>CPU signature: 0x0806EC, Date: 17.11.2021, Revision: 0xF0</li> <li>CPU signature: 0x0A0660, Date: 15.11.2021, Revision: 0xF0</li> <li>CPU signature: 0x0A0661, Date: 16.11.2021, Revision: 0xF0</li> </ul> </li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#v1017-2022-08-17","title":"v1.0.17 - 2022-08-17","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/protectli_vp46xx/releases/#added_3","title":"Added","text":"<ul> <li>Tools for resigning Vboot images with one RW partition</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#changed_4","title":"Changed","text":"<ul> <li>Set thermal throttling temperature to 80 degrees</li> <li>Disabled UEFI Secure Boot by default</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#fixed_2","title":"Fixed","text":"<ul> <li>Platform rebooting every 56 minutes</li> <li>Incorrect menu labels displayed in network boot menu</li> <li>Built-in audio jack does not work</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#binaries_4","title":"Binaries","text":"<p>protectli_vault_cml_v1.0.17.rom_file protectli_vault_cml_v1.0.17.rom_hash protectli_vault_cml_v1.0.17.rom_sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_vp46xx/releases/#sbom-software-bill-of-materials_4","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.16 revision d662831d</li> <li>edk2 based on 7f90b9cd revision 576aa6a4</li> <li>iPXE for EFI revision 988d2</li> <li>Cometlake2 FSP 9.2.7B.20</li> <li>Intel i225 EFI driver version 0.10.4,   SHA256: 2d234ecf629fc10dc0c291a1390de3d27a05c6ecbd935628b6ff154f386d061e</li> <li>Management Engine: Custom image based on ME 14.0.47.1558,   SHA256: 7fa37e108176c9a2d0df60c93b10b3ad9c7725f1f82b87197a2991208c4cffec</li> <li>microcode:<ul> <li>CPU signature: 0x0806EC, Date: 28.04.2021, Revision: 0xEC</li> <li>CPU signature: 0x0A0660, Date: 28.04.2021, Revision: 0xEA</li> <li>CPU signature: 0x0A0661, Date: 29.04.2021, Revision: 0xEC</li> </ul> </li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#v1016-2022-07-13","title":"v1.0.16 - 2022-07-13","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/protectli_vp46xx/releases/#added_4","title":"Added","text":"<ul> <li>Vboot Verified Boot</li> <li>TPM Measured Boot</li> <li>Vboot recovery notification in UEFI Payload</li> <li>UEFI Shell</li> <li>UEFI Secure Boot</li> <li>Intel ME soft disable</li> <li>BIOS flash protection for Vboot recovery region</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#changed_5","title":"Changed","text":"<ul> <li>Changed supported CPUs to Comet Lake stepping 2</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#fixed_3","title":"Fixed","text":"<ul> <li>i225 network controller initialization takes too much time</li> <li>CVE-2022-29264</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#binaries_5","title":"Binaries","text":"<p>protectli_vault_cml_v1.0.16.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_vp46xx/releases/#sbom-software-bill-of-materials_5","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.16 revision dfaaf44d</li> <li>edk2 based on 7f90b9cd revision 5345a611</li> <li>iPXE for EFI revision 988d2</li> <li>Cometlake2 FSP 9.2.7B.20</li> <li>Intel i225 EFI driver version 0.10.4,   SHA256: 2d234ecf629fc10dc0c291a1390de3d27a05c6ecbd935628b6ff154f386d061e</li> <li>Management Engine: Custom image based on ME 14.0.47.1558,   SHA256: 7fa37e108176c9a2d0df60c93b10b3ad9c7725f1f82b87197a2991208c4cffec</li> <li>microcode:<ul> <li>CPU signature: 0x0806EC, Date: 28.04.2021, Revision: 0xEC</li> <li>CPU signature: 0x0A0660, Date: 28.04.2021, Revision: 0xEA</li> <li>CPU signature: 0x0A0661, Date: 29.04.2021, Revision: 0xEC</li> </ul> </li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#v1013-2022-03-22","title":"v1.0.13 - 2022-03-22","text":""},{"location":"variants/protectli_vp46xx/releases/#added_5","title":"Added","text":"<ul> <li>UEFI boot support</li> <li>i225 network controller network boot support</li> <li>Customized boot menu keys</li> <li>Customized setup menu keys</li> <li>Configurable boot order</li> <li>Configurable boot options</li> <li>ME version 14.0.47.1558</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#known-issues_2","title":"Known issues","text":"<ul> <li>i225 network controller initialization takes too much time</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#binaries_6","title":"Binaries","text":"<p>protectli_vault_cml_v1.0.13.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_vp46xx/releases/#sbom-software-bill-of-materials_6","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.16 revision 546e1c86</li> <li>edk2 based on 7f90b9cd revision 7f90b9cd</li> <li>iPXE for EFI revision 988d2</li> <li>Cometlake1 FSP 9.0.7B.20</li> <li>Intel i225 EFI driver version 0.9.03,   SHA256: 63e77b237dc9a8aacdd7465675ee88afc01dad3204156a91a0976a4ad1ed5b00</li> <li>Management Engine: Custom image based on ME 14.0.47.1558,   SHA256: 7fa37e108176c9a2d0df60c93b10b3ad9c7725f1f82b87197a2991208c4cffec</li> <li>microcode:<ul> <li>CPU signature: 0x0806EC, Date: 28.04.2021, Revision: 0xEC</li> <li>CPU signature: 0x0A0660, Date: 28.04.2021, Revision: 0xEA</li> </ul> </li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#v105","title":"v1.0.5","text":""},{"location":"variants/protectli_vp46xx/releases/#added_6","title":"Added","text":"<ul> <li>Initial support for FW6 Cometlake platform</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#known-issues_3","title":"Known issues","text":"<ul> <li>FW6 Comet Lake graphics crashes in Linux   The system may crash and reset itself on kernels (&lt; 5.2) which do not have   support for Cometlake graphics in i915 DRM driver in situations when the   screen goes idle (locked screen or longer inactivity of the system).</li> </ul>"},{"location":"variants/protectli_vp46xx/releases/#sbom-software-bill-of-materials_7","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.13 revision a4cd9117</li> <li>SeaBIOS v1.0.8 based on rel-1.12.1 revision 171fc897</li> <li>iPXE 2019.3 stable revision ebf2eaf5</li> <li>MemTest86+ revision dd5b4ff2</li> </ul>"},{"location":"variants/protectli_vp66xx/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/protectli_vp66xx/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configuration used for validation of the coreboot port on the Protectli VP6630/VP6650/VP6670.</p>"},{"location":"variants/protectli_vp66xx/hardware-matrix/#protectli-vp6630","title":"Protectli VP6630","text":"Component Description CPU Intel(R) Core(TM) i3-1215U @ 1.20GHz RAM TBD Flash memory Macronix KH25L12835F USB Keyboard DELL KB216 USB Mouse DELL MS116p USB pendrives 1. SanDisk Ultra  Flair USB 3.0 16 GB Display Display 1: HDMI 1920x1080p Display 2: DP 1920x1080p Ethernet controller 2x Intel i225/i226 (on-board) Internal devices TBD 4G Modem TBD Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control Sonoff Power supply TBD"},{"location":"variants/protectli_vp66xx/hardware-matrix/#protectli-vp6650","title":"Protectli VP6650","text":"Component Description CPU Intel(R) Core(TM) i5-1235U @ 1.30GHz RAM Slot 1: GSkill Ripjaws DDR5 16GB Kit Slot 1: GSkill Ripjaws DDR5 16GB Kit Flash memory Macronix KH25L12835F USB Keyboard DELL KB216 USB Mouse DELL MS116p USB pendrives 1. SanDisk Ultra  Flair USB 3.0 16 GB Display Display 1: HDMI 1920x1080p Display 2: DP 1920x1080p Ethernet controller 4x Intel i225/i226 (on-board) Internal devices TBD 4G Modem TBD Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control Sonoff Power supply Channel Well Technology 2ABU120F 12V 10A"},{"location":"variants/protectli_vp66xx/hardware-matrix/#protectli-vp6670","title":"Protectli VP6670","text":"Component Description CPU Intel(R) Core(TM) i7-1255U @ 1.70GHz RAM Slot 1: KF548S38IBK2-32 16GB Kit (1/2) Slot 2: KF548S38IBK2-32 16GB Kit (2/2) Flash memory Macronix KH25L12835F USB Keyboard DELL KB216 USB Mouse DELL MS116p USB pendrives 1. SanDisk Ultra  Flair USB 3.0 16 GB Display Display 1: HDMI 1920x1080p Display 2: DP 1920x1080p Ethernet controller 4x Intel i225/i226 (on-board) Internal devices TBD 4G Modem TBD Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control Sonoff Power supply Channel Well Technology 2ABU120F 12V 10A"},{"location":"variants/protectli_vp66xx/openness_score/","title":"Dasharo Openness Score","text":"<p>This page contains the Dasharo Openness Score for Protectli VP6630/VP6650/VP6670 Dasharo releases. The content of the page is generated with Dasharo Openness Score utility.</p>"},{"location":"variants/protectli_vp66xx/openness_score/#v092","title":"v0.9.2","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for protectli_vp66xx_v0.9.2.rom</p> <p>Open-source code percentage: 34.6% Closed-source code percentage: 65.4%</p> <ul> <li>Image size: 16777216 (0x1000000)</li> <li>Number of regions: 25</li> <li>Number of CBFSes: 3</li> <li>Total open-source code size: 4408126 (0x43433e)</li> <li>Total closed-source code size: 8328230 (0x7f1426)</li> <li>Total data size: 678160 (0xa5910)</li> <li>Total empty size: 3362700 (0x334f8c)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/protectli_vp66xx/openness_score/#fmap-regions","title":"FMAP regions","text":"FMAP region Offset Size Category SMMSTORE 0x580000 0x40000 data RECOVERY_MRC_CACHE 0x5c0000 0x20000 data RW_MRC_CACHE 0x5e0000 0x20000 data RW_VPD 0x608000 0x2000 data RW_NVRAM 0x60a000 0x6000 data VBLOCK_A 0x690000 0x10000 data RW_FWID_A 0xafff00 0x100 data RO_VPD 0xb00000 0x4000 data FMAP 0xb04000 0x800 data RO_FRID 0xb04800 0x100 data RO_FRID_PAD 0xb04900 0x700 data GBB 0xb05000 0x3000 data"},{"location":"variants/protectli_vp66xx/openness_score/#ifd-regions","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00001000 0x004b6fff 0x4b6000 closed-source Flash Descriptor 0x00000000 0x00000fff 0x1000 data Device Exp2 0x004b7000 0x0057ffff 0xc9000 empty"},{"location":"variants/protectli_vp66xx/openness_score/#cbfs-bootsplash","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 524288</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 524260 (0x7ffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 524260 none empty"},{"location":"variants/protectli_vp66xx/openness_score/#cbfs-fw_main_a","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 4587264</li> <li>Number of files: 13</li> <li>Open-source files size: 2158783 (0x20f0bf)</li> <li>Closed-source files size: 1677843 (0x199a13)</li> <li>Data size: 8974 (0x230e)</li> <li>Empty size: 741664 (0xb5120)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1855319 none open-source fallback/romstage stage 99600 none open-source fallback/ramstage stage 146419 LZMA open-source fallback/dsdt.aml raw 19169 none open-source fallback/postcar stage 38276 none open-source cpu_microcode_blob.bin microcode 562176 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 329235 LZ4 closed-source config raw 5610 LZMA data revision raw 879 none data build_info raw 123 none data vbt.bin raw 1277 LZMA data (empty) null 868 none empty"},{"location":"variants/protectli_vp66xx/openness_score/#cbfs-coreboot","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 5210112</li> <li>Number of files: 17</li> <li>Open-source files size: 2249343 (0x22527f)</li> <li>Closed-source files size: 1677843 (0x199a13)</li> <li>Data size: 9446 (0x24e6)</li> <li>Empty size: 1273480 (0x136e88)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1855319 none open-source fallback/romstage stage 99600 none open-source fallback/ramstage stage 146419 LZMA open-source fallback/dsdt.aml raw 19169 none open-source fallback/postcar stage 38276 none open-source bootblock bootblock 90560 none open-source cpu_microcode_blob.bin microcode 562176 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 329235 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 80 none data config raw 5610 LZMA data revision raw 879 none data build_info raw 123 none data vbt.bin raw 1277 LZMA data (empty) null 612 none empty (empty) null 1272868 none empty"},{"location":"variants/protectli_vp66xx/openness_score/#v091","title":"v0.9.1","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for protectli_vp66xx_v0.9.1.rom</p> <p>Open-source code percentage: 34.6% Closed-source code percentage: 65.4%</p> <ul> <li>Image size: 16777216 (0x1000000)</li> <li>Number of regions: 25</li> <li>Number of CBFSes: 3</li> <li>Total open-source code size: 4396772 (0x4316e4)</li> <li>Total closed-source code size: 8328230 (0x7f1426)</li> <li>Total data size: 677802 (0xa57aa)</li> <li>Total empty size: 3374412 (0x337d4c)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/protectli_vp66xx/openness_score/#fmap-regions_1","title":"FMAP regions","text":"FMAP region Offset Size Category SMMSTORE 0x580000 0x40000 data RECOVERY_MRC_CACHE 0x5c0000 0x20000 data RW_MRC_CACHE 0x5e0000 0x20000 data RW_VPD 0x608000 0x2000 data RW_NVRAM 0x60a000 0x6000 data VBLOCK_A 0x690000 0x10000 data RW_FWID_A 0xafff00 0x100 data RO_VPD 0xb00000 0x4000 data FMAP 0xb04000 0x800 data RO_FRID 0xb04800 0x100 data RO_FRID_PAD 0xb04900 0x700 data GBB 0xb05000 0x3000 data"},{"location":"variants/protectli_vp66xx/openness_score/#ifd-regions_1","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00001000 0x004b6fff 0x4b6000 closed-source Flash Descriptor 0x00000000 0x00000fff 0x1000 data Device Exp2 0x004b7000 0x0057ffff 0xc9000 empty"},{"location":"variants/protectli_vp66xx/openness_score/#cbfs-bootsplash_1","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 524288</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 524260 (0x7ffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 524260 none empty"},{"location":"variants/protectli_vp66xx/openness_score/#cbfs-fw_main_a_1","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 4587264</li> <li>Number of files: 13</li> <li>Open-source files size: 2153138 (0x20dab2)</li> <li>Closed-source files size: 1677843 (0x199a13)</li> <li>Data size: 8795 (0x225b)</li> <li>Empty size: 747488 (0xb67e0)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1849545 none open-source fallback/romstage stage 99568 none open-source fallback/ramstage stage 146644 LZMA open-source fallback/dsdt.aml raw 19169 none open-source fallback/postcar stage 38212 none open-source cpu_microcode_blob.bin microcode 562176 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 329235 LZ4 closed-source config raw 5603 LZMA data revision raw 859 none data build_info raw 103 none data vbt.bin raw 1277 LZMA data (empty) null 1188 none empty"},{"location":"variants/protectli_vp66xx/openness_score/#cbfs-coreboot_1","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 5210112</li> <li>Number of files: 17</li> <li>Open-source files size: 2243634 (0x223c32)</li> <li>Closed-source files size: 1677843 (0x199a13)</li> <li>Data size: 9267 (0x2433)</li> <li>Empty size: 1279368 (0x138588)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 1849545 none open-source fallback/romstage stage 99568 none open-source fallback/ramstage stage 146644 LZMA open-source fallback/dsdt.aml raw 19169 none open-source fallback/postcar stage 38212 none open-source bootblock bootblock 90496 none open-source cpu_microcode_blob.bin microcode 562176 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 329235 LZ4 closed-source cbfs_master_header cbfs header 32 none data intel_fit intel_fit 80 none data config raw 5603 LZMA data revision raw 859 none data build_info raw 103 none data vbt.bin raw 1277 LZMA data (empty) null 932 none empty (empty) null 1278436 none empty"},{"location":"variants/protectli_vp66xx/openness_score/#v090","title":"v0.9.0","text":"<p>Report has been generated with Openness Score utility version v0.2</p> <p>Openness Score for protectli_vp66xx_v0.9.0.rom</p> <p>Open-source code percentage: 40.0% Closed-source code percentage: 60.0%</p> <ul> <li>Image size: 16777216 (0x1000000)</li> <li>Number of regions: 25</li> <li>Number of CBFSes: 3</li> <li>Total open-source code size: 4830854 (0x49b686)</li> <li>Total closed-source code size: 7242790 (0x6e8426)</li> <li>Total data size: 677420 (0xa562c)</li> <li>Total empty size: 4026152 (0x3d6f28)</li> </ul> <p></p> <p></p> <p>Numbers given above already include the calculations from CBFS regions presented below</p>"},{"location":"variants/protectli_vp66xx/openness_score/#fmap-regions_2","title":"FMAP regions","text":"FMAP region Offset Size Category SMMSTORE 0x580000 0x40000 data RECOVERY_MRC_CACHE 0x5c0000 0x20000 data RW_MRC_CACHE 0x5e0000 0x20000 data RW_VPD 0x608000 0x2000 data RW_NVRAM 0x60a000 0x6000 data VBLOCK_A 0x690000 0x10000 data RW_FWID_A 0xafff00 0x100 data RO_VPD 0xb00000 0x4000 data FMAP 0xb04000 0x800 data RO_FRID 0xb04800 0x100 data RO_FRID_PAD 0xb04900 0x700 data GBB 0xb05000 0x3000 data"},{"location":"variants/protectli_vp66xx/openness_score/#ifd-regions_2","title":"IFD regions","text":"IFD region Start End Size Category Intel ME 0x00001000 0x003aefff 0x3ae000 closed-source Flash Descriptor 0x00000000 0x00000fff 0x1000 data Device Exp2 0x003af000 0x0057ffff 0x1d1000 empty"},{"location":"variants/protectli_vp66xx/openness_score/#cbfs-bootsplash_2","title":"CBFS BOOTSPLASH","text":"<ul> <li>CBFS size: 524288</li> <li>Number of files: 1</li> <li>Open-source files size: 0 (0x0)</li> <li>Closed-source files size: 0 (0x0)</li> <li>Data size: 28 (0x1c)</li> <li>Empty size: 524260 (0x7ffe4)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category (empty) null 524260 none empty"},{"location":"variants/protectli_vp66xx/openness_score/#cbfs-fw_main_a_2","title":"CBFS FW_MAIN_A","text":"<ul> <li>CBFS size: 4587264</li> <li>Number of files: 13</li> <li>Open-source files size: 2370499 (0x242bc3)</li> <li>Closed-source files size: 1675795 (0x199213)</li> <li>Data size: 8622 (0x21ae)</li> <li>Empty size: 532348 (0x81f7c)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 2074241 none open-source fallback/romstage stage 96384 none open-source fallback/ramstage stage 145746 LZMA open-source fallback/dsdt.aml raw 19016 none open-source fallback/postcar stage 35112 none open-source cpu_microcode_blob.bin microcode 560128 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 329235 LZ4 closed-source config raw 5496 LZMA data revision raw 859 none data build_info raw 103 none data vbt.bin raw 1277 LZMA data (empty) null 36 none empty"},{"location":"variants/protectli_vp66xx/openness_score/#cbfs-coreboot_2","title":"CBFS COREBOOT","text":"<ul> <li>CBFS size: 5210112</li> <li>Number of files: 17</li> <li>Open-source files size: 2460355 (0x258ac3)</li> <li>Closed-source files size: 1675795 (0x199213)</li> <li>Data size: 9058 (0x2362)</li> <li>Empty size: 1064904 (0x103fc8)</li> </ul> <p>Numbers given above are already normalized (i.e. they already include size of metadata and possible closed-source LAN drivers included in the payload which are not visible in the table below)</p> CBFS filename CBFS filetype Size Compression Category fallback/payload simple elf 2074241 none open-source fallback/romstage stage 96384 none open-source fallback/ramstage stage 145746 LZMA open-source fallback/dsdt.aml raw 19016 none open-source fallback/postcar stage 35112 none open-source bootblock bootblock 89856 none open-source cpu_microcode_blob.bin microcode 560128 none closed-source fspm.bin fsp 786432 none closed-source fsps.bin fsp 329235 LZ4 closed-source cbfs_master_header cbfs header 28 none data intel_fit intel_fit 80 none data config raw 5496 LZMA data revision raw 859 none data build_info raw 103 none data vbt.bin raw 1277 LZMA data (empty) null 1124 none empty (empty) null 1063780 none empty"},{"location":"variants/protectli_vp66xx/releases/","title":"Protectli VP6630/VP6650/VP6670 Dasharo Release Notes","text":"<p>Following Release Notes describe status of open-source firmware development for Protectli VP6630/VP6650/VP6670</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to Protectli Dasharo Release Newsletter"},{"location":"variants/protectli_vp66xx/releases/#v092-2025-06-17","title":"v0.9.2 - 2025-06-17","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/protectli_vp66xx/releases/#fixed","title":"Fixed","text":"<ul> <li>DisplayPort has trouble working with certain monitors</li> <li>ESXI installer fails to boot on VP66xx</li> </ul>"},{"location":"variants/protectli_vp66xx/releases/#known-issues","title":"Known issues","text":"<ul> <li>Missing tag string in VP66XX binary</li> <li>STB002.001 encounters unlisted errors</li> </ul>"},{"location":"variants/protectli_vp66xx/releases/#binaries","title":"Binaries","text":"<p>protectli_vp66xx_v0.9.2.rom sha256 sha256.sig</p> <p>NOTE: We have ran into a strange bug/corner case with our github-actions CI   when building this release binary. There's an extra step to verifying the   integrity and reproducibility in this release. Please see the issue:   Missing tag string in VP66XX binary</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_vp66xx/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 24.02 revision 824b40cd<ul> <li>License</li> </ul> </li> <li>Dasharo EDKII fork based on edk2-stable202405 revision 787234d5<ul> <li>License</li> </ul> </li> <li>Dasharo iPXE fork based on 2023.12 revision 35d84756<ul> <li>License</li> </ul> </li> <li>vboot based on 3d37d2aafe revision 3d37d2aa<ul> <li>License</li> </ul> </li> <li>Intel Management Engine version v16.1.25.1865-v0.1<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor version v1.2<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package version IoT RPL-P MR1 (4445_03)<ul> <li>License</li> </ul> </li> <li>Intel microcode version ADL R0 0x433 05/12/2023<ul> <li>License</li> </ul> </li> <li>Intel microcode version RPL-H/P/PX 6+8 J0 0x4121 07/12/2023<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/protectli_vp66xx/releases/#v091-2025-01-23","title":"v0.9.1 - 2025-01-23","text":"<p>Test results for this release can be found for VP6650 and VP6670.</p>"},{"location":"variants/protectli_vp66xx/releases/#added","title":"Added","text":"<ul> <li>CPU throttling option</li> <li>Power state after AC loss option</li> <li>Fan control option</li> </ul>"},{"location":"variants/protectli_vp66xx/releases/#changed","title":"Changed","text":"<ul> <li>Rebased coreboot to 24.02</li> <li>Rebased edk2 to edk2-stable202405</li> <li>Updated Intel ME and Flash Descriptor (refer to SBOM section)</li> </ul>"},{"location":"variants/protectli_vp66xx/releases/#fixed_1","title":"Fixed","text":"<ul> <li>TPM Physical Presence interface not working in TPM2 setup menu</li> <li>Platform is power cycling instead of resetting during reboot or reset from   setup menu</li> </ul>"},{"location":"variants/protectli_vp66xx/releases/#known-issues_1","title":"Known issues","text":"<ul> <li>DisplayPort has trouble working with certain monitors</li> <li>STB002.201 encounters unlisted errors</li> </ul>"},{"location":"variants/protectli_vp66xx/releases/#binaries_1","title":"Binaries","text":"<p>protectli_vp66xx_v0.9.1.rom sha256 sha256.sig</p> <p>protectli_vp66xx_v0.9.1_dev_signed.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_vp66xx/releases/#sbom-software-bill-of-materials_1","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 24.02 revision 225d907a<ul> <li>License</li> </ul> </li> <li>Dasharo EDKII fork based on edk2-stable202405 revision 8a9fd05f<ul> <li>License</li> </ul> </li> <li>Dasharo iPXE fork based on 2023.12 revision 35d84756<ul> <li>License</li> </ul> </li> <li>vboot based on 3d37d2aafe revision 3d37d2aa<ul> <li>License</li> </ul> </li> <li>Intel Management Engine version v16.1.25.1865-v0.1<ul> <li>License</li> </ul> </li> <li>Intel Flash Descriptor version v1.2<ul> <li>License</li> </ul> </li> <li>Intel Firmware Support Package version IoT RPL-P MR1 (4445_03)<ul> <li>License</li> </ul> </li> <li>Intel microcode version ADL R0 0x433 05/12/2023<ul> <li>License</li> </ul> </li> <li>Intel microcode version RPL-H/P/PX 6+8 J0 0x4121 07/12/2023<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/protectli_vp66xx/releases/#v090-2024-09-11","title":"v0.9.0 - 2024-09-11","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/protectli_vp66xx/releases/#added_1","title":"Added","text":"<ul> <li>Initial support for Protectli Alder Lake devices VP66XX</li> <li>UEFI compatible interface</li> <li>Support for discrete TPM</li> <li>UEFI Secure Boot support</li> <li>Boot logo customization support</li> <li>USB boot support</li> <li>NVMe boot support</li> <li>TPM Measured Boot</li> <li>UEFI Shell</li> <li>UEFI Secure Boot</li> <li>Network boot</li> <li>Windows 11 booting</li> <li>Ubuntu LTS booting</li> <li>Serial port console redirection</li> <li>Vboot Verified Boot</li> <li>Intel ME HAP disable</li> <li>BIOS flash protection for Vboot recovery region</li> <li>Setup menu password configuration</li> <li>SMM BIOS write protection</li> <li>USB stack disable option in setup menu</li> <li>Network stack disable option in setup menu</li> </ul>"},{"location":"variants/protectli_vp66xx/releases/#known-issues_2","title":"Known issues","text":"<ul> <li>DisplayPort has trouble working with certain monitors</li> <li>STB002.201 encounters unlisted errors</li> </ul>"},{"location":"variants/protectli_vp66xx/releases/#binaries_2","title":"Binaries","text":"<p>protectli_vp66xx_v0.9.0.rom sha256 sha256.sig</p> <p>protectli_vp66xx_v0.9.0_dev_signed.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/protectli_vp66xx/releases/#sbom-software-bill-of-materials_2","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.21 revision 50887bab</li> <li>Dasharo EDKII fork based on f06673308f revision f0667330</li> <li>Dasharo iPXE fork based on 838611b34e revision 838611b3</li> <li>Intel Management Engine based on v16.1.25.1865 revision 9712e97a</li> <li>Intel Flash Descriptor based on v1.1 revision 9712e97a</li> <li>Intel Firmware Support Package based on IoT RPL-P MR1 (4445_03) revision a6ee9636</li> <li>Intel microcode based on ADL R0 0x432 revision microcode-20240312</li> <li>Intel microcode based on RPL-H/P/PX 6+8 J0 0x4121 revision microcode-20240312</li> </ul>"},{"location":"variants/qemu_q35/building-manual/","title":"Building manual","text":""},{"location":"variants/qemu_q35/building-manual/#intro","title":"Intro","text":"<p>This documents describes the procedure for compiling Dasharo firmware for QEMU Q35.</p>"},{"location":"variants/qemu_q35/building-manual/#requirements","title":"Requirements","text":"<ul> <li><code>Ubuntu 20.04/21.04/22.04</code> as a host OS was tested</li> <li>Internet connection</li> <li>Docker installed<ul> <li>follow Install Docker Engine on Ubuntu</li> <li>follow Post-installation steps for Linux</li> </ul> </li> <li>Git, wget, unzip installed</li> </ul> <p>Alternatively Fedora can be used instead of Ubuntu by following the same steps except: Install Docker Engine on Fedora</p> <pre><code>sudo apt install git unzip wget\n</code></pre>"},{"location":"variants/qemu_q35/building-manual/#procedure","title":"Procedure","text":"<p>Obtain Dasharo source code:</p> <p>Replace the <code>REVISION</code> with one of the:</p> <ul> <li><code>qemu_q35_vVERSION</code> (e.g. <code>qemu_q35_v0.1.0</code>) for the given release</li> <li><code>qemu_q35_vVERSION-rcN</code> (e.g. <code>qemu_q35_v0.1.0-rc1</code>) for the given release   candidate</li> </ul> <p>Clone Dasharo coreboot fork:</p> <pre><code>git clone https://github.com/Dasharo/coreboot.git -b REVISION --depth 1\n</code></pre> <p>Change directory:</p> <pre><code>cd coreboot\n</code></pre> <p>Compile:</p> <pre><code>./build.sh qemu\n</code></pre> <p>The resulting coreboot image will be placed in the current directory as <code>qemu_q35_&lt;version&gt;.rom</code>.</p> <p>To build a QEMU image with all features and menus enabled, invoke:</p> <p><code>./build.sh qemu_full</code></p> <p>These builds are mainly for testing purposes and not all features have a working implementation under emulated environment.</p>"},{"location":"variants/qemu_q35/building-manual/#initial-deployment","title":"Initial Deployment","text":"<p>Now you can proceed with initial deployment scenario according to your needs:</p> <ul> <li>Dasharo initial deployment if you want to use this   image for manual testing or everyday use</li> <li>Dasharo validation   if you want to use binaries for validation purposes</li> </ul>"},{"location":"variants/qemu_q35/firmware-update/","title":"Firmware Update","text":"<p>As of now, there is no internal update process in Dasharo (coreboot+UEFI) for QEMU Q35 platform, but it is on our wish-list. Until then, Dasharo firmware can be updated by invoking a QEMU command with a newer file in the same way as described in Dasharo initial deployment.</p>"},{"location":"variants/qemu_q35/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/qemu_q35/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the devices emulated by the QEMU Q35.</p>"},{"location":"variants/qemu_q35/hardware-matrix/#qemu-q35","title":"QEMU Q35","text":"Component Description CPU QEMU emulated with Q35 emulated chipset RAM Slot 1: QEMU DIMM CDROM QEMU DVD-ROM USB Keyboard AT Translated Set 2 Keyboard USB Mouse Virtual/PS 2 VMware Mouse Display Display 1: Emulated 1024px768p Ethernet controller Emulated Intel 82574L Gigabit Ethernet Internal devices QEMU emulated Audio subsystem Network Local Network Connection from host Power Control None Power supply Power Button Emulated"},{"location":"variants/qemu_q35/initial-deployment/","title":"Initial Deployment","text":"<p>Initial deployment of Dasharo (coreboot+UEFI) firmware on QEMU Q35 does not need any special actions. QEMU Q35 is an emulated platform, not real hardware.</p> <p>Running the Dasharo (coreboot+UEFI) is as simple as invoking a QEMU command:</p> <pre><code>qemu-system-x86_64 -machine q35,smm=on \\\n    -drive if=pflash,format=raw,file=build/coreboot.rom\n</code></pre> <p>This is the minimal set of parameters that are always required, but you may add more to e.g. connect additional devices or redirect serial output to a file. Refer to QEMU documentation for list of possible options.</p> <p>If you use system without graphical output you may face following issues:</p> <pre><code>gtk initialization failed\n</code></pre> <p>In such case add <code>-nographic</code> at the end of your command.</p>"},{"location":"variants/qemu_q35/overview/","title":"Overview","text":"<ul> <li>Releases - Groups information about all releases.</li> <li>Building manual - describes how to build Dasharo   (coreboot+UEFI) for the QEMU Emulator Q35 Machine type.</li> <li>Test matrix - describes the validation scope used during   the Dasharo firmware validation procedure.</li> <li>Initial deployment - QEMU is an emulation   environment and not real hardware thus firmware deployment is not   applicable.</li> <li>Firmware update - QEMU is an emulation environment and   not real hardware thus firmware update is not applicable.</li> <li>Recovery - QEMU is an emulation environment and not a real   hardware thus firmware recovery is not applicable.</li> <li>Hardware configuration matrix - describes about the   devices emulated by QEMU.</li> </ul>"},{"location":"variants/qemu_q35/recovery/","title":"Recovery","text":"<p>The recovery process of Dasharo (coreboot+UEFI) firmware on QEMU Q35 does not need any special actions. QEMU Q35 is an emulated platform, not real hardware, so it doesn't brick itself.</p> <p>If something goes wrong simply rerun the QEMU command as described in Dasharo initial deployment.</p> <p>To clear all UEFI variables you can run the following:</p> <pre><code>dd if=/dev/zero of=build/coreboot.rom bs=256 count=1 conv=notrunc\n</code></pre>"},{"location":"variants/qemu_q35/releases/","title":"emulation qemu_q35 Dasharo Release Notes","text":"<p>Following Release Notes describe status of open-source firmware development for QEMU Q35 (Emulator).</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>"},{"location":"variants/qemu_q35/releases/#v021-2025-05-30","title":"v0.2.1 - 2025-05-30","text":"<p>Test results for this release can be found here.</p>"},{"location":"variants/qemu_q35/releases/#changed","title":"Changed","text":"<ul> <li>The Local APIC timer is now used instead of the HPET</li> </ul>"},{"location":"variants/qemu_q35/releases/#fixed","title":"Fixed","text":"<ul> <li>Booting is slow in QEMU</li> </ul>"},{"location":"variants/qemu_q35/releases/#known-issues","title":"Known issues","text":"<ul> <li>Measured Boot PCR values don't match the TPM measurement log</li> <li>The firmware local number was not updated and shows <code>v0.2.1-rc1</code></li> </ul>"},{"location":"variants/qemu_q35/releases/#binaries","title":"Binaries","text":"<p>Binaries can be found in GitHub release.</p>"},{"location":"variants/qemu_q35/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>Dasharo coreboot fork based on 25.03 revision b8e6b3eb<ul> <li>License</li> </ul> </li> <li>Dasharo EDKII fork based on edk2-stable202502 revision e8cd1856<ul> <li>License</li> </ul> </li> <li>Dasharo iPXE fork based on 2024.07 revision 63ed3e35<ul> <li>License</li> </ul> </li> </ul>"},{"location":"variants/qemu_q35/releases/#v020-2024-06-26","title":"v0.2.0 - 2024-06-26","text":"<p>Tests reports and logs can be found here. This release is the first <code>Dasharo (coreboot+UEFI)</code> image, contrary to <code>Dasharo (UEFI)</code> used previously. This makes QEMU Q35 more similar to other platforms, which hopefully will make testing on it more viable.</p>"},{"location":"variants/qemu_q35/releases/#added","title":"Added","text":"<ul> <li>Two different variants available, one with only functional menus, and another   with all Dasharo System Features menus enabled</li> <li>Both variants can be created with <code>build.sh</code>, both are built by CI</li> <li>Full image has the same menus enabled as previous release, but their contents   are limited by coreboot (e.g. if an option is specific to SoC).</li> </ul>"},{"location":"variants/qemu_q35/releases/#changed_1","title":"Changed","text":"<ul> <li>Firmware image now contains coreboot, in addition to edk2. This changes the   way some things work:<ul> <li>UEFI variables are saved in SMMSTORE, as in other platforms supported by   Dasharo.</li> <li>Availability of some menu options is controlled by coreboot, and may   differ based on the way QEMU is started. Examples of this are CPU   Configuration menu (its content depends on <code>-smp</code> parameter) and lack of   flash protection mechanisms.</li> <li>OVMF package isn't used, instead a common DasharoPlatformPkg is. This   makes this release more in line with the rest of Dasharo platforms.</li> </ul> </li> <li>Debug output is printed on serial output, instead of dedicated <code>debugcon</code>.   This makes it easier to synchronize output from coreboot, edk2 and OS.</li> </ul>"},{"location":"variants/qemu_q35/releases/#known-issues_1","title":"Known issues","text":"<ul> <li>Virtio drivers are not available in the firmware.   It is possible to install OS on disk mounted with <code>if=virtio</code>, however, it   won't be detected by UEFI and won't be bootable because of that.</li> <li>S3 doesn't work.</li> <li>Booting is slow.</li> <li><code>Reset to Defaults</code> doesn't work as it should.<ul> <li>Another manifestation of the same issue is that build fails if Watchdog   configuration menu   is enabled. This option has been disabled even in full variant until   resolved.</li> </ul> </li> </ul>"},{"location":"variants/qemu_q35/releases/#binaries_1","title":"Binaries","text":"<p>Binaries can be found in GitHub release.</p>"},{"location":"variants/qemu_q35/releases/#sbom","title":"SBOM","text":"<ul> <li>Dasharo coreboot fork based on 0a280ff7 revision 26c5df90</li> <li>Dasharo EDK II fork based on edc66812 revision 11b26796</li> <li>Dasharo iPXE fork based on fa622132 revision 838611b3</li> </ul>"},{"location":"variants/qemu_q35/releases/#v010-2023-12-06","title":"v0.1.0 - 2023-12-06","text":"<p>Tests reports and logs can be found here.</p>"},{"location":"variants/qemu_q35/releases/#added_1","title":"Added","text":"<p>Following features can be fully used:</p> <ul> <li>Configurable boot order</li> <li>Configurable boot options</li> <li>Custom boot menu keys</li> <li>UEFI shell</li> <li>UEFI Secure Boot</li> <li>TPM Support</li> <li>Dasharo setup password</li> <li>Serial Port Configuration menu</li> <li>iPXE network boot</li> <li>ESP partition scanning in look for grubx64.efi or shimx64.efi or Windows bootmgr</li> </ul> <p>Following features are visible in setup menu and can be used for testing the menus, but have no actual backend hooked up:</p> <ul> <li>PS/2 Controller enable/disable option</li> <li>Watchdog configuration menu</li> <li>Early boot DMA protection menu option</li> <li>Intel ME disable support and menu options</li> <li>SED/OPAL disk password support</li> <li>SATA disk password support</li> <li>SMM BIOS Write Protection support and enable/disable option</li> <li>USB stack and mass storage enable/disable option</li> <li>Firmware Update Mode feature</li> <li>One of the two fan profiles can now be selected in Setup Menu</li> <li>Setup menu option for switching between S0ix and S3 suspend mode</li> <li>Wi-Fi / Bluetooth module disable option in setup menu</li> <li>Built-in webcam disable option in setup menu</li> <li>Battery threshold options in setup menu</li> <li>PCIe Configuration menu</li> <li>Memory configuration menu Power state after power fail option</li> </ul>"},{"location":"variants/qemu_q35/releases/#binaries_2","title":"Binaries","text":"<p>Binaries can be found in GitHub release.</p>"},{"location":"variants/qemu_q35/releases/#sbom_1","title":"SBOM","text":"<ul> <li>Dasharo EDKII fork based on dd7523b5b1 revision 11746340</li> <li>iPXE revision 77b07ea4</li> </ul>"},{"location":"variants/qemu_q35/test-matrix/","title":"Test matrix","text":""},{"location":"variants/qemu_q35/test-matrix/#about","title":"About","text":"<p>The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.</p> <p>Note, that the below-described test scope is used during Dasharo Certification Procedure for tested platform: <code>QEMU Q35 Machine</code></p>"},{"location":"variants/qemu_q35/test-matrix/#module-dasharo-compatibility","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Custom Boot Keys CBK All 2. UEFI Shell USH All 3. Network boot PXE Without PXE004.001 4. SMBIOS DMI Without DMI001.201 and DMI007.001"},{"location":"variants/qemu_q35/test-matrix/#module-dasharo-security","title":"Module: Dasharo security","text":"No. Supported test suite Test suite ID Supported test cases 1. Network stack enable/disable NBA All 2. Secure Boot SBO Without SBO002.002 3. Measured boot MBO All 4. UEFI Setup password PSW All"},{"location":"variants/supermicro_x11_lga1151_series/building-manual/","title":"Supermicro X11 LGA1151 Series - building manual","text":"<p>Please read the overview page first!</p>"},{"location":"variants/supermicro_x11_lga1151_series/faq/","title":"FAQ","text":"<p>Please read the overview page first!</p>"},{"location":"variants/supermicro_x11_lga1151_series/faq/#how-to-identify-my-mainboard-model","title":"How to identify my mainboard model?","text":"<pre><code>~# dmidecode -t baseboard\n# dmidecode 3.0\nGetting SMBIOS data from sysfs.\nSMBIOS 3.0 present.\n\nHandle 0x0002, DMI type 2, 15 bytes\nBase Board Information\n    Manufacturer: Supermicro\n    Product Name: X11SSH-TF\n    Version: 1.01\n    Serial Number: WM123S123456\n    Asset Tag: To be filled by O.E.M.\n    Features:\n        Board is a hosting board\n        Board is replaceable\n    Location In Chassis: To be filled by O.E.M.\n    Chassis Handle: 0x0003\n    Type: Motherboard\n    Contained Object Handles: 0\n\nHandle 0x0026, DMI type 41, 11 bytes\nOnboard Device\n    Reference Designation: ASPEED Video AST2400\n    Type: Video\n    Status: Enabled\n    Type Instance: 1\n    Bus Address: 0000:03:00.0\n\nHandle 0x0027, DMI type 41, 11 bytes\nOnboard Device\n    Reference Designation: Intel LAN X550-AT2 #1\n    Type: Ethernet\n    Status: Enabled\n    Type Instance: 1\n    Bus Address: 0000:04:00.0\n\nHandle 0x0028, DMI type 41, 11 bytes\nOnboard Device\n    Reference Designation: Intel LAN X550-AT2 #2\n    Type: Ethernet\n    Status: Enabled\n    Type Instance: 2\n    Bus Address: 0000:04:00.1\n\nHandle 0x0029, DMI type 41, 11 bytes\nOnboard Device\n    Reference Designation: Avago SAS 3008\n    Type: SAS Controller\n    Status: Disabled\n    Type Instance: 1\n    Bus Address: 0000:ff:00.0\n</code></pre>"},{"location":"variants/supermicro_x11_lga1151_series/firmware-update/","title":"Firmware update","text":"<p>Please read the overview page first!</p> <p>Following documentation describe process of Dasharo open-source firmware distribution update.</p> <p>&lt;!-</p>"},{"location":"variants/supermicro_x11_lga1151_series/firmware-update/#os-booting","title":"OS booting","text":"<p>For simplicity we recommend using network booted Dasharo Tools Suite.</p>"},{"location":"variants/supermicro_x11_lga1151_series/firmware-update/#dasharo-corebootseabios-update","title":"Dasharo (coreboot+SeaBIOS) update","text":"<ul> <li>Make sure a wired network cable to the device's Ethernet port</li> <li>Boot platform and from SeaBIOS menu choose Dasharo Network Boot Menu</li> <li>In the Dasharo Network Boot Menu, select the <code>Dasharo Tools Suite</code> option</li> <li>Enter shell using option <code>S) to enter shell</code></li> <li>Download the Dell OptiPlex 7010/9010 Dasharo from   release section or   build from source.</li> <li>Flash it using:</li> </ul> <pre><code>flashrom -p internal --ifd -i bios -w &lt;dasharo_optiplex_9010_firmware&gt;\n</code></pre> <p>Please note that not using <code>-i bios</code> may lead to this issue --&gt;</p>"},{"location":"variants/supermicro_x11_lga1151_series/hardware-matrix/","title":"Hardware configuration matrix","text":"<p>Please read the overview page first!</p> <p>The tables below contain information about current components of the testing environment for Supermicro X11 LGA1151 Series available in 3mdeb testing laboratory and in hands of community members.</p>"},{"location":"variants/supermicro_x11_lga1151_series/hardware-matrix/#supermicro-x11ssh-tf-pietrushnic","title":"Supermicro X11SSH-TF (pietrushnic)","text":"Component Description CPU Intel Core iTBD CPU Cooler GPU N/A RAM TBD HDD TBD SSD TBD Flash memory TBD Network Local network wired connection Attached devices 1. TBD USB stick Power Supply TBD Power Control 1. Sonoff TBD Remote Testing Environment 1. RTE TBD"},{"location":"variants/supermicro_x11_lga1151_series/initial-deployment/","title":"Initial deployment","text":"<p>We strongly recommend following these official instructions. The official guide has a lot of collaborative effort put into covering all of the edge cases and is regularly tested. Following these instructions to the letter without skipping, reordering or adding any steps will give you a proper Dasharo installation unless there's a hardware issue.  We strongly recommend against following unofficial guides deviating in any way from the official instructions.</p> <p>If you have trouble with the installation process, ask for help on the official Dasharo chat channel. There are almost always people around willing to help with it. Before asking for help, make an attempt to follow the guide on your own and then ask for help with anything you get stuck on.</p>"},{"location":"variants/supermicro_x11_lga1151_series/initial-deployment/#hardware-preparation","title":"Hardware preparation","text":"<p>Please use Supermicro Quick Reference Guide for you mainboard e.g. X11SSH-TF. Find JPME2 and change its state to position 2-3, which means ME Manufacturing Mode enabled.</p> <p> </p>"},{"location":"variants/supermicro_x11_lga1151_series/initial-deployment/#booting-dts-over-network","title":"Booting DTS over network","text":"<p>For seamless and storageless deployment one can use BMC virtual floppy functionality to mount a floppy image containing iPXE.</p> <p>iPXE will allow to boot DTS over network without much effort. The image file can be downloaded from 3mdeb FTP server. If you wish to build the image, please follow instructions in Building iPXE floppy image section.</p> <p>To boot from the iPXE image, please do the following:</p> <ol> <li>Download or    build the iPXE image on your host machine.</li> <li>Log in to the BMC dashboard.</li> <li> <p>Select the floppy image through Browse button:</p> <p> </p> </li> <li> <p>Upload image to the BMC in the Virtual Media panel, by clicking <code>Upload</code>:</p> <p> </p> </li> <li> <p>Go to <code>Remote Control -&gt; iKVM/HTML5</code> and start <code>iKVM/HTML5</code> remote control    window.</p> </li> <li>Use <code>Power Control -&gt; Set Power On</code></li> <li>Enter Boot Menu with F11.</li> <li>Select <code>UEFI: ATEN Virtual Floppy 3000, Partition 1</code>.</li> <li>Wait for the embedded menu to show up (it may take up to 30 seconds for the    UEFI protocols to execute during iPXE initialization - proprietary UEFI    banzai...).</li> <li>Choose <code>Dasharo Tools Suite</code> from the menu:</li> </ol> <pre><code>------------------------ Dasharo Network Boot Menu ------------------------\nAutoboot (DHCP)\nDasharo Tools Suite\nOS installation (netboot.xyz official server)\niPXE Shell\n</code></pre>"},{"location":"variants/supermicro_x11_lga1151_series/initial-deployment/#vendor-bios-backup","title":"Vendor BIOS backup","text":"<p>Please follow DTS backup guide.</p>"},{"location":"variants/supermicro_x11_lga1151_series/initial-deployment/#installing-dasharo-with-dts","title":"Installing Dasharo with DTS","text":"<p>TBD</p>"},{"location":"variants/supermicro_x11_lga1151_series/initial-deployment/#building-ipxe-floppy-image","title":"Building iPXE floppy image","text":"<p>To create a floppy disk image for Supermicro BMC Virtual Media, you will need a Linux OS with docker installed. Then follow steps below:</p> <ol> <li> <p>Compile iPXE (a sample revision has been taken from top of master branch on    25.01.2023, iPXE unfortunately stopped tagging the code in December 2020).    Following set of commands will embed Dasharo iPXE menu script, enable HTTPS    and EFI image support and provide custom build ID command to ensure build    reproducibility:</p> <ul> <li>Clone iPXE repository:</li> </ul> <pre><code>git clone https://github.com/ipxe/ipxe.git\n</code></pre> <pre><code>cd ipxe\n</code></pre> <pre><code>git checkout 4bffe0f0d9d0e1496ae5cfb7579e813277c29b0f\n</code></pre> <p>NOTE: As mentioned above this is sample revision since iPXE code is   not tagged.</p> <ul> <li>Get Dasharo menu for network booting.</li> </ul> <pre><code>wget https://raw.githubusercontent.com/Dasharo/dasharo-blobs/46cc16f6d8f0ed9d057fdd20f15bb89ce5b8d212/dasharo/dasharo.ipxe\n</code></pre> <ul> <li>Modify iPXE build configuration through <code>general.h</code></li> </ul> <pre><code>sed \"s|//#define\\s*IMAGE_SCRIPT.*|#define IMAGE_SCRIPT|\" src/config/general.h &gt; src/config/general.h.tmp\nmv src/config/general.h.tmp src/config/general.h\nsed \"s|.*DOWNLOAD_PROTO_HTTPS|#define DOWNLOAD_PROTO_HTTPS|g\" src/config/general.h &gt; src/config/general.h.tmp\nmv src/config/general.h.tmp src/config/general.h\nsed \"s|.*IMAGE_EFI|#define IMAGE_EFI|g\" src/config/general.h &gt; src/config/general.h.tmp\nmv src/config/general.h.tmp src/config/general.h\n</code></pre> <ul> <li>Use coreboot-sdk container to build iPXE binry:</li> </ul> <pre><code>docker run --rm -it -v $PWD:/home/coreboot/ipxe -w /home/coreboot/ipxe \\\n         coreboot/coreboot-sdk:2022-12-18_3b32af950d /bin/bash\n</code></pre> <ul> <li>Inside container: make sure you use correct cross-toolchain:</li> </ul> <pre><code>export CROSS_COMPILE=\"x86_64-elf-\"\n</code></pre> <ul> <li>Inside container: start compailation:</li> </ul> <pre><code>make -C src bin-x86_64-efi-sb/ipxe.efi EMBED=$PWD/dasharo.ipxe BUILD_ID_CMD=\"echo 0x1234567890\" \\\n    EXTRA_CFLAGS=\"-Wno-address-of-packed-member  -m64  -fuse-ld=bfd \\\n    -Wl,--build-id=none -fno-delete-null-pointer-checks -Wlogical-op -march=nocona \\\n    -malign-data=abi -mcmodel=large -mno-red-zone -fno-pic\"\n</code></pre> </li> <li> <p>Exit docker container with <code>exit</code> command.</p> </li> <li> <p>Create image file:</p> <pre><code>dd if=/dev/zero of=ipxe.img count=1 bs=1440K\n</code></pre> </li> <li> <p>Make FAT filesystem on the image file:</p> <pre><code>sudo mkfs.fat --mbr=y ipxe.img\n</code></pre> </li> <li> <p>Mount the image file:</p> <pre><code>sudo mount ipxe.img /mnt\n</code></pre> </li> <li> <p>Copy the iPXE to the mounted image file:</p> <pre><code>sudo mkdir -p /mnt/EFI/BOOT/ &amp;&amp; \\\n    sudo cp src/bin-x86_64-efi-sb/ipxe.efi /mnt/EFI/BOOT/BOOTX64.EFI\n</code></pre> </li> <li> <p>Unmount the image file:</p> <pre><code>sudo umount /mnt\n</code></pre> </li> </ol> <p>The resulting <code>ipxe.img</code> file is now ready to be attached as Virtual Media on Supermicro BMC.</p>"},{"location":"variants/supermicro_x11_lga1151_series/overview/","title":"Overview","text":"<p>Supermicro X11 LGA1151 Series are mainboards dedicated for servers and workstations. Most notable examples of this hardware are X11SSH-TF and X11SSH-F. Ideal motherboard for NAS servers, with a PCIE x16 slot to potentially accommodate a graphics card.</p> <p>To learn more about our motivation for the coreboot port and Dasharo compatible with Supermicro X11 LGA1151 Series please check references section. If you want to build, initially deploy, update or recover your setup please check documentation sections on the left.</p>"},{"location":"variants/supermicro_x11_lga1151_series/overview/#status","title":"Status","text":"<p>Dasharo compatible with Supermicro X11 LGA1151 Series is a community-driven effort. We work on this in our free time, since we have no sponsor for this project. To address the issue we organize virtual hackathon on Dasharo Matrix whenever we can. At this point two communinty members are engaged (collector-ynh with X11SSH-F and pietrushnic with X11SSH-TF, we also have X11SSH-TF in 3mdeb lab). Feel free to contact us if you wan to talk about project status.</p> <p>Please note that Dasharo compatilbe with Supermicro X11 LGA1151 Series may work with various boards from this family, at this stage only X11SSH-F and X11SSH-TF can be treated as tested. This state can change when we will enter more mature state with transparent validation results published in Releases section and hardware configuration matrix used for testing. We may also consider CPU, DRAM and GPU HCL sections in documentation.</p> <p>If you are interested in this project, please consider joining the community-dirven effort or supporting us in other way.</p> <p>The most advanced code is on development branch. This code supports only <code>Dasharo (coreboot+UEFI)</code>. Work in progress documentation can be found here.</p> <p>NOTE: We decided to follow divide and conquer strategy, every piece of contribution which was verified and reviewed will be merged even if that is just small part of bigger documentation . Otherwise we will never move forward.</p>"},{"location":"variants/supermicro_x11_lga1151_series/overview/#references","title":"References","text":"<ul> <li>Mullvad: Open-source firmware is the future</li> <li>Green TekSolutions: The first motherboard for servers to use CoreBoot - X11SSH-TF</li> <li>coreboot: X11 LGA1151 Series documentation</li> <li>coreboot: Supermicro X11SSH-F/X11SSH-LN4F documentation</li> </ul>"},{"location":"variants/supermicro_x11_lga1151_series/recovery/","title":"Recovery","text":"<p>Please read the overview page first!</p>"},{"location":"variants/supermicro_x11_lga1151_series/recovery/#bios-update-through-bmc","title":"BIOS Update through BMC","text":"<p>Following instruction was tested on:</p> <ul> <li>X11SSH-TF v1.01</li> </ul> <p>For information how to identify your mainboard model pelase check faq.</p> <p>Following documentation describes the process of recovering hardware from brick state with through BMC BIOS Update feature. This feature can be used also for initial deployment and Firmware Update.</p>"},{"location":"variants/supermicro_x11_lga1151_series/recovery/#requirements","title":"Requirements","text":""},{"location":"variants/supermicro_x11_lga1151_series/recovery/#license-activation","title":"License activation","text":"<p>Without active license you can't use BIOS Update feature. License key can be generated using kasuganosoras scripts and entered through BMC web interface (<code>Miscellaneous-&gt;Activate License</code>).</p>"},{"location":"variants/supermicro_x11_lga1151_series/recovery/#up-to-date-firmware","title":"Up to date firmware","text":"<p>Please make sure you using firmware revision 01.60  </p> <p>If not please follow <code>IPMI Firmware Update_NEW.pdf</code> instruction from package that you can download here.</p> <p>Unfortunately most efficient way to interact with proprietary BMC is to use Supermicro proprietary closed source tools:</p> <ul> <li>Supermicro Update   Manager    please download and unpack archive.</li> <li>Backup or   Supermicro BIOS   update    please download and unpack archive.</li> </ul>"},{"location":"variants/supermicro_x11_lga1151_series/releases/","title":"Dasharo compatible with Supermicro X11 LGA1151 Series","text":"<p>Please read the overview page first!</p>"},{"location":"variants/supermicro_x11_lga1151_series/test-matrix/","title":"Test matrix - MSI Z690-A WIFI DDR4","text":"<p>Please read the overview page first!</p>"},{"location":"variants/supermicro_x11_lga1151_series/test-matrix/#about","title":"About","text":"<p>The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.</p>"},{"location":"variants/talos_2/building-manual/","title":"Building manual","text":""},{"location":"variants/talos_2/building-manual/#building-coreboot","title":"Building coreboot","text":"<p>To build coreboot image, follow the steps below:</p> <ol> <li> <p>Clone the coreboot repository:</p> <pre><code>git clone --depth=1 https://github.com/Dasharo/coreboot.git -b raptor-cs_talos-2/rel_v0.7.0\n</code></pre> </li> <li> <p>Get the submodules:</p> <pre><code>cd coreboot\ngit submodule update --init --recursive --checkout\n</code></pre> </li> <li> <p>Start docker container:</p> <pre><code>docker run --rm -it \\\n   -v $PWD:/home/coreboot/coreboot \\\n   -w /home/coreboot/coreboot \\\n   -u \"$(id -u):$(id -g)\" \\\n   coreboot/coreboot-sdk:0ad5fbd48d /bin/bash\n</code></pre> </li> <li> <p>Inside of the container, configure and start the build process:</p> <pre><code>(docker)cp configs/config.raptor-cs-talos-2 .config\n(docker)make olddefconfig\n(docker)make\n</code></pre> </li> </ol>"},{"location":"variants/talos_2/building-manual/#building-heads","title":"Building heads","text":"<ol> <li> <p>Clone the heads repository:</p> <pre><code>git clone --depth=1 https://github.com/Dasharo/heads.git -b raptor-cs_talos-2/release\n</code></pre> </li> <li> <p>Start docker container:</p> <pre><code>cd heads\ndocker run --rm -it -v $PWD:$PWD -w $PWD -u \"$(id -u):$(id -g)\" 3mdeb/heads-docker:2.4.0 /bin/bash\n</code></pre> </li> <li> <p>Build:</p> <pre><code>make BOARD=talos-2\n</code></pre> </li> </ol>"},{"location":"variants/talos_2/conferences/","title":"Conference materials","text":""},{"location":"variants/talos_2/conferences/#openpower-summit-2021","title":"OpenPOWER Summit, 2021","text":"<p>coreboot on POWER9 - Piotr Kr\u00f3l</p>"},{"location":"variants/talos_2/conferences/#openpower-summit-2020","title":"OpenPOWER Summit, 2020","text":"<p>POWER9 Support in coreboot - Micha\u0142 \u017bygowski</p>"},{"location":"variants/talos_2/conferences/#fosdem-2021","title":"Fosdem, 2021","text":"<p>Status of OpenPOWER support in coreboot - Micha\u0142 \u017bygowski</p>"},{"location":"variants/talos_2/conferences/#open-source-firmware-conference-2020","title":"Open Source Firmware Conference, 2020","text":"<p>POWER9 support in coreboot - Micha\u0142 \u017bygowski</p>"},{"location":"variants/talos_2/firmware-update/","title":"Firmware update","text":"<p>The following documentation describes the process of Dasharo open-source firmware update.</p> <ol> <li> <p>Copy the binaries to the BMC:</p> <pre><code>scp build/bootblock.signed.ecc root@&lt;BMC_IP&gt;:/tmp/bootblock.signed.ecc\nscp build/coreboot.rom.signed.ecc root@&lt;BMC_IP&gt;:/tmp/coreboot.rom.signed.ecc\n</code></pre> </li> <li> <p>Flash the binaries by replacing the HBB partition (execute from BMC):</p> <pre><code>pflash -e -P HBB -p /tmp/bootblock.signed.ecc\npflash -e -P HBI -p /tmp/coreboot.rom.signed.ecc\n</code></pre> </li> <li> <p>Log into the BMC GUI at <code>https://&lt;BMC_IP&gt;</code>.</p> </li> <li> <p>Enter the <code>Server power operations</code>    (<code>https://&lt;BMC_IP&gt;/#/server-control/power-operations</code>) and invoke   <code>warm reboot</code>.</p> </li> <li> <p>Go to <code>Serial over LAN remote console</code> (<code>https://&lt;BMC_IP&gt;/#/server-control/remote-console</code>).</p> </li> <li> <p>Enjoy the updated firmware running on Talos II.</p> </li> </ol>"},{"location":"variants/talos_2/hardware-matrix/","title":"Hardware configuration matrix","text":""},{"location":"variants/talos_2/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configuration used for validation of the coreboot port on the Talos II platform.</p>"},{"location":"variants/talos_2/hardware-matrix/#talos-ii","title":"Talos II","text":"Component Description 1st CPU IBM POWER9 \u201cSforza\u201d 02CY650 CPU Cooler 2nd CPU IBM POWER9 \u201cSforza\u201d 02CY650 CPU Cooler SSD Intel 670p 512 GB M26472-201 NVME RAM Crucial CT8G4RF88266 Flash memory Micron MT25QL512ABB8ESF-0SIT Network Local network wired connection Attached devices 1. SanDisk USB 3.2Gen1 16 GB 2. Logitech, Inc. Keyboard K120 Ethernet 2x Broadcom BCM5719 Power Supply Corsair TX550M Power Control Sonoff S20 switch Remote Control OpenBMC <p>Note: for single CPU testing the 2nd CPU is dismantled.</p> <p>Following RAM configurations were tested and are proved to be properly initialized.</p> <pre><code>MCS0, MCA0\n   DIMM0: 1Rx4 16GB PC4-2666V-RC2-12-PA0\n   DIMM1: not installed\nMCS0, MCA1\n   DIMM0: 1Rx8 8GB PC4-2666V-RD1-12\n   DIMM1: not installed\nMCS1, MCA0\n   DIMM0: 2Rx4 32GB PC4-2666V-RB2-12-MA0\n   DIMM1: not installed\nMCS1, MCA1\n   DIMM0: 2Rx8 16GB PC4-2666V-RE2-12\n   DIMM1: not installed\n</code></pre> <p>All 3 major DRAM vendors are supported, namely Samsung, Micron and Hynix.</p>"},{"location":"variants/talos_2/initial-deployment/","title":"Initial deployment","text":""},{"location":"variants/talos_2/initial-deployment/#coreboot-installation","title":"coreboot installation","text":"<ol> <li> <p>Copy the binaries to the BMC    (assuming in the coreboot root directory):</p> <pre><code>scp build/bootblock.signed.ecc root@&lt;BMC_IP&gt;:/tmp/bootblock.signed.ecc\nscp build/coreboot.rom.signed.ecc root@&lt;BMC_IP&gt;:/tmp/coreboot.rom.signed.ecc\n</code></pre> <p>If that file is not present, use <code>coreboot.rom</code> instead</p> </li> <li> <p>Backup the HBB partition (for faster later recovery) by invoking this    command on BMC:</p> <pre><code>pflash -P HBB -r /tmp/hbb.bin\npflash -P HBI -r /tmp/hbi.bin\n</code></pre> </li> <li> <p>Flash the binaries by replacing HBB partition (execute from BMC):</p> <pre><code>pflash -e -P HBB -p /tmp/bootblock.signed.ecc\npflash -e -P HBI -p /tmp/coreboot.rom.signed.ecc\n</code></pre> <p>Again, if that file is not present, use <code>coreboot.rom</code> instead</p> <p>Answer yes to the prompt and wait for the process to finish.</p> </li> <li> <p>Log into the BMC GUI again at <code>https://&lt;BMC_IP&gt;</code>.</p> </li> <li> <p>Enter the <code>Server power operations</code>    (<code>https://&lt;BMC_IP&gt;/#/server-control/power-operations</code>) and invoke   <code>warm reboot</code>.</p> </li> <li> <p>Go to <code>Serial over LAN remote console</code> (<code>https://&lt;BMC_IP&gt;/#/server-control/remote-console</code>).</p> </li> <li> <p>Wait for a while until coreboot shows up:</p> <p></p> </li> <li> <p>Enjoy the coreboot running on Talos II.</p> </li> </ol> <p>Optional: In order to recovery the platform quickly to healthy state, flash the HBB partition back with: <code>pflash -e -P HBB -p /tmp/hbb.bin</code> <code>pflash -e -P HBI -p /tmp/hbi.bin</code></p>"},{"location":"variants/talos_2/initial-deployment/#heads-installation","title":"Heads installation","text":"<ol> <li> <p>Copy the Heads binary to the BMC (assuming in the Heads root directory):</p> <pre><code>scp build/zImage.bundled root@&lt;BMC_IP&gt;:/tmp/zImage.bundled\n</code></pre> </li> <li> <p>Log in to the BMC:</p> <pre><code>ssh root@&lt;BMC_IP&gt;\n</code></pre> </li> <li> <p>Flash the <code>BOOTKERNEL</code> partition with Heads:</p> <pre><code>pflash -e -P BOOTKERNEL -p /tmp/zImage.bundled\n</code></pre> <p>Answer yes to the prompt and wait for the process to finish.</p> </li> <li> <p>Log into the BMC GUI at <code>https://&lt;BMC_IP&gt;/</code>.</p> </li> <li> <p>Enter the <code>Server power operations</code>    (<code>https://&lt;BMC_IP&gt;/#/server-control/power-operations</code>) and invoke   <code>warm reboot</code>.</p> </li> <li> <p>Go to <code>Serial over LAN remote console</code> (<code>https://&lt;BMC_IP&gt;/#/server-control/remote-console</code>).</p> </li> <li> <p>Wait for a while until Heads shows up:</p> <p></p> </li> <li> <p>Enjoy the Heads running on Talos II.</p> </li> </ol>"},{"location":"variants/talos_2/initial-deployment/#testing-firmware-images-without-flashing","title":"Testing firmware images without flashing","text":"<p>BMC firmware v2.00+ allows testing new firmware images without flashing the physical flash device. This makes testing and switching between two versions (e.g. Hostboot and coreboot) much faster and safer. There are two ways of doing so, here's a more convenient one that uses <code>mboxctl</code>:</p> <ol> <li> <p>Read original flash:</p> <p>For earlier versions of coreboot port it is required to read from system that booted at least once, since some of the partitions are modified on the first boot. this is no longer necessary since v0.5.0.</p> <pre><code>root@talos:~# pflash -r /tmp/talos.pnor\n</code></pre> <p>This file may also be copied out of BMC to a secure place and serve as a backup of whole flash contents.</p> <p>Keep in mind that tmpfs size is limited and exceeding that limit may result in unresponsive BMC, which in most severe cases requires hard power cycle.</p> </li> <li> <p>\"Flashing\" modified partition(s):</p> <p>This is similar to flashing real device with two changes: no need to erase the flash and target file must be specified. New command looks like this:</p> <pre><code>root@talos:~# pflash -f -P &lt;partition&gt; -p &lt;partition&gt;.bin -F /tmp/talos.pnor\n</code></pre> <p>Since the real flash device is not used, backup can be skipped. The rest is like above:</p> <pre><code># bootblock\npflash -f -P HBB -p /tmp/bootblock.signed.ecc -F /tmp/talos.pnor\n# coreboot\npflash -f -P HBI -p /tmp/coreboot.rom.signed.ecc -F /tmp/talos.pnor\n\n# Heads\npflash -f -P BOOTKERNEL -p /tmp/zImage.bundled -F /tmp/talos.pnor\n</code></pre> </li> <li> <p>Mount the file as flash device:</p> <pre><code>root@talos:~# mboxctl --backend file:/tmp/talos.pnor\n</code></pre> <p>Sometimes this command fails with timeout, in that case repeat it until it succeeds. Optionally, success can be tested with:</p> <pre><code>root@talos:~# mboxctl --lpc-state\nLPC Bus Maps: BMC Memory\n</code></pre> <p><code>BMC Memory</code> tells that emulated flash is used instead of real one. Host doesn't see any difference (except maybe different access times and erase block size), it still reads and writes PNOR the same way as with physical device.</p> </li> <li> <p>Start the platform as described in previous sections and test it.</p> </li> <li> <p>To get back to using real PNOR:</p> <pre><code>root@talos:~# mboxctl --backend vpnor\nFailed to post message: Connection timed out\nroot@talos:~# mboxctl --lpc-state\nLPC Bus Maps: Flash Device\n</code></pre> <p>Even though that command reports failure, it maps LPC back to flash device. This can be tested with <code>mboxctl --lpc-state</code>.</p> </li> <li> <p>(Optional) Flash tested image to permanent storage:</p> <pre><code>root@talos:~# pflash -E -p /tmp/talos.pnor\n</code></pre> </li> </ol> <p>The other method is described on Raptor's wiki and requires starting <code>mboxd</code> manually (still needs BMC firmware v2.00+). It's worth to take a look there because sometimes <code>mboxd</code> stops working (<code>mboxctl</code> errors every time) and that page shows how it can be started.</p>"},{"location":"variants/talos_2/overview/","title":"Overview","text":"<ul> <li>Releases - groups information about all releases.</li> <li>Building manual - describes how to build Dasharo for     Talos II.</li> <li>Initial deployment - describes initial Dasharo     deployment methods (i. e. flashing new firmware) for Talos II.</li> <li>Firmware update - explains supported Dasharo     open-source firmware update methods.</li> <li>Recovery - gathers information on how to recover the platform     from potential failure.</li> <li>Hardware configuration matrix - describes the platform's     hardware configuration used during the Dasharo firmware validation     procedure.</li> <li>Test matrix - describes validation scope used during     Dasharo firmware validation procedure.</li> <li>Conferences - includes information from various conferences     about POWER architecture support in coreboot.</li> <li>TPM connections and support - describes the methods of     connecting dedicated TPM module to the board and how to validate it.</li> </ul>"},{"location":"variants/talos_2/overview/#useful-documents","title":"Useful documents","text":"<ul> <li>Board manual</li> </ul>"},{"location":"variants/talos_2/recovery/","title":"Recovery","text":""},{"location":"variants/talos_2/recovery/#prequisitions","title":"Prequisitions","text":"<p>To proceed with the recovery procedure the backup with the vendor firmware will be necessary eg. <code>talos.pnor</code>.</p> <p>The backup file should be generated before making any changes in the device flash chip according to documentation in the first step in Testing firmware images without flashing section.</p>"},{"location":"variants/talos_2/recovery/#flashing-using-bmc","title":"Flashing using BMC","text":"<p>Flash firmware by executing the following commands on BMC:</p> <pre><code>pflash -E -p /tmp/talos.pnor\n</code></pre> <ol> <li> <p>Log into the BMC GUI at <code>https://&lt;BMC_IP&gt;</code>.</p> </li> <li> <p>Enter the <code>Server power operations</code>    (<code>https://&lt;BMC_IP&gt;/#/server-control/power-operations</code>) and invoke   <code>warm reboot</code>.</p> </li> <li> <p>After rebooting the vendor firmware will be restored.</p> </li> </ol>"},{"location":"variants/talos_2/recovery/#restore-petitboot","title":"Restore Petitboot","text":"<p>If you want to use Petitboot, and you have already installed system Heads, follow this procedure:</p> <ol> <li> <p>Download the newest <code>PNOR</code> package from     raptor wiki.</p> </li> <li> <p>Unzip downloaded file and find the <code>talos.pnor</code> file.</p> </li> <li> <p>Copy the file to the BMC:</p> </li> </ol> <pre><code>scp talos.pnor root@&lt;BMC_IP&gt;:/tmp/talos.pnor\n</code></pre> <ol> <li>Modify partitions by executing the following commands on BMC     (this is not necessary):</li> </ol> <pre><code>pflash -P HBB -p /tmp/bootblock.signed.ecc -F /tmp/talos.pnor\npflash -P HBI -p /tmp/coreboot.rom.signed.ecc -F /tmp/talos.pnor\n</code></pre> <ol> <li>Flash firmware:</li> </ol> <pre><code>pflash -E -p /tmp/talos.pnor\n</code></pre> <ol> <li> <p>Log into the BMC GUI at <code>https://&lt;BMC_IP&gt;</code>.</p> </li> <li> <p>Enter the <code>Server power operations</code>    (<code>https://&lt;BMC_IP&gt;/#/server-control/power-operations</code>) and invoke   <code>warm reboot</code>.</p> </li> <li> <p>Enjoy the Petitboot running on Talos II.</p> </li> </ol>"},{"location":"variants/talos_2/releases/","title":"Release notes","text":"<p>Following Release Notes describe status of Open Source Firmware development for Raptor Computing Systems Talos II</p> <p>For details about our release process please read Dasharo Standard Release Process.</p>         Subscribe to Release Newsletter     <p>Test results for this platform can be found here.</p>"},{"location":"variants/talos_2/releases/#v070-2023-07-26","title":"v0.7.0 - 2023-07-26","text":""},{"location":"variants/talos_2/releases/#fixed","title":"Fixed","text":"<ul> <li>CPU appears to be stuck on initial frequency</li> <li>No flashrom support</li> <li>0.6 Release - Cannot boot if no TPM</li> <li>OS-level access to CBMEM</li> <li>TPM discovery and usage stability</li> <li>Dual CPU setup - Second fan at full speed</li> </ul>"},{"location":"variants/talos_2/releases/#known-issues","title":"Known issues","text":"<ul> <li>Missing parts of Device Tree describing specific unit (VPD, serial numbers)</li> <li>No DIMM temperatures reported</li> </ul>"},{"location":"variants/talos_2/releases/#binaries","title":"Binaries","text":"<p>raptor-cs_talos-2_bootblock_v0.7.0.signed.ecc sha256 sha256.sig</p> <p>raptor-cs_talos-2_coreboot_v0.7.0.rom.signed.ecc sha256 sha256.sig</p> <p>raptor-cs_talos-2_zImage_v0.7.0.bundled sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/talos_2/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4ed0a830b14d6e1841eae0dd3c2e6539a8dcf0a8 revision fc47236e</li> <li>skiboot based on 9858186353f2203fe477f316964e03609d12fd1d revision 1b14dd0b</li> <li>heads based on edf200e7913c62975a424cfb9dbd579747d0665c revision edf200e7913c62975a424cfb9dbd579747d0665c</li> </ul>"},{"location":"variants/talos_2/releases/#v060-2022-08-26","title":"v0.6.0 - 2022-08-26","text":""},{"location":"variants/talos_2/releases/#added","title":"Added","text":"<ul> <li>Optional support for Infineon I2C TPM1 chips</li> <li>Initial support for measured boot</li> </ul>"},{"location":"variants/talos_2/releases/#fixed_1","title":"Fixed","text":"<ul> <li>Heads console output only on BMC console, not VGA</li> <li>Startup on a single CPU configuration</li> <li>Startup on a single CPU configuration and support for older CPUs     (without WOF tables and with different frequencies)</li> <li>CBMEM can no longer be accessed from OS</li> </ul>"},{"location":"variants/talos_2/releases/#known-issues_1","title":"Known issues","text":"<ul> <li>Missing parts of Device Tree describing specific unit (VPD, serial numbers)</li> <li>CPU appears to be stuck on initial frequency</li> </ul>"},{"location":"variants/talos_2/releases/#binaries_1","title":"Binaries","text":"<p>raptor-cs_talos-2_zImage_v0.6.0.bundled sha256 sha256.sig</p> <p>raptor-cs_talos-2_coreboot_v0.6.0.rom.signed.ecc sha256 sha256.sig</p> <p>raptor-cs_talos-2_bootblock_v0.6.0.signed.ecc sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/talos_2/releases/#sbom-software-bill-of-materials_1","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 5621a1e revision 2207bbcc</li> <li>skiboot based on 7f90b9cd revision fa060c2c</li> <li>heads based on fdbd9b2 revision 66f0fce0870b729d</li> </ul>"},{"location":"variants/talos_2/releases/#v050-2022-04-12","title":"v0.5.0 - 2022-04-12","text":""},{"location":"variants/talos_2/releases/#changed","title":"Changed","text":"<ul> <li>Add FSI initialization and functions for accessing devices behind FSI bus</li> <li>Cache MVPD between stages</li> <li>Initialize and train XBus links</li> <li>Change SCOM API to be able to access second CPU</li> <li>Initialize PCIe, MCS, OCC and TOD for second CPU</li> <li>Switch to ELF payload, clean up Device Tree generation</li> <li>Various boot time optimizations</li> </ul>"},{"location":"variants/talos_2/releases/#fixed_2","title":"Fixed","text":"<ul> <li>Only one CPU is started</li> <li>SPDs are not exposed in sysfs automatically</li> </ul>"},{"location":"variants/talos_2/releases/#known-issues_2","title":"Known issues","text":"<ul> <li>Missing parts of Device Tree describing specific unit (VPD, serial numbers)</li> <li>CBMEM can no longer be accessed from OS</li> </ul>"},{"location":"variants/talos_2/releases/#binaries_2","title":"Binaries","text":"<p>raptor-cs_talos-2_bootblock_v0.5.0.signed.ecc sha256 sha256.sig</p> <p>raptor-cs_talos-2_coreboot_v0.5.0.rom.signed.ecc sha256 sha256.sig</p> <p>Heads was not modified in this release, its binary from previous releases can be used.</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/talos_2/releases/#sbom-software-bill-of-materials_2","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 5621a1e revision c92383f9</li> <li>skiboot based on 04-16-2019 revision 98581863</li> </ul>"},{"location":"variants/talos_2/releases/#v041-2022-01-10","title":"v0.4.1 - 2022-01-10","text":""},{"location":"variants/talos_2/releases/#changed_1","title":"Changed","text":"<ul> <li>Simplify memlayout</li> <li>Replace PPC_SHIFT with PPC_PLACE macro</li> <li>Change SPR numbers definitions to decimal</li> <li>Print signing output to terminal</li> </ul>"},{"location":"variants/talos_2/releases/#fixed_3","title":"Fixed","text":"<ul> <li>Watchdog timing out</li> <li>Sporadic signing failure due to the tools not being built</li> <li>Building with cross compiler other than powerpc64-linux-gnu-</li> </ul>"},{"location":"variants/talos_2/releases/#known-issues_3","title":"Known issues","text":"<ul> <li>Only one CPU is started</li> <li>SPDs are not exposed in sysfs automatically</li> <li>Missing parts of Device Tree describing specific unit (VPD, serial numbers)</li> </ul>"},{"location":"variants/talos_2/releases/#binaries_3","title":"Binaries","text":"<p>dasharo_talos_2_bootblock_v0.4.1.signed.ecc sha256 sha256.sig</p> <p>dasharo_talos_2_coreboot_v0.4.1.rom.signed.ecc sha256 sha256.sig</p> <p>dasharo_talos_2_zImage_v0.4.1.bundled sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/talos_2/releases/#sbom-software-bill-of-materials_3","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 5621a1e revision 13b58058</li> <li>skiboot based on 04-16-2019 revision 98581863</li> <li>heads based on 21e50681 revision 34c77951</li> </ul>"},{"location":"variants/talos_2/releases/#v040-2021-10-29","title":"v0.4.0 - 2021-10-29","text":""},{"location":"variants/talos_2/releases/#added_1","title":"Added","text":"<ul> <li>OCC support</li> <li>XIVE support</li> <li>PCIe initialization</li> <li>IPMI block transfer interface</li> <li>Non-constant nodes in Device Tree are generated programmatically</li> </ul>"},{"location":"variants/talos_2/releases/#known-issues_4","title":"Known issues","text":"<ul> <li>Only one CPU is started</li> <li>SPDs are not exposed in sysfs automatically</li> <li>Missing parts of Device Tree describing specific unit (VPD, serial numbers)</li> <li>Watchdog times out</li> </ul>"},{"location":"variants/talos_2/releases/#binaries_4","title":"Binaries","text":"<p>dasharo_talos_2_bootblock_v0.4.0.signed.ecc sha256 sha256.sig</p> <p>dasharo_talos_2_coreboot.rom.signed.ecc sha256 sha256.sig</p> <p>zImage_v0.4.0.bundled sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/talos_2/releases/#sbom-software-bill-of-materials_4","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 5621a1e revision b535763b</li> <li>skiboot based on 04-16-2019 revision 98581863</li> <li>heads based on 21e50681 revision 34c77951</li> </ul>"},{"location":"variants/talos_2/test-matrix/","title":"Test matrix","text":""},{"location":"variants/talos_2/test-matrix/#about","title":"About","text":"<p>The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.</p>"},{"location":"variants/talos_2/test-matrix/#module-dasharo-compatibility","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot base port CBP CBP001.001, CBP002.001, CBP004.001 2. Heads bootloader support HDS HDS001.001, HDS001.002 3. Device Tree DVT DVT001.001, DVT002.001"},{"location":"variants/talos_2/test-matrix/#module-dasharo-security","title":"Module: Dasharo security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM TPM001.001 and TPM002.001"},{"location":"variants/talos_2/test-matrix/#module-dasharo-performance","title":"Module: Dasharo performance","text":"No. Supported test suite Test suite ID Supported test cases 1. CPU frequency measure CPF CPF001.003"},{"location":"variants/talos_2/tpm-support/","title":"TPM connections and support","text":"<p>The following documentation contains most important information about TPM 1.2 module dedicated to the Talos II mainboard.</p>"},{"location":"variants/talos_2/tpm-support/#connecting-tpm-to-the-talos-mainboard","title":"Connecting TPM to the Talos mainboard","text":"<p>To properly connect TPM to the Talos II mainboard reproduce the following steps:</p> <ol> <li>Turn off the platform by using <code>OpenBMC</code>.</li> <li>Disconnect mainboard from the mains.</li> <li>Based on the     documentation     find TPM connector on the mainboard.</li> <li> <p>Mount TPM module as shown in the graphics below:</p> <p> </p> </li> <li> <p>Connect mainboard to the mains.</p> </li> </ol> <p>Additional information, i. e. TPM header pinout, might be found in the mainboard documentation.</p>"},{"location":"variants/talos_2/tpm-support/#tpm-module-testing","title":"TPM module testing","text":"<ol> <li>Turn on the platform and log into it by using <code>obmc-console-client</code> or <code>KVM</code>.</li> <li>Boot into Heads.</li> <li>Select the <code>Exit to recovery shell</code> option using the arrow keys and Enter.</li> <li> <p>Execute the following command:</p> <pre><code>cbmem -L\n</code></pre> </li> </ol> <p>Output of the above-described command should contains information about TPM logs.</p> <p>Example output:</p> <pre><code>TPM2 log:\nSpecification: 2.00\nPlatform class: PC Client\nNo vendor information provided\nTPM2 log entry 1:\n    PCR: 2\n    Event type: Action\n    Digests:\n         SHA1: f78a530fb5a70afcffdc86a98529abd24a90bac9\n    Event data: FMAP: FMAP\nTPM2 log entry 2:\n    PCR: 2\n    Event type: Action\n    Digests:\n         SHA1: 369155e6eab3b0a874140e591a4c0e992268b4b9\n    Event data: FMAP: BOOTBLOCK\nTPM2 log entry 3:\n    PCR: 2\n    Event type: Action\n    Digests:\n         SHA1: 5e785c080264aa6e169f70c80ac40b556066292b\n    Event data: FMAP: COREBOOT CBFS: fallback/romstage\nTPM2 log entry 4:\n    PCR: 2\n    Event type: Action\n    Digests:\n         SHA1: ba2a5af955811fbac58a5198545539596eb38c3e\n    Event data: FMAP: COREBOOT CBFS: fallback/ramstage\nTPM2 log entry 5:\n    PCR: 2\n    Event type: Action\n    Digests:\n         SHA1: ba35d4ce29d7b633b5644e2a3206c6069cf7f24d\n    Event data: FMAP: COREBOOT CBFS: fallback/payload\nTPM2 log entry 6:\n    PCR: 2\n    Event type: Action\n    Digests:\n         SHA1: 47b49026133377e05193f8440c9a7cad239e883c\n    Event data: FMAP: COREBOOT CBFS: 1-cpu.dtb\nTPM2 log entry 7:\n    PCR: 3\n    Event type: Action\n    Digests:\n         SHA256: 6e7b06693452d997ac534e823b1ea79e5bb8ed19ba8a7af878abf10199c3d515\n         SHA1: 6e7b06693452d997ac534e823b1ea79e5bb8ed19\n    Event data: VERSION\nTPM2 log entry 8:\n    PCR: 2\n    Event type: Action\n    Digests:\n         SHA256: de73053377e1ae5ba5d2b637a4f5bfaeb410137722f11ef135e7a1be524e3092\n         SHA1: de73053377e1ae5ba5d2b637a4f5bfaeb4101377\n    Event data: IMA_CATALOG\nTPM2 log entry 9:\n    PCR: 4\n    Event type: Action\n    Digests:\n         SHA256: cd32830f83a4f74b75d7feac6c03bd3ad8d553f54a8cac4b4b5a4b175ccbce3e\n         SHA1: cd32830f83a4f74b75d7feac6c03bd3ad8d553f5\n    Event data: BOOTKERNEL\n</code></pre>"},{"location":"variants/talos_2/tpm-support/#additional-information","title":"Additional information","text":"<p>The Module is available at the official 3mdeb store.</p> <p>You can also buy the product by mailing us at: shopping@3mdeb.com.</p>"},{"location":"variants/tuxedo_ibs15/building/","title":"Dasharo for Tuxedo IBS15 Gen6 - Building manual","text":""},{"location":"variants/tuxedo_ibs15/building/#intro","title":"Intro","text":"<p>This documents describes the procedure for compiling coreboot for Tuxedo IBS15.</p>"},{"location":"variants/tuxedo_ibs15/building/#requirements","title":"Requirements","text":"<ul> <li>Docker<ul> <li>follow Install Docker Engine on Ubuntu</li> <li>follow Post-installation steps for Linux</li> </ul> </li> <li>Git</li> </ul>"},{"location":"variants/tuxedo_ibs15/building/#procedure","title":"Procedure","text":"<p>The easiest way to build coreboot is to use the official Docker image.</p> <p>Obtain the image:</p> <pre><code>docker pull coreboot/coreboot-sdk:0ad5fbd48d\n</code></pre> <p>Obtain coreboot source code for Tuxedo IBS15:</p> <pre><code>git clone https://github.com/Dasharo/coreboot.git\n</code></pre> <p>Navigate to the source code directory and checkout to the desired revision:</p> <p>Replace the REVISION with one of the: - <code>tuxedo_ibs15/release</code> for the latest released version - <code>tuxedo_ibs15/vVERSION</code> (e.g. <code>v1.0.0</code>) for the given release</p> <pre><code>cd coreboot\ngit checkout REVISION\ngit submodule update --init --recursive --checkout\n</code></pre> <pre><code>./build.sh build\n</code></pre> <p>The resulting coreboot image will be placed in <code>artifacts/dasharo_tuxedo_ibs15_VERSION.rom</code>.</p> <p>Warning: Do not run <code>./build.sh</code> as root. This command uses docker and should be executed as your current user. If you're having trouble running <code>build.sh</code> on your user account, follow the <code>Docker</code> instructions outlined in Requirements.</p>"},{"location":"variants/tuxedo_ibs15/hardware-matrix/","title":"Hardware configuration matrix - Tuxedo IBS15","text":""},{"location":"variants/tuxedo_ibs15/hardware-matrix/#introduction","title":"Introduction","text":"<p>This document describes the hardware configurations used for validation of the coreboot port on the Tuxedo IBS15 laptop.</p>"},{"location":"variants/tuxedo_ibs15/hardware-matrix/#ibs15-1","title":"IBS15 #1","text":"Component Description CPU Intel(R) Core(TM) i5-1135G7 Internal Cooling RAM Slot 1: KVR29S21S6/8 Slot 2: KVR29S21S6/4 SSD 1. Samsung 980 PRO NVMe 250 GB 2. Samsung 860 EVO SATA M.2 250 GB Flash memory GigaDevice 25B127DSIG 16 MB Network Local network wired connection Internal devices 1. 1920x1080 15 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Fingerprint scanner 5. Camera 6. Audio subsystem 7. Intel Wi-Fi 6 AX201 wireless card Attached devices 1. SanDisk Ultra USB 3.0 64 GB 2. SanDisk Ultra Flair USB 3.0 16 GB 3. Kingston DataTraveler 3.1Gen1 16 GB 4. SanDisk Ultra microSD HC I 16 GB + SD Adapter 5. DELL KB216 USB Keyboard 6. 4-port USB Type-C Hub Pro 7. HDMI 1920x1080p Display 8. Sony MDR-EX15AP headset Power Supply Chicony 65 W Power Control N/A Remote Testing Environment OpenSSH_8.2p1 OpenSSL 1.1.1f"},{"location":"variants/tuxedo_ibs15/hardware-matrix/#ibs15-2","title":"IBS15 #2","text":"Component Description CPU Intel(R) Core(TM) i5-11300H Internal Cooling RAM Slot 1: KVR29S21S6/8 Slot 2: KVR29S21S6/4 SSD Toshiba KXG50NV256G NVMe 256GB Flash memory GigaDevice 25B127DSIG 16 MB Network Local network wired connection Internal devices 1. 1920x1080 14 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Fingerprint scanner 5. Camera 6. Audio subsystem 7. Intel Wi-Fi 6 AX201 wireless card Attached devices 1. SanDisk Ultra USB 3.0 64 GB 2. SanDisk Ultra Flair USB 3.0 16 GB 3. Kingston DataTraveler 3.1Gen1 16 GB 4. SanDisk Ultra microSD HC I 16 GB + SD Adapter 5. DELL KB216 USB Keyboard 6. 4-port USB Type-C Hub Pro 7. HDMI 1920x1080p Display 8. Sony MDR-EX15AP headset Power Supply Chicony 65 W Power Control N/A Remote Testing Environment OpenSSH_8.2p1 OpenSSL 1.1.1f"},{"location":"variants/tuxedo_ibs15/installation/","title":"Dasharo for Tuxedo IBS15 Gen6 - Installation manual","text":""},{"location":"variants/tuxedo_ibs15/installation/#intro","title":"Intro","text":"<p>Flashing coreboot can be done from Linux using flashrom with the internal programmer. This document describes the process of building, installing and running flashrom on Ubuntu 20.04.</p>"},{"location":"variants/tuxedo_ibs15/installation/#build-flashrom","title":"Build flashrom","text":"<p>Please follow generic guide for Dasharo flashrom fork.</p>"},{"location":"variants/tuxedo_ibs15/installation/#reading-flash-contents","title":"Reading flash contents","text":"<p>To read from the flash and save them to a file (<code>dump.rom</code>), execute the following command:</p> <pre><code>flashrom -p internal -r dump.rom\n</code></pre>"},{"location":"variants/tuxedo_ibs15/installation/#installing-dasharo","title":"Installing Dasharo","text":""},{"location":"variants/tuxedo_ibs15/installation/#initial-installation","title":"Initial Installation","text":"<p>During the initial installation of Dasharo, you will need the supported Intel ME version (and configuration) to be present in the Dasharo firmware image. If you already have a Dasharo compatible ME firmware installed, then proceed with Updating Dasharo instructions.</p> <p>Publicly released binaries do not contain ME binary. If you need a Dasharo compatible Intel ME update for your device, contact us via already established commercial support channel.</p> <p>When flashing binaries with ME binary included, flashing of the whole chip is required. Follow the steps below:</p> <ul> <li>Power off the laptop</li> <li>While holding the Fn+M keys, power on the laptop - This unlocks the ME and   allows for it to be overwritten. The fans will spin at 100% speed at this   point</li> <li>Execute the following command, replacing [path] with the path to the full   firmware image (containing ME firmware and flash descriptor) you want to   flash:</li> </ul> <pre><code>flashrom -p internal -w [full_image]\n</code></pre> <ul> <li>Reboot the laptop</li> <li>The laptop will boot into Dasharo. After Dasharo has booted, it is safe to   shut down the laptop to silence the fans</li> </ul> <p>Note: if you shut down the laptop instead of rebooting, it may be necessary to hold Fn+M for it to boot the first time after flashing.</p>"},{"location":"variants/tuxedo_ibs15/installation/#updating-dasharo","title":"Updating Dasharo","text":"<p>If Dasharo is currently installed, only the BIOS region of the flash needs to be updated. Flash it using the following command:</p> <pre><code>flashrom -p internal -w [path] --ifd -i bios\n</code></pre>"},{"location":"variants/tuxedo_ibs15/post_install/","title":"Post-installation setup","text":"<p>This document contains extra steps to perform after installing Dasharo in order to enable full functionality.</p>"},{"location":"variants/tuxedo_ibs15/post_install/#touchpad-hotkey-enablement-linux","title":"Touchpad hotkey enablement (Linux)","text":"<p>The touchpad hotkey needs extra setup to function correctly under Linux. To enable the touchpad hotkey to work under Linux, follow the steps below:</p> <ol> <li>Create a file <code>/etc/udev/hwdb.d/60-keyboard.hwdb</code> with the following contents:</li> </ol> <pre><code>evdev:atkbd:dmi:bvn*:bvr*:svnNotebook:pnNS50MU:*\n        KEYBOARD_KEY_f7=191\n        KEYBOARD_KEY_f8=191\n</code></pre> <ol> <li>Execute the following commands:</li> </ol> <pre><code>sudo systemd-hwdb update\nsudo udevadm trigger\n</code></pre> <p>After executing these steps, it should be possible to enable and disable the touchpad using the touchpad hotkey (Fn+F1) on the keyboard when using GNOME.</p>"},{"location":"variants/tuxedo_ibs15/releases/","title":"Tuxedo IBS15 Dasharo Release Notes","text":"<p>Following Release Notes describe status of Open Source Firmware development for Tuxedo IBS15</p> <p>For details about our release process please read Dasharo Standard Release Process.</p> <p>Test results for this platform can be found here.</p>"},{"location":"variants/tuxedo_ibs15/releases/#v100-2022-03-15","title":"v1.0.0 - 2022-03-15","text":""},{"location":"variants/tuxedo_ibs15/releases/#added","title":"Added","text":"<ul> <li>Support for Tuxedo InfinityBook S 15 Gen6</li> <li>Support for EC firmware 1.07.02</li> <li>Support for Intel ME version 15.0.30.1776</li> <li>UEFI Boot Support</li> <li>Configurable boot order</li> <li>Configurable boot options</li> <li>UEFI Secure Boot support</li> <li>Tuxedo boot logo</li> </ul>"},{"location":"variants/tuxedo_ibs15/releases/#known-issues","title":"Known issues","text":"<ul> <li>The touchpad ON/OFF switch Fn key is not functional</li> </ul>"},{"location":"variants/tuxedo_ibs15/releases/#binaries","title":"Binaries","text":"<p>tuxedo_ibs15_v1.0.0.rom sha256 sha256.sig</p> <p>To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key</p>"},{"location":"variants/tuxedo_ibs15/releases/#sbom-software-bill-of-materials","title":"SBOM (Software Bill of Materials)","text":"<ul> <li>coreboot based on 4.16 revision cf13d6c7</li> <li>tianocore based on 9522071f7497a1a0b1077d2b0d5fcc97a126cfd0 revision 7f90b9cd</li> </ul>"},{"location":"variants/tuxedo_ibs15/test-matrix/","title":"Test matrix - Tuxedo - Tuxedo IBS15","text":""},{"location":"variants/tuxedo_ibs15/test-matrix/#about","title":"About","text":"<p>The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.</p>"},{"location":"variants/tuxedo_ibs15/test-matrix/#module-dasharo-compatibility","title":"Module: Dasharo compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports and LCD support DSP DSP001.001, DSP001.201, DSP001.301, DSP002.201, DSP002.301, DSP002.003 4. Embedded Controller and Super I/O initialization ECR Without ECR021.xxx - ECR024.xxx 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot menu key CBK All 8. USB HID and MSC Support USB All 9. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 10. UEFI Shell USH All 11. Windows booting WBT WBT001.001 12. Audio subsystem AUD All 13. USB-C support UTC All 14. Network boot PXE PXE007.001 15. M.2 WiFi/Bluetooth WLE All 16. SD card support SDC All 17. USB Camera verification CAM All 19. Fan speed measure FAN FAN001.001 20. SMBIOS DMI DMI002.201, DMI003.201, DMI005.001, DMI006.001, DMI007.001, DMI008.001"},{"location":"variants/tuxedo_ibs15/test-matrix/#module-dasharo-security","title":"Module: Dasharo security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO VBO006.002, VBO007.002, 3. Measured Boot support MBO All 4. Secure Boot support SBO Without SBO006.001, SBO007.001 and SBO008.001"}]}