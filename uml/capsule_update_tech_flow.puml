@startuml
!pragma teoz true

skinparam shadowing<<with_shadow>> true
skinparam NoteTextAlignment<<with_shadow>> center
skinparam NoteBackgroundColor<<with_shadow>> #CEF

participant "UEFI Shell" as OS
activate OS
participant coreboot
box UEFI
participant PEI
participant DXE
collections Variables as vars
end box
collections RAM as data order 50

hnote over data<<with_shadow>>
Represents data in RAM,
such as UEFI HOBs, coreboot
CBMEM and system tables
end hnote

opt
note over OS: Run CapsuleApp.efi
OS <-- Header: Load and validate Capsule image
data <-- OS: Store (possibly scattered) Capsule image in RAM
vars <-- OS: Save information about Capsules
end opt

OS -> coreboot --++: Warm reset

coreboot <-- vars: Check for Capsule presence

opt
coreboot <-- data: Read scattered Capsules from RAM
note over coreboot: Coalesce\nCapsules
data <-- coreboot: Write coalesced Capsules to RAM
data <-- coreboot: Create a CBMEM entry per capsule
end opt

note over coreboot: Configure\nSMI handler
note over coreboot: Obtain\nversion\nnumber
data <-- coreboot: Create version CBMEM entry

coreboot -> PEI --++: Start payload

PEI <-- data: Check for Capsule CBMEM entry
note over PEI: Set proper\nboot mode

PEI -> DXE --++: Execute

DXE <-- data: Read version CBMEM entry
note over DXE: Convert to\nESRT format
data <-- DXE: Write ESRT entry
note over DXE: Check\nboot mode

opt
DXE <-- Header: Validate

box "Capsule image"
create participant FMP
data-[hidden]->FMP
collections Header
create participant "FW image" as fw
& data-[hidden]->fw
end box

hnote over FMP<<with_shadow>>
FMP may also be
part of UEFI instead
of Capsule image
end hnote

DXE -> FMP ++: Execute

FMP <-- data: Read version from ESRT
note left: Compare version
FMP <-- fw: Read and validate
FMP <-> coreboot: SMI call(s) and return(s)
note right: Write FW\nimage to flash

FMP -> DXE --: Return

DXE -> coreboot --: Cold reset
end opt
@enduml
